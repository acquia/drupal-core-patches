diff --git a/.travis.yml b/.travis.yml
index 230ccfb..1fc5174 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,70 +1,142 @@
 language: php
 
 php:
-  - 5.5
   - 5.4
-  - 5.3
 
-
-notifications:
-  email:
-    - marc.seeger@acquia.com
-
-branches:
-  only:
-    - 7.x-3.x
-
-# This will create the database
 mysql:
-  database: commons
+  database: drupal
   username: root
   encoding: utf8
 
-# To be able to run a webbrowser
-# If we need anything more powerful
-# than e.g. phantomjs
-before_install:
-  - "pwd"
-  - "sudo apt-get update"
-  - "export DISPLAY=:99.0"
-  - "sh -e /etc/init.d/xvfb start"
-  - "wget http://selenium.googlecode.com/files/selenium-server-standalone-2.35.0.jar -O $TRAVIS_BUILD_DIR/selenium-server-standalone.jar"
-  - "java -jar $TRAVIS_BUILD_DIR/selenium-server-standalone.jar > /dev/null &"
-  - ruby -rsocket -e "up = false; 60.times {|i| sleep 1; exit(0) if up; up = TCPSocket.new('127.0.0.1', 4444).close.nil? rescue false}; exit(1)"
-  # Make sure Selenium is up
-  - curl http://localhost:4444/wd/hub
-  # For uploading error screenshots
-  - "wget http://imgur.com/tools/imgurbash.sh -O $TRAVIS_BUILD_DIR/imgurbash.sh && chmod +x $TRAVIS_BUILD_DIR/imgurbash.sh"
-  
+env:
+  - UPGRADE=none
+  - UPGRADE=7.x-3.9
+  - UPGRADE=7.x-3.8
+  - UPGRADE=7.x-3.7
+  - UPGRADE=7.x-3.6
+  - UPGRADE=7.x-3.5
+
+matrix:
+  allow_failures:
+    - env: UPGRADE=7.x-3.9
+    - env: UPGRADE=7.x-3.8
+    - env: UPGRADE=7.x-3.7
+    - env: UPGRADE=7.x-3.6
+    - env: UPGRADE=7.x-3.5
+
+install:
+  # Add the Google Chrome packages.
+  - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
+  - sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
+  - sudo apt-get update > /dev/null
+
+  # Create a database for our Drupal site.
+  - "mysql -e 'create database drupal;'"
+
+  # Install the latest Drush 6.
+  - export PATH="$HOME/.composer/vendor/bin:$PATH"
+  - composer global require --prefer-source --no-interaction drush/drush:6.*
+
+  # Build Behat dependencies
+  - cd ./tests/behat
+  - composer install --prefer-source --no-interaction
+  - cd ../../../
+
+  # Rename the repository folder to 'commons' (to accommodate different repository names).
+  - REPO_NAME=`basename $TRAVIS_REPO_SLUG`
+  - mv $REPO_NAME commons
+
+  # Build Codebase
+  - mkdir profiles
+  - mv commons profiles/
+  - mkdir drupal
+  - mv profiles drupal/
+
+  # Test the current branch
+  - cd drupal
+  - drush make --yes profiles/commons/drupal-org-core.make --prepare-install
+  - drush make --yes profiles/commons/drupal-org.make --no-core --contrib-destination=profiles/commons
+  - mkdir sites/default/private
+  - mkdir sites/default/private/files
+  - mkdir sites/default/private/temp
+  - cd ../
+
+  # Download an old version to test upgrading from.
+  - if [[ "$UPGRADE" != none ]]; then drush dl commons-$UPGRADE; fi
+
+  # Setup files
+  - sudo chmod -R 777 drupal/sites/all
+
+  # Setup display for Selenium
+  - export DISPLAY=:99.0
+  - sh -e /etc/init.d/xvfb start
+  - sleep 5
+
+  # Get Chrome and ChromeDriver
+  - sudo apt-get install google-chrome-stable
+  - wget http://chromedriver.storage.googleapis.com/2.9/chromedriver_linux64.zip
+  - unzip -a chromedriver_linux64.zip
+
+  # Insane hack from jsdevel:
+  #   https://github.com/jsdevel/travis-debugging/blob/master/shim.bash
+  # This allows chrome-sandbox to work in side of OpenVZ, because I can't
+  # figure out how to start chrome with --no-sandbox.
+  - export CHROME_SANDBOX=/opt/google/chrome/chrome-sandbox
+  - sudo rm -f $CHROME_SANDBOX
+  - sudo wget https://googledrive.com/host/0B5VlNZ_Rvdw6NTJoZDBSVy1ZdkE -O $CHROME_SANDBOX
+  - sudo chown root:root $CHROME_SANDBOX; sudo chmod 4755 $CHROME_SANDBOX
+  - sudo md5sum $CHROME_SANDBOX
+
+  # Get Selenium
+  - wget http://selenium-release.storage.googleapis.com/2.41/selenium-server-standalone-2.41.0.jar
+  - java -jar selenium-server-standalone-2.41.0.jar -Dwebdriver.chrome.driver=`pwd`/chromedriver > /dev/null 2>&1 &
+  - sleep 5
+ 
+  # Disable sendmail
+  - echo sendmail_path=`which true` >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini
+
 before_script:
-  # Grab drush
-  - pear channel-discover pear.drush.org
-  - pear install drush/drush
-  - phpenv rehash
-  # LAMP package installation (mysql is already started)
-  - sudo apt-get install -y --force-yes apache2 libapache2-mod-php5 php5-mysql php5-curl
-  # Apache webserver configuration
-  - sudo sed -i -e "s,/var/www,$(pwd)/packaged,g" /etc/apache2/sites-available/default
-  - sudo a2enmod rewrite
-  - sudo a2enmod actions
-  - sudo service apache2 restart
-  # Install the composer packages for behat / ...
-  - composer --working-dir=tests/ install  
+
+  # Do the site install (either the current revision or old for the upgrade).
+  - if [[ "$UPGRADE" == none ]]; then cd drupal; else cd commons-$UPGRADE; fi
+  - drush si commons --db-url=mysql://root:@127.0.0.1/drupal --account-name=admin --account-pass=admin --account-mail=admin@test.com --site-mail=noreply@test.com --site-name="Commons" --yes
+  - drush vset -y file_private_path "sites/default/private/files"
+  - drush vset -y file_temporary_path "sites/default/private/temp"
+  - cd ../drupal
+
+  # If we're an upgrade test, run the upgrade process.
+  - if [[ "$UPGRADE" != none ]]; then cp -a ../commons-$UPGRADE/sites/default/* sites/default/ && drush updb --yes; fi
+
+  - drush runserver --server=builtin 8888 > /dev/null 2>&1 &
+  - SERVER_PID=$!
+  - sleep 3
+  - cd profiles/commons/tests/behat
+
+  # Make the Travis tests repos agnostic by injecting drupal_root with BEHAT_PARAMS
+  - BUILD_OWNER=`dirname $TRAVIS_BUILD_DIR`
+  - export BEHAT_PARAMS="extensions[Drupal\\DrupalExtension\\Extension][drupal][drupal_root]=$BUILD_OWNER/drupal"
+
 script:
-  # Build distro from makefile
-  - drush make build-commons.make --no-cache -y packaged
-  # Site installation. We're doing the cd-dance because drush -r throws an exception for me currently.
-  - cd packaged
-  - drush -v site-install --db-url=mysql://root@localhost/commons --site-name=QASite --account-name=admin --account-pass=commons --account-mail=admin@example.com --site-mail=site@example.com -v -y commons commons_anonymous_welcome_text_form.commons_anonymous_welcome_title="Oh hai" commons_anonymous_welcome_text_form.commons_anonymous_welcome_body="No shirts, no shoes, no service." commons_create_first_group.commons_first_group_title="Internet People" commons_create_first_group.commons_first_group_body="This is the first group on the page."
-  - cd ..
-  # Make sure the installed site responds
-  - curl localhost
-  # And let's see how fast it responds on the 2nd request
-  - time curl http://localhost/ -s -o /dev/null
-  # Start running the tests
-  - cd tests
-  - bin/behat
-  
-after_failure:
-  - ls -lash $TRAVIS_BUILD_DIR/fail*.png
-  - $TRAVIS_BUILD_DIR/imgurbash.sh $TRAVIS_BUILD_DIR/fail*.png
+
+  # First, run all the tests in Firefox.
+  - ./bin/behat --config behat.travis.yml
+ 
+  # Then run some Chrome-only tests.
+  - ./bin/behat --config behat.travis.yml -p chrome
+
+after_script:
+
+  # Stop the webserver so that it's not still running when MySQL is stopped.
+  - kill $SERVER_PID
+
+notifications:
+  email:
+    recipients:
+      - commons-bulk@acquia.com
+    on_success: change
+    on_failure: always
+  irc:
+    channels:
+      - "chat.freenode.net#drupal-commons"
+    on_success: change
+    on_failure: always
diff --git a/commons.api.php b/commons.api.php
new file mode 100644
index 0000000..fd87fa5
--- /dev/null
+++ b/commons.api.php
@@ -0,0 +1,79 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by the Commons module.
+ */
+
+/**
+ * @addtogroup hooks
+ * @{
+ */
+
+/**
+ * Define entity integrations.
+ *
+ * This hook allows modules to register entity types and/or bundles that they
+ * provide for integration with Commons functionality. For example, a webform
+ * module could use it to register a form entity type and its "Test", "Survey"
+ * and "Suggestion" bundles.
+ *
+ * @return
+ *   An associative array of entity integrations whose keys define the entity
+ *   type for each integration and whose values contain the bundles which have
+ *   been integrated. Each bundle is itself an associative array, whose keys
+ *   define the type of integration to enable and whose values contain the
+ *   status of the integration. TRUE = enabled, FALSE = disabled.
+ *
+ * For a detailed usage example, see commons_q_a.module.
+ *
+ * @see hook_commons_entity_integration_alter()
+ */
+function hook_commons_entity_integration() {
+  // Register three of the webform entity's bundles for various integrations.
+  return array(
+    'webform' => array(
+      'test' => array(
+        'exclude_rate' => TRUE,
+        'is_group_content' => FALSE,
+      ),
+      'survey' => array(
+        'is_group_content' => TRUE,
+        'exclude_topics' => TRUE,
+      ),
+      'suggestion' => array(
+        'media' => TRUE,
+        'is_group_content' => TRUE,
+        'exclude_commons_follow' => TRUE,
+      ),
+    ),
+    'node' => array(
+      'group' => array(
+        'is_group_content' => FALSE,
+        'is_group' => TRUE,
+        'exclude_commons_follow' => TRUE,
+      ),
+    ),
+  );
+}
+
+/**
+ * Perform alterations on entity integrations.
+ *
+ * @param $integrations
+ *   An associative array of entity integrations whose keys define the entity
+ *   type for each integration and whose values contain the bundles which have
+ *   been integrated. Each bundle is itself an associative array, whose keys
+ *   define the type of integration to enable and whose values contain the
+ *   status of the integration. TRUE = enabled, FALSE = disabled.
+ *
+ * @see hook_commons_entity_integration()
+ */
+function hook_commons_entity_integration_alter(&$integrations) {
+  // Disable Media integration for the post content type.
+  $integrations['node']['post']['media'] = FALSE;
+}
+
+/**
+ * @} End of "addtogroup hooks".
+ */
diff --git a/commons.info b/commons.info
index 3af232c..25e298c 100644
--- a/commons.info
+++ b/commons.info
@@ -1,11 +1,10 @@
 name = Commons
-project = commons
-distribution_name = "Drupal Commons"
 description = Ready-to-use solution for building communities.
 core = 7.x
-php_memory_limit = 128M
+distribution_name = "Drupal Commons"
+exclusive = TRUE
 
-; Core modules.
+; Install required core modules.
 dependencies[] = block
 dependencies[] = comment
 dependencies[] = dblog
@@ -18,25 +17,33 @@ dependencies[] = menu
 dependencies[] = number
 dependencies[] = options
 dependencies[] = path
+dependencies[] = rdf
 dependencies[] = search
 dependencies[] = shortcut
 dependencies[] = taxonomy
 
-; Contributed modules.
+; Install required contributed modules.
 dependencies[] = addressfield
 dependencies[] = addressfield_tokens
 dependencies[] = breakpoints
+dependencies[] = ckeditor
 dependencies[] = ctools
 dependencies[] = custom_search
 dependencies[] = diff
+dependencies[] = elements
 dependencies[] = email_registration
 dependencies[] = entity
 dependencies[] = entityreference
 dependencies[] = entitycache
 dependencies[] = edit_profile
 dependencies[] = features
+dependencies[] = file_entity
 dependencies[] = flag
 dependencies[] = http_client
+dependencies[] = libraries
+dependencies[] = media
+dependencies[] = media_internet
+dependencies[] = media_wysiwyg
 dependencies[] = menu_attributes
 dependencies[] = message
 dependencies[] = message_notify
@@ -44,20 +51,22 @@ dependencies[] = message_subscribe
 dependencies[] = metatag
 dependencies[] = module_filter
 dependencies[] = navbar
+dependencies[] = media_oembed
 dependencies[] = og
+dependencies[] = panelizer
 dependencies[] = panels
+dependencies[] = panels_ipe
 dependencies[] = paranoia
 dependencies[] = pathauto
-dependencies[] = placeholder
 dependencies[] = privatemsg
 dependencies[] = privatemsg_realname
 dependencies[] = quicktabs
 dependencies[] = r4032login
-dependencies[] = libraries
 dependencies[] = radioactivity
 dependencies[] = realname
 dependencies[] = redirect
 dependencies[] = rules
+dependencies[] = schemaorg
 dependencies[] = sharethis
 dependencies[] = strongarm
 dependencies[] = token
@@ -65,10 +74,12 @@ dependencies[] = views
 dependencies[] = views_bulk_operations
 dependencies[] = views_ui
 dependencies[] = votingapi
-dependencies[] = advancedqueue
-dependencies[] = ckeditor
+
+; Install commons specific modules
+dependencies[] = commons_activity_page
 dependencies[] = commons_activity_streams
 dependencies[] = commons_bw
+dependencies[] = commons_content_moderation
 dependencies[] = commons_events
 dependencies[] = commons_events_pages
 dependencies[] = commons_featured
@@ -76,31 +87,33 @@ dependencies[] = commons_follow
 dependencies[] = commons_follow_group
 dependencies[] = commons_follow_node
 dependencies[] = commons_follow_term
-dependencies[] = commons_follow_user
 dependencies[] = commons_follow_ui
-dependencies[] = commons_like
-dependencies[] = commons_search
-dependencies[] = commons_search_core
+dependencies[] = commons_follow_user
 dependencies[] = commons_groups
-dependencies[] = commons_groups_pages
 dependencies[] = commons_groups_directory
+dependencies[] = commons_groups_pages
+dependencies[] = commons_like
+dependencies[] = commons_location
+dependencies[] = commons_media
+dependencies[] = commons_misc
 dependencies[] = commons_notify
-dependencies[] = commons_posts
 dependencies[] = commons_pages
-dependencies[] = commons_q_a
-dependencies[] = commons_q_a_pages
-dependencies[] = commons_wikis
 dependencies[] = commons_polls
-dependencies[] = commons_content_moderation
+dependencies[] = commons_posts
 dependencies[] = commons_profile_base
 dependencies[] = commons_profile_social
-dependencies[] = commons_utility_links
-dependencies[] = commons_user_profile_pages
+dependencies[] = commons_q_a
+dependencies[] = commons_q_a_pages
+dependencies[] = commons_search
+dependencies[] = commons_search_core
 dependencies[] = commons_site_homepage
-dependencies[] = commons_activity_page
-dependencies[] = commons_wikis_pages
-dependencies[] = commons_misc
-dependencies[] = commons_location
-dependencies[] = commons_wysiwyg
 dependencies[] = commons_social_sharing
 dependencies[] = commons_trusted_contacts
+dependencies[] = commons_user_profile_pages
+dependencies[] = commons_utility_links
+dependencies[] = commons_wikis
+dependencies[] = commons_wikis_pages
+dependencies[] = commons_wysiwyg
+
+; System Requirements.
+php_memory_limit = 128M
diff --git a/commons.install b/commons.install
index d9e3efe..a51fc04 100644
--- a/commons.install
+++ b/commons.install
@@ -7,13 +7,13 @@
 
 /**
  * Implements hook_requirements().
- * Set minimum 'max_execution_time' requirement
  */
 function commons_requirements($phase) {
   $requirements = array();
   // Ensure translations don't break during installation.
   $t = get_t();
   if($phase == 'install') {
+
     // Test PHP minimum execution time
     $requirements['php_max_execution_time'] = array(
       'title' => $t('PHP Max Execution Time'),
@@ -25,20 +25,613 @@ function commons_requirements($phase) {
       $requirements['php_max_execution_time']['description'] = $t('Your PHP execution time is too low, please set it greater than or equal to %time seconds.', array('%time' => DRUPAL_MINIMUM_MAX_EXECUTION_TIME));
       $requirements['php_max_execution_time']['severity'] = REQUIREMENT_ERROR;
     }
+
+    if(ini_get('apc.shm_size') != NULL) {
+      // Check for apc.shm_size = 96mb
+      $requirements['apc_shm_size'] = array(
+        'title' => $t('APC shim size'),
+        'value' => ini_get('apc.shm_size'),
+      );
+
+      $shm_size = preg_split('/[a-zA-Z]/', ini_get('apc.shm_size'));
+      $shm_size = $shm_size[0];
+
+      // only check if APC var is being set somewhere (usually apc.ini).
+      // throw error if there is less than 96MB available
+      if ($shm_size && $shm_size < COMMONS_MINIMUM_APC_CACHE) {
+        $requirements['apc_shm_size']['description'] = $t('APC is installed but %shm_size is not enough APC cache to successfully install Drupal Commons.
+           Find your <em>apc.ini</em> file and change the <em>apc.shm_size</em> value to at least <em>%min_shm_size</em>.', array('%shm_size' => $shm_size . 'M', '%min_shm_size' => COMMONS_MINIMUM_APC_CACHE . 'M'));
+        $requirements['apc_shm_size']['severity'] = REQUIREMENT_ERROR;
+      }
+    }
   }
   return $requirements;
 }
 
 /**
- * Implements hook_install().
+ * Implements hook_install_tasks().
+ */
+function commons_install_tasks() {
+  //make sure we have more memory than 196M. if not lets try to increase it.
+  if (ini_get('memory_limit') != '-1' && ini_get('memory_limit') <= '196M' && ini_get('memory_limit') >= '128M') {
+    ini_set('memory_limit', '196M');
+  }
+
+  $demo_content = variable_get('commons_install_example_content', FALSE);
+  $acquia_connector = variable_get('commons_install_acquia_connector', FALSE);
+
+  return array(
+    'commons_acquia_connector_enable' => array(
+      'display' => FALSE,
+      'type' => '',
+      'run' => $acquia_connector ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
+    ),
+    'commons_installer_palette' => array(
+      'display_name' => st('Choose site color palette'),
+      'display' => TRUE,
+      'type' => 'form',
+      'function' => 'commons_installer_palette',
+    ),
+    'commons_anonymous_message_homepage' => array(
+      'display_name' => st('Enter Homepage welcome text'),
+      'display' => TRUE,
+      'type' => 'form',
+      'function' => 'commons_anonymous_welcome_text_form'
+    ),
+    'commons_revert_features' => array(
+      'display' => FALSE,
+    ),
+    'commons_demo_content' => array(
+      'display' => FALSE,
+      'type' => '',
+      'run' => $demo_content ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
+    ),
+    'commons_create_first_group' => array(
+      'display_name' => st('Create the first group'),
+      'display' => TRUE,
+      'type' => 'form',
+    ),
+    'commons_admin_permissions' => array(
+      'display' => FALSE,
+    ),
+  );
+}
+
+/**
+ * Implements hook_install_tasks_alter().
+ */
+function commons_install_tasks_alter(&$tasks, $install_state) {
+  global $install_state;
+
+  // Skip profile selection step.
+  $tasks['install_select_profile']['display'] = FALSE;
+
+  // Skip language selection install step and default language to English.
+  $tasks['install_select_locale']['display'] = FALSE;
+  $tasks['install_select_locale']['run'] = INSTALL_TASK_SKIP;
+  $install_state['parameters']['locale'] = 'en';
+
+  // Override "install_finished" task to redirect people to home page.
+  $tasks['install_finished']['function'] = 'commons_install_finished';
+}
+
+/**
+ * Override of install_finished() without the useless text.
+ */
+function commons_install_finished(&$install_state) {
+  // BEGIN copy/paste from install_finished().
+  // Remove the bookmarks flag
+  $flag = flag_get_flag('bookmarks');
+  if($flag) {
+    $flag->delete();
+    $flag->disable();
+    _flag_clear_cache();
+  }
+
+  // Flush all caches to ensure that any full bootstraps during the installer
+  // do not leave stale cached data, and that any content types or other items
+  // registered by the installation profile are registered correctly.
+  drupal_flush_all_caches();
+
+  // We make custom code for the footer here because we want people to be able to freely edit it if they wish.
+  $footer_body = '<p>'. st('A Commons Community, powered by <a href="@acquia">Acquia</a>', array('@acquia' => url('https://www.acquia.com/products-services/drupal-commons-social-business-software'))) . '</p>';
+
+  $footer_block_text = array(
+    'body' => st($footer_body),
+    'info' => st('Default Footer'),
+    'format' => 'full_html',
+  );
+
+  if (drupal_write_record('block_custom', $footer_block_text)) {
+    $footer_block = array(
+      'module' => 'block',
+      'delta' => $footer_block_text['bid'],
+      'theme' => 'commons_origins',
+      'visibility' => 0,
+      'region' => 'footer',
+      'status' => 1,
+      'pages' => 0,
+      'weight' => 1,
+      'title' => variable_get('site_name', 'Drupal Commons'),
+    );
+    drupal_write_record('block', $footer_block);
+  }
+
+  // Remember the profile which was used.
+  variable_set('install_profile', drupal_get_profile());
+
+  // Installation profiles are always loaded last
+  db_update('system')
+    ->fields(array('weight' => 1000))
+    ->condition('type', 'module')
+    ->condition('name', drupal_get_profile())
+    ->execute();
+
+  // Cache a fully-built schema.
+  drupal_get_schema(NULL, TRUE);
+
+  variable_set('title_node', array(
+    'auto_attach' => array('title' => 'title'),
+    'hide_label' => array('page' => 0, 'entity' => 0),
+  ));
+
+  // Run cron to populate update status tables (if available) so that users
+  // will be warned if they've installed an out of date Drupal version.
+  // Will also trigger indexing of profile-supplied content or feeds.
+  drupal_cron_run();
+  // END copy/paste from install_finished().
+
+  if (isset($messages['error'])) {
+    $output = '<p>' . (isset($messages['error']) ? st('Review the messages above before visiting <a href="@url">your new site</a>.', array('@url' => url(''))) : st('<a href="@url">Visit your new site</a>.', array('@url' => url('')))) . '</p>';
+    return $output;
+  }
+  else {
+    // Since any module can add a drupal_set_message, this can bug the user
+    // when we redirect him to the front page. For a better user experience,
+    // remove all the message that are only "notifications" message.
+    drupal_get_messages('status', TRUE);
+    drupal_get_messages('completed', TRUE);
+
+    // If we don't install drupal using Drush, redirect the user to the front
+    // page.
+    if (!drupal_is_cli()) {
+      drupal_goto('');
+    }
+  }
+}
+
+/**
+ * Enable Acquia Connector module if selected on site configuration step.
+ */
+function commons_acquia_connector_enable() {
+  $modules = variable_get('commons_install_acquia_modules', array());
+  if (!empty($modules)) {
+    module_enable($modules, TRUE);
+  }
+}
+
+/**
+ * Allow users to select from a predefined list of color palettes during the
+ * commons installation.
+ */
+function commons_installer_palette() {
+  $form = array();
+  require_once(drupal_get_path('theme', 'commons_origins') . '/commons_origins.palettes.inc');
+
+  commons_origins_palettes_form($form);
+  $form['commons_origins_palette_fieldset']['#collapsible'] = FALSE;
+  $form['commons_origins_palette_fieldset']['#collapsed'] = FALSE;
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => st('Save color palette'),
+  );
+  drupal_add_css('profiles/commons/commons_installer.css');
+
+  return $form;
+}
+
+/**
+ * Configuration form to set welcome text for the anonymous site homepage.
+ */
+function commons_anonymous_welcome_text_form() {
+  $form['commons_anonymous_welcome_explanation'] = array(
+    '#markup' => '<h2>' . st('Homepage welcome text') . '</h2>' . st("Below, enter text that will be shown on your community's homepage to help new visitors understand what your community is about and why they should join. The image below shows an example of how this text will appear. You can always change this text later."),
+    '#weight' => -1,
+  );
+  $form['commons_anonymous_welcome_example'] = array(
+    '#markup' => theme('image', array('path' => 'profiles/commons/images/commons_homepage_text_example.png', 'alt' => 'Home page example', 'alt' => 'Home page example')),
+    '#weight' => 0,
+  );
+
+  $form['commons_anonymous_welcome_title'] = array(
+    '#type' => 'textfield',
+    '#title' => st('Welcome headline'),
+    '#description' => st('A short description of the community that visitors can understand at a glance.'),
+    '#required' => TRUE,
+    '#default_value' => st('Welcome to our community'),
+  );
+
+  $form['commons_anonymous_welcome_body'] = array(
+    '#type' => 'textarea',
+    '#title' => st('Welcome body text'),
+    '#description' => st('Enter a couple of sentences elaborating about your community.'),
+    '#required' => TRUE,
+    '#default_value' => st('Share your thoughts, find answers to your questions.'),
+  );
+
+  $form['commons_install_example_content'] = array(
+    '#type' => 'checkbox',
+    '#title' => st('Install example content'),
+    '#description' => st('Install Commons with example content so that you can get a sense of what your site will look like once it becomes more active. Example content includes a group, a few users and content for that group. Example content can be modified or deleted like normal content.'),
+    '#default_value' => TRUE
+  );
+
+  $form['commons_anonymous_welcome_submit'] = array(
+    '#type'  => 'submit',
+    '#value' => st('Save and continue')
+  );
+
+  return $form;
+}
+
+/**
+ * Save the configuration form for set welcome text for anonymous users.
+ * @see commons_anonymous_welcome_text_form()
+ */
+function commons_anonymous_welcome_text_form_submit($form_id, &$form_state) {
+  variable_set('commons_anonymous_welcome_title', $form_state['values']['commons_anonymous_welcome_title']);
+  variable_set('commons_anonymous_welcome_body', $form_state['values']['commons_anonymous_welcome_body']);
+  variable_set('commons_install_example_content', $form_state['values']['commons_install_example_content']);
+}
+
+/*
+ * Revert Features after the installation.
+ */
+function commons_revert_features() {
+  // Revert Features components to ensure that they are in their default states.
+  $revert = array(
+    'commons_follow' => array('field_base'),
+    'commons_groups' => array('field_instance', 'field_base'),
+    'commons_trusted_contacts' => array('field_instance', 'field_base'),
+    'commons_wikis' => array('og_features_permission'),
+    'commons_wysiwyg' => array('user_permission', 'ckeditor_profile'),
+    'commons_events' => array('og_features_permission' , 'field_base'),
+    'commons_polls' => array('og_features_permission'),
+    'commons_q_a' => array('og_features_permission', 'field_base'),
+    'commons_posts' => array('og_features_permission'),
+  );
+
+  features_revert($revert);
+}
+
+/**
+ * This function generates demo content.
+ */
+function commons_demo_content() {
+
+  // Reset the Flag cache.
+  flag_get_flags(NULL, NULL, NULL, TRUE);
+
+  // Create demo Users
+  $demo_users = array(
+    'Jeff Noyes' => 'Jeff Noyes',
+    'Drew Robertson' => 'Drew Robertson',
+    'Lisa Rex' => 'Lisa Rex',
+    'Katelyn Fogarty' => 'Katelyn Fogarty',
+    'Dharmesh Mistry' => 'Dharmesh Mistry',
+    'Erica Ligeski' => 'Erica Ligeski',
+  );
+
+  foreach ($demo_users as $name) {
+    list($first_name, $last_name)  = explode(" ", $name);
+    $normalize_name = commons_normalize_name($name);
+    $password = user_password(8);
+
+    $fields = array(
+      'name' => $name,
+      'mail' => "{$normalize_name}@example.com",
+      'pass' => $password,
+      'status' => 1,
+      'init' => "{$normalize_name}@example.com",
+      'roles' => array(
+        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
+      ),
+    );
+
+    $fields['field_name_first'][LANGUAGE_NONE][0]['value'] = $first_name;
+    $fields['field_name_last'][LANGUAGE_NONE][0]['value'] = $last_name;
+
+    $demo_users[$name] = user_save('', $fields);
+
+    // Add avatars to demo Users.
+    commons_add_user_avatar($demo_users[$name]);
+  }
+
+  // Demo Content.
+
+  // Group: Boston
+  $boston_group = new stdClass();
+  $boston_group->type = 'group';
+  node_object_prepare($boston_group);
+
+  $boston_group->title = 'Boston';
+  $boston_group->body[LANGUAGE_NONE][0]['value'] = commons_veggie_ipsum();
+  $boston_group->uid = $demo_users['Jeff Noyes']->uid;
+  $boston_group->language = LANGUAGE_NONE;
+  $boston_group->created = time() - 604800;
+  $boston_group->status = 1;
+  node_save($boston_group);
+
+  // Group: New York City
+  $nyc_group = new stdClass();
+  $nyc_group->type = 'group';
+  node_object_prepare($nyc_group);
+
+  $nyc_group->title = 'New York City';
+  $nyc_group->body[LANGUAGE_NONE][0]['value'] = commons_veggie_ipsum();
+  $nyc_group->uid = $demo_users['Drew Robertson']->uid;
+  $nyc_group->language = LANGUAGE_NONE;
+  $nyc_group->status = 1;
+  // Make the group 1 week old:
+  $nyc_group->created = time() - 604800;
+  node_save($nyc_group);
+
+
+  // Post: Best brunch places in Cambridge
+  $post = new stdClass();
+  $post->type = 'post';
+  node_object_prepare($post);
+
+  $post->title = 'Best brunch places in Cambridge';
+  $post->uid = $demo_users['Lisa Rex']->uid;
+  $post->language = LANGUAGE_NONE;
+  // 1:30 ago.
+  $post->created = time() - 5400;
+  $post->body[LANGUAGE_NONE][0]['value'] = "My aunt and I have been trying a lot of brunch places in Cambridge. Here's our favorites: <ul><li>North Street Grille for their breads
+<li>Mixtura for the souffles
+<li>The Neighborhood Restaurant for the vast quantities of food
+<li>City Girl Cafe for the ambiance <li>Bom Cafe for granola";
+  $post->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
+
+  $post->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
+  $post->field_radioactivity[LANGUAGE_NONE][0]['radioactivity_energy'] = 8;
+
+  $terms = array(
+    'brunch',
+    'Cambridge',
+    'dining out'
+  );
+
+  foreach ($terms as $term) {
+    $post->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
+  }
+
+  node_save($post);
+
+  // Wiki: How to create a veggie burger
+  $wiki = new stdClass();
+  $wiki->type = 'wiki';
+  node_object_prepare($wiki);
+  $wiki->created = time() - 604800;
+  $wiki->title = 'How to create a veggie burger';
+  $wiki->uid = $demo_users['Dharmesh Mistry']->uid;
+  $wiki->language = LANGUAGE_NONE;
+  $wiki->body[LANGUAGE_NONE][0]['value'] = "Celtuce quandong gumbo coriander avocado yarrow broccoli rabe parsnip nori mung bean watercress taro pea sprouts cress. Bush tomato water spinach radish green bean okra spinach garlic cress. Cucumber squash tigernut swiss chard celery cabbage beet greens nori groundnut grape melon seakale. Earthnut pea kakadu plum chicory potato plantain fennel gumbo chickweed gourd cauliflower wakame green bean epazote taro quandong. Celery turnip kombu lotus root lettuce sierra leone bologi kale cauliflower gumbo parsnip taro welsh onion melon asparagus green bean beet greens black-eyed pea jícama. Kohlrabi lentil turnip greens plantain bush tomato leek arugula courgette amaranth yarrow.";
+  $wiki->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
+
+  $wiki->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
+  $wiki->field_radioactivity[LANGUAGE_NONE][0]['radioactivity_energy'] = 8;
+
+  $terms = array(
+    'vegetarian',
+    'casual',
+    'meal',
+    'recipe'
+  );
+
+  foreach ($terms as $term) {
+    $wiki->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
+  }
+
+  node_save($wiki);
+
+  // Event: Ribfest Boston 2012
+  $event = new stdClass();
+  $event->type = 'event';
+  node_object_prepare($event);
+
+  $event->title = 'Ribfest Boston 2012';
+  $event->uid = $demo_users['Katelyn Fogarty']->uid;
+  $event->language = LANGUAGE_NONE;
+  $event->body[LANGUAGE_NONE][0]['value'] = "<strong>What ignited in 1999 as a community block party has exploded into one of Boston's most anticipated street festivals.</strong> Averaging 50,000 pounds of ribs and BBQ from more than 30 restaurants, Ribfest Boston 2013 is expected to draw more than 50,000 people. As a nationally recognized music festival, we host a hot blend of Indie, pop, Indie Roots, rock and alt country for one of the most unique band lineups in the city. Families can spend the whole weekend in Kids Square to enjoy live entertainment, inflatables, games and more.";
+  $event->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
+  $event->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
+  $terms = array(
+    'bbq',
+    'music',
+    'festival'
+  );
+
+  foreach ($terms as $term) {
+    $event->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
+  }
+
+  // The event starts 6 months from now.
+  $event->field_date[LANGUAGE_NONE][0]['value'] = format_date(REQUEST_TIME + 15552000, 'custom', 'Y-m-d 10:00:00');
+  // The event ends 6 months and one day from now.
+  $event->field_date[LANGUAGE_NONE][0]['value2'] = format_date(REQUEST_TIME + 15638400, 'custom', 'Y-m-d 10:00:00');
+
+  $event->field_address[LANGUAGE_NONE][0]['thoroughfare'] = '25 Corporate Drive';
+  $event->field_address[LANGUAGE_NONE][0]['premise'] = '4th floor';
+  $event->field_address[LANGUAGE_NONE][0]['postal_code'] = '01803';
+  $event->field_address[LANGUAGE_NONE][0]['country'] = 'US';
+  $event->field_address[LANGUAGE_NONE][0]['location'] = 'Waterfront';
+  $event->field_address[LANGUAGE_NONE][0]['administrative_area']  = 'MA';
+  $event->field_address[LANGUAGE_NONE][0]['locality'] = 'Boston';
+  $event->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
+  node_save($event);
+
+  // Don't display the 'registration settings have been saved' message.
+  drupal_get_messages('status', TRUE);
+  drupal_get_messages('completed', TRUE);
+
+  // Delete the demo content variable
+  variable_del('commons_install_example_content');
+
+  // Make sure the admin user is also a group.
+  // @todo: Move to a better place.
+  $wrapper = entity_metadata_wrapper('user', 1);
+  $wrapper->{OG_GROUP_FIELD}->set(TRUE);
+  $wrapper->save();
+}
+
+/**
+ * Let the admin user create the first group as part of the installation process.
+ */
+function commons_create_first_group() {
+  $form['commons_first_group_explanation'] = array(
+    '#markup' => '<h2>' . st('Create the first group in your new community.') . '</h2>' . st("Commons uses groups to collect community members and content related to a particular interest, working goal or geographic area."),
+    '#weight' => -1,
+  );
+
+  $form['commons_fist_group_example'] = array(
+    '#markup' => theme('image', array('path' => 'profiles/commons/images/commons_group_description_sample.png', 'alt' => 'Group description page example', 'alt' => 'Group description example')),
+    '#weight' => 0,
+  );
+
+  $form['commons_first_group_title'] = array(
+    '#type' => 'textfield',
+    '#title' => st("Group name"),
+    '#description' => st('For example: "Boston food lovers" or "Engineering team."'),
+    '#required' => TRUE,
+    '#default_value' => st('Engineering team'),
+  );
+
+  $form['commons_first_group_body'] = array(
+    '#type' => 'textarea',
+    '#title' => st('Group description'),
+    '#description' => st("This text will appear on the group's homepage and helps new contributors to become familiar with the purpose of the group. You can always change this text or add another group later."),
+    '#required' => TRUE,
+    '#default_value' => st('The online home for our Engineering team'),
+  );
+
+  $form['commons_first_group_submit'] = array(
+    '#type'  => 'submit',
+    '#value' => st('Save and continue')
+  );
+
+  return $form;
+}
+
+/**
+ * Save the first group form.
  *
- * Perform actions to set up the site for this profile.
+ * @see commons_create_first_group().
+ */
+function commons_create_first_group_submit($form_id, &$form_state) {
+  $values = $form_state['values'];
+
+  $first_group = new stdClass();
+  $first_group->type = 'group';
+  node_object_prepare($first_group);
+
+  $first_group->title = $values['commons_first_group_title'];
+  $first_group->body[LANGUAGE_NONE][0]['value'] = $values['commons_first_group_body'];
+  $first_group->uid = 1;
+  $first_group->language = LANGUAGE_NONE;
+  $first_group->status = 1;
+  node_save($first_group);
+}
+
+function commons_admin_permissions() {
+  //get the administrator role, we set this in the install file
+  $admin_role = user_role_load_by_name('administrator');
+  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
+}
+
+function commons_add_user_avatar($account) {
+  global $base_url;
+
+  if ($account->uid) {
+    $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
+    if(file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)){
+      $picture_result = drupal_http_request($base_url . '/profiles/commons/images/avatars/avatar-' . commons_normalize_name($account->name) . '.png');
+      $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-' . $account->uid . '-' . REQUEST_TIME . '.jpg');
+      $picture_file = file_save_data($picture_result->data, $picture_path, FILE_EXISTS_REPLACE);
+
+      // Check to make sure the picture isn't too large for the site settings.
+      $validators = array(
+        'file_validate_is_image' => array(),
+        'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),
+        'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),
+      );
+
+      // attach photo to user's account.
+      $errors = file_validate($picture_file, $validators);
+
+      if (empty($errors)) {
+        // Update the user record.
+        $picture_file->uid = $account->uid;
+        $picture_file = file_save($picture_file);
+        file_usage_add($picture_file, 'user', 'user', $account->uid);
+        db_update('users')
+          ->fields(array(
+            'picture' => $picture_file->fid,
+          ))
+          ->condition('uid', $account->uid)
+          ->execute();
+        $account->picture = $picture_file->fid;
+      }
+    }
+  }
+}
+
+/**
+ * Helper function to generate a machine name similar to the user's full name.
+ */
+function commons_normalize_name($name) {
+  return drupal_strtolower(str_replace(' ','_', $name));
+}
+
+/**
+ * Generate some filler content.
+ */
+function commons_veggie_ipsum() {
+  $content = "Veggies sunt bona vobis, proinde vos postulo esse magis spinach kale scallion lettuce cucumber black-eyed pea onion.
+
+Bamboo shoot green bean wattle seed okra kakadu plum peanut ricebean celtuce. Azuki bean desert raisin bush tomato turnip peanut sweet pepper courgette horseradish. Garlic kombu beet greens celery courgette carrot mung bean.";
+  return $content;
+}
+
+/**
+ * This function create a taxonomy topic, is used for create a demo content for
+ * a new installations of Drupal Commons.
  *
- * @see system_install()
+ * @see commons_demo_content().
+ */
+function commons_create_topic($topic_name = '') {
+  $term = new stdClass();
+  $term->name = $topic_name;
+  $term->vid = 1;
+  // Pathauto aliasing can cause a menu_rebuild(), causing the request to
+  // exceeed the max execution time. Specify a manual alias instead.
+  // http://drupal.org/node/1867172.
+  $term->path['pathauto'] = FALSE;
+  taxonomy_term_save($term);
+  $path = array(
+    'source' => 'taxonomy/term/' . $term->tid,
+    'alias' => 'topics/' . drupal_html_class($topic_name),
+  );
+  path_save($path);
+  return $term->tid;
+}
+
+/**
+ * Implements hook_install().
  */
 function commons_install() {
   // Enable the Origins theme and set it as the default.
-  theme_enable(array('adaptivetheme', 'commons_origins', 'adaptivetheme_admin'));
+  theme_enable(array('adaptivetheme', 'commons_origins'));
 
     // The Bartik theme is automatically enabled during installation. Disable it.
   db_update('system')
@@ -50,7 +643,7 @@ function commons_install() {
   // Set the default and administration themes.
   variable_set('theme_default', 'commons_origins');
   // Set a default administrative theme:
-  variable_set('admin_theme', 'adaptivetheme_admin');
+  variable_set('admin_theme', 'ember');
   variable_set('node_admin_theme', FALSE);
 
   // Do not use the administration theme when editing or creating content.
@@ -85,19 +678,6 @@ function commons_install() {
   );
   drupal_write_record('block', $search_block);
 
-  // Create a default role for site administrators, with all available permissions assigned.
-  $admin_role = new stdClass();
-  $admin_role->name = 'administrator';
-  $admin_role->weight = 2;
-  user_role_save($admin_role);
-  // Set this as the administrator role.
-  variable_set('user_admin_role', $admin_role->rid);
-
-  // Assign user 1 the "administrator" role.
-  db_insert('users_roles')
-    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
-    ->execute();
-
   // AdaptiveTheme requires that the system theme settings form
   // be submitted in order for its themes' settings to be properly set
   // and the resulting css files generated.
@@ -112,6 +692,35 @@ function commons_install() {
 }
 
 /**
+ * Set a default user avatar as a managed file object.
+ */
+function commons_set_default_avatar() {
+  global $base_url;
+  $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
+  if(file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)){
+    $picture_result = drupal_http_request($base_url . '/profiles/commons/images/avatars/user-avatar.png');
+    $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-default.jpg');
+    $picture_file = file_save_data($picture_result->data, $picture_path, FILE_EXISTS_REPLACE);
+
+    // Check to make sure the picture isn't too large for the site settings.
+    $validators = array(
+      'file_validate_is_image' => array(),
+      'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),
+      'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),
+    );
+
+    // attach photo to user's account.
+    $errors = file_validate($picture_file, $validators);
+
+    if (empty($errors)) {
+      // Update the user record.
+      $picture_file = file_save($picture_file);
+      variable_set('user_picture_default', $picture_path);
+    }
+  }
+}
+
+/**
  * Enable the Origins theme and set it as the default. *
  */
 function commons_update_3101() {
@@ -220,4 +829,90 @@ function commons_update_3108() {
   );
   features_revert($revert);
   return array();
-}
\ No newline at end of file
+}
+
+/**
+ * Replace the Placeholder module with the Elements module.
+ */
+function commons_update_3109() {
+  if (module_exists('placeholder')) {
+    module_disable(array('placeholder'));
+  }
+  module_enable(array('elements'));
+  return array();
+}
+
+/**
+ * Change the administration theme to Ember.
+ */
+function commons_update_3111() {
+  variable_set('admin_theme', 'ember');
+  return array();
+}
+
+/*
+ * Revert Message types to use the correct title field token.
+ */
+function commons_update_3112() {
+  $revert = array(
+    'commons_wikis' => array('message_type'),
+    'commons_q_a' => array('message_type'),
+    'commons_posts' => array('message_type'),
+    'commons_notify' => array('message_type'),
+    'commons_like' => array('message_type'),
+    'commons_activity_streams' => array('message_type'),
+  );
+  features_revert($revert);
+  return array();
+}
+
+/*
+ * Delete the AdvancedQueue class variable for sites that did not uninstall AdvancedQueue.
+ */
+function commons_update_3113() {
+  if (variable_get('queue_default_class', '') == 'AdvancedQueue') {
+    variable_del('queue_default_class');
+  }
+  return array();
+}
+
+/*
+ * Automatically use field_title for all nodes instead of the node base title.
+ */
+function commons_update_3114() {
+  variable_set('title_node', array(
+    'auto_attach' => array('title' => 'title'),
+    'hide_label' => array('page' => 0, 'entity' => 0),
+  ));
+
+  foreach (node_type_get_types() as $node_type) {
+    // Set the title as "Replaced by title_field".
+    if (!title_field_replacement_enabled('node', $node_type->type, 'title')) {
+      title_field_replacement_toggle('node', $node_type->type, 'title');
+    }
+
+    // Migrate the titles to the title field.
+    title_field_replacement_batch_set('node', $node_type->type, 'title');
+  }
+
+  drupal_flush_all_caches();
+}
+
+/*
+ * Replace the oEmbed module with the Media: oEmbed module.
+ */
+function commons_update_3115() {
+  if (module_exists('oembed')) {
+    module_disable(array('oembed'));
+  }
+  module_enable(array('media_oembed'));
+  return array();
+}
+
+/*
+ * Enable the Commons: Media and Media: WYSIWYG modules.
+ */
+function commons_update_3116() {
+  module_enable(array('commons_media', 'media_wysiwyg'));
+  return array();
+}
diff --git a/commons.profile b/commons.profile
index 4e3f4cf..cb67f82 100644
--- a/commons.profile
+++ b/commons.profile
@@ -1,4 +1,5 @@
 <?php
+
 /**
  * @file
  * Enables modules and site configuration for a Commons site installation.
@@ -9,6 +10,11 @@
  */
 define('DRUPAL_MINIMUM_MAX_EXECUTION_TIME', 120);
 
+/*
+ * Define commons minimum APC cache required to operate.
+ */
+define('COMMONS_MINIMUM_APC_CACHE', 96);
+
 /**
  * Implements hook_admin_paths_alter().
  */
@@ -19,21 +25,42 @@ function commons_admin_paths_alter(&$paths) {
 }
 
 /**
- * Implements hook_install_tasks_alter().
+ * Implements hook_update_projects_alter().
  */
-function commons_install_tasks_alter(&$tasks, $install_state) {
-  global $install_state;
-
-  // Skip profile selection step.
-  $tasks['install_select_profile']['display'] = FALSE;
-
-  // Skip language selection install step and default language to English.
-  $tasks['install_select_locale']['display'] = FALSE;
-  $tasks['install_select_locale']['run'] = INSTALL_TASK_SKIP;
-  $install_state['parameters']['locale'] = 'en';
+function commons_update_projects_alter(&$projects) {
+  // Enable update status for the Commons profile.
+  $modules = system_rebuild_module_data();
+  // The module object is shared in the request, so we need to clone it here.
+  $commons = clone $modules['commons'];
+  $commons->info['hidden'] = FALSE;
+  _update_process_info_list($projects, array('commons' => $commons), 'module', TRUE);
+}
 
-  // Override "install_finished" task to redirect people to home page.
-  $tasks['install_finished']['function'] = 'commons_install_finished';
+/**
+ * Get Commons entity integration information.
+ *
+ * @param $entity_type
+ *   (optional) The entity type to load, e.g. node or user.
+ *
+ * @return
+ *   An associative array of entity integrations whose keys define the entity
+ *   type for each integration and whose values contain the bundles which have
+ *   been integrated. Each bundle is itself an associative array, whose keys
+ *   define the type of integration to enable and whose values contain the
+ *   status of the integration. TRUE = enabled, FALSE = disabled.
+ */
+function commons_entity_integration_info($entity_type = NULL) {
+  $info = &drupal_static(__FUNCTION__);
+  if (!$info) {
+    $info = module_invoke_all('commons_entity_integration');
+    drupal_alter('commons_entity_integration', $info);
+  }
+  if ($entity_type) {
+    return isset($info[$entity_type]) ? $info[$entity_type] : array();
+  }
+  else {
+    return $info;
+  }
 }
 
 /**
@@ -42,8 +69,10 @@ function commons_install_tasks_alter(&$tasks, $install_state) {
  * Allows the profile to alter the site configuration form.
  */
 function commons_form_install_configure_form_alter(&$form, $form_state) {
-  // Flush all 'notification' messages, no need to show them to the user.
-  commons_clear_messages();
+  // Clear all non-error messages that might be set by enabled modules
+  drupal_get_messages('status', TRUE);
+  drupal_get_messages('completed', TRUE);
+
   // Pre-populate the site name with the server name.
   $form['site_information']['site_name']['#default_value'] = $_SERVER['SERVER_NAME'];
 
@@ -96,175 +125,6 @@ function commons_form_install_configure_form_alter(&$form, $form_state) {
   $form['#submit'][] = 'commons_check_acquia_connector';
 }
 
-
-/**
- * Implements hook_update_projects_alter().
- */
-function commons_update_projects_alter(&$projects) {
-  // Enable update status for the Commons profile.
-  $modules = system_rebuild_module_data();
-  // The module object is shared in the request, so we need to clone it here.
-  $commons = clone $modules['commons'];
-  $commons->info['hidden'] = FALSE;
-  _update_process_info_list($projects, array('commons' => $commons), 'module', TRUE);
-}
-
-/**
- * Implements hook_install_tasks().
- *
- * Allows the user to set a welcome message for anonymous users
- */
-function commons_install_tasks() {
-  // Suppress any status messages generated during batch install.
-  commons_clear_messages();
-
-  //make sure we have more memory than 196M. if not lets try to increase it.
-  if (ini_get('memory_limit') != '-1' && ini_get('memory_limit') <= '196M' && ini_get('memory_limit') >= '128M') {
-    ini_set('memory_limit', '196M');
-  }
-
-  $demo_content = variable_get('commons_install_example_content', FALSE);
-  $acquia_connector = variable_get('commons_install_acquia_connector', FALSE);
-
-  return array(
-    'commons_acquia_connector_enable' => array(
-      'display' => FALSE,
-      'type' => '',
-      'run' => $acquia_connector ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
-    ),
-    'commons_installer_palette' => array(
-      'display_name' => st('Choose site color palette'),
-      'display' => TRUE,
-      'type' => 'form',
-      'function' => 'commons_installer_palette',
-    ),
-    'commons_anonymous_message_homepage' => array(
-      'display_name' => st('Enter Homepage welcome text'),
-      'display' => TRUE,
-      'type' => 'form',
-      'function' => 'commons_anonymous_welcome_text_form'
-    ),
-    'commons_revert_features' => array(
-      'display' => FALSE,
-    ),
-    'commons_demo_content' => array(
-      'display' => FALSE,
-      'type' => '',
-      'run' => $demo_content ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
-    ),
-    'commons_create_first_group' => array(
-      'display_name' => st('Create the first group'),
-      'display' => TRUE,
-      'type' => 'form',
-    ),
-    'commons_admin_permissions' => array(
-      'display' => FALSE,
-    ),
-  );
-}
-
-/**
- * Allow users to select from a predefined list of color palettes during
- * the commons installation.
- */
-function commons_installer_palette() {
-  $form = array();
-  require_once(drupal_get_path('theme', 'commons_origins') . '/commons_origins.palettes.inc');
-
-  commons_origins_palettes_form($form);
-  $form['commons_origins_palette_fieldset']['#collapsible'] = FALSE;
-  $form['commons_origins_palette_fieldset']['#collapsed'] = FALSE;
-  $form['submit'] = array(
-    '#type' => 'submit',
-    '#value' => st('Save color palette'),
-  );
-  drupal_add_css('profiles/commons/commons_installer.css');
-
-  return $form;
-}
-/**
- * Let the admin user create the first group as part of the installation process
- */
-function commons_create_first_group() {
-  $form['commons_first_group_explanation'] = array(
-    '#markup' => '<h2>' . st('Create the first group in your new community.') . '</h2>' . st("Commons uses groups to collect community members and content related to a particular interest, working goal or geographic area."),
-    '#weight' => -1,
-  );
-
-  $form['commons_fist_group_example'] = array(
-    '#markup' => theme('image', array('path' => 'profiles/commons/images/commons_group_description_sample.png', 'alt' => 'Group description page example', 'alt' => 'Group description example')),
-    '#weight' => 0,
-  );
-
-  $form['commons_first_group_title'] = array(
-    '#type' => 'textfield',
-    '#title' => st("Group name"),
-    '#description' => st('For example: "Boston food lovers" or "Engineering team."'),
-    '#required' => TRUE,
-    '#default_value' => st('Engineering team'),
-  );
-
-  $form['commons_first_group_body'] = array(
-    '#type' => 'textarea',
-    '#title' => st('Group description'),
-    '#description' => st("This text will appear on the group's homepage and helps new contributors to become familiar with the purpose of the group. You can always change this text or add another group later."),
-    '#required' => TRUE,
-    '#default_value' => st('The online home for our Engineering team'),
-  );
-
-  $form['commons_first_group_submit'] = array(
-    '#type'  => 'submit',
-    '#value' => st('Save and continue')
-  );
-
-  return $form;
-}
-
-/**
- * Save the first group form
- *
- * @see commons_create_first_group().
- */
-function commons_create_first_group_submit($form_id, &$form_state) {
-  $values = $form_state['values'];
-
-  $first_group = new stdClass();
-  $first_group->type = 'group';
-  node_object_prepare($first_group);
-
-  $first_group->title = $values['commons_first_group_title'];
-  $first_group->body[LANGUAGE_NONE][0]['value'] = $values['commons_first_group_body'];
-  $first_group->uid = 1;
-  $first_group->language = LANGUAGE_NONE;
-  $first_group->status = 1;
-  node_save($first_group);
-}
-
-/*
- * Revert Features after the installation.
- */
-function commons_revert_features() {
-  // Revert Features components to ensure that they are in their default states.
-  $revert = array(
-    'commons_follow' => array('field_base'),
-    'commons_groups' => array('field_instance', 'field_base'),
-    'commons_trusted_contacts' => array('field_instance', 'field_base'),
-    'commons_wikis' => array('og_features_permission'),
-    'commons_wysiwyg' => array('user_permission', 'ckeditor_profile'),
-    'commons_events' => array('og_features_permission' , 'field_base'),
-    'commons_polls' => array('og_features_permission'),
-    'commons_q_a' => array('og_features_permission', 'field_base'),
-    'commons_posts' => array('og_features_permission'),
-  );
-  features_revert($revert);
-}
-
-function commons_admin_permissions() {
-  //get the administrator role, we set this in the install file
-  $admin_role = user_role_load_by_name('administrator');
-  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
-}
-
 /**
  * Save the full name of the first user.
  */
@@ -290,441 +150,3 @@ function commons_check_acquia_connector($form_id, &$form_state) {
     variable_set('commons_install_acquia_modules', array_keys($options));
   }
 }
-
-/**
- * Configuration form to set welcome text for the anonymous site homepage.
- */
-function commons_anonymous_welcome_text_form() {
-  $form['commons_anonymous_welcome_explanation'] = array(
-    '#markup' => '<h2>' . st('Homepage welcome text') . '</h2>' . st("Below, enter text that will be shown on your community's homepage to help new visitors understand what your community is about and why they should join. The image below shows an example of how this text will appear. You can always change this text later."),
-    '#weight' => -1,
-  );
-  $form['commons_anonymous_welcome_example'] = array(
-    '#markup' => theme('image', array('path' => 'profiles/commons/images/commons_homepage_text_example.png', 'alt' => 'Home page example', 'alt' => 'Home page example')),
-    '#weight' => 0,
-  );
-
-  $form['commons_anonymous_welcome_title'] = array(
-    '#type' => 'textfield',
-    '#title' => st('Welcome headline'),
-    '#description' => st('A short description of the community that visitors can understand at a glance.'),
-    '#required' => TRUE,
-    '#default_value' => st('Welcome to our community'),
-  );
-
-  $form['commons_anonymous_welcome_body'] = array(
-    '#type' => 'textarea',
-    '#title' => st('Welcome body text'),
-    '#description' => st('Enter a couple of sentences elaborating about your community.'),
-    '#required' => TRUE,
-    '#default_value' => st('Share your thoughts, find answers to your questions.'),
-  );
-
-  $form['commons_install_example_content'] = array(
-    '#type' => 'checkbox',
-    '#title' => st('Install example content'),
-    '#description' => st('Install Commons with example content so that you can get a sense of what your site will look like once it becomes more active. Example content includes a group, a few users and content for that group. Example content can be modified or deleted like normal content.'),
-    '#default_value' => TRUE
-  );
-
-  $form['commons_anonymous_welcome_submit'] = array(
-    '#type'  => 'submit',
-    '#value' => st('Save and continue')
-  );
-
-  return $form;
-}
-
-/**
- * Save the configuration form for set welcome text for anonymous users
- * @see commons_anonymous_welcome_text_form()
- */
-function commons_anonymous_welcome_text_form_submit($form_id, &$form_state) {
-  variable_set('commons_anonymous_welcome_title', $form_state['values']['commons_anonymous_welcome_title']);
-  variable_set('commons_anonymous_welcome_body', $form_state['values']['commons_anonymous_welcome_body']);
-  variable_set('commons_install_example_content', $form_state['values']['commons_install_example_content']);
-}
-
-/**
- * Helper function to generate a machine name similar to the user's full name.
- */
-function commons_normalize_name($name) {
-  return drupal_strtolower(str_replace(' ','_', $name));
-}
-/**
- * This function generate a demo content
- */
-function commons_demo_content() {
-
-  // Reset the Flag cache.
-  flag_get_flags(NULL, NULL, NULL, TRUE);
-
-  // Create demo Users
-  $demo_users = array(
-    'Jeff Noyes' => 'Jeff Noyes',
-    'Drew Robertson' => 'Drew Robertson',
-    'Lisa Rex' => 'Lisa Rex',
-    'Katelyn Fogarty' => 'Katelyn Fogarty',
-    'Dharmesh Mistry' => 'Dharmesh Mistry',
-    'Erica Ligeski' => 'Erica Ligeski',
-  );
-
-
-  foreach ($demo_users as $name) {
-    list($first_name, $last_name)  = explode(" ", $name);
-    $normalize_name = commons_normalize_name($name);
-    $password = user_password(8);
-
-
-    $fields = array(
-      'name' => $name,
-      'mail' => "{$normalize_name}@example.com",
-      'pass' => $password,
-      'status' => 1,
-      'init' => "{$normalize_name}@example.com",
-      'roles' => array(
-        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
-      ),
-    );
-
-    $fields['field_name_first'][LANGUAGE_NONE][0]['value'] = $first_name;
-    $fields['field_name_last'][LANGUAGE_NONE][0]['value'] = $last_name;
-
-    $demo_users[$name] = user_save('', $fields);
-
-    // Add avatars to demo Users.
-    commons_add_user_avatar($demo_users[$name]);
-  }
-
-  // Demo Content.
-
-  // Group: Boston
-  $boston_group = new stdClass();
-  $boston_group->type = 'group';
-  node_object_prepare($boston_group);
-
-  $boston_group->title = 'Boston';
-  $boston_group->body[LANGUAGE_NONE][0]['value'] = commons_veggie_ipsum();
-  $boston_group->uid = $demo_users['Jeff Noyes']->uid;
-  $boston_group->language = LANGUAGE_NONE;
-  $boston_group->created = time() - 604800;
-  $boston_group->status = 1;
-  node_save($boston_group);
-
-  // Group: New York City
-  $nyc_group = new stdClass();
-  $nyc_group->type = 'group';
-  node_object_prepare($nyc_group);
-
-  $nyc_group->title = 'New York City';
-  $nyc_group->body[LANGUAGE_NONE][0]['value'] = commons_veggie_ipsum();
-  $nyc_group->uid = $demo_users['Drew Robertson']->uid;
-  $nyc_group->language = LANGUAGE_NONE;
-  $nyc_group->status = 1;
-  // Make the group 1 week old:
-  $nyc_group->created = time() - 604800;
-  node_save($nyc_group);
-
-
-  // Post: Best brunch places in Cambridge
-  $post = new stdClass();
-  $post->type = 'post';
-  node_object_prepare($post);
-
-  $post->title = 'Best brunch places in Cambridge';
-  $post->uid = $demo_users['Lisa Rex']->uid;
-  $post->language = LANGUAGE_NONE;
-  // 1:30 ago.
-  $post->created = time() - 5400;
-  $post->body[LANGUAGE_NONE][0]['value'] = "My aunt and I have been trying a lot of brunch places in Cambridge. Here's our favorites: <ul><li>North Street Grille for their breads
-<li>Mixtura for the souffles
-<li>The Neighborhood Restaurant for the vast quantities of food
-<li>City Girl Cafe for the ambiance <li>Bom Cafe for granola";
-  $post->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
-
-  $post->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
-  $post->field_radioactivity[LANGUAGE_NONE][0]['radioactivity_energy'] = 8;
-
-  $terms = array(
-    'brunch',
-    'Cambridge',
-    'dining out'
-  );
-
-  foreach ($terms as $term) {
-    $post->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
-  }
-
-  node_save($post);
-
-
-  // Wiki: How to create a veggie burger
-  $wiki = new stdClass();
-  $wiki->type = 'wiki';
-  node_object_prepare($wiki);
-  $wiki->created = time() - 604800;
-  $wiki->title = 'How to create a veggie burger';
-  $wiki->uid = $demo_users['Dharmesh Mistry']->uid;
-  $wiki->language = LANGUAGE_NONE;
-  $wiki->body[LANGUAGE_NONE][0]['value'] = "Celtuce quandong gumbo coriander avocado yarrow broccoli rabe parsnip nori mung bean watercress taro pea sprouts cress. Bush tomato water spinach radish green bean okra spinach garlic cress. Cucumber squash tigernut swiss chard celery cabbage beet greens nori groundnut grape melon seakale. Earthnut pea kakadu plum chicory potato plantain fennel gumbo chickweed gourd cauliflower wakame green bean epazote taro quandong. Celery turnip kombu lotus root lettuce sierra leone bologi kale cauliflower gumbo parsnip taro welsh onion melon asparagus green bean beet greens black-eyed pea jícama. Kohlrabi lentil turnip greens plantain bush tomato leek arugula courgette amaranth yarrow.";
-  $wiki->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
-
-  $wiki->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
-  $wiki->field_radioactivity[LANGUAGE_NONE][0]['radioactivity_energy'] = 8;
-
-  $terms = array(
-    'vegetarian',
-    'casual',
-    'meal',
-    'recipe'
-  );
-
-  foreach ($terms as $term) {
-    $wiki->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
-  }
-
-  node_save($wiki);
-
-  // Event: Ribfest Boston 2012
-  $event = new stdClass();
-  $event->type = 'event';
-  node_object_prepare($event);
-
-  $event->title = 'Ribfest Boston 2012';
-  $event->uid = $demo_users['Katelyn Fogarty']->uid;
-  $event->language = LANGUAGE_NONE;
-  $event->body[LANGUAGE_NONE][0]['value'] = "<strong>What ignited in 1999 as a community block party has exploded into one of Boston's most anticipated street festivals.</strong> Averaging 50,000 pounds of ribs and BBQ from more than 30 restaurants, Ribfest Boston 2013 is expected to draw more than 50,000 people. As a nationally recognized music festival, we host a hot blend of Indie, pop, Indie Roots, rock and alt country for one of the most unique band lineups in the city. Families can spend the whole weekend in Kids Square to enjoy live entertainment, inflatables, games and more.";
-  $event->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
-  $event->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
-  $terms = array(
-    'bbq',
-    'music',
-    'festival'
-  );
-
-  foreach ($terms as $term) {
-    $event->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
-  }
-
-  $event->field_date[LANGUAGE_NONE][0]['value'] = '2014-01-12 10:00:00';
-  $event->field_date[LANGUAGE_NONE][0]['value2'] = '2014-01-13 13:00:00';
-
-  $event->field_address[LANGUAGE_NONE][0]['thoroughfare'] = '25 Corporate Drive';
-  $event->field_address[LANGUAGE_NONE][0]['premise'] = '4th floor';
-  $event->field_address[LANGUAGE_NONE][0]['postal_code'] = '01803';
-  $event->field_address[LANGUAGE_NONE][0]['country'] = 'US';
-  $event->field_address[LANGUAGE_NONE][0]['location'] = 'Waterfront';
-  $event->field_address[LANGUAGE_NONE][0]['administrative_area']  = 'MA';
-  $event->field_address[LANGUAGE_NONE][0]['locality'] = 'Boston';
-  $event->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
-  node_save($event);
-  // Don't display the 'registration settings have been saved' message.
-  commons_clear_messages();
-
-  // Delete the demo content variable
-  variable_del('commons_install_example_content');
-
-  // Make sure the admin user is also a group.
-  // @todo: Move to a better place.
-  $wrapper = entity_metadata_wrapper('user', 1);
-  $wrapper->{OG_GROUP_FIELD}->set(TRUE);
-  $wrapper->save();
-}
-
-function commons_add_user_avatar($account) {
-  global $base_url;
-
-  if ($account->uid) {
-    $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
-    if(file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)){
-      $picture_result = drupal_http_request($base_url . '/profiles/commons/images/avatars/avatar-' . commons_normalize_name($account->name) . '.png');
-      $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-' . $account->uid . '-' . REQUEST_TIME . '.jpg');
-      $picture_file = file_save_data($picture_result->data, $picture_path, FILE_EXISTS_REPLACE);
-
-      // Check to make sure the picture isn't too large for the site settings.
-      $validators = array(
-        'file_validate_is_image' => array(),
-        'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),
-        'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),
-      );
-
-      // attach photo to user's account.
-      $errors = file_validate($picture_file, $validators);
-
-      if (empty($errors)) {
-        // Update the user record.
-        $picture_file->uid = $account->uid;
-        $picture_file = file_save($picture_file);
-        file_usage_add($picture_file, 'user', 'user', $account->uid);
-        db_update('users')
-          ->fields(array(
-          'picture' => $picture_file->fid,
-          ))
-          ->condition('uid', $account->uid)
-          ->execute();
-        $account->picture = $picture_file->fid;
-      }
-    }
-  }
-}
-
-/**
-  * Generate some filler content.
- */
-function commons_veggie_ipsum() {
-  $content = "Veggies sunt bona vobis, proinde vos postulo esse magis spinach kale scallion lettuce cucumber black-eyed pea onion.
-
-Bamboo shoot green bean wattle seed okra kakadu plum peanut ricebean celtuce. Azuki bean desert raisin bush tomato turnip peanut sweet pepper courgette horseradish. Garlic kombu beet greens celery courgette carrot mung bean.";
-  return $content;
-}
-
-/**
- * This function create a taxonomy topic, is used for create a demo content
- * for a new instalations of Drupal Commons
- *
- * @see commons_demo_content().
- */
-function commons_create_topic($topic_name = '') {
-  $term = new stdClass();
-  $term->name = $topic_name;
-  $term->vid = 1;
-  // Pathauto aliasing can cause a menu_rebuild(), causing the request to
-  // exceeed the max execution time. Specify a manual alias instead.
-  // http://drupal.org/node/1867172.
-  $term->path['pathauto'] = FALSE;
-  taxonomy_term_save($term);
-  $path = array(
-    'source' => 'taxonomy/term/' . $term->tid,
-    'alias' => 'topics/' . drupal_html_class($topic_name),
-  );
-  path_save($path);
-  return $term->tid;
-}
-
-/**
- * Enable Acquia Connector module if selected on site configuration step.
- */
-function commons_acquia_connector_enable() {
-  $modules = variable_get('commons_install_acquia_modules', array());
-  if (!empty($modules)) {
-    module_enable($modules, TRUE);
-    commons_clear_messages();
-  }
-}
-
-/**
- * Override of install_finished() without the useless text.
- */
-function commons_install_finished(&$install_state) {
-  // BEGIN copy/paste from install_finished().
-  // Remove the bookmarks flag
-  $flag = flag_get_flag('bookmarks');
-  if($flag) {
-    $flag->delete();
-    $flag->disable();
-    _flag_clear_cache();
-  }
-
-  // Flush all caches to ensure that any full bootstraps during the installer
-  // do not leave stale cached data, and that any content types or other items
-  // registered by the installation profile are registered correctly.
-  drupal_flush_all_caches();
-
-  // We make custom code for the footer here because we want people to be able to freely edit it if they wish.
-  $footer_body = '<p>'. st('A Commons Community, powered by <a href="@acquia">Acquia</a>', array('@acquia' => url('https://www.acquia.com/products-services/drupal-commons-social-business-software'))) . '</p>';
-
-  $footer_block_text = array(
-    'body' => st($footer_body),
-    'info' => st('Default Footer'),
-    'format' => 'full_html',
-  );
-
-  if (drupal_write_record('block_custom', $footer_block_text)) {
-    $footer_block = array(
-      'module' => 'block',
-      'delta' => $footer_block_text['bid'],
-      'theme' => 'commons_origins',
-      'visibility' => 0,
-      'region' => 'footer',
-      'status' => 1,
-      'pages' => 0,
-      'weight' => 1,
-      'title' => variable_get('site_name', 'Drupal Commons'),
-    );
-    drupal_write_record('block', $footer_block);
-  }
-
-  // Remember the profile which was used.
-  variable_set('install_profile', drupal_get_profile());
-
-  // Installation profiles are always loaded last
-  db_update('system')
-    ->fields(array('weight' => 1000))
-    ->condition('type', 'module')
-    ->condition('name', drupal_get_profile())
-    ->execute();
-
-  // Cache a fully-built schema.
-  drupal_get_schema(NULL, TRUE);
-
-  // Run cron to populate update status tables (if available) so that users
-  // will be warned if they've installed an out of date Drupal version.
-  // Will also trigger indexing of profile-supplied content or feeds.
-  drupal_cron_run();
-  // END copy/paste from install_finished().
-
-  if (isset($messages['error'])) {
-    $output = '<p>' . (isset($messages['error']) ? st('Review the messages above before visiting <a href="@url">your new site</a>.', array('@url' => url(''))) : st('<a href="@url">Visit your new site</a>.', array('@url' => url('')))) . '</p>';
-    return $output;
-  }
-  else {
-    // Since any module can add a drupal_set_message, this can bug the user
-    // when we redirect him to the front page. For a better user experience,
-    // remove all the message that are only "notifications" message.
-    commons_clear_messages();
-    // If we don't install drupal using Drush, redirect the user to the front
-    // page.
-    if (!drupal_is_cli()) {
-      drupal_goto('');
-    }
-  }
-}
-
-/**
- * Clear all 'notification' type messages that may have been set.
- */
-function commons_clear_messages() {
-  drupal_get_messages('status', TRUE);
-  drupal_get_messages('completed', TRUE);
-  // Migrate adds its messages under the wrong type, see #1659150.
-  drupal_get_messages('ok', TRUE);
-}
-
-/**
- * Set a default user avatar as a managed file object.
- */
-function commons_set_default_avatar() {
-  global $base_url;
-  $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
-  if(file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)){
-    $picture_result = drupal_http_request($base_url . '/profiles/commons/images/avatars/user-avatar.png');
-    $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-default.jpg');
-    $picture_file = file_save_data($picture_result->data, $picture_path, FILE_EXISTS_REPLACE);
-
-    // Check to make sure the picture isn't too large for the site settings.
-    $validators = array(
-      'file_validate_is_image' => array(),
-      'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),
-      'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),
-    );
-
-    // attach photo to user's account.
-    $errors = file_validate($picture_file, $validators);
-
-    if (empty($errors)) {
-      // Update the user record.
-      $picture_file = file_save($picture_file);
-      variable_set('user_picture_default', $picture_path);
-    }
-  }
-}
diff --git a/drupal-org-core.make b/drupal-org-core.make
index 570df35..2862d2b 100644
--- a/drupal-org-core.make
+++ b/drupal-org-core.make
@@ -3,17 +3,7 @@ core = 7.x
 
 ; Download Drupal core and apply core patches if needed.
 projects[drupal][type] = "core"
-projects[drupal][version] = "7.23"
-
-; Hide the profiles under /profiles, so Commons is the only one. This allows
-; the installation to start at the Language selection screen, bypassing a
-; baffling and silly choice, especially for non-native speakers.
-; http://drupal.org/node/1780598#comment-6480088
-projects[drupal][patch][] = http://drupal.org/files/spark-install-1780598-5.patch
-; This requires a core bug fix to not show the profile selection page when only
-; one profile is visible.
-; http://drupal.org/node/1074108#comment-6463662
-projects[drupal][patch][] = http://drupal.org/files/1074108-skip-profile-16-7.x-do-not-test.patch
+projects[drupal][version] = 7.27
 
 ; This patch allows install profile to list requirements on the install page
 ; http://drupal.org/node/1971072
@@ -25,4 +15,12 @@ projects[drupal][patch][] = http://drupal.org/files/drupal-7.x-allow_profile_cha
 
 ; Allow to specify SCRIPT HTML element attributes through drupal_add_js()
 ; http://drupal.org/node/1664602#comment-6221066
-projects[drupal][patch][] = http://drupal.org/files/1664602-1.patch
\ No newline at end of file
+projects[drupal][patch][] = http://drupal.org/files/1664602-1.patch
+
+; Optimize node access queries.
+; https://drupal.org/comment/8516319#comment-8516319
+projects[drupal][patch][] = https://drupal.org/files/issues/drupal-optimize_node_access_queries-106721-D7-71-do-not-test.patch
+
+; Statically cache node access grants
+; https://drupal.org/comment/8495029#comment-8495029
+projects[drupal][patch][] = https://drupal.org/files/issues/node_access_grants-static-cache-11.patch
\ No newline at end of file
diff --git a/drupal-org.make b/drupal-org.make
index 1d5f311..5d8d0e3 100644
--- a/drupal-org.make
+++ b/drupal-org.make
@@ -3,32 +3,35 @@ core = 7.x
 
 ; Contributed modules.
 
+projects[acquia_connector][type] = "module"
+projects[acquia_connector][subdir] = "contrib"
+projects[acquia_connector][version] = "2.14"
+
 projects[addressfield][type] = "module"
 projects[addressfield][subdir] = "contrib"
-projects[addressfield][version] = "1.0-beta4"
+projects[addressfield][version] = "1.0-beta5"
 
 projects[addressfield_tokens][type] = "module"
 projects[addressfield_tokens][subdir] = "contrib"
 projects[addressfield_tokens][version] = "1.3"
 
-projects[acquia_connector][type] = "module"
-projects[acquia_connector][subdir] = "contrib"
-projects[acquia_connector][version] = "2.12"
-
-projects[advancedqueue][type] = "module"
-projects[advancedqueue][subdir] = "contrib"
-projects[advancedqueue][version] = "1.0-alpha2"
+projects[admin_icons][type] = "module"
+projects[admin_icons][subdir] = "contrib"
+projects[admin_icons][download][type] = "git"
+projects[admin_icons][download][url] = "http://git.drupal.org/project/admin_icons.git"
+projects[admin_icons][download][branch] = "7.x-1.x"
+projects[admin_icons][download][revision] = "60d9f28801533fecc92216a60d444d89d80e7611"
 
 projects[apachesolr][type] = "module"
 projects[apachesolr][subdir] = "contrib"
-projects[apachesolr][version] = "1.4"
+projects[apachesolr][version] = "1.6"
 
 projects[apachesolr_og][type] = "module"
 projects[apachesolr_og][subdir] = "contrib"
 projects[apachesolr_og][download][type] = "git"
 projects[apachesolr_og][download][url] = "http://git.drupal.org/project/apachesolr_og.git"
 projects[apachesolr_og][download][branch] = "7.x-1.x"
-projects[apachesolr_og][download]revision] = "49820b4a4fcff7c1c4efe449da033fb6d8711ac5"
+projects[apachesolr_og][download][revision] = "49820b4a4fcff7c1c4efe449da033fb6d8711ac5"
 
 projects[apachesolr_proximity][type] = "module"
 projects[apachesolr_proximity][subdir] = "contrib"
@@ -41,13 +44,16 @@ projects[apachesolr_user][download][url] = "http://git.drupal.org/project/apache
 projects[apachesolr_user][download][branch] = "7.x-1.x"
 projects[apachesolr_user][download]revision] = "a86c5aebfceaf4a3fc53544762a36ca1b70809d5"
 
-; Check the user object before trying to display a result
+; Check the user object before trying to display a result.
 ; https://drupal.org/node/2077281#comment-7807937
 projects[apachesolr_user][patch][] = "http://drupal.org/files/2077281-apache-solr-user-check-3.patch"
 
 projects[breakpoints][type] = "module"
 projects[breakpoints][subdir] = "contrib"
-projects[breakpoints][version] = "1.1"
+projects[breakpoints][download][type] = "git"
+projects[breakpoints][download][url] = "http://git.drupal.org/project/breakpoints.git"
+projects[breakpoints][download][branch] = "7.x-1.x"
+projects[breakpoints][download][revision] = "c4f3665"
 
 projects[connector][type] = "module"
 projects[connector][subdir] = "contrib"
@@ -55,34 +61,41 @@ projects[connector][version] = "1.0-beta2"
 
 projects[ckeditor][type] = "module"
 projects[ckeditor][subdir] = "contrib"
-projects[ckeditor][version] = "1.13"
+projects[ckeditor][download][type] = "git"
+projects[ckeditor][download][url] = "http://git.drupal.org/project/ckeditor.git"
+projects[ckeditor][download][branch] = "7.x-1.x"
+projects[ckeditor][download][revision] = "b69a9ac"
+
+; Only load CSS when necessary.
+; https://drupal.org/node/1370894
+projects[ckeditor][patch][] = "https://drupal.org/files/issues/attach-ckeditor-css-1370894-8.patch"
+
+; Accomodate latest Media changes.
+; https://drupal.org/node/2159403
+projects[ckeditor][patch][] = "https://drupal.org/files/issues/ckeditor-accomodate-latest-media-changes-0.patch"
+
+; Remove redundant external plugin declarations.
+; https://drupal.org/comment/8284591#comment-8284591
+projects[ckeditor][patch][] = "https://drupal.org/files/issues/ckeditor-remove-external-plugin-declarations-1-alt.patch"
 
 projects[ctools][type] = "module"
 projects[ctools][subdir] = "contrib"
 projects[ctools][download][type] = "git"
 projects[ctools][download][url] = "http://git.drupal.org/project/ctools.git"
 projects[ctools][download][branch] = "7.x-1.x"
-projects[ctools][download][revision] = "e81da7a57f63ca95d2c713afcec65a5659aada9e"
-
-; Introduce UUIDs onto panes & displays.
-; http://drupal.org/node/1277908#comment-7216356
-projects[ctools][patch][] = "http://drupal.org/files/ctools-uuids_for_exported_objects-1277908-118.patch"
+projects[ctools][download][revision] = "e720f61d"
 
 projects[custom_search][type] = "module"
 projects[custom_search][subdir] = "contrib"
-projects[custom_search][download][type] = "git"
-projects[custom_search][download][url] = "http://git.drupal.org/project/custom_search.git"
-projects[custom_search][download][branch] = "7.x-1.x"
-projects[custom_search][download][revision] = "20144e64494c83a448067d587e59df5d7e4780bb"
+projects[custom_search][version] = "1.16"
 
 ; Avoid akward sanitization of user-entered search strings.
 ; https://drupal.org/node/2012210
 projects[custom_search][patch][] = "http://drupal.org/files/commons_search_js_encode.patch"
 
-
 projects[date][type] = "module"
 projects[date][subdir] = "contrib"
-projects[date][version] = "2.6"
+projects[date][version] = "2.7"
 
 projects[date_facets][type] = "module"
 projects[date_facets][subdir] = "contrib"
@@ -97,20 +110,26 @@ projects[diff][type] = "module"
 projects[diff][subdir] = "contrib"
 projects[diff][version] = "3.2"
 
+; Profile has no recommended release.
+projects[edit_profile][type] = "module"
+projects[edit_profile][subdir] = "contrib"
+projects[edit_profile][version] = "1.0-beta2"
+
+projects[elements][type] = "module"
+projects[elements][subdir] = "contrib"
+projects[elements][version] = "1.4"
+
 projects[email_registration][type] = "module"
 projects[email_registration][subdir] = "contrib"
-projects[email_registration][version] = "1.1"
+projects[email_registration][version] = "1.2"
 
 projects[entity][type] = "module"
 projects[entity][subdir] = "contrib"
-projects[entity][version] = "1.2"
+projects[entity][version] = "1.5"
 
 projects[entitycache][type] = "module"
 projects[entitycache][subdir] = "contrib"
-projects[entitycache][download][type] = "git"
-projects[entitycache][download][url] = "http://git.drupal.org/project/entitycache.git"
-projects[entitycache][download][branch] = "7.x-1.x"
-projects[entitycache][download][revision] = "7e390b5"
+projects[entitycache][version] = "1.2"
 
 ; Fix core translation support.
 ; http://drupal.org/node/1349566#comment-7781063
@@ -118,47 +137,50 @@ projects[entitycache][patch][] = "http://drupal.org/files/add-translation-inform
 
 projects[entityreference][type] = "module"
 projects[entityreference][subdir] = "contrib"
-projects[entityreference][download][type] = "git"
-projects[entityreference][download][url] = "http://git.drupal.org/project/entityreference.git"
-projects[entityreference][download][branch] = "7.x-1.x"
-projects[entityreference][download][revision] = "1c176daef3e7483389cbebeb34784b3af6521f7f"
+projects[entityreference][version] = "1.1"
+
+projects[entityreference_prepopulate][type] = "module"
+projects[entityreference_prepopulate][subdir] = "contrib"
+projects[entityreference_prepopulate][version] = "1.5"
 
 projects[entity_translation][type] = "module"
 projects[entity_translation][subdir] = "contrib"
 projects[entity_translation][version] = "1.0-beta3"
 
-; Profile has no recommended release
-projects[edit_profile][type] = "module"
-projects[edit_profile][subdir] = "contrib"
-projects[edit_profile][version] = "1.0-beta2"
-
-projects[entityreference_prepopulate][type] = "module"
-projects[entityreference_prepopulate][subdir] = "contrib"
-projects[entityreference_prepopulate][version] = "1.3"
+projects[facetapi][type] = "module"
+projects[facetapi][subdir] = "contrib"
+projects[facetapi][version] = "1.3"
 
 projects[features][type] = "module"
 projects[features][subdir] = "contrib"
-projects[features][version] = "2.0-rc5"
+projects[features][version] = "2.0"
+
+projects[file_entity][type] = "module"
+projects[file_entity][subdir] = "contrib"
+projects[file_entity][version] = "2.0-alpha3"
+
+; Issue #2081713: Fix undefined index errors with empty (remote) files.
+; https://drupal.org/node/2081713
+projects[file_entity][patch][] = "https://drupal.org/files/issues/add-filesize-checks-2081713-13.patch"
 
 projects[flag][type] = "module"
 projects[flag][subdir] = "contrib"
-projects[flag][version] = "2.1"
+projects[flag][version] = "2.2"
 
 ; Issue #1965760: Manually set taxonomy term flag types because its different.
 ; http://drupal.org/node/1965760
-projects[flag][patch][] = "http://drupal.org/files/1965760-flag-taxonomy-types.patch"
-
-; Issue #1971980: Features export does not take flag_definition_alter into account.
-; http://drupal.org/node/1971980
-projects[flag][patch][] = "http://drupal.org/files/flag-features_export-1971980-3.patch"
+projects[flag][patch][] = "https://drupal.org/files/issues/1965760.29.flag_.entity-tokens.patch"
 
 projects[flag_abuse][type] = "module"
 projects[flag_abuse][subdir] = "contrib"
-projects[flag_abuse][version] = "2.0-alpha1"
+projects[flag_abuse][version] = "2.0"
 
-projects[redirect][type] = "module"
-projects[redirect][subdir] = "contrib"
-projects[redirect][version] = "1.0-rc1"
+projects[gravatar][type] = "module"
+projects[gravatar][subdir] = "contrib"
+projects[gravatar][download][type] = "git"
+projects[gravatar][download][url] = "http://git.drupal.org/project/gravatar.git"
+projects[gravatar][download][branch] = "7.x-1.x"
+projects[gravatar][download][revision] = "bb2f81e6"
 
 projects[http_client][type] = "module"
 projects[http_client][subdir] = "contrib"
@@ -166,7 +188,7 @@ projects[http_client][version] = "2.4"
 
 projects[i18n][type] = "module"
 projects[i18n][subdir] = "contrib"
-projects[i18n][version] = "1.10"
+projects[i18n][version] = "1.11"
 
 projects[i18nviews][type] = "module"
 projects[i18nviews][subdir] = "contrib"
@@ -175,32 +197,44 @@ projects[i18nviews][download][url] = "http://git.drupal.org/project/i18nviews.gi
 projects[i18nviews][download][branch] = "7.x-3.x"
 projects[i18nviews][download][revision] = "26bd52c"
 
-projects[admin_icons][type] = "module"
-projects[admin_icons][subdir] = "contrib"
-projects[admin_icons][download][type] = "git"
-projects[admin_icons][download][url] = "http://git.drupal.org/project/admin_icons.git"
-projects[admin_icons][download][branch] = "7.x-1.x"
-projects[admin_icons][download][revision] = "60d9f28801533fecc92216a60d444d89d80e7611"
-
 projects[kissmetrics][type] = "module"
 projects[kissmetrics][subdir] = "contrib"
 projects[kissmetrics][version] = "1.0-rc3"
 
 projects[l10n_update][type] = "module"
 projects[l10n_update][subdir] = "contrib"
-projects[l10n_update][version] = "1.0-beta3"
+projects[l10n_update][version] = "1.0"
 
 projects[libraries][type] = "module"
 projects[libraries][subdir] = "contrib"
-projects[libraries][version] = "2.1"
+projects[libraries][version] = "2.2"
 
 projects[lingotek][type] = "module"
 projects[lingotek][subdir] = "contrib"
-projects[lingotek][version] = "4.06"
+projects[lingotek][version] = "5.04"
 
 projects[link][type] = "module"
 projects[link][subdir] = "contrib"
-projects[link][version] = "1.1"
+projects[link][version] = "1.2"
+
+projects[media][type] = "module"
+projects[media][subdir] = "contrib"
+projects[media][download][type] = "git"
+projects[media][download][url] = "http://git.drupal.org/project/media.git"
+projects[media][download][branch] = "7.x-2.x"
+projects[media][download][revision] = "b2c2d78"
+
+; New filelfield browser widget is massively confusing the user
+; https://drupal.org/comment/8570379#comment-8570379
+projects[media][patch][] = "https://drupal.org/files/issues/automatically-attach-files-2216329-2.patch"
+
+projects[media_oembed][type] = "module"
+projects[media_oembed][subdir] = "contrib"
+projects[media_oembed][version] = "2.1"
+
+projects[memcache][type] = "module"
+projects[memcache][subdir] = "contrib"
+projects[memcache][version] = "1.0"
 
 projects[menu_attributes][type] = "module"
 projects[menu_attributes][subdir] = "contrib"
@@ -224,21 +258,11 @@ projects[message_notify][version] = "2.5"
 
 projects[message_subscribe][type] = "module"
 projects[message_subscribe][subdir] = "contrib"
-projects[message_subscribe][download][type] = "git"
-projects[message_subscribe][download][url] = "http://git.drupal.org/project/message_subscribe.git"
-projects[message_subscribe][download][branch] = "7.x-1.x"
-
-projects[memcache][type] = "module"
-projects[memcache][subdir] = "contrib"
-projects[memcache][version] = "1.0"
+projects[message_subscribe][version] = "1.0-rc2"
 
 projects[metatag][type] = "module"
 projects[metatag][subdir] = "contrib"
-projects[metatag][version] = "1.0-beta7"
-
-; Support for rel=author link in head.
-; http://drupal.org/node/1865228#comment-6839604
-projects[metatag][patch][] = "http://drupal.org/files/metatag-n1865228-3.patch"
+projects[metatag][version] = "1.0-beta9"
 
 projects[module_filter][type] = "module"
 projects[module_filter][subdir] = "contrib"
@@ -246,78 +270,100 @@ projects[module_filter][version] = "1.8"
 
 projects[mollom][type] = "module"
 projects[mollom][subdir] = "contrib"
-projects[mollom][version] = "2.7"
+projects[mollom][version] = "2.9"
 
 projects[navbar][type] = "module"
 projects[navbar][subdir] = "contrib"
-projects[navbar][download][type] = "git"
-projects[navbar][download][url] = "http://git.drupal.org/project/navbar.git"
-projects[navbar][download][branch] = "7.x-1.x"
-projects[navbar][download][revision] = "dd542e1a74d9c9b3a9b5bd699aad9a4b65e5c5b7"
+projects[navbar][version] = "1.4"
+
+; Change I-beam cursors in the navbar to be a pointer instead.
+; https://drupal.org/node/2173041
+projects[navbar][patch][] = "https://drupal.org/files/issues/2173041-3-i-beam-menu-hover.patch"
 
 projects[oauth][type] = "module"
 projects[oauth][subdir] = "contrib"
-projects[oauth][version] = "3.1"
+projects[oauth][version] = "3.2"
 
 projects[oauthconnector][type] = "module"
 projects[oauthconnector][subdir] = "contrib"
 projects[oauthconnector][download][type] = "git"
 projects[oauthconnector][download][url] = "http://git.drupal.org/project/oauthconnector.git"
 projects[oauthconnector][download][branch] = "7.x-1.x"
-projects[oauthconnector][download][revision] = "0ce7ac9614710c0f68d0a58cb4ae4667f8bd6fa7"
+projects[oauthconnector][download][revision] = "42c6f66"
+
+projects[oembed][type] = "module"
+projects[oembed][subdir] = "contrib"
+projects[oembed][download][type] = "git"
+projects[oembed][download][url] = "http://git.drupal.org/project/oembed.git"
+projects[oembed][download][branch] = "7.x-1.x"
+projects[oembed][download][revision] = "9aa5303"
 
 projects[og][type] = "module"
 projects[og][subdir] = "contrib"
-projects[og][version] = "2.3"
+projects[og][download][type] = "git"
+projects[og][download][url] = "http://git.drupal.org/project/og.git"
+projects[og][download][branch] = "7.x-2.x"
+projects[og][download][revision] = "10647461ce6"
 
 ; Auto-assign role to group manager broken on groups with overridden roles.
 ; https://drupal.org/node/2005800#comment-7684873
-projects[og][patch][] = "http://drupal.org/files/og-default-role-member-2005800-21.patch"
+projects[og][patch][] = "http://drupal.org/files/issues/og-default-role-member-2005800-25.patch"
 
-; og_ui should give users the theme, not admin ui when creating groups
+; og_ui should give users the theme, not admin ui when creating groups.
 ; http://drupal.org/node/1800208
 projects[og][patch][] = "http://drupal.org/files/og_ui-group_node_add_theme-1800208-5.patch"
 
-; _og_access_verify_access_field_existence() assumes node group type, throws an exception rebuilding node access.
-projects[og][patch][] = "http://drupal.org/files/og-access-rebuild-exception-group-type.patch"
-
 projects[panelizer][type] = "module"
 projects[panelizer][subdir] = "contrib"
 projects[panelizer][version] = "3.1"
 
 projects[panels][type] = "module"
 projects[panels][subdir] = "contrib"
-projects[panels][version] = "3.3"
-
-; Fatal error: Call to undefined function panels_get_layouts()
-; http://drupal.org/node/1828684#comment-6694732
-projects[panels][patch][] = "http://drupal.org/files/1828684-layout-fix-6.patch"
-
-; PHP 5.3.9 Strict Warning on Panels Empty Value
-; http://drupal.org/node/1632898#comment-6412840
-projects[panels][patch][] = "http://drupal.org/files/panels-n1632898-15.patch"
-
-; Add internationalization support.
-; http://drupal.org/node/1179034#comment-7216342
-projects[panels][patch][] = "http://drupal.org/files/panels-1179034-41_____panels-uuids-127790-100__-80.patch"
+projects[panels][download][type] = "git"
+projects[panels][download][url] = "http://git.drupal.org/project/panels.git"
+projects[panels][download][branch] = "7.x-3.x"
+projects[panels][download][revision] = "8059bda2b"
 
 projects[paranoia][type] = "module"
 projects[paranoia][subdir] = "contrib"
-projects[paranoia][version] = "1.2"
+projects[paranoia][version] = "1.3"
 
 projects[pathauto][type] = "module"
 projects[pathauto][subdir] = "contrib"
 projects[pathauto][version] = "1.2"
 
-projects[placeholder][type] = "module"
-projects[placeholder][subdir] = "contrib"
-projects[placeholder][version] = "1.0"
+projects[picture][type] = "module"
+projects[picture][subdir] = "contrib"
+projects[picture][download][type] = "git"
+projects[picture][download][url] = "http://git.drupal.org/project/picture.git"
+projects[picture][download][branch] = "7.x-1.x"
+projects[picture][download][revision] = "18b94b9"
+
+; Add ctools as a dependency
+; https://drupal.org/node/2173043
+projects[picture][patch][] = "https://drupal.org/files/issues/add-ctools-dependency-2173043-1.patch"
+
+; Allow filter tips to be translated
+; https://drupal.org/node/2139459
+projects[picture][patch][] = "https://drupal.org/files/issues/translate-filter-tips-2139459-1.patch"
+
+; Move hook_uninstall() to picture.install to fix issues on uninstall.
+; https://drupal.org/node/2173015
+projects[picture][patch][] = "https://drupal.org/files/issues/move-uninstall-hook-implementation-2173015-1.patch"
+
+; Remove implementation of hook_file_formatter_info() to remove duplicate file formatter.
+; https://drupal.org/node/2172841
+projects[picture][patch][] = "https://drupal.org/files/issues/remove-file-formatter-hook-implementation-2172831-1.patch"
+
+; Remove implementation of hook_ctools_plugin_api() to fix issues with features.
+; https://drupal.org/node/2172831
+projects[picture][patch][] = "https://drupal.org/files/issues/remove-ctools-hook-implementation-2172831-1.patch"
 
 projects[pm_existing_pages][type] = "module"
 projects[pm_existing_pages][subdir] = "contrib"
 projects[pm_existing_pages][version] = "1.4"
 
-projects[potx][type] = "module" 
+projects[potx][type] = "module"
 projects[potx][subdir] = "contrib"
 projects[potx][version] = "1.0"
 
@@ -325,11 +371,11 @@ projects[privatemsg][type] = "module"
 projects[privatemsg][subdir] = "contrib"
 projects[privatemsg][version] = "1.4"
 
-; Add preliminary Views integration
+; Add preliminary Views integration.
 ; http://drupal.org/node/1573000
 projects[privatemsg][patch][] = "http://drupal.org/files/privatemsg-1573000-64.patch"
 
-; Enable privatemsg_realname when realname is enabled
+; Enable privatemsg_realname when realname is enabled.
 ; https://drupal.org/node/2070719
 projects[privatemsg][patch][] = "http://drupal.org/files/2077223-privatemsg-realname-enabled-1.patch"
 
@@ -338,43 +384,56 @@ projects[quicktabs][subdir] = "contrib"
 projects[quicktabs][version] = "3.6"
 projects[quicktabs][patch][] = "http://drupal.org/files/2104643-revert-qt-487518-5.patch"
 
+projects[r4032login][type] = "module"
+projects[r4032login][subdir] = "contrib"
+projects[r4032login][version] = "1.7"
+
 projects[radioactivity][type] = "module"
 projects[radioactivity][subdir] = "contrib"
 projects[radioactivity][download][type] = "git"
 projects[radioactivity][download][url] = "http://git.drupal.org/project/radioactivity.git"
 projects[radioactivity][download][branch] = "7.x-2.x"
-projects[radioactivity][download][revision] = "aee21dbed4f54d0e626e3c19ecc550bf1ec656f6"
-
-; Radioactivity not compatible with Memcache module
-; http://drupal.org/node/1860216
-projects[radioactivity][patch][] = "http://drupal.org/files/radioactivity-memcache.patch"
-
-projects[r4032login][type] = "module"
-projects[r4032login][subdir] = "contrib"
-projects[r4032login][version] = "1.6"
+projects[radioactivity][download][revision] = "e3705c6ce9f07ec58fc6b7c66f39eb4f2fc51b68"
 
 projects[rate][type] = "module"
 projects[rate][subdir] = "contrib"
-projects[rate][version] = "1.6"
+projects[rate][version] = "1.7"
 
-; Add widget to node/comment $links
+; Add widget to node/comment $links.
 ; http://drupal.org/node/947516#comment-6979780
 projects[rate][patch][] = "http://drupal.org/files/947516-rate-node-links-15.patch"
 
+; Only load CSS when necessary.
+; https://drupal.org/node/2180853
+projects[rate][patch][] = "https://drupal.org/files/issues/attach-rate-css-2180853-3.patch"
+
 projects[realname][type] = "module"
 projects[realname][subdir] = "contrib"
-projects[realname][version] = "1.1"
+projects[realname][version] = "1.2"
+
+; Realname entityreference autocomplete API update
+; https://drupal.org/node/2225889
+projects[realname][patch][] = "https://drupal.org/files/issues/2225889-realname-correct-menu-2.patch"
+
+projects[redirect][type] = "module"
+projects[redirect][subdir] = "contrib"
+projects[redirect][version] = "1.0-rc1"
 
 projects[registration][subdir] = "contrib"
 projects[registration][type] = "module"
-projects[registration][version] = "1.2"
+projects[registration][version] = "1.3"
+
+projects[rich_snippets][type] = "module"
+projects[rich_snippets][subdir] = "contrib"
+projects[rich_snippets][version] = "1.0-beta3"
 
 projects[rules][type] = "module"
 projects[rules][subdir] = "contrib"
-projects[rules][download][type] = "git"
-projects[rules][download][url] = "http://git.drupal.org/project/rules.git"
-projects[rules][download][branch] = "7.x-2.x"
-projects[rules][download][revision] = "8db91e5"
+projects[rules][version] = "2.6"
+
+projects[schemaorg][type] = "module"
+projects[schemaorg][subdir] = "contrib"
+projects[schemaorg][version] = "1.0-beta4"
 
 projects[search_facetapi][type] = "module"
 projects[search_facetapi][subdir] = "contrib"
@@ -382,23 +441,11 @@ projects[search_facetapi][version] = "1.0-beta2"
 
 projects[sharethis][type] = "module"
 projects[sharethis][subdir] = "contrib"
-projects[sharethis][version] = "2.5"
+projects[sharethis][version] = "2.6"
 
-projects[facetapi][type] = "module"
-projects[facetapi][subdir] = "contrib"
-projects[facetapi][version] = "1.3"
-
-projects[rich_snippets][type] = "module"
-projects[rich_snippets][subdir] = "contrib"
-projects[rich_snippets][version] = "1.0-beta3"
-
-; Remove snippets from non-node type searches:
-; http://drupal.org/node/1923904#comment-7094488
-projects[rich_snippets][patch][] = "http://drupal.org/files/1923904-search-nodes-only.patch"
-
-projects[schemaorg][type] = "module"
-projects[schemaorg][subdir] = "contrib"
-projects[schemaorg][version] = "1.0-beta3"
+projects[smartcrop][type] = "module"
+projects[smartcrop][subdir] = "contrib"
+projects[smartcrop][version] = "1.0-beta2"
 
 projects[strongarm][type] = "module"
 projects[strongarm][subdir] = "contrib"
@@ -411,7 +458,7 @@ projects[timeago][type] = "module"
 projects[timeago][subdir] = "contrib"
 projects[timeago][version] = "2.2"
 
-; Provide a dedicated date type:
+; Provide a dedicated date type.
 ; http://drupal.org/node/1427226#comment-6638836
 projects[timeago][patch][] = "http://drupal.org/files/1427226-timeago-date-type.patch"
 
@@ -419,54 +466,54 @@ projects[title][type] = "module"
 projects[title][subdir] = "contrib"
 projects[title][version] = "1.0-alpha7"
 
-projects[translation_helpers][type] = "module"
-projects[translation_helpers][subdir] = "contrib"
-projects[translation_helpers][version] = "1.0"
-
 projects[token][type] = "module"
 projects[token][subdir] = "contrib"
 projects[token][version] = "1.5"
 
+projects[translation_helpers][type] = "module"
+projects[translation_helpers][subdir] = "contrib"
+projects[translation_helpers][version] = "1.0"
+
 projects[variable][type] = "module"
 projects[variable][subdir] = "contrib"
-projects[variable][version] = "2.3"
+projects[variable][version] = "2.5"
 
 projects[views][type] = "module"
 projects[views][subdir] = "contrib"
 projects[views][version] = "3.7"
 
-projects[views_field_view][type] = "module"
-projects[views_field_view][subdir] = "contrib"
-projects[views_field_view][version] = "1.1"
-
-projects[views_load_more][type] = "module"
-projects[views_load_more][subdir] = "contrib"
-projects[views_load_more][version] = "1.1"
+; Update Views Content access filter per core performance improvements.
+; https://drupal.org/comment/8516039#comment-8516039
+projects[views][patch][] = "https://drupal.org/files/issues/2204257-views-content-access-filter-core-depends-on-core-patch.patch"
 
 projects[views_bulk_operations][type] = "module"
 projects[views_bulk_operations][subdir] = "contrib"
-projects[views_bulk_operations][version] = "3.1"
+projects[views_bulk_operations][version] = "3.2"
+
+projects[views_field_view][type] = "module"
+projects[views_field_view][subdir] = "contrib"
+projects[views_field_view][version] = "1.1"
 
 projects[views_litepager][type] = "module"
 projects[views_litepager][subdir] = "contrib"
 projects[views_litepager][version] = "3.0"
 
-; We have the version of voting api at the top so it doesn't get included in our dev make patch.
-projects[votingapi][version] = "2.11"
+projects[views_load_more][type] = "module"
+projects[views_load_more][subdir] = "contrib"
+projects[views_load_more][version] = "1.2"
+
+; Suppress notice error when loading more content from views_load_more.
+; https://drupal.org/node/2207467
+projects[views_load_more][patch][] = "https://drupal.org/files/issues/fix-notice-undefined-index-2152935-3.patch"
+
 projects[votingapi][type] = "module"
 projects[votingapi][subdir] = "contrib"
+projects[votingapi][version] = "2.11"
 
 projects[voting_rules][type] = "module"
 projects[voting_rules][subdir] = "contrib"
 projects[voting_rules][version] = "1.0-alpha1"
 
-; Registry Rebuild
-; We can probably remove this later, but for now keep it included
-; See https://drupal.org/node/1983606#comment-7788313 for more information.
-projects[registry_rebuild][version] = "1.10"
-projects[registry_rebuild][type] = "module"
-projects[registry_rebuild][subdir] = "contrib"
-
 ; Contributed themes.
 
 projects[adaptivetheme][type] = "theme"
@@ -474,34 +521,50 @@ projects[adaptivetheme][subdir] = "contrib"
 projects[adaptivetheme][download][type] = "git"
 projects[adaptivetheme][download][url] = "http://git.drupal.org/project/adaptivetheme.git"
 projects[adaptivetheme][download][branch] = "7.x-3.x"
-projects[adaptivetheme][download][revision] = "b4b38c3c01d066e733c2942020c51962cd64231c"
+projects[adaptivetheme][download][revision] = "18693ff59db7cb3171f282a982d04fe6544b63a1"
 
-; Remove link around comment creation date.
-; http://drupal.org/node/1427226#comment-6638836
-projects[adaptivetheme][patch][] = "http://drupal.org/files/remove-comment-creation-link-2018081-1.patch"
+projects[ember][type] = "theme"
+projects[ember][subdir] = "contrib"
+projects[ember][download][type] = "git"
+projects[ember][download][url] = "http://git.drupal.org/project/ember.git"
+projects[ember][download][branch] = "7.x-2.x"
+projects[ember][download][revision] = "caf4df7"
 
 projects[sky][type] = "theme"
 projects[sky][subdir] = "contrib"
-projects[sky][version] = "3.0-rc1"
+projects[sky][version] = "3.0"
 
 ; Libraries.
 ; NOTE: These need to be listed in http://drupal.org/packaging-whitelist.
-libraries[underscore][download][type] = "get"
-libraries[underscore][type] = "libraries"
-libraries[underscore][download][url] = "https://github.com/jashkenas/underscore/archive/1.4.4.zip"
 
 libraries[backbone][download][type] = "get"
 libraries[backbone][type] = "libraries"
-libraries[backbone][download][url] = "https://github.com/jashkenas/backbone/archive/1.0.0.tar.gz"
+libraries[backbone][download][url] = "https://github.com/jashkenas/backbone/archive/1.1.0.tar.gz"
 
 libraries[ckeditor][download][type] = "get"
-libraries[ckeditor][download][url] = "http://download.cksource.com/CKEditor/CKEditor/CKEditor%204.0/ckeditor_4.0_full.tar.gz"
+libraries[ckeditor][download][url] = "http://download.cksource.com/CKEditor/CKEditor/CKEditor%204.3.4/ckeditor_4.3.4_full.zip"
 libraries[ckeditor][type] = "libraries"
 
-libraries[placeholder][download][type] = "get"
-libraries[placeholder][type] = "libraries"
-libraries[placeholder][download][url] = "https://github.com/mathiasbynens/jquery-placeholder/archive/v2.0.7.tar.gz"
+libraries[ckeditor_lineutils][download][type] = "get"
+libraries[ckeditor_lineutils][download][url] = "http://download.ckeditor.com/lineutils/releases/lineutils_4.3.4.zip"
+libraries[ckeditor_lineutils][type] = "libraries"
+libraries[ckeditor_lineutils][subdir] = "ckeditor/plugins"
+libraries[ckeditor_lineutils][directory_name] = "lineutils"
+
+libraries[ckeditor_widget][download][type] = "get"
+libraries[ckeditor_widget][download][url] = "http://download.ckeditor.com/widget/releases/widget_4.3.4.zip"
+libraries[ckeditor_widget][type] = "libraries"
+libraries[ckeditor_widget][subdir] = "ckeditor/plugins"
+libraries[ckeditor_widget][directory_name] = "widget"
+
+libraries[modernizr][download][type] = "get"
+libraries[modernizr][type] = "libraries"
+libraries[modernizr][download][url] = "https://github.com/Modernizr/Modernizr/archive/v2.7.1.tar.gz"
 
 libraries[timeago][download][type] = "get"
 libraries[timeago][type] = "libraries"
-libraries[timeago][download][url] = "https://raw.github.com/rmm5t/jquery-timeago/v1.3.0/jquery.timeago.js"
+libraries[timeago][download][url] = "https://raw.github.com/rmm5t/jquery-timeago/v1.4.0/jquery.timeago.js"
+
+libraries[underscore][download][type] = "get"
+libraries[underscore][type] = "libraries"
+libraries[underscore][download][url] = "https://github.com/jashkenas/underscore/archive/1.5.2.zip"
diff --git a/modules/commons/commons_activity_streams/commons_activity_page/commons_activity_page.info b/modules/commons/commons_activity_streams/commons_activity_page/commons_activity_page.info
index c025d73..d8620ea 100644
--- a/modules/commons/commons_activity_streams/commons_activity_page/commons_activity_page.info
+++ b/modules/commons/commons_activity_streams/commons_activity_page/commons_activity_page.info
@@ -2,13 +2,10 @@ name = Commons Activity Page
 description = Allows users to view a stream of site-wide and personalized activity.
 core = 7.x
 package = Commons - Landing pages
-project = commons_activity_page
 dependencies[] = commons_activity_streams
 dependencies[] = commons_featured
 dependencies[] = ctools
 dependencies[] = page_manager
-dependencies[] = panels
-dependencies[] = panels_ipe
 features[ctools][] = page_manager:pages_default:1
 features[features_api][] = api:2
 features[page_manager_pages][] = commons_activity_streams_activity
diff --git a/modules/commons/commons_activity_streams/commons_activity_streams.features.inc b/modules/commons/commons_activity_streams/commons_activity_streams.features.inc
index e0006bb..23366ab 100644
--- a/modules/commons/commons_activity_streams/commons_activity_streams.features.inc
+++ b/modules/commons/commons_activity_streams/commons_activity_streams.features.inc
@@ -41,9 +41,9 @@ function commons_activity_streams_default_message_type() {
           "safe_value" : "[message:user:picture:35x35]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E commented on \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E commented on \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E commented on \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E commented on \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E"
         },
         {
           "value" : "[commons-groups:in-groups-text]",
@@ -70,9 +70,9 @@ function commons_activity_streams_default_message_type() {
           "safe_value" : "[message:user:picture:35x35]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E created \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E created \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E created \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E created \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E"
         },
         {
           "value" : "[commons-groups:in-groups-text]",
diff --git a/modules/commons/commons_activity_streams/commons_activity_streams.info b/modules/commons/commons_activity_streams/commons_activity_streams.info
index 25fecdc..665ad02 100644
--- a/modules/commons/commons_activity_streams/commons_activity_streams.info
+++ b/modules/commons/commons_activity_streams/commons_activity_streams.info
@@ -1,7 +1,6 @@
 name = Commons Activity Streams
 core = 7.x
 package = Commons - Building blocks
-project = commons_activity_streams
 dependencies[] = commons_follow
 dependencies[] = ctools
 dependencies[] = entity
@@ -14,7 +13,6 @@ dependencies[] = token
 dependencies[] = views
 dependencies[] = views_content
 dependencies[] = views_load_more
-datestamp = 1361203022
 features[ctools][] = strongarm:strongarm:1
 features[ctools][] = views:views_default:3.0
 features[features_api][] = api:2
diff --git a/modules/commons/commons_activity_streams/commons_activity_streams.install b/modules/commons/commons_activity_streams/commons_activity_streams.install
index ef910f2..bc0e8ec 100644
--- a/modules/commons/commons_activity_streams/commons_activity_streams.install
+++ b/modules/commons/commons_activity_streams/commons_activity_streams.install
@@ -40,3 +40,15 @@ function commons_activity_streams_update_3104() {
   features_revert($revert);
   return array();
 }
+
+/**
+ * Remove duplicative node access filters from Commons Activity Streams views.
+ */
+function commons_activity_streams_update_3105() {
+  $revert = array(
+    'commons_activity_streams' => array('views_view'),
+    'commons_activity_streams_groups' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
diff --git a/modules/commons/commons_activity_streams/commons_activity_streams.module b/modules/commons/commons_activity_streams/commons_activity_streams.module
index d0bc8df..0f0641b 100644
--- a/modules/commons/commons_activity_streams/commons_activity_streams.module
+++ b/modules/commons/commons_activity_streams/commons_activity_streams.module
@@ -54,8 +54,12 @@ function commons_activity_streams_node_insert($node) {
 function commons_activity_streams_comment_insert($comment) {
   $account = user_load($comment->uid);
   $node = node_load($comment->nid);
+  // Allow other modules to change the message type used for this event.
+  $hook = 'comment_insert';
+  $message_type = 'commons_activity_streams_comment_created';
+  drupal_alter('commons_activity_streams_message_selection', $message_type, $hook, $node);
+  $message = message_create($message_type, array('uid' => $account->uid, 'timestamp' => $comment->created));
 
-  $message = message_create('commons_activity_streams_comment_created', array('uid' => $account->uid, 'timestamp' => $comment->created));
   // Save reference to the node in the node reference field, and the
   // "publish" state (i.e. if the node is published or unpublished).
   $wrapper = entity_metadata_wrapper('message', $message);
diff --git a/modules/commons/commons_activity_streams/commons_activity_streams.views_default.inc b/modules/commons/commons_activity_streams/commons_activity_streams.views_default.inc
index c7d1a75..f8d811d 100644
--- a/modules/commons/commons_activity_streams/commons_activity_streams.views_default.inc
+++ b/modules/commons/commons_activity_streams/commons_activity_streams.views_default.inc
@@ -79,11 +79,6 @@ function commons_activity_streams_views_default_views() {
   $handler->display->display_options['arguments']['mid']['summary']['format'] = 'default_summary';
   $handler->display->display_options['arguments']['mid']['summary_options']['items_per_page'] = '25';
   $handler->display->display_options['arguments']['mid']['break_phrase'] = TRUE;
-  /* Filter criterion: Content access: Access */
-  $handler->display->display_options['filters']['nid']['id'] = 'nid';
-  $handler->display->display_options['filters']['nid']['table'] = 'node_access';
-  $handler->display->display_options['filters']['nid']['field'] = 'nid';
-  $handler->display->display_options['filters']['nid']['relationship'] = 'field_target_nodes_target_id';
   /* Filter criterion: Content: Published or admin */
   $handler->display->display_options['filters']['status_extra']['id'] = 'status_extra';
   $handler->display->display_options['filters']['status_extra']['table'] = 'node';
@@ -147,13 +142,6 @@ function commons_activity_streams_views_default_views() {
   $handler->display->display_options['filters']['status_extra']['table'] = 'node';
   $handler->display->display_options['filters']['status_extra']['field'] = 'status_extra';
   $handler->display->display_options['filters']['status_extra']['relationship'] = 'field_target_nodes_target_id';
-  /* Filter criterion: Content access: Access */
-  $handler->display->display_options['filters']['nid']['id'] = 'nid';
-  $handler->display->display_options['filters']['nid']['table'] = 'node_access';
-  $handler->display->display_options['filters']['nid']['field'] = 'nid';
-  $handler->display->display_options['filters']['nid']['relationship'] = 'field_target_nodes_target_id';
-  $handler->display->display_options['pane_category']['name'] = 'Commons';
-  $handler->display->display_options['pane_category']['weight'] = '0';
 
   /* Display: Activity - Full view */
   $handler = $view->new_display('panel_pane', 'Activity - Full view', 'panel_pane_3');
@@ -256,11 +244,6 @@ function commons_activity_streams_views_default_views() {
   $handler->display->display_options['arguments']['user']['summary']['number_of_records'] = '0';
   $handler->display->display_options['arguments']['user']['summary']['format'] = 'default_summary';
   $handler->display->display_options['arguments']['user']['summary_options']['items_per_page'] = '25';
-  /* Filter criterion: Content access: Access */
-  $handler->display->display_options['filters']['nid']['id'] = 'nid';
-  $handler->display->display_options['filters']['nid']['table'] = 'node_access';
-  $handler->display->display_options['filters']['nid']['field'] = 'nid';
-  $handler->display->display_options['filters']['nid']['relationship'] = 'field_target_nodes_target_id';
   /* Filter criterion: Content: Published or admin */
   $handler->display->display_options['filters']['status_extra']['id'] = 'status_extra';
   $handler->display->display_options['filters']['status_extra']['table'] = 'node';
diff --git a/modules/commons/commons_activity_streams/commons_activity_streams_groups/commons_activity_streams_groups.info b/modules/commons/commons_activity_streams/commons_activity_streams_groups/commons_activity_streams_groups.info
index 9a82caf..b6b2ea0 100644
--- a/modules/commons/commons_activity_streams/commons_activity_streams_groups/commons_activity_streams_groups.info
+++ b/modules/commons/commons_activity_streams/commons_activity_streams_groups/commons_activity_streams_groups.info
@@ -2,7 +2,6 @@ name = Commons Activity Streams Groups
 description = Contains Organic Groups integration for Commons Activity Streams
 core = 7.x
 package = Commons - Building blocks
-project = commons_activity_streams_groups
 dependencies[] = commons_activity_streams
 dependencies[] = entity
 dependencies[] = views
diff --git a/modules/commons/commons_activity_streams/commons_activity_streams_groups/commons_activity_streams_groups.views_default.inc b/modules/commons/commons_activity_streams/commons_activity_streams_groups/commons_activity_streams_groups.views_default.inc
index 8c1878b..002e115 100644
--- a/modules/commons/commons_activity_streams/commons_activity_streams_groups/commons_activity_streams_groups.views_default.inc
+++ b/modules/commons/commons_activity_streams/commons_activity_streams_groups/commons_activity_streams_groups.views_default.inc
@@ -75,11 +75,6 @@ function commons_activity_streams_groups_views_default_views() {
   $handler->display->display_options['arguments']['gid']['summary']['number_of_records'] = '0';
   $handler->display->display_options['arguments']['gid']['summary']['format'] = 'default_summary';
   $handler->display->display_options['arguments']['gid']['summary_options']['items_per_page'] = '25';
-  /* Filter criterion: Content access: Access */
-  $handler->display->display_options['filters']['nid']['id'] = 'nid';
-  $handler->display->display_options['filters']['nid']['table'] = 'node_access';
-  $handler->display->display_options['filters']['nid']['field'] = 'nid';
-  $handler->display->display_options['filters']['nid']['relationship'] = 'field_target_nodes_target_id';
   /* Filter criterion: Content: Published or admin */
   $handler->display->display_options['filters']['status_extra']['id'] = 'status_extra';
   $handler->display->display_options['filters']['status_extra']['table'] = 'node';
diff --git a/modules/commons/commons_body/commons_body.info b/modules/commons/commons_body/commons_body.info
index d5b2909..03c3d20 100644
--- a/modules/commons/commons_body/commons_body.info
+++ b/modules/commons/commons_body/commons_body.info
@@ -2,7 +2,6 @@ name = Commons Body Field
 description = Provides a simple body field for re-use by various Commons content types
 core = 7.x
 package = Commons - Building blocks
-project = commons_body
 dependencies[] = features
 dependencies[] = field_sql_storage
 dependencies[] = text
diff --git a/modules/commons/commons_bw/commons_bw.info b/modules/commons/commons_bw/commons_bw.info
index a0d26df..2ce9fb3 100644
--- a/modules/commons/commons_bw/commons_bw.info
+++ b/modules/commons/commons_bw/commons_bw.info
@@ -1,7 +1,9 @@
 name = Commons Tabbed Browsing Widget
 core = 7.x
 package = Commons - Building blocks
+dependencies[] = commons_groups
 dependencies[] = features
+dependencies[] = og
 dependencies[] = quicktabs
 dependencies[] = quicktabs_tabstyles
 dependencies[] = title
diff --git a/modules/commons/commons_bw/commons_bw.module b/modules/commons/commons_bw/commons_bw.module
index 7ae7e15..0c32197 100644
--- a/modules/commons/commons_bw/commons_bw.module
+++ b/modules/commons/commons_bw/commons_bw.module
@@ -8,14 +8,14 @@ function commons_bw_system_info_alter(&$info, $file, $type) {
     foreach (node_type_get_types() as $node_type) {
       $type = $node_type->type;
       if (commons_bw_node_auto_title_instance($type)) {
-        $info['features']['field_instance'][] = "node-$type-title_field";  
+        $info['features']['field_instance'][] = "node-$type-title_field";
       }
     }
   }
 }
 
 /**
- * Implementation of hook_ctools_plugin_directory().
+ * Implements hook_ctools_plugin_directory().
  */
 function commons_bw_ctools_plugin_directory($module, $plugin) {
   if ($module == 'ctools' && $plugin == 'content_types') {
@@ -186,7 +186,7 @@ function commons_bw_partial_node_form($form, &$form_state, $bundle, $group_id =
   // Add the commons_bw after build first, in case other pre-renders needs need
   // to address fields by there CSS ID.
   array_unshift($form['#pre_render'], 'commons_bw_partial_node_form_after_build');
-
+  $form['#validate'][] = 'commons_bw_partial_node_form_validate';
   return $form;
 }
 
@@ -232,6 +232,10 @@ function commons_bw_partial_node_form_validate($form, $form_state) {
   $node = $form['#entity'];
   field_attach_validate('node', $node);
   node_validate($node, $form, $form_state);
+  if ((!module_exists('commons_trusted_contacts') || (module_exists('commons_trusted_contacts') && !module_exists('og_access'))) && empty($form_state['group_id']) && empty($form_state['values'][OG_AUDIENCE_FIELD][LANGUAGE_NONE][0])) {
+    form_set_error(OG_AUDIENCE_FIELD, t('Please enter one or more groups where this content will be posted.'));
+    return FALSE;
+  }
 }
 
 /**
@@ -282,11 +286,22 @@ function commons_bw_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
     return;
   }
 
+  // See if we're building for the first time, or getting pre-saved values.
   $field_name = $form['#field']['field_name'];
+  if(!empty($form_state['field'][$field_name][LANGUAGE_NONE]['instance']['display_in_partial_form'])) {
+    $display_default = $form_state['field'][$field_name][LANGUAGE_NONE]['instance']['display_in_partial_form'];
+  }
+  else if (isset($form_state['build_info']['args'][0]['display_in_partial_form'])) {
+    $display_default = $form_state['build_info']['args'][0]['display_in_partial_form'];
+  }
+  else {
+    $display_default = FALSE;
+  }
+
   $form['instance']['display_in_partial_form'] = array(
     '#type' => 'checkbox',
     '#title' => t('Display in the browsing widget mini-form'),
-    '#default_value' => !empty($form_state['field'][$field_name][LANGUAGE_NONE]['instance']['display_in_partial_form']) ? $form_state['field'][$field_name][LANGUAGE_NONE]['instance']['display_in_partial_form'] : FALSE,
+    '#default_value' => $display_default,
   );
 }
 
@@ -307,7 +322,7 @@ function commons_bw_get_tab_definitions($widget_type = 'group') {
  * Helper function to determine whether Commons_BW should define a title
  * field instance on behalf of a content type.
  */
-function commons_bw_node_auto_title_instance($node_type) {  
+function commons_bw_node_auto_title_instance($node_type) {
   $commons_groups_entity_types = commons_groups_get_group_content_entity_types();
   $return = isset($commons_groups_entity_types['node'][$node_type]['auto_title_instance']) ? $commons_groups_entity_types['node'][$node_type]['auto_title_instance'] : TRUE;
   return $return;
diff --git a/modules/commons/commons_bw/js/partial_node_form.js b/modules/commons/commons_bw/js/partial_node_form.js
index 972b3e3..2c4d1a8 100644
--- a/modules/commons/commons_bw/js/partial_node_form.js
+++ b/modules/commons/commons_bw/js/partial_node_form.js
@@ -40,13 +40,23 @@ Drupal.behaviors.commonsBwExpandableForm = {
           }).append(toggleText),
           triggerField = form.find('.trigger-field'),
           fullFormLink = form.find('a.full-form'),
-          hideables = form.find('.hideable-field');
+          hideables = form.find('.hideable-field'),
+          errors = form.find('.error');
 
-      // Add the toggle link to the top of the form.
-      form.prepend(toggle).addClass('expandable-form compact-form');
+      // Determine if the form has any errors.
+      if (!errors.length) {
+        // Forms with errors are shown expanded, so only add the toggle link to
+        // the top of forms which are error free.
+        form.prepend(toggle).addClass('expandable-form compact-form');
 
-      // Hide the hidden fields on load.
-      hideables.addClass('element-invisible');
+        // Hide the hidden fields on load.
+        hideables.addClass('element-invisible');
+      }
+      else {
+        // The full form link is only shown on collapsed forms so it is hidden
+        // for consistency.
+        fullFormLink.addClass('element-hidden');
+      }
 
       // Make all hidden fields visible when the trigger field comes into
       // focus.
diff --git a/modules/commons/commons_content_moderation/commons_content_moderation.info b/modules/commons/commons_content_moderation/commons_content_moderation.info
index 703064f..3dd7cef 100644
--- a/modules/commons/commons_content_moderation/commons_content_moderation.info
+++ b/modules/commons/commons_content_moderation/commons_content_moderation.info
@@ -2,13 +2,11 @@ name = Commons Content moderation
 description = Commons Content moderation
 core = 7.x
 package = Commons - Building Blocks
-project = commons_content_moderation
 dependencies[] = ctools
 dependencies[] = flag
 dependencies[] = flag_abuse
 dependencies[] = strongarm
 dependencies[] = views
-datestamp = 1354747310
 features[ctools][] = strongarm:strongarm:1
 features[ctools][] = views:views_default:3.0
 features[features_api][] = api:2
diff --git a/modules/commons/commons_content_moderation/commons_content_moderation.install b/modules/commons/commons_content_moderation/commons_content_moderation.install
new file mode 100644
index 0000000..ed3d510
--- /dev/null
+++ b/modules/commons/commons_content_moderation/commons_content_moderation.install
@@ -0,0 +1,20 @@
+<?php
+
+/**
+ * Change content moderation views permission.
+ */
+function commons_content_moderation_update_7001() {
+  $revert = array(
+    'commons_content_moderation' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
+
+/**
+ * Clear views cache to have content moderation view use new permission.
+ */
+function commons_content_moderation_update_7002() {
+  cache_clear_all('*', 'cache_views', TRUE);
+}
+
diff --git a/modules/commons/commons_content_moderation/commons_content_moderation.module b/modules/commons/commons_content_moderation/commons_content_moderation.module
index 3e9c917..b76ff26 100644
--- a/modules/commons/commons_content_moderation/commons_content_moderation.module
+++ b/modules/commons/commons_content_moderation/commons_content_moderation.module
@@ -80,10 +80,26 @@ function commons_content_moderation_views_default_views_alter(&$views) {
 }
 
 /**
-  * Implements hook_views_bulk_operations_form_alter().
-  */
+ * Implements hook_views_pre_build().
+ *
+ * A check when VBO is being used on the content moderation views, make sure
+ * the user has the correct permissions.
+ */
+function commons_content_moderation_views_pre_build(&$view) {
+
+  if ($view->name == 'commons_content_moderation_reported_nodes'
+    && !module_exists('actions_permissions')
+    && (!user_access('administer content') || !user_access('administer users'))) {
+    unset($view->field['views_bulk_operations']);
+    unset($view->display_handler->handlers['field']['views_bulk_operations']);
+  }
+}
+
+/**
+ * Implements hook_views_bulk_operations_form_alter().
+ */
 function commons_content_moderation_views_bulk_operations_form_alter(&$form, $form_state, $vbo) {
-  if(!isset($vbo->options['vbo_operations']['action::commons_content_moderation_delete_node_block_user'])) {
+  if (!isset($vbo->options['vbo_operations']['action::commons_content_moderation_delete_node_block_user'])) {
     return;
   }
   if ($form_state['step'] == 'views_form_views_form' && $vbo->options['vbo_operations']['action::commons_content_moderation_delete_node_block_user']['selected'] == 1) {
diff --git a/modules/commons/commons_content_moderation/commons_content_moderation.views_default.inc b/modules/commons/commons_content_moderation/commons_content_moderation.views_default.inc
index 5b64768..50f6eee 100644
--- a/modules/commons/commons_content_moderation/commons_content_moderation.views_default.inc
+++ b/modules/commons/commons_content_moderation/commons_content_moderation.views_default.inc
@@ -306,10 +306,8 @@ function commons_content_moderation_views_default_views() {
   $handler = $view->new_display('default', 'Defaults', 'default');
   $handler->display->display_options['title'] = 'Reported content';
   $handler->display->display_options['use_more_always'] = FALSE;
-  $handler->display->display_options['access']['type'] = 'role';
-  $handler->display->display_options['access']['role'] = array(
-    2 => '2',
-  );
+  $handler->display->display_options['access']['type'] = 'perm';
+  $handler->display->display_options['access']['perm'] = 'administer nodes';
   $handler->display->display_options['cache']['type'] = 'none';
   $handler->display->display_options['query']['type'] = 'views_query';
   $handler->display->display_options['query']['options']['distinct'] = TRUE;
diff --git a/modules/commons/commons_documents/commons_documents.features.field_instance.inc b/modules/commons/commons_documents/commons_documents.features.field_instance.inc
index c8d7138..008013d 100644
--- a/modules/commons/commons_documents/commons_documents.features.field_instance.inc
+++ b/modules/commons/commons_documents/commons_documents.features.field_instance.inc
@@ -83,7 +83,7 @@ function commons_documents_field_default_field_instances() {
     'settings' => array(
       'description_field' => 1,
       'file_directory' => '',
-      'file_extensions' => 'doc docx xls xlsx ppt pptx odt odp ods pdf',
+      'file_extensions' => 'txt doc docx xls xlsx ppt pptx odt odp ods pdf',
       'max_filesize' => '',
       'user_register_form' => FALSE,
     ),
diff --git a/modules/commons/commons_documents/commons_documents.info b/modules/commons/commons_documents/commons_documents.info
index ab82144..4ab55b1 100644
--- a/modules/commons/commons_documents/commons_documents.info
+++ b/modules/commons/commons_documents/commons_documents.info
@@ -1,7 +1,6 @@
 name = Commons Documents
 core = 7.x
 package = Commons - Content types
-project = commons_documents
 dependencies[] = commons_body
 dependencies[] = commons_groups
 dependencies[] = commons_topics
diff --git a/modules/commons/commons_documents/commons_documents.install b/modules/commons/commons_documents/commons_documents.install
index 6bfcd2a..3b00af8 100644
--- a/modules/commons/commons_documents/commons_documents.install
+++ b/modules/commons/commons_documents/commons_documents.install
@@ -43,3 +43,36 @@ function commons_documents_update_7003() {
   features_revert($revert);
   return array();
 }
+
+/**
+ * Display sticky content at top of lists.
+ */
+function commons_documents_update_7004() {
+  $revert = array(
+    'commons_documents' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
+
+/**
+ * Add .txt to the list of allowed file extensions.
+ */
+function commons_documents_update_7005() {
+  $revert = array(
+    'commons_documents' => array('field_instance'),
+  );
+  features_revert($revert);
+  return array();
+}
+
+/**
+ * Add links to node teasers in the browsing widget.
+ */
+function commons_documents_update_7006() {
+  $revert = array(
+    'commons_documents' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
diff --git a/modules/commons/commons_documents/commons_documents.module b/modules/commons/commons_documents/commons_documents.module
index b65e298..ec586e2 100644
--- a/modules/commons/commons_documents/commons_documents.module
+++ b/modules/commons/commons_documents/commons_documents.module
@@ -85,12 +85,13 @@ function commons_documents_views_pre_render(&$view) {
 }
 
 /**
- * Implements hook_commons_entity_integration.
+ * Implements hook_commons_entity_integration().
  */
 function commons_documents_commons_entity_integration() {
   return array(
     'node' => array(
       'document' => array(
+        'is_group_content' => TRUE,
       ),
     ),
   );
diff --git a/modules/commons/commons_documents/commons_documents.views_default.inc b/modules/commons/commons_documents/commons_documents.views_default.inc
index 4b21a2d..faa8352 100644
--- a/modules/commons/commons_documents/commons_documents.views_default.inc
+++ b/modules/commons/commons_documents/commons_documents.views_default.inc
@@ -36,7 +36,6 @@ function commons_documents_views_default_views() {
   $handler->display->display_options['pager']['options']['quantity'] = '9';
   $handler->display->display_options['style_plugin'] = 'default';
   $handler->display->display_options['row_plugin'] = 'node';
-  $handler->display->display_options['row_options']['links'] = FALSE;
   /* Header: Global: Node partial form */
   $handler->display->display_options['header']['commons_bw_node_partial_form']['id'] = 'commons_bw_node_partial_form';
   $handler->display->display_options['header']['commons_bw_node_partial_form']['table'] = 'views';
@@ -64,6 +63,7 @@ function commons_documents_views_default_views() {
   $handler->display->display_options['sorts']['sticky']['id'] = 'sticky';
   $handler->display->display_options['sorts']['sticky']['table'] = 'node';
   $handler->display->display_options['sorts']['sticky']['field'] = 'sticky';
+  $handler->display->display_options['sorts']['sticky']['order'] = 'DESC';
   /* Sort criterion: Content: Post date */
   $handler->display->display_options['sorts']['created']['id'] = 'created';
   $handler->display->display_options['sorts']['created']['table'] = 'node';
diff --git a/modules/commons/commons_events/commons_events.info b/modules/commons/commons_events/commons_events.info
index 485a8ea..cb67595 100644
--- a/modules/commons/commons_events/commons_events.info
+++ b/modules/commons/commons_events/commons_events.info
@@ -2,7 +2,6 @@ name = Commons Events
 description = Provides the Event features for Drupal Commons.
 core = 7.x
 package = Commons - Content types
-project = commons_events
 dependencies[] = addressfield
 dependencies[] = addressfield_tokens
 dependencies[] = block
@@ -29,17 +28,14 @@ dependencies[] = og
 dependencies[] = options
 dependencies[] = page_manager
 dependencies[] = radioactivity
-dependencies[] = rdf
 dependencies[] = registration
 dependencies[] = registration_views
-dependencies[] = schemaorg
 dependencies[] = strongarm
 dependencies[] = taxonomy
 dependencies[] = text
 dependencies[] = views
 dependencies[] = views_content
 dependencies[] = views_load_more
-datestamp = 1357735760
 features[ctools][] = page_manager:pages_default:1
 features[ctools][] = strongarm:strongarm:1
 features[ctools][] = views:views_default:3.0
diff --git a/modules/commons/commons_events/commons_events.module b/modules/commons/commons_events/commons_events.module
index f055a12..592955a 100644
--- a/modules/commons/commons_events/commons_events.module
+++ b/modules/commons/commons_events/commons_events.module
@@ -60,6 +60,7 @@ function commons_events_theme($existing, $type, $theme, $path) {
     'commons_events_attending_event' => array(
       'variables' => array(
         'event' => NULL,
+        'attendee_count' => NULL,
       ),
       'file' => '/includes/commons_events.theme.inc',
     ),
@@ -85,7 +86,7 @@ function commons_events_theme($existing, $type, $theme, $path) {
         'attributes_end' => array(),
         'rdf_mapping' => NULL,
         'add_rdf' => NULL,
-      )
+      ),
     ),
     'commons_events_date_display_range_simple' => array(
       'variables' => array(
@@ -102,7 +103,7 @@ function commons_events_theme($existing, $type, $theme, $path) {
         'attributes_end' => array(),
         'rdf_mapping' => NULL,
         'add_rdf' => NULL,
-      )
+      ),
     ),
   );
 }
@@ -182,16 +183,9 @@ function commons_events_date_popup_element_process($element, &$form_state, $form
  */
 function commons_events_entity_view_alter(&$build, $type) {
   if ($build['#entity_type'] == 'node' && $build['#bundle'] == 'event') {
-    $attendee_count = db_select('registration', 'r')
-      ->fields('r')
-      ->condition('entity_id', $build['#node']->nid)
-      ->condition('entity_type', 'node')
-      ->countQuery()
-      ->execute()
-      ->fetchField();
-    $build['attendee_count'] = $attendee_count;
+
     $build['attending'] = array(
-      0 => theme('commons_events_attending_event', array('event' => $build['#node'], 'attendee_count' => $attendee_count)),
+      0 => theme('commons_events_attending_event', array('event' => $build['#node'], 'attendee_count' => commons_events_get_raw_attendee_count($build['#node']))),
       '#weight' => -10,
     );
     $vars = array(
@@ -199,15 +193,14 @@ function commons_events_entity_view_alter(&$build, $type) {
     );
     // Don't show the address if the event location is only online.
     $field_location = field_view_field('node', $build['#node'], 'field_location');
-    $field_location = $field_location['#items']['0']['value'];
-    if ($field_location == 'online') {
+    if (isset($field_location['#items']['0']['value']) && $field_location['#items']['0']['value'] == 'online') {
       unset($build['field_address']);
     }
   }
 }
 
 /**
- * Implements hook_form_FORM_ID_alter();
+ * Implements hook_form_FORM_ID_alter().
  */
 function commons_events_form_node_form_alter(&$form, &$form_state) {
   if ($form_state['node']->type == 'event') {
@@ -285,12 +278,13 @@ function commons_events_form_node_form_alter(&$form, &$form_state) {
 }
 
 /**
- * Implements hook_commons_entity_integration.
+ * Implements hook_commons_entity_integration().
  */
 function commons_events_commons_entity_integration() {
   return array(
     'node' => array(
       'event' => array(
+        'is_group_content' => TRUE,
       ),
     ),
   );
@@ -373,8 +367,8 @@ function commons_events_token_info_alter(&$tokens) {
  * Implements hook_commons_bw_create_all_widget().
  */
 function commons_events_commons_bw_create_all_widget($group) {
-   if (og_user_access('node', $group->nid, 'create event content')) {
-      $link = l(t('List an event'),'node/add/event',
+  if (og_user_access('node', $group->nid, 'create event content')) {
+    $link = l(t('List an event'),'node/add/event',
       array('attributes' => array('class' => 'commons-events-create'), 'query' => array('og_group_ref' => $group->nid))
     );
     return array(
@@ -396,7 +390,7 @@ function commons_events_tokens($type, $tokens, array $data = array(), array $opt
     $event = $data['node'];
     foreach ($tokens as $name => $original) {
       if ($name == 'attend-form') {
-        $replacements[$original] = theme('commons_events_attending_event', array('event' => $event));
+        $replacements[$original] = theme('commons_events_attending_event', array('event' => $event, 'attendee_count' => commons_events_get_raw_attendee_count($event)));
       }
     }
   }
@@ -475,14 +469,15 @@ function commons_events_block_view($delta = '') {
     && empty($user->uid)) {
     return array(
       'subject' => NULL,
-      'content' => t('You must !login first to list an event.', array('!login' => l(t('log in'), 'user'))),
+      'content' => t('You must !login in order to list events.', array('!login' => l(t('log in'), 'user'))),
     );
   }
 }
 
 /**
- * Returns specific HTML for a date element formatted with the event formatter M j Y - g:ia
- * We the do some awesome stuff with regular expressions to take all the different formats available to us and format it pretty.
+ * Returns specific HTML for a date element formatted with the event formatter M j Y - g:ia.
+ * We the do some awesome stuff with regular expressions to take all the
+ * different formats available to us and format it pretty.
  */
 function theme_commons_events_date_display_range_simple($variables) {
   // Use the regular date formatter if we are any other date format than below.
@@ -517,7 +512,8 @@ function theme_commons_events_date_display_single($variables) {
 }
 /**
  * Returns specific HTML for a date element formatted with the event formatter.
- * We parse the date segments and return it at the bottom, or use the simple formatter (above) if parts of the date are too complicated.
+ * We parse the date segments and return it at the bottom, or use the simple
+ * formatter (above) if parts of the date are too complicated.
  */
 function theme_commons_events_date_display_range_advanced($variables) {
   $timezone = $variables['timezone'];
@@ -544,7 +540,7 @@ function theme_commons_events_date_display_range_advanced($variables) {
     $date2 = $variables['dates']['value2']['db']['object']->format($variables['dates']['format'],FALSE);
   }
   else if ($variables['dates']['value']['db']['object']->difference($variables['dates']['value2']['db']['object'], 'days') > 0) {
-    // If the Day is before the month (IE Europe, etc) then switch the granularity
+    // If the Day is before the month (Europe, etc) then switch the granularity.
     if (strpos($variables['dates']['format'],'M') != 0 || strpos($variables['dates']['format'],'m') != 0 ||
        strpos($variables['dates']['format'],'F') != 0 || strpos($variables['dates']['format'],'n') != 0) {
       $variables['dates']['value']['db']['object']->limitGranularity(array('day'));
@@ -557,7 +553,8 @@ function theme_commons_events_date_display_range_advanced($variables) {
     $date1 = $variables['dates']['value']['db']['object']->format($variables['dates']['format'],FALSE);
     $date2 = $variables['dates']['value2']['db']['object']->format($variables['dates']['format'],FALSE);
 
-    // If we are match 'D' or 'l', it means we have a 'day' in there (eg: Monday), we want the whole date because it looks funky otherwise.
+    // If we are match 'D' or 'l', then we have a 'day' in there (eg Monday),
+    // we want the whole date because it looks funky otherwise.
     if (strpbrk($variables['dates']['format'], 'Dl')) {
       return theme('commons_events_date_display_range_simple',$variables);
     }
@@ -595,3 +592,18 @@ function commons_events_event_type_disabled($node) {
   }
   return FALSE;
 }
+
+/**
+ * Helper function go get the raw number of attendees.
+ */
+function commons_events_get_raw_attendee_count($node) {
+  $attendee_count = db_select('registration', 'r')
+    ->fields('r')
+    ->condition('entity_id', $node->nid)
+    ->condition('entity_type', 'node')
+    ->countQuery()
+    ->execute()
+    ->fetchField();
+
+  return $attendee_count;
+}
\ No newline at end of file
diff --git a/modules/commons/commons_events/includes/commons_events.theme.inc b/modules/commons/commons_events/includes/commons_events.theme.inc
index 4b75e52..22a52b8 100644
--- a/modules/commons/commons_events/includes/commons_events.theme.inc
+++ b/modules/commons/commons_events/includes/commons_events.theme.inc
@@ -10,10 +10,8 @@
 function theme_commons_events_attending_event($variables = array()) {
   global $user;
   $event = $variables['event'];
-  $attendee_count = $variables['attendee_count'];
-  if (!registration_status('node', $event->nid, TRUE)) {
-    return "";
-  }
+  $attendee_count = isset($variables['attendee_count']) ? $variables['attendee_count'] : 0;
+
   $registration_type = registration_get_entity_registration_type('node', $event);
   $registration = entity_get_controller('registration')->create(array(
     'entity_type' => 'node',
@@ -21,15 +19,18 @@ function theme_commons_events_attending_event($variables = array()) {
     'type' => $registration_type,
     'author_uid' => $user->uid,
   ));
+
   if (!function_exists('commons_events_attend_event_form')
     || !function_exists('commons_events_cancel_event_form')) {
     module_load_include('inc', 'commons_events', 'includes/commons_events.forms');
   }
   if (!registration_is_registered($registration, NULL, $user->uid)
-    && registration_access('create', $registration, $user, $registration->type)) {
+    && registration_access('create', $registration, $user, $registration->type)
+    && registration_status('node', $event->nid, TRUE)) {
     return drupal_get_form('commons_events_attend_event_form_' . $event->nid, $event, $registration, $attendee_count);
   }
-  else if (registration_access('delete', $registration, $user, $registration->type)) {
+  else if (registration_is_registered($registration, NULL, $user->uid) &&
+    registration_access('delete', $registration, $user, $registration->type)) {
     return drupal_get_form('commons_events_cancel_event_form_' . $event->nid, $event);
   }
   return "";
diff --git a/modules/commons/commons_events/modules/commons_events_pages/commons_events_pages.info b/modules/commons/commons_events/modules/commons_events_pages/commons_events_pages.info
index 4ecdb47..d2db9b5 100644
--- a/modules/commons/commons_events/modules/commons_events_pages/commons_events_pages.info
+++ b/modules/commons/commons_events/modules/commons_events_pages/commons_events_pages.info
@@ -2,11 +2,9 @@ name = Commons Events Pages
 description = Provides the panelized Event page feature.
 core = 7.x
 package = Commons - Landing pages
-project = commons_events_pages
 dependencies[] = commons_events
 dependencies[] = panelizer
 dependencies[] = strongarm
-datestamp = 1357735760
 features[ctools][] = panelizer:panelizer:1
 features[ctools][] = strongarm:strongarm:1
 features[features_api][] = api:2
diff --git a/modules/commons/commons_events/modules/commons_events_solr/commons_events_solr.info b/modules/commons/commons_events/modules/commons_events_solr/commons_events_solr.info
index 1d22fab..4cc30fb 100644
--- a/modules/commons/commons_events/modules/commons_events_solr/commons_events_solr.info
+++ b/modules/commons/commons_events/modules/commons_events_solr/commons_events_solr.info
@@ -2,7 +2,6 @@ name = Commons Events - Solr
 description = Provides the Solr based faceted search for events
 core = 7.x
 package = Commons - Search
-project = commons_events_solr
 dependencies[] = apachesolr_search
 dependencies[] = commons_events
 dependencies[] = ctools
diff --git a/modules/commons/commons_featured/commons_featured.info b/modules/commons/commons_featured/commons_featured.info
index cbd43cc..5edbd0e 100644
--- a/modules/commons/commons_featured/commons_featured.info
+++ b/modules/commons/commons_featured/commons_featured.info
@@ -2,10 +2,8 @@ name = Commons Featured Content
 description = Allows community managers to display certain pieces of content more prominently on the site.
 core = 7.x
 package = Commons - Building blocks
-project = commons_featured
 dependencies[] = views
 dependencies[] = views_content
-datestamp = 1354747305
 features[ctools][] = views:views_default:3.0
 features[features_api][] = api:2
 features[views_view][] = commons_featured
diff --git a/modules/commons/commons_follow/commons-follow-otheruser-flag.tpl.php b/modules/commons/commons_follow/commons-follow-otheruser-flag.tpl.php
new file mode 100644
index 0000000..7a028bd
--- /dev/null
+++ b/modules/commons/commons_follow/commons-follow-otheruser-flag.tpl.php
@@ -0,0 +1,3 @@
+<span class="<?php print $flag_wrapper_classes; ?>">
+   <span class="<?php print $flag_classes ?>"><?php print $link_text; ?></span>
+</span>
diff --git a/modules/commons/commons_follow/commons_follow.info b/modules/commons/commons_follow/commons_follow.info
index 884315a..b76b195 100644
--- a/modules/commons/commons_follow/commons_follow.info
+++ b/modules/commons/commons_follow/commons_follow.info
@@ -2,14 +2,12 @@ name = Commons Follow
 description = Views and Field integration for Commons Following functionality.
 core = 7.x
 package = Commons - Building blocks
-project = commons_follow
 dependencies[] = ctools
 dependencies[] = entityreference
 dependencies[] = features
 dependencies[] = field_sql_storage
 dependencies[] = message_subscribe
 dependencies[] = strongarm
-datestamp = 1354747305
 features[ctools][] = strongarm:strongarm:1
 features[features_api][] = api:2
 features[field_base][] = field_target_comments
@@ -24,3 +22,4 @@ files[] = includes/views/handlers/commons_follow_plugin_argument_default_node.in
 files[] = includes/views/handlers/commons_follow_plugin_argument_default_message.inc
 files[] = includes/views/handlers/commons_follow_user_follow_filter.inc
 files[] = includes/views/handlers/commons_follow_user_follow_filter_message.inc
+files[] = includes/views/handlers/commons_follow_handler_field_ops.inc
\ No newline at end of file
diff --git a/modules/commons/commons_follow/commons_follow.module b/modules/commons/commons_follow/commons_follow.module
index ed60c9a..e301be2 100644
--- a/modules/commons/commons_follow/commons_follow.module
+++ b/modules/commons/commons_follow/commons_follow.module
@@ -2,7 +2,22 @@
 
 include_once 'commons_follow.features.inc';
 
-
+/**
+ * Implements hook_theme().
+ */
+function commons_follow_theme() {
+  return array(
+    'commons_follow_otheruser_flag' => array(
+      'variables' => array(
+        'is_flagged' => NULL,
+        'link_text' => NULL,
+        'flag_wrapper_classes' => NULL,
+        'flag_classes' => NULL,
+      ),
+      'template' => 'commons-follow-otheruser-flag',
+    ),
+  );
+}
 
 /**
  * Implements hook_features_pipe_alter().
@@ -104,7 +119,7 @@ function commons_follow_flag_export_alter(&$flag) {
  * Implements hook_flag_alter().
  */
 function commons_follow_flag_alter(&$flag) {
-  $commons_entity_integrations = module_invoke_all('commons_entity_integration');
+  $commons_entity_integrations = commons_entity_integration_info();
   // Find Commons node types that should have follow integration and alter
   // the commons_follow_node flag to allow following these node types.
   // This is currently hard-coded to node entities and the
@@ -198,10 +213,8 @@ function commons_follow_get_subscription_flags_ids($content_type = NULL, $conten
   return $flag_ids;
 }
 
-///////////////////
-
 /**
- * Implementation of hook_views_api().
+ * Implements hook_views_api().
  */
 function commons_follow_views_api() {
   return array(
@@ -283,3 +296,27 @@ function commons_follow_get_followed_message_ids($account = NULL) {
   }
   return $followed_mids;
 }
+
+function commons_follow_views_data_alter(&$data) {
+  $data['flag_content']['ops']['field']['handler'] = 'commons_follow_handler_field_ops';
+}
+
+function commons_follow_views_query_alter(&$view, &$query) {
+  global $user;
+  $prefix = variable_get('message_subscribe_flag_prefix', 'subscribe') . '_';
+  if(strpos($view->name, $prefix) === 0 && isset($view->args[0]) && $user->uid != $view->args[0]) {
+    $flag_content_keys = array_keys($query->table_queue);
+    foreach($flag_content_keys AS $key) {
+      if(strpos($key, 'flag_content') === 0) {
+        //Convert the Send Email Query
+        $join = $query->table_queue[$key]['join'];
+        $join->extra[1] = array(
+          'field' => 'uid',
+          'value' => $view->args[0],
+          'numeric' => TRUE,
+        );
+        $query->table_queue[$key]['join'] = $join;
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/modules/commons/commons_follow/commons_follow_group/commons_follow_group.info b/modules/commons/commons_follow/commons_follow_group/commons_follow_group.info
index 68503a2..aacc282 100644
--- a/modules/commons/commons_follow/commons_follow_group/commons_follow_group.info
+++ b/modules/commons/commons_follow/commons_follow_group/commons_follow_group.info
@@ -2,12 +2,10 @@ name = Commons Follow (Groups)
 description = Lets users follow individual organic groups.
 core = 7.x
 package = Commons - Building blocks
-project = commons_follow
 dependencies[] = ctools
 dependencies[] = flag
 dependencies[] = og
 dependencies[] = strongarm
-datestamp = 1352387638
 features[ctools][] = strongarm:strongarm:1
 features[features_api][] = api:2
 features[flag][] = commons_follow_group
diff --git a/modules/commons/commons_follow/commons_follow_group/commons_follow_group.module b/modules/commons/commons_follow/commons_follow_group/commons_follow_group.module
index bff49f2..f203a47 100644
--- a/modules/commons/commons_follow/commons_follow_group/commons_follow_group.module
+++ b/modules/commons/commons_follow/commons_follow_group/commons_follow_group.module
@@ -104,3 +104,50 @@ function commons_follow_group_node_insert($node) {
   $flag = flag_get_flag('commons_follow_group');
   $flag->flag('flag', $node->nid, $account);
 }
+
+
+/**
+ * Implements hook_og_membership_insert().
+ * Invoked from hook_entity_insert().
+ */
+function commons_follow_group_og_membership_insert(OgMembership $og_membership) {
+  commons_follow_group_sync_flag_to_group_membership($og_membership);
+}
+
+/**
+ * Implements hook_og_membership_update().
+ * Invoked from hook_entity_update().
+ */
+function commons_follow_group_og_membership_update(OgMembership $og_membership) {
+  commons_follow_group_sync_flag_to_group_membership($og_membership);
+}
+
+/**
+ * Implements hook_og_membership_delete().
+ * Invoked from hook_entity_delete().
+ */
+function commons_follow_group_og_membership_delete(OgMembership $og_membership) {
+  // The user should unfollow the group when her membership is deleted.
+  if ($og_membership->entity_type == 'user' && $og_membership->field_name == 'og_user_node') {
+    $account = user_load($og_membership->etid);
+    flag('unflag', 'commons_follow_group', $og_membership->gid, $account);    
+  }
+}
+
+// function flag($action, $flag_name, $content_id, $account = NULL) {
+
+function commons_follow_group_sync_flag_to_group_membership($og_membership) {
+  if ($og_membership->entity_type == 'user' && $og_membership->field_name == 'og_user_node') {
+    $account = user_load($og_membership->etid);
+    // The membership is approved. The user should follow the group.
+    if ($og_membership->state == 1) {
+      flag('flag', 'commons_follow_group', $og_membership->gid, $account);    
+    }
+    // The membership is not approved. The user should not follow the group.
+    else {
+      flag('unflag', 'commons_follow_group', $og_membership->gid, $account);    
+    }
+  }
+}
+  
+
diff --git a/modules/commons/commons_follow/commons_follow_node/commons_follow_node.info b/modules/commons/commons_follow/commons_follow_node/commons_follow_node.info
index a22ad5f..91d481d 100644
--- a/modules/commons/commons_follow/commons_follow_node/commons_follow_node.info
+++ b/modules/commons/commons_follow/commons_follow_node/commons_follow_node.info
@@ -2,11 +2,9 @@ name = Commons Follow (Individual nodes)
 description = Lets users follow individual nodes.
 core = 7.x
 package = Commons - Building blocks
-project = commons_follow
 dependencies[] = ctools
 dependencies[] = flag
 dependencies[] = views_litepager
-datestamp = 1356630025
 features[ctools][] = views:views_default:3.0
 features[features_api][] = api:2
 features[flag][] = commons_follow_node
diff --git a/modules/commons/commons_follow/commons_follow_node/commons_follow_node.install b/modules/commons/commons_follow/commons_follow_node/commons_follow_node.install
index fbbcb99..6d08f0c 100644
--- a/modules/commons/commons_follow/commons_follow_node/commons_follow_node.install
+++ b/modules/commons/commons_follow/commons_follow_node/commons_follow_node.install
@@ -6,4 +6,16 @@
 function commons_follow_node_update_3101() {
   features_revert(array('commons_follow_node' => array('flag')));
   return array();
+}
+
+/**
+ * Update profile notification page to show an account's following views
+ * Not the current users following view.
+ */
+function commons_follow_node_update_3501() {
+  $revert = array(
+    'commons_follow_node' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
 }
\ No newline at end of file
diff --git a/modules/commons/commons_follow/commons_follow_node/commons_follow_node.views_default.inc b/modules/commons/commons_follow/commons_follow_node/commons_follow_node.views_default.inc
index 4598cfc..8db8038 100644
--- a/modules/commons/commons_follow/commons_follow_node/commons_follow_node.views_default.inc
+++ b/modules/commons/commons_follow/commons_follow_node/commons_follow_node.views_default.inc
@@ -27,6 +27,7 @@ function commons_follow_node_views_default_views() {
   $handler->display->display_options['access']['type'] = 'perm';
   $handler->display->display_options['cache']['type'] = 'none';
   $handler->display->display_options['query']['type'] = 'views_query';
+  $handler->display->display_options['query']['options']['distinct'] = TRUE;
   $handler->display->display_options['exposed_form']['type'] = 'basic';
   $handler->display->display_options['pager']['type'] = 'lite';
   $handler->display->display_options['pager']['options']['items_per_page'] = '20';
@@ -72,6 +73,7 @@ function commons_follow_node_views_default_views() {
   $handler->display->display_options['relationships']['flag_content_rel']['table'] = 'node';
   $handler->display->display_options['relationships']['flag_content_rel']['field'] = 'flag_content_rel';
   $handler->display->display_options['relationships']['flag_content_rel']['flag'] = 'commons_follow_node';
+  $handler->display->display_options['relationships']['flag_content_rel']['user_scope'] = 'any';
   /* Relationship: Flags: email_node */
   $handler->display->display_options['relationships']['flag_content_rel_1']['id'] = 'flag_content_rel_1';
   $handler->display->display_options['relationships']['flag_content_rel_1']['table'] = 'node';
@@ -79,6 +81,12 @@ function commons_follow_node_views_default_views() {
   $handler->display->display_options['relationships']['flag_content_rel_1']['label'] = 'email_flag';
   $handler->display->display_options['relationships']['flag_content_rel_1']['required'] = 0;
   $handler->display->display_options['relationships']['flag_content_rel_1']['flag'] = 'email_node';
+  $handler->display->display_options['relationships']['flag_content_rel_1']['user_scope'] = 'any';
+  /* Relationship: Flags: User */
+  $handler->display->display_options['relationships']['uid']['id'] = 'uid';
+  $handler->display->display_options['relationships']['uid']['table'] = 'flag_content';
+  $handler->display->display_options['relationships']['uid']['field'] = 'uid';
+  $handler->display->display_options['relationships']['uid']['relationship'] = 'flag_content_rel';
   /* Field: Content: Title */
   $handler->display->display_options['fields']['title']['id'] = 'title';
   $handler->display->display_options['fields']['title']['table'] = 'node';
@@ -106,6 +114,19 @@ function commons_follow_node_views_default_views() {
   $handler->display->display_options['sorts']['timestamp']['field'] = 'timestamp';
   $handler->display->display_options['sorts']['timestamp']['relationship'] = 'flag_content_rel';
   $handler->display->display_options['sorts']['timestamp']['order'] = 'DESC';
+  /* Contextual filter: User: Uid */
+  $handler->display->display_options['arguments']['uid']['id'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['table'] = 'users';
+  $handler->display->display_options['arguments']['uid']['field'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['relationship'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['default_action'] = 'default';
+  $handler->display->display_options['arguments']['uid']['default_argument_type'] = 'user';
+  $handler->display->display_options['arguments']['uid']['default_argument_options']['user'] = FALSE;
+  $handler->display->display_options['arguments']['uid']['summary']['number_of_records'] = '0';
+  $handler->display->display_options['arguments']['uid']['summary']['format'] = 'default_summary';
+  $handler->display->display_options['arguments']['uid']['summary_options']['items_per_page'] = '25';
+  $handler->display->display_options['arguments']['uid']['specify_validation'] = TRUE;
+  $handler->display->display_options['arguments']['uid']['validate']['type'] = 'user';
   /* Filter criterion: Content: Published */
   $handler->display->display_options['filters']['status']['id'] = 'status';
   $handler->display->display_options['filters']['status']['table'] = 'node';
@@ -113,6 +134,12 @@ function commons_follow_node_views_default_views() {
   $handler->display->display_options['filters']['status']['value'] = 1;
   $handler->display->display_options['filters']['status']['group'] = 1;
   $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
+  /* Filter criterion: Content: Type */
+  $handler->display->display_options['filters']['type']['id'] = 'type';
+  $handler->display->display_options['filters']['type']['table'] = 'node';
+  $handler->display->display_options['filters']['type']['field'] = 'type';
+  $handler->display->display_options['filters']['type']['operator'] = 'not empty';
+  $handler->display->display_options['filters']['type']['value'] = array();
   $translatables['commons_follow_node'] = array(
     t('Master'),
     t('more'),
diff --git a/modules/commons/commons_follow/commons_follow_term/commons_follow_term.info b/modules/commons/commons_follow/commons_follow_term/commons_follow_term.info
index 795de81..cc99417 100644
--- a/modules/commons/commons_follow/commons_follow_term/commons_follow_term.info
+++ b/modules/commons/commons_follow/commons_follow_term/commons_follow_term.info
@@ -2,11 +2,9 @@ name = Commons Follow (Taxonomy terms)
 description = Lets users follow individual taxonomy terms
 core = 7.x
 package = Commons - Building blocks
-project = commons_follow
 dependencies[] = flag
 dependencies[] = views
 dependencies[] = views_litepager
-datestamp = 1356630025
 features[ctools][] = views:views_default:3.0
 features[features_api][] = api:2
 features[flag][] = commons_follow_term
diff --git a/modules/commons/commons_follow/commons_follow_term/commons_follow_term.install b/modules/commons/commons_follow/commons_follow_term/commons_follow_term.install
index 31bda83..77c4c76 100644
--- a/modules/commons/commons_follow/commons_follow_term/commons_follow_term.install
+++ b/modules/commons/commons_follow/commons_follow_term/commons_follow_term.install
@@ -15,3 +15,15 @@ function commons_follow_term_update_3102() {
   features_revert(array('commons_follow_term' => array('flag')));
   return array();
 }
+
+/**
+ * Update profile notification page to show an account's following views
+ * Not the current users following view.
+ */
+function commons_follow_term_update_3501() {
+  $revert = array(
+    'commons_follow_term' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
\ No newline at end of file
diff --git a/modules/commons/commons_follow/commons_follow_term/commons_follow_term.views_default.inc b/modules/commons/commons_follow/commons_follow_term/commons_follow_term.views_default.inc
index be1fa62..21e785a 100644
--- a/modules/commons/commons_follow/commons_follow_term/commons_follow_term.views_default.inc
+++ b/modules/commons/commons_follow/commons_follow_term/commons_follow_term.views_default.inc
@@ -72,6 +72,7 @@ function commons_follow_term_views_default_views() {
   $handler->display->display_options['relationships']['flag_content_rel']['table'] = 'taxonomy_term_data';
   $handler->display->display_options['relationships']['flag_content_rel']['field'] = 'flag_content_rel';
   $handler->display->display_options['relationships']['flag_content_rel']['flag'] = 'commons_follow_term';
+  $handler->display->display_options['relationships']['flag_content_rel']['user_scope'] = 'any';
   /* Relationship: Flags: email_term */
   $handler->display->display_options['relationships']['flag_content_rel_1']['id'] = 'flag_content_rel_1';
   $handler->display->display_options['relationships']['flag_content_rel_1']['table'] = 'taxonomy_term_data';
@@ -79,6 +80,12 @@ function commons_follow_term_views_default_views() {
   $handler->display->display_options['relationships']['flag_content_rel_1']['label'] = 'email_flag';
   $handler->display->display_options['relationships']['flag_content_rel_1']['required'] = 0;
   $handler->display->display_options['relationships']['flag_content_rel_1']['flag'] = 'email_term';
+  $handler->display->display_options['relationships']['flag_content_rel_1']['user_scope'] = 'any';
+  /* Relationship: Flags: User */
+  $handler->display->display_options['relationships']['uid']['id'] = 'uid';
+  $handler->display->display_options['relationships']['uid']['table'] = 'flag_content';
+  $handler->display->display_options['relationships']['uid']['field'] = 'uid';
+  $handler->display->display_options['relationships']['uid']['relationship'] = 'flag_content_rel';
   /* Field: Taxonomy term: Name */
   $handler->display->display_options['fields']['name']['id'] = 'name';
   $handler->display->display_options['fields']['name']['table'] = 'taxonomy_term_data';
@@ -107,6 +114,7 @@ function commons_follow_term_views_default_views() {
   $handler->display->display_options['sorts']['timestamp']['relationship'] = 'flag_content_rel';
   $handler->display->display_options['sorts']['timestamp']['order'] = 'DESC';
   $translatables['commons_follow_taxonomy_term'] = array(
+  /* Contextual filter: User: Uid */
     t('Master'),
     t('more'),
     t('Apply'),
@@ -127,6 +135,19 @@ function commons_follow_term_views_default_views() {
     t('Topic'),
     t('Send email?'),
   );
+  $handler->display->display_options['arguments']['uid']['id'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['table'] = 'users';
+  $handler->display->display_options['arguments']['uid']['field'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['relationship'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['default_action'] = 'default';
+  $handler->display->display_options['arguments']['uid']['default_argument_type'] = 'user';
+  $handler->display->display_options['arguments']['uid']['default_argument_options']['user'] = FALSE;
+  $handler->display->display_options['arguments']['uid']['summary']['number_of_records'] = '0';
+  $handler->display->display_options['arguments']['uid']['summary']['format'] = 'default_summary';
+  $handler->display->display_options['arguments']['uid']['summary_options']['items_per_page'] = '25';
+  $handler->display->display_options['arguments']['uid']['specify_validation'] = TRUE;
+  $handler->display->display_options['arguments']['uid']['validate']['type'] = 'user';
+  $handler->display->display_options['arguments']['uid']['validate_options']['type'] = 'either';
   $export['commons_follow_taxonomy_term'] = $view;
 
   return $export;
diff --git a/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.commons_utility_links.inc b/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.commons_utility_links.inc
new file mode 100644
index 0000000..172c3cb
--- /dev/null
+++ b/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.commons_utility_links.inc
@@ -0,0 +1,25 @@
+<?php
+
+/**
+ * @file
+ * Commons Utility Links hooks implemented by the Commons Follow UI module.
+ */
+
+/**
+ * Implements hook_commons_utility_links().
+ */
+function commons_follow_ui_commons_utility_links() {
+  $links = array();
+
+  if (user_is_logged_in()) {
+    global $user;
+    $account = $user;
+    $links['settings']= array(
+      'href' => 'user/' . $account->uid . '/notification-settings',
+      'title' => t('Settings'),
+      'weight' => 10,
+    );
+  }
+
+  return $links;
+}
diff --git a/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.module b/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.module
index f8ebd9b..56973cb 100644
--- a/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.module
+++ b/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.module
@@ -38,8 +38,8 @@ function commons_follow_ui_menu() {
 }
 
 /**
-* Implements hook_form_alter().
-*/
+ * Implements hook_form_alter().
+ */
 function commons_follow_ui_form_alter(&$form, &$form_state, $form_id) {
   // We have a dedicated form for the "Send email by default" checkbox.
   // Hide it from the user profile edit form.
@@ -48,23 +48,9 @@ function commons_follow_ui_form_alter(&$form, &$form_state, $form_id) {
   }
 }
 
-/**
- * Implements hook_commons_utility_links().
- */
-function commons_follow_ui_commons_utility_links_alter(&$links) {
-  global $user;
-  $account = $user;
-  if ($account->uid > 0) {
-    $links['settings']= array(
-      'href' => 'user/' . $account->uid . '/notification-settings',
-      'title' => t('Settings'),
-    );
-  }
-}
-
 function commons_follow_ui_notification_settings_form($form, &$form_state, $account) {
+  global $user;
   if (empty($account)) {
-    global $user;
     $account = $user;
   }
   drupal_set_title(t('Notification settings'));
@@ -88,6 +74,9 @@ function commons_follow_ui_notification_settings_form($form, &$form_state, $acco
     '#default_value' => isset($account->message_subscribe_email[LANGUAGE_NONE][0]['value']) ? $account->message_subscribe_email[LANGUAGE_NONE][0]['value'] : FALSE,
     '#weight' => 1,
   );
+  if ($account->uid != $user->uid) {
+    $form['message_subscribe_email']['#disabled'] = TRUE;
+  }
 
   $form['submit'] = array(
     '#type' => 'submit',
@@ -121,18 +110,15 @@ function commons_follow_message_subscribe_email_setting_submit($form, &$form_sta
  * Generates the QuickTab title for the subscription UI.
  * Replaces message_subscribe_tab_title().
  */
-function commons_follow_ui_tab_title($account, $flag_name = NULL) {
+function commons_follow_ui_tab_title($account, $flag_name = NULL, $count = 0) {
   global $user;
 
   if (!$flag_name) {
     // We are inside /message-subscribe so get the first flag.
-    $flag_name = key(message_subscribe_flag_get_flags());
+    $flag_name = key(message_subscribe_flag_get_flags(NULL, NULL, $account, FALSE));
   }
-
   $flag = flag_get_flag($flag_name);
-  $flaggings = flag_get_user_flags($flag->content_type, NULL, $account->uid);
 
-  $count = !empty($flaggings[$flag_name]) ? count($flaggings[$flag_name]) : 0;
   $params = array(
     '@flag' => $flag->get_title(),
     '@count' => $count,
@@ -141,16 +127,46 @@ function commons_follow_ui_tab_title($account, $flag_name = NULL) {
   return $account->uid == $user->uid ? t('@flag you follow <span class="user-follow-count">@count</span>', $params) : t('@flag @name follows <span class="user-follow-count">@count</span>', $params);
 }
 
-
+/*
+ * Generates the Quicktab content for the subscription UI
+ */
 function commons_follow_ui_generate_tabs($account) {
   $tabs = array();
-  foreach (array_keys(message_subscribe_flag_get_flags()) as $flag_name) {
+  foreach (array_keys(message_subscribe_flag_get_flags(NULL, NULL, $account, FALSE)) as $flag_name) {
+    if ($view = message_subscribe_ui_get_view($account, $flag_name)) {
+
+      // We have to do some 'verbose' view loading here, otherwise we will get a
+      // pager when looking at an empty view result.
+      $view->get_total_rows = TRUE;
+      $view->pre_execute();
+      $view->execute();
+      if ($view->total_rows == '0') {
+        unset($view->query->pager);
+      }
+      $preview = $view->preview();
+      $count = $view->total_rows;
+    }
+    else {
+      $count = 0;
+    }
     $tabs[$flag_name] = array(
-      'title' => commons_follow_ui_tab_title($account, $flag_name),
-      'contents' => array('#markup' => message_subscribe_ui_tab($account, $flag_name)),
+      'title' => commons_follow_ui_tab_title($account, $flag_name, $count),
+      'contents' => array('#markup' => $preview),
     );
   }
-  $settings = array('style' => 'Commons Tabs', 'ajax' => FALSE, 'html' => TRUE, 'title' => 'test', 'default_tab' => 'commons_follow_group');
-  $built_tabs = quicktabs_build_quicktabs('commons_follow_ui', $settings, $tabs);
-  return $built_tabs;
-}
\ No newline at end of file
+
+  if (!empty($tabs)) {
+    $settings = array(
+      'style' => 'Commons Tabs',
+      'ajax' => FALSE,
+      'html' => TRUE,
+      'title' => 'test',
+      'default_tab' => 'commons_follow_group',
+    );
+    $built_tabs = quicktabs_build_quicktabs('commons_follow_ui', $settings, $tabs);
+    return $built_tabs;
+  }
+  else {
+    return array();
+  }
+}
diff --git a/modules/commons/commons_follow/commons_follow_user/commons_follow_user.info b/modules/commons/commons_follow/commons_follow_user/commons_follow_user.info
index 27dd695..947d59d 100644
--- a/modules/commons/commons_follow/commons_follow_user/commons_follow_user.info
+++ b/modules/commons/commons_follow/commons_follow_user/commons_follow_user.info
@@ -2,7 +2,6 @@ name = Commons Follow (Users)
 description = Lets users follow other users.
 core = 7.x
 package = Commons - Building blocks
-project = commons_follow
 dependencies[] = commons_follow
 dependencies[] = entityreference
 dependencies[] = flag
@@ -11,7 +10,6 @@ dependencies[] = views
 dependencies[] = views_content
 dependencies[] = views_litepager
 dependencies[] = views_load_more
-datestamp = 1356630025
 features[ctools][] = views:views_default:3.0
 features[features_api][] = api:2
 features[field_instance][] = message-commons_follow_user_user_followed-field_target_users
diff --git a/modules/commons/commons_follow/commons_follow_user/commons_follow_user.install b/modules/commons/commons_follow/commons_follow_user/commons_follow_user.install
index 157ef4e..e5e35a5 100644
--- a/modules/commons/commons_follow/commons_follow_user/commons_follow_user.install
+++ b/modules/commons/commons_follow/commons_follow_user/commons_follow_user.install
@@ -6,4 +6,24 @@
 function commons_follow_user_update_3101() {
   features_revert(array('commons_follow_user' => array('flag')));
   return array();
+}
+
+/**
+ * Correct a typo in the title of the follows view.
+ */
+function commons_follow_user_update_3102() {
+  features_revert(array('commons_follow_user' => array('views_view')));
+  return array();
+}
+
+/**
+ * Update profile notification page to show an account's following views
+ * Not the current users following view.
+ */
+function commons_follow_user_update_3501() {
+  $revert = array(
+    'commons_follow_user' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
 }
\ No newline at end of file
diff --git a/modules/commons/commons_follow/commons_follow_user/commons_follow_user.views_default.inc b/modules/commons/commons_follow/commons_follow_user/commons_follow_user.views_default.inc
index da6b6cd..fa18e54 100644
--- a/modules/commons/commons_follow/commons_follow_user/commons_follow_user.views_default.inc
+++ b/modules/commons/commons_follow/commons_follow_user/commons_follow_user.views_default.inc
@@ -73,6 +73,7 @@ function commons_follow_user_views_default_views() {
   $handler->display->display_options['relationships']['flag_content_rel']['table'] = 'users';
   $handler->display->display_options['relationships']['flag_content_rel']['field'] = 'flag_content_rel';
   $handler->display->display_options['relationships']['flag_content_rel']['flag'] = 'commons_follow_user';
+  $handler->display->display_options['relationships']['flag_content_rel']['user_scope'] = 'any';
   /* Relationship: Flags: email_user */
   $handler->display->display_options['relationships']['flag_content_rel_1']['id'] = 'flag_content_rel_1';
   $handler->display->display_options['relationships']['flag_content_rel_1']['table'] = 'users';
@@ -80,6 +81,12 @@ function commons_follow_user_views_default_views() {
   $handler->display->display_options['relationships']['flag_content_rel_1']['label'] = 'flag_user';
   $handler->display->display_options['relationships']['flag_content_rel_1']['required'] = 0;
   $handler->display->display_options['relationships']['flag_content_rel_1']['flag'] = 'email_user';
+  $handler->display->display_options['relationships']['flag_content_rel_1']['user_scope'] = 'any';
+  /* Relationship: Flags: User */
+  $handler->display->display_options['relationships']['uid']['id'] = 'uid';
+  $handler->display->display_options['relationships']['uid']['table'] = 'flag_content';
+  $handler->display->display_options['relationships']['uid']['field'] = 'uid';
+  $handler->display->display_options['relationships']['uid']['relationship'] = 'flag_content_rel';
   /* Field: User: Name */
   $handler->display->display_options['fields']['name']['id'] = 'name';
   $handler->display->display_options['fields']['name']['table'] = 'users';
@@ -106,6 +113,20 @@ function commons_follow_user_views_default_views() {
   $handler->display->display_options['sorts']['timestamp']['field'] = 'timestamp';
   $handler->display->display_options['sorts']['timestamp']['relationship'] = 'flag_content_rel';
   $handler->display->display_options['sorts']['timestamp']['order'] = 'DESC';
+  /* Contextual filter: User: Uid */
+  $handler->display->display_options['arguments']['uid']['id'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['table'] = 'users';
+  $handler->display->display_options['arguments']['uid']['field'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['relationship'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['default_action'] = 'default';
+  $handler->display->display_options['arguments']['uid']['default_argument_type'] = 'user';
+  $handler->display->display_options['arguments']['uid']['default_argument_options']['user'] = FALSE;
+  $handler->display->display_options['arguments']['uid']['summary']['number_of_records'] = '0';
+  $handler->display->display_options['arguments']['uid']['summary']['format'] = 'default_summary';
+  $handler->display->display_options['arguments']['uid']['summary_options']['items_per_page'] = '25';
+  $handler->display->display_options['arguments']['uid']['specify_validation'] = TRUE;
+  $handler->display->display_options['arguments']['uid']['validate']['type'] = 'user';
+  $handler->display->display_options['arguments']['uid']['validate_options']['type'] = 'either';
   /* Filter criterion: User: Active */
   $handler->display->display_options['filters']['status']['id'] = 'status';
   $handler->display->display_options['filters']['status']['table'] = 'users';
@@ -369,7 +390,7 @@ function commons_follow_user_views_default_views() {
   /* Display: Page */
   $handler = $view->new_display('page', 'Page', 'page_1');
   $handler->display->display_options['defaults']['title'] = FALSE;
-  $handler->display->display_options['title'] = 'People %1 fllows';
+  $handler->display->display_options['title'] = 'People %1 follows';
   $handler->display->display_options['defaults']['hide_admin_links'] = FALSE;
   $handler->display->display_options['defaults']['use_more'] = FALSE;
   $handler->display->display_options['defaults']['use_more_always'] = FALSE;
@@ -401,7 +422,7 @@ function commons_follow_user_views_default_views() {
     t('more'),
     t('Commons'),
     t('Page'),
-    t('People %1 fllows'),
+    t('People %1 follows'),
     t('Items per page'),
     t('- All -'),
     t('Offset'),
diff --git a/modules/commons/commons_follow/includes/views/handlers/commons_follow_handler_field_ops.inc b/modules/commons/commons_follow/includes/views/handlers/commons_follow_handler_field_ops.inc
new file mode 100644
index 0000000..3770782
--- /dev/null
+++ b/modules/commons/commons_follow/includes/views/handlers/commons_follow_handler_field_ops.inc
@@ -0,0 +1,62 @@
+<?php
+
+/**
+ * @file
+ * Contains the flag Ops field handler.
+ */
+
+/**
+ * Views field handler for the Flag operations links (flag/unflag).
+ *
+ * @ingroup views
+ */
+class commons_follow_handler_field_ops extends flag_handler_field_ops {
+
+  function render($values) {
+    global $user;
+    //If the passed in user doesn't match the current user
+    if(isset($this->view->args[0]) && $user->uid != $this->view->args[0]) {
+
+      if (!($flag = $this->get_flag())) {
+        // get_flag() itself will print a more detailed message.
+        return t('Missing flag');
+      }
+      $content_id = $values->{$this->aliases['content_id']};
+      $is_flagged = $values->{$this->aliases['is_flagged']};
+
+      if (empty($this->flag_applies[$content_id])) {
+        // Flag does not apply to this content.
+        return;
+      }
+
+      if (!empty($this->options['link_type'])) {
+        $flag->link_type = $this->options['link_type'];
+      }
+
+      $variables = array();
+      $action = $is_flagged ? 'unflag' : 'flag';
+      $variables['flag_css_name'] = str_replace('_', '-', $flag->name);
+
+      $flag_wrapper_classes_array = array();
+      $flag_wrapper_classes_array[] = 'flag-wrapper';
+      $flag_wrapper_classes_array[] = 'flag-' . $variables['flag_css_name'];
+      $flag_wrapper_classes_array[] = 'flag-' . $variables['flag_css_name'] . '-' . $content_id;
+      $variables['flag_wrapper_classes'] = implode(' ',$flag_wrapper_classes_array);
+
+      $flag_classes_array = array();
+      $flag_classes_array[] = 'flag';
+      $flag_classes_array[] = $action . '-action';
+      $flag_classes_array[] = 'flag-link-' . $flag->link_type;
+      $variables['flag_classes'] = implode(' ', $flag_classes_array);
+      $variables['is_flagged'] = $action;
+      $variables['link_text'] = $flag->get_label($action . '_short', $content_id);
+
+      return theme('commons_follow_otheruser_flag', $variables);
+    }
+    else {
+      return parent::render($values);
+    }
+
+//    return $flag->theme($is_flagged ? 'unflag' : 'flag', $content_id);
+  }
+}
diff --git a/modules/commons/commons_groups/commons_groups.features.field_instance.inc b/modules/commons/commons_groups/commons_groups.features.field_instance.inc
index 54ac033..0144c87 100644
--- a/modules/commons/commons_groups/commons_groups.features.field_instance.inc
+++ b/modules/commons/commons_groups/commons_groups.features.field_instance.inc
@@ -19,6 +19,7 @@ function commons_groups_field_default_field_instances() {
     }
   }
   $group_bundles = og_get_all_group_bundle();
+
   if (empty($group_bundles['node'])) {
     // Make sure group_bundles contains at least the group node bundle, in order
     // to create the group audience field for it when installing the profile.
@@ -365,7 +366,7 @@ function commons_groups_field_definition_group(&$field_instances, $entity_type,
 
   // Exported field_instance: 'node-group-field_group_logo'
   $field_instances["$entity_type-$bundle-field_group_logo"] = array(
-    'bundle' => 'group',
+    'bundle' => $bundle,
     'deleted' => '0',
     'description' => '',
     'display' => array(
@@ -416,7 +417,7 @@ function commons_groups_field_definition_group(&$field_instances, $entity_type,
 
 function commons_groups_field_definition(&$field_instances, $entity_type, $bundle) {
   // Exported field_instance: 'node-post-og_group_ref'
-   $field_instances["$entity_type-$bundle-og_group_ref"] = array(
+  $field_instances["$entity_type-$bundle-og_group_ref"] = array(
     'bundle' => $bundle,
     'default_value' => NULL,
     'default_value_function' => 'commons_groups_entityreference_default_value',
diff --git a/modules/commons/commons_groups/commons_groups.features.user_permission.inc b/modules/commons/commons_groups/commons_groups.features.user_permission.inc
index 9fb3e99..ec080a3 100644
--- a/modules/commons/commons_groups/commons_groups.features.user_permission.inc
+++ b/modules/commons/commons_groups/commons_groups.features.user_permission.inc
@@ -10,25 +10,31 @@
 function commons_groups_user_default_permissions() {
   $permissions = array();
 
-  // Exported permission: 'create group content'.
-  $permissions['create group content'] = array(
-    'name' => 'create group content',
-    'roles' => array(
-      'administrator' => 'administrator',
-      'authenticated user' => 'authenticated user',
-    ),
-    'module' => 'node',
-  );
+  $groups = commons_groups_get_group_types();
 
-  // Exported permission: 'edit own group content'.
-  $permissions['edit own group content'] = array(
-    'name' => 'edit own group content',
-    'roles' => array(
-      'administrator' => 'administrator',
-      'authenticated user' => 'authenticated user',
-    ),
-    'module' => 'node',
-  );
+  if (isset($groups['node'])) {
+    foreach ($groups['node'] as $bundle => $group_info) {
+      // Exported permission: 'create group content'.
+      $permissions["create $bundle content"] = array(
+        'name' => "create $bundle content",
+        'roles' => array(
+          'administrator' => 'administrator',
+          'authenticated user' => 'authenticated user',
+        ),
+        'module' => 'node',
+      );
+
+      // Exported permission: 'edit own group content'.
+      $permissions["edit own $bundle content"] = array(
+        'name' => "edit own $bundle content",
+        'roles' => array(
+          'administrator' => 'administrator',
+          'authenticated user' => 'authenticated user',
+        ),
+        'module' => 'node',
+      );
+    }
+  }
 
   return $permissions;
 }
diff --git a/modules/commons/commons_groups/commons_groups.info b/modules/commons/commons_groups/commons_groups.info
index 7804603..59a4f2a 100644
--- a/modules/commons/commons_groups/commons_groups.info
+++ b/modules/commons/commons_groups/commons_groups.info
@@ -2,8 +2,6 @@ name = Commons Groups
 description = Commons Organic Groups Functionality
 core = 7.x
 package = Commons - Building blocks
-version = 7.x-3.0
-project = commons_groups
 dependencies[] = commons_body
 dependencies[] = commons_bw
 dependencies[] = commons_topics
diff --git a/modules/commons/commons_groups/commons_groups.install b/modules/commons/commons_groups/commons_groups.install
index f526d52..f4ec12b 100644
--- a/modules/commons/commons_groups/commons_groups.install
+++ b/modules/commons/commons_groups/commons_groups.install
@@ -177,3 +177,14 @@ function commons_groups_update_3113() {
   features_revert($revert);
   return array();
 }
+
+/**
+ * Display sticky content at top of lists.
+ */
+function commons_groups_update_3114() {
+  $revert = array(
+    'commons_groups' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
diff --git a/modules/commons/commons_groups/commons_groups.module b/modules/commons/commons_groups/commons_groups.module
index 46e8b15..39e0290 100644
--- a/modules/commons/commons_groups/commons_groups.module
+++ b/modules/commons/commons_groups/commons_groups.module
@@ -62,7 +62,7 @@ function commons_groups_help($path, $arg) {
       }
     }
     if (user_access('edit any group content')) {
-      $message = t("Group privacy settings !updated.", array('!updated' => l('need to be updated', 'admin/content/groups/update'),));
+      $message = t("Group privacy settings !updated.", array('!updated' => l('need to be updated', 'admin/content/groups/update')));
       drupal_set_message($message, 'warning', FALSE);
     }
   }
@@ -92,29 +92,33 @@ function commons_groups_entity_view($entity, $type, $view_mode, $langcode) {
  *
  * Alter the privacy settings fields.
  */
-function commons_groups_form_group_node_form_alter(&$form, &$form_state) {
-  // The group privacy settings are not required.
-  $form['field_og_subscribe_settings'][LANGUAGE_NONE]['#required'] = FALSE;
-
-  if (module_exists('og_access')) {
-    // Display the private content checkbox only when "Joining requires approval"
-    // is selected.
-    $form['field_og_access_default_value']['#states'] = array(
-      'visible' => array(
-        ':input[name="field_og_subscribe_settings[' . LANGUAGE_NONE . ']"]' => array('value' => 'approval'),
-      ),
+function commons_groups_form_node_form_alter(&$form, &$form_state) {
+  $groups = og_get_all_group_bundle();
+
+  if (isset($groups['node']) && in_array($form_state['node']->type, array_keys($groups['node']))) {
+    // The group privacy settings are not required.
+    $form['field_og_subscribe_settings'][LANGUAGE_NONE]['#required'] = FALSE;
+
+    if (module_exists('og_access')) {
+      // Display private content checkbox only when "Joining requires approval"
+      // is selected.
+      $form['field_og_access_default_value']['#states'] = array(
+        'visible' => array(
+          ':input[name="field_og_subscribe_settings[' . LANGUAGE_NONE . ']"]' => array('value' => 'approval'),
+        ),
+      );
+
+      $form['#after_build'] = array('commons_groups_form_group_node_after_build');
+    }
+
+    $form['#attached']['css'] = array(
+      drupal_get_path('module', 'commons_groups') . '/css/commons_groups.css',
     );
 
-    $form['#after_build'] = array('commons_groups_form_group_node_after_build');
+    // The group access is set on commons_groups_node_presave().
+    $form['group_access'][LANGUAGE_NONE]['#required'] = FALSE;
+    $form['group_access']['#access'] = FALSE;
   }
-
-  $form['#attached']['css'] = array(
-    drupal_get_path('module', 'commons_groups') . '/css/commons_groups.css',
-  );
-
-  // The group access is set on commons_groups_node_presave().
-  $form['group_access'][LANGUAGE_NONE]['#required'] = FALSE;
-  $form['group_access']['#access'] = FALSE;
 }
 
 /**
@@ -233,7 +237,9 @@ function commons_groups_features_pipe_alter(&$pipe, $data, $export) {
     foreach ($pipe['field_instance'] as $delta => $value) {
       $args = explode('-', $value);
       $field_name = $args[2];
-      if ($field_name == 'og_group_ref') {
+      $excluded_fields = array('og_group_ref', 'field_og_access_default_value',
+        'field_og_subscribe_settings', 'og_roles_permissions', 'group_access', 'field_group_logo', 'group_group', 'body');
+      if (in_array($field_name, $excluded_fields)) {
         unset($pipe['field_instance'][$delta]);
       }
     }
@@ -255,6 +261,7 @@ function commons_groups_commons_entity_integration() {
     'node' => array(
       'group' => array(
         'is_group_content' => FALSE,
+        'is_group' => TRUE,
         'exclude_commons_follow' => TRUE,
       ),
     ),
@@ -295,10 +302,7 @@ function commons_groups_group_contributors_count_topics($group) {
       return '';
     }
     $contributors_count = $view->total_rows;
-    $output .= l(t('@contributors_count @contributors', array(
-      '@contributors_count' => $contributors_count,
-      '@contributors' => format_plural($contributors_count, 'contributor', 'contributors')
-    )), 'node/' . $group->nid . '/contributors');
+    $output .= l(format_plural($contributors_count, '1 contributor', '@count contributors'), 'node/' . $group->nid . '/contributors');
   }
   // Format the list of topics:
   if (!empty($group->field_topics[LANGUAGE_NONE])) {
@@ -378,6 +382,22 @@ function commons_groups_form_alter(&$form, &$form_state, $form_id) {
       drupal_set_message(t($message), 'warning');
     }
   }
+  // Hide internal fields that the user should not be able to edit directly.
+  if ($form_id == 'edit_profile_user_profile_form' || substr($form_id, -10) === '_node_form') {
+    $internal_fields = array('field_unread_invitations', 'field_unread_messages', 'user_trusted_contacts', 'og_user_group_ref', 'group_access');
+    foreach ($internal_fields as $field_name) {
+      if(isset($form[$field_name])) {
+        $form[$field_name]['#access'] = FALSE;
+      }
+    }
+  }
+  // Disable Trusted Contacts field if commons_trusted_contacts is disabled.
+  $group_content_entity_types = commons_groups_get_group_content_entity_types();
+  if (isset($form['#node']->type) && isset($group_content_entity_types['node'][$form['#node']->type])) {
+    if (isset($form['og_user_group_ref']) && !module_exists('commons_trusted_contacts')) {
+      $form['og_user_group_ref']['#access'] = FALSE;
+    }
+  }
 }
 
 /**
@@ -399,7 +419,7 @@ function commons_groups_system_info_alter(&$info, $file, $type) {
   // commons_groups_entity_types variable.
   // We must add a corresponding line for each field instance
   // to commons_groups.info so that Features is aware of the instance
-  // and can sucessfully revert the field_instance component back
+  // and can successfully revert the field_instance component back
   // to its default state.
   if ($file->name == 'commons_groups') {
     $group_bundles = og_get_all_group_bundle();
@@ -410,10 +430,22 @@ function commons_groups_system_info_alter(&$info, $file, $type) {
         $info['features']['field_instance'][] = "node-$bundle-field_og_access_default_value";
         $info['features']['field_instance'][] = "node-$bundle-field_og_subscribe_settings";
         $info['features']['field_instance'][] = "node-$bundle-og_roles_permissions";
+        $info['features']['field_instance'][] = "node-$bundle-body";
+        $info['features']['field_instance'][] = "node-$bundle-group_group";
+
         // These fields are only necessary when og_access.module is enabled.
-        $info['features']['field_instance'][] = "node-$bundle-field_og_access_default_value";
         $info['features']['field_instance'][] = "node-$bundle-group_access";
         $info['features']['field_instance'][] = "node-$bundle-field_group_logo";
+
+        // Add default strongarm settings.
+        $info['features']['variable'][] = "comment_anonymous_$bundle";
+        $info['features']['variable'][] = "comment_default_mode_$bundle";
+        $info['features']['variable'][] = "comment_default_per_page_$bundle";
+        $info['features']['variable'][] = "comment_form_location_$bundle";
+        $info['features']['variable'][] = "comment_$bundle";
+        $info['features']['variable'][] = "comment_preview_$bundle";
+        $info['features']['variable'][] = "comment_subject_field_$bundle";
+        $info['features']['variable'][] = "field_bundle_settings_node__$bundle";
       }
     }
     $group_content_entity_types = commons_groups_get_group_content_entity_types();
@@ -425,6 +457,17 @@ function commons_groups_system_info_alter(&$info, $file, $type) {
         }
       }
     }
+
+    // Commons specific group variables.
+    $commons_groups = commons_groups_get_group_types();
+    if (isset($commons_groups['node'])) {
+      foreach ($commons_groups['node'] as $bundle => $group_info) {
+        $info['features']['variable'][] = "node_options_$bundle";
+        $info['features']['variable'][] = "node_preview_$bundle";
+        $info['features']['variable'][] = "node_submitted_$bundle";
+        $info['features']['variable'][] = "og_group_manager_default_rids_node_$bundle";
+      }
+    }
   }
 }
 
@@ -583,14 +626,14 @@ function commons_groups_message_partial_default() {
 function commons_groups_related_groups_text($related_groups) {
   // In 1 group: "in the x group"
   if (count($related_groups) == 1) {
-    return t(' in the !group group', array('!group' => l($related_groups[0]->title, 'node/' . $related_groups[0]->nid)));
+    return ' ' . t('in the !group group', array('!group' => l($related_groups[0]->title, 'node/' . $related_groups[0]->nid)));
   }
 
   // In 2 groups: "in the x and y groups"
   if (count($related_groups) == 2) {
-    return t(' in the !group-0 and !group-1 groups', array(
+    return ' ' . t('in the !group-0 and !group-1 groups', array(
       '!group-0' => l($related_groups[0]->title, 'node/' . $related_groups[0]->nid),
-      '!group-1' => l($related_groups[1]->title, 'node/' . $related_groups[1]->nid)
+      '!group-1' => l($related_groups[1]->title, 'node/' . $related_groups[1]->nid),
     ));
   }
 
@@ -674,20 +717,6 @@ function commons_groups_default_rules_configuration_alter(&$configs) {
 }
 
 /**
- * Implements hook_node_validate().
- */
-function commons_groups_node_validate($node, $form, &$form_state) {
-  // Ensure that group content is always posted to one or more groups.
-  // When the Commons Trusted Contacts module is enabled, we defer to its
-  // own form validation which ensures that group content nodes are posted
-  // either to a node group via the og_group_ref field or to a user group
-  // via the og_user_group_ref field.
-  if (!module_exists('commons_truste_contacts') && og_is_group_content_type('node', $node->type) && empty($form_state['values']['og_group_ref'][LANGUAGE_NONE][0]['target_id'])) {
-    form_set_error('og_group_ref', t('Please enter one more groups where this content will be posted.'));
-  }
-}
-
-/**
  * Implements hook_node_presave().
  *
  * When the node's group is private, force the group content to be private.
@@ -809,7 +838,7 @@ function commons_groups_set_group_permissions($node) {
  */
 function commons_groups_get_group_content_entity_types() {
   // Find all Commons Entity integrations.
-  $commons_entity_integrations = module_invoke_all('commons_entity_integration');
+  $commons_entity_integrations = commons_entity_integration_info();
   if (empty($commons_entity_integrations)) {
     return array();
   }
@@ -827,7 +856,28 @@ function commons_groups_get_group_content_entity_types() {
   }
 
   return $commons_entity_integrations;
+}
+
+/**
+ * Returns an array of entity types that are defined as a group.
+ */
+function commons_groups_get_group_types() {
+  // Find all Commons Entity integrations.
+  $commons_groups = array();
+  $commons_entity_integrations = commons_entity_integration_info();
+  if (empty($commons_entity_integrations)) {
+    return array();
+  }
+
+  foreach ($commons_entity_integrations as $entity_type => $integration) {
+    foreach ($integration as $bundle => $options) {
+      if (isset($options['is_group']) && $options['is_group'] == TRUE) {
+        $commons_groups[$entity_type][$bundle] = $commons_entity_integrations[$entity_type][$bundle];
+      }
+    }
+  }
 
+  return $commons_groups;
 }
 
 /**
diff --git a/modules/commons/commons_groups/commons_groups.strongarm.inc b/modules/commons/commons_groups/commons_groups.strongarm.inc
index c93c04e..42321f3 100644
--- a/modules/commons/commons_groups/commons_groups.strongarm.inc
+++ b/modules/commons/commons_groups/commons_groups.strongarm.inc
@@ -9,94 +9,148 @@
  */
 function commons_groups_strongarm() {
   $export = array();
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'comment_anonymous_group';
-  $strongarm->value = 0;
-  $export['comment_anonymous_group'] = $strongarm;
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'comment_default_mode_group';
-  $strongarm->value = 1;
-  $export['comment_default_mode_group'] = $strongarm;
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'comment_default_per_page_group';
-  $strongarm->value = '50';
-  $export['comment_default_per_page_group'] = $strongarm;
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'comment_form_location_group';
-  $strongarm->value = 1;
-  $export['comment_form_location_group'] = $strongarm;
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'comment_group';
-  $strongarm->value = '0';
-  $export['comment_group'] = $strongarm;
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'comment_preview_group';
-  $strongarm->value = '1';
-  $export['comment_preview_group'] = $strongarm;
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'comment_subject_field_group';
-  $strongarm->value = 1;
-  $export['comment_subject_field_group'] = $strongarm;
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'field_bundle_settings_node__group';
-  $strongarm->value = array(
-    'view_modes' => array(
-      'teaser' => array(
-        'custom_settings' => TRUE,
-      ),
-      'full' => array(
-        'custom_settings' => FALSE,
-      ),
-      'rss' => array(
-        'custom_settings' => FALSE,
-      ),
-      'search_index' => array(
-        'custom_settings' => FALSE,
-      ),
-      'search_result' => array(
-        'custom_settings' => FALSE,
-      ),
-      'diff_standard' => array(
-        'custom_settings' => FALSE,
-      ),
-      'token' => array(
-        'custom_settings' => FALSE,
-      ),
-    ),
-    'extra_fields' => array(
-      'form' => array(
-        'title' => array(
-          'weight' => '-5',
+  $commons_groups = commons_groups_get_group_types();
+  $group_bundles = og_get_all_group_bundle();
+
+  // These settings are automatic for all groups used within commons.
+  if (isset($group_bundles['node'])) {
+    foreach ($group_bundles['node'] as $bundle => $group_info) {
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "comment_anonymous_$bundle";
+      $strongarm->value = 0;
+      $export["comment_anonymous_$bundle"] = $strongarm;
+
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "comment_default_mode_$bundle";
+      $strongarm->value = 1;
+      $export["comment_default_mode_$bundle"] = $strongarm;
+
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "comment_default_per_page_$bundle";
+      $strongarm->value = '50';
+      $export["comment_default_per_page_$bundle"] = $strongarm;
+
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "comment_form_location_$bundle";
+      $strongarm->value = 1;
+      $export["comment_form_location_$bundle"] = $strongarm;
+
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "comment_$bundle";
+      $strongarm->value = '0';
+      $export["comment_$bundle"] = $strongarm;
+
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "comment_preview_$bundle";
+      $strongarm->value = '1';
+      $export["comment_preview_$bundle"] = $strongarm;
+
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "comment_subject_field_$bundle";
+      $strongarm->value = 1;
+      $export["comment_subject_field_$bundle"] = $strongarm;
+
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "field_bundle_settings_node__$bundle";
+      $strongarm->value = array(
+        'view_modes' => array(
+          'teaser' => array(
+            'custom_settings' => TRUE,
+          ),
+          'full' => array(
+            'custom_settings' => FALSE,
+          ),
+          'rss' => array(
+            'custom_settings' => FALSE,
+          ),
+          'search_index' => array(
+            'custom_settings' => FALSE,
+          ),
+          'search_result' => array(
+            'custom_settings' => FALSE,
+          ),
+          'diff_standard' => array(
+            'custom_settings' => FALSE,
+          ),
+          'token' => array(
+            'custom_settings' => FALSE,
+          ),
         ),
-      ),
-      'display' => array(),
-    ),
-  );
-  $export['field_bundle_settings_node__group'] = $strongarm;
+        'extra_fields' => array(
+          'form' => array(
+            'title' => array(
+              'weight' => '-5',
+            ),
+          ),
+          'display' => array(),
+        ),
+      );
+      $export["field_bundle_settings_node__$bundle"] = $strongarm;
+    }
+  }
+
+  // Add some additional default settings if the node implements the commons
+  // Specific entity integrations hook.
+  if (isset($commons_groups['node'])) {
+    foreach ($commons_groups['node'] as $bundle => $group_info) {
+
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "node_options_$bundle";
+      $strongarm->value = array(
+        0 => 'revision',
+      );
+      $export["node_options_$bundle"] = $strongarm;
+
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "node_preview_$bundle";
+      $strongarm->value = '1';
+      $export["node_preview_$bundle"] = $strongarm;
+
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "node_submitted_$bundle";
+      $strongarm->value = 0;
+      $export["node_submitted_$bundle"] = $strongarm;
+
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "og_group_manager_default_rids_node_$bundle";
+      $strongarm->value = array(
+        3 => '3',
+      );
+      $export["og_group_manager_default_rids_node_$bundle"] = $strongarm;
+    }
+  }
+
+  // These following settings are ONLY for the group content type.
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = "pathauto_node_group_pattern";
+  $strongarm->value = 'groups/[node:title]';
+  $export["pathauto_node_group_pattern"] = $strongarm;
 
   $strongarm = new stdClass();
   $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
@@ -117,45 +171,6 @@ function commons_groups_strongarm() {
   $strongarm = new stdClass();
   $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
   $strongarm->api_version = 1;
-  $strongarm->name = 'node_options_group';
-  $strongarm->value = array(
-    0 => 'revision',
-  );
-  $export['node_options_group'] = $strongarm;
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'node_preview_group';
-  $strongarm->value = '1';
-  $export['node_preview_group'] = $strongarm;
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'node_submitted_group';
-  $strongarm->value = 0;
-  $export['node_submitted_group'] = $strongarm;
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'og_group_manager_default_rids_node_group';
-  $strongarm->value = array(
-    3 => '3',
-  );
-  $export['og_group_manager_default_rids_node_group'] = $strongarm;
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'pathauto_node_group_pattern';
-  $strongarm->value = 'groups/[node:title]';
-  $export['pathauto_node_group_pattern'] = $strongarm;
-
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
   $strongarm->name = 'pathauto_node_pattern';
   $strongarm->value = 'groups/[node:og-group-ref:0:title]/[node:title]';
   $export['pathauto_node_pattern'] = $strongarm;
diff --git a/modules/commons/commons_groups/commons_groups.views_default.inc b/modules/commons/commons_groups/commons_groups.views_default.inc
index b123b4f..d7d4671 100644
--- a/modules/commons/commons_groups/commons_groups.views_default.inc
+++ b/modules/commons/commons_groups/commons_groups.views_default.inc
@@ -64,6 +64,7 @@ function commons_groups_views_default_views() {
   $handler->display->display_options['sorts']['sticky']['id'] = 'sticky';
   $handler->display->display_options['sorts']['sticky']['table'] = 'node';
   $handler->display->display_options['sorts']['sticky']['field'] = 'sticky';
+  $handler->display->display_options['sorts']['sticky']['order'] = 'DESC';
   /* Sort criterion: Content: Post date */
   $handler->display->display_options['sorts']['created']['id'] = 'created';
   $handler->display->display_options['sorts']['created']['table'] = 'node';
diff --git a/modules/commons/commons_groups/modules/commons_groups_directory/commons_groups_directory.features.inc b/modules/commons/commons_groups/modules/commons_groups_directory/commons_groups_directory.features.inc
index ad3cadb..41a3f22 100644
--- a/modules/commons/commons_groups/modules/commons_groups_directory/commons_groups_directory.features.inc
+++ b/modules/commons/commons_groups/modules/commons_groups_directory/commons_groups_directory.features.inc
@@ -11,9 +11,6 @@ function commons_groups_directory_ctools_plugin_api($module = NULL, $api = NULL)
   if ($module == "page_manager" && $api == "pages_default") {
     return array("version" => "1");
   }
-  if ($module == "panelizer" && $api == "panelizer") {
-    return array("version" => "1");
-  }
 }
 
 /**
diff --git a/modules/commons/commons_groups/modules/commons_groups_directory/commons_groups_directory.info b/modules/commons/commons_groups/modules/commons_groups_directory/commons_groups_directory.info
index 785a491..5bb77a3 100644
--- a/modules/commons/commons_groups/modules/commons_groups_directory/commons_groups_directory.info
+++ b/modules/commons/commons_groups/modules/commons_groups_directory/commons_groups_directory.info
@@ -2,17 +2,12 @@ name = Commons Groups Directory
 description = The site-wide directory of groups
 core = 7.x
 package = Commons - Landing pages
-project = commons_groups
 dependencies[] = commons_activity_streams_groups
 dependencies[] = commons_radioactivity_groups
 dependencies[] = ctools
 dependencies[] = page_manager
-dependencies[] = panelizer
-dependencies[] = panels_ipe
 dependencies[] = views_content
-datestamp = 1354346062
 features[ctools][] = page_manager:pages_default:1
-features[ctools][] = panelizer:panelizer:1
 features[ctools][] = views:views_default:3.0
 features[features_api][] = api:2
 features[page_manager_pages][] = groups_directory
diff --git a/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.info b/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.info
index 07d2dd0..fdcc25f 100644
--- a/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.info
+++ b/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.info
@@ -2,7 +2,6 @@ name = Commons Group Homepages
 description = Provides a default home page for groups
 core = 7.x
 package = Commons - Landing pages
-project = commons_groups
 dependencies[] = commons_activity_streams
 dependencies[] = commons_bw
 dependencies[] = commons_follow_group
@@ -10,7 +9,6 @@ dependencies[] = commons_radioactivity_groups
 dependencies[] = ctools
 dependencies[] = panelizer
 dependencies[] = strongarm
-datestamp = 1354346062
 features[ctools][] = panelizer:panelizer:1
 features[ctools][] = strongarm:strongarm:1
 features[features_api][] = api:2
diff --git a/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.module b/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.module
index a3b0675..defdc24 100644
--- a/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.module
+++ b/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.module
@@ -5,3 +5,52 @@
  */
 
 include_once 'commons_groups_pages.features.inc';
+
+/**
+ * Implements hook_system_info_alter().
+ */
+function commons_groups_pages_system_info_alter(&$info, $file, $type) {
+  // Commons Groups dynamically adds the og_group_ref field to
+  // content types that request it by altering the
+  // commons_groups_entity_types variable.
+  // We must add a corresponding line for each field instance
+  // to commons_groups.info so that Features is aware of the instance
+  // and can successfully revert the field_instance component back
+  // to its default state.
+  if ($file->name == 'commons_groups_pages') {
+    $group_bundles = og_get_all_group_bundle();
+    if (!empty($group_bundles['node'])) {
+      foreach ($group_bundles['node'] as $bundle => $name) {
+        // These field instances should be added to groups regardless of
+        // whether og_access.module is enabled.
+        $info['features']['panelizer_defaults'][] = "node:$bundle:default";
+        $info['features']['panelizer_defaults'][] = "node:$bundle:default:teaser";
+        $info['features']['variable'][] = "panelizer_defaults_node_$bundle";
+      }
+    }
+  }
+}
+
+/*
+ * Implements hook_features_pipe_alter().
+ */
+function commons_groups_pages_features_pipe_alter(&$pipe, $data, $export) {
+  // Prevent Commons Groups related fields from being piped in features
+  // when a content type includes those fields.
+  if (!empty($pipe['panelizer_defaults'])) {
+
+    foreach ($pipe['panelizer_defaults'] as $delta => $value) {
+      $args = explode(':', $value);
+      $group_name = $args[1];
+
+      $group_bundles = og_get_all_group_bundle();
+      if (isset($group_bundles['node']) && isset($group_bundles['node']['group'])) {
+        unset($group_bundles['node']['group']);
+      }
+      $excluded_groups = array_keys($group_bundles);
+      if (in_array($group_name, $excluded_groups)) {
+        unset($pipe['field_instance'][$delta]);
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.panelizer.inc b/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.panelizer.inc
index c55d237..0431bfb 100644
--- a/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.panelizer.inc
+++ b/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.panelizer.inc
@@ -10,441 +10,447 @@
 function commons_groups_pages_panelizer_defaults() {
   $export = array();
 
-  $panelizer = new stdClass();
-  $panelizer->disabled = FALSE; /* Edit this to true to make a default panelizer disabled initially */
-  $panelizer->api_version = 1;
-  $panelizer->name = 'node:group:default';
-  $panelizer->title = 'Default';
-  $panelizer->panelizer_type = 'node';
-  $panelizer->panelizer_key = 'group';
-  $panelizer->no_blocks = FALSE;
-  $panelizer->css_id = '';
-  $panelizer->css = '';
-  $panelizer->pipeline = 'ipe';
-  $panelizer->contexts = array();
-  $panelizer->relationships = array();
-  $panelizer->access = array();
-  $panelizer->view_mode = 'page_manager';
-  $panelizer->css_class = '';
-  $panelizer->title_element = 'H2';
-  $panelizer->link_to_entity = TRUE;
-  $panelizer->extra = '';
-  $display = new panels_display();
-  $display->layout = 'two_66_33';
-  $display->layout_settings = array();
-  $display->panel_settings = array(
-    'style_settings' => array(
-      'default' => NULL,
-      'top' => NULL,
-      'left' => NULL,
-      'right' => NULL,
-      'bottom' => NULL,
-      'two_66_33_top' => NULL,
-      'two_66_33_first' => NULL,
-      'two_66_33_second' => NULL,
-      'two_66_33_bottom' => NULL,
-    ),
-  );
-  $display->cache = array();
-  $display->title = '%node:title';
-  $display->uuid = '819deb2a-c56c-2214-558d-c52460a89778';
-  $display->content = array();
-  $display->panels = array();
-    $pane = new stdClass();
-    $pane->pid = 'new-10f12c5b-679e-d294-b1bd-9aac845800f5';
-    $pane->panel = 'two_66_33_first';
-    $pane->type = 'node_content';
-    $pane->subtype = 'node_content';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'links' => 1,
-      'no_extras' => 0,
-      'override_title' => 1,
-      'override_title_text' => '',
-      'identifier' => '',
-      'link' => 0,
-      'leave_node_title' => 0,
-      'build_mode' => 'full',
-      'context' => 'panelizer',
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 0;
-    $pane->locks = array();
-    $pane->uuid = '10f12c5b-679e-d294-b1bd-9aac845800f5';
-    $display->content['new-10f12c5b-679e-d294-b1bd-9aac845800f5'] = $pane;
-    $display->panels['two_66_33_first'][0] = 'new-10f12c5b-679e-d294-b1bd-9aac845800f5';
-    $pane = new stdClass();
-    $pane->pid = 'new-80b62348-7cee-e304-5d65-0ce1b6bbb216';
-    $pane->panel = 'two_66_33_first';
-    $pane->type = 'commons_bw_group';
-    $pane->subtype = 'commons_bw_group';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'override_title' => 0,
-      'override_title_text' => '',
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 1;
-    $pane->locks = array();
-    $pane->uuid = '80b62348-7cee-e304-5d65-0ce1b6bbb216';
-    $display->content['new-80b62348-7cee-e304-5d65-0ce1b6bbb216'] = $pane;
-    $display->panels['two_66_33_first'][1] = 'new-80b62348-7cee-e304-5d65-0ce1b6bbb216';
-    $pane = new stdClass();
-    $pane->pid = 'new-13120946-03a1-bfc4-2d74-f39dd758ebce';
-    $pane->panel = 'two_66_33_second';
-    $pane->type = 'views_panes';
-    $pane->subtype = 'commons_events_upcoming-panel_pane_1';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'context' => array(
-        0 => 'panelizer',
-      ),
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 0;
-    $pane->locks = array();
-    $pane->uuid = '13120946-03a1-bfc4-2d74-f39dd758ebce';
-    $display->content['new-13120946-03a1-bfc4-2d74-f39dd758ebce'] = $pane;
-    $display->panels['two_66_33_second'][0] = 'new-13120946-03a1-bfc4-2d74-f39dd758ebce';
-    $pane = new stdClass();
-    $pane->pid = 'new-a7009535-0e2a-2c94-edd2-4ecc953c4ca2';
-    $pane->panel = 'two_66_33_second';
-    $pane->type = 'views_panes';
-    $pane->subtype = 'activity_group-panel_pane_1';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'items_per_page' => '4',
-      'arguments' => array(
-        'gid' => '%node:nid',
-      ),
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 1;
-    $pane->locks = array();
-    $pane->uuid = 'a7009535-0e2a-2c94-edd2-4ecc953c4ca2';
-    $display->content['new-a7009535-0e2a-2c94-edd2-4ecc953c4ca2'] = $pane;
-    $display->panels['two_66_33_second'][1] = 'new-a7009535-0e2a-2c94-edd2-4ecc953c4ca2';
-    $pane = new stdClass();
-    $pane->pid = 'new-ba735f2b-4734-7724-098d-1925c6a4bb47';
-    $pane->panel = 'two_66_33_second';
-    $pane->type = 'views_panes';
-    $pane->subtype = 'commons_radioactivity_groups_active_in_group-panel_pane_1';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'arguments' => array(
-        'gid' => '%node:nid',
-      ),
-      'context' => array(
-        0 => 'panelizer',
-      ),
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 2;
-    $pane->locks = array();
-    $pane->uuid = 'ba735f2b-4734-7724-098d-1925c6a4bb47';
-    $display->content['new-ba735f2b-4734-7724-098d-1925c6a4bb47'] = $pane;
-    $display->panels['two_66_33_second'][2] = 'new-ba735f2b-4734-7724-098d-1925c6a4bb47';
-    $pane = new stdClass();
-    $pane->pid = 'new-52796f83-93dd-2cf4-41aa-33520dc31e5f';
-    $pane->panel = 'two_66_33_second';
-    $pane->type = 'views_panes';
-    $pane->subtype = 'commons_contributors_group-panel_pane_2';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'context' => array(
-        0 => 'panelizer',
-      ),
-    );
-    $pane->cache = array(
-      'method' => 'simple',
-      'settings' => array(
-        'lifetime' => '15',
-        'granularity' => 'context',
-      ),
-    );
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 3;
-    $pane->locks = array();
-    $pane->uuid = '52796f83-93dd-2cf4-41aa-33520dc31e5f';
-    $display->content['new-52796f83-93dd-2cf4-41aa-33520dc31e5f'] = $pane;
-    $display->panels['two_66_33_second'][3] = 'new-52796f83-93dd-2cf4-41aa-33520dc31e5f';
-  $display->hide_title = PANELS_TITLE_FIXED;
-  $display->title_pane = '0';
-  $panelizer->display = $display;
-  $export['node:group:default'] = $panelizer;
+  $group_bundles = og_get_all_group_bundle();
+  if (!empty($group_bundles['node'])) {
+    foreach ($group_bundles['node'] as $bundle => $name) {
+      $panelizer = new stdClass();
+      $panelizer->disabled = FALSE; /* Edit this to true to make a default panelizer disabled initially */
+      $panelizer->api_version = 1;
+      $panelizer->name = "node:$bundle:default";
+      $panelizer->title = 'Default';
+      $panelizer->panelizer_type = 'node';
+      $panelizer->panelizer_key = $bundle;
+      $panelizer->no_blocks = FALSE;
+      $panelizer->css_id = '';
+      $panelizer->css = '';
+      $panelizer->pipeline = 'ipe';
+      $panelizer->contexts = array();
+      $panelizer->relationships = array();
+      $panelizer->access = array();
+      $panelizer->view_mode = 'page_manager';
+      $panelizer->css_class = '';
+      $panelizer->title_element = 'H2';
+      $panelizer->link_to_entity = TRUE;
+      $panelizer->extra = '';
+      $display = new panels_display();
+      $display->layout = 'two_66_33';
+      $display->layout_settings = array();
+      $display->panel_settings = array(
+        'style_settings' => array(
+          'default' => NULL,
+          'top' => NULL,
+          'left' => NULL,
+          'right' => NULL,
+          'bottom' => NULL,
+          'two_66_33_top' => NULL,
+          'two_66_33_first' => NULL,
+          'two_66_33_second' => NULL,
+          'two_66_33_bottom' => NULL,
+        ),
+      );
+      $display->cache = array();
+      $display->title = '%node:title';
+      $display->uuid = '819deb2a-c56c-2214-558d-c52460a89778';
+      $display->content = array();
+      $display->panels = array();
+      $pane = new stdClass();
+      $pane->pid = 'new-10f12c5b-679e-d294-b1bd-9aac845800f5';
+      $pane->panel = 'two_66_33_first';
+      $pane->type = 'node_content';
+      $pane->subtype = 'node_content';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'links' => 1,
+        'no_extras' => 0,
+        'override_title' => 1,
+        'override_title_text' => '',
+        'identifier' => '',
+        'link' => 0,
+        'leave_node_title' => 0,
+        'build_mode' => 'full',
+        'context' => 'panelizer',
+      );
+      $pane->cache = array();
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 0;
+      $pane->locks = array();
+      $pane->uuid = '10f12c5b-679e-d294-b1bd-9aac845800f5';
+      $display->content['new-10f12c5b-679e-d294-b1bd-9aac845800f5'] = $pane;
+      $display->panels['two_66_33_first'][0] = 'new-10f12c5b-679e-d294-b1bd-9aac845800f5';
+      $pane = new stdClass();
+      $pane->pid = 'new-80b62348-7cee-e304-5d65-0ce1b6bbb216';
+      $pane->panel = 'two_66_33_first';
+      $pane->type = 'commons_bw_group';
+      $pane->subtype = 'commons_bw_group';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'override_title' => 0,
+        'override_title_text' => '',
+      );
+      $pane->cache = array();
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 1;
+      $pane->locks = array();
+      $pane->uuid = '80b62348-7cee-e304-5d65-0ce1b6bbb216';
+      $display->content['new-80b62348-7cee-e304-5d65-0ce1b6bbb216'] = $pane;
+      $display->panels['two_66_33_first'][1] = 'new-80b62348-7cee-e304-5d65-0ce1b6bbb216';
+      $pane = new stdClass();
+      $pane->pid = 'new-13120946-03a1-bfc4-2d74-f39dd758ebce';
+      $pane->panel = 'two_66_33_second';
+      $pane->type = 'views_panes';
+      $pane->subtype = 'commons_events_upcoming-panel_pane_1';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'context' => array(
+          0 => 'panelizer',
+        ),
+      );
+      $pane->cache = array();
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 0;
+      $pane->locks = array();
+      $pane->uuid = '13120946-03a1-bfc4-2d74-f39dd758ebce';
+      $display->content['new-13120946-03a1-bfc4-2d74-f39dd758ebce'] = $pane;
+      $display->panels['two_66_33_second'][0] = 'new-13120946-03a1-bfc4-2d74-f39dd758ebce';
+      $pane = new stdClass();
+      $pane->pid = 'new-a7009535-0e2a-2c94-edd2-4ecc953c4ca2';
+      $pane->panel = 'two_66_33_second';
+      $pane->type = 'views_panes';
+      $pane->subtype = 'activity_group-panel_pane_1';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'items_per_page' => '4',
+        'arguments' => array(
+          'gid' => '%node:nid',
+        ),
+      );
+      $pane->cache = array();
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 1;
+      $pane->locks = array();
+      $pane->uuid = 'a7009535-0e2a-2c94-edd2-4ecc953c4ca2';
+      $display->content['new-a7009535-0e2a-2c94-edd2-4ecc953c4ca2'] = $pane;
+      $display->panels['two_66_33_second'][1] = 'new-a7009535-0e2a-2c94-edd2-4ecc953c4ca2';
+      $pane = new stdClass();
+      $pane->pid = 'new-ba735f2b-4734-7724-098d-1925c6a4bb47';
+      $pane->panel = 'two_66_33_second';
+      $pane->type = 'views_panes';
+      $pane->subtype = 'commons_radioactivity_groups_active_in_group-panel_pane_1';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'arguments' => array(
+          'gid' => '%node:nid',
+        ),
+        'context' => array(
+          0 => 'panelizer',
+        ),
+      );
+      $pane->cache = array();
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 2;
+      $pane->locks = array();
+      $pane->uuid = 'ba735f2b-4734-7724-098d-1925c6a4bb47';
+      $display->content['new-ba735f2b-4734-7724-098d-1925c6a4bb47'] = $pane;
+      $display->panels['two_66_33_second'][2] = 'new-ba735f2b-4734-7724-098d-1925c6a4bb47';
+      $pane = new stdClass();
+      $pane->pid = 'new-52796f83-93dd-2cf4-41aa-33520dc31e5f';
+      $pane->panel = 'two_66_33_second';
+      $pane->type = 'views_panes';
+      $pane->subtype = 'commons_contributors_group-panel_pane_2';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'context' => array(
+          0 => 'panelizer',
+        ),
+      );
+      $pane->cache = array(
+        'method' => 'simple',
+        'settings' => array(
+          'lifetime' => '15',
+          'granularity' => 'context',
+        ),
+      );
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 3;
+      $pane->locks = array();
+      $pane->uuid = '52796f83-93dd-2cf4-41aa-33520dc31e5f';
+      $display->content['new-52796f83-93dd-2cf4-41aa-33520dc31e5f'] = $pane;
+      $display->panels['two_66_33_second'][3] = 'new-52796f83-93dd-2cf4-41aa-33520dc31e5f';
+      $display->hide_title = PANELS_TITLE_FIXED;
+      $display->title_pane = '0';
+      $panelizer->display = $display;
+      $export["node:$bundle:default"] = $panelizer;
+
+      $panelizer = new stdClass();
+      $panelizer->disabled = FALSE; /* Edit this to true to make a default panelizer disabled initially */
+      $panelizer->api_version = 1;
+      $panelizer->name = "node:$bundle:default:teaser";
+      $panelizer->title = 'Default';
+      $panelizer->panelizer_type = 'node';
+      $panelizer->panelizer_key = "$bundle";
+      $panelizer->no_blocks = FALSE;
+      $panelizer->css_id = '';
+      $panelizer->css = '';
+      $panelizer->pipeline = 'standard';
+      $panelizer->contexts = array();
+      $panelizer->relationships = array();
+      $panelizer->access = array();
+      $panelizer->view_mode = 'teaser';
+      $panelizer->css_class = '';
+      $panelizer->title_element = 'H2';
+      $panelizer->link_to_entity = TRUE;
+      $panelizer->extra = array();
+      $display = new panels_display();
+      $display->layout = 'one';
+      $display->layout_settings = array();
+      $display->panel_settings = array(
+        'style_settings' => array(
+          'default' => NULL,
+          'one_main' => NULL,
+        ),
+      );
+      $display->cache = array();
+      $display->title = '%node:title';
+      $display->uuid = '2880dc3a-9be6-dc34-a563-b9748d152f92';
+      $display->content = array();
+      $display->panels = array();
+      $pane = new stdClass();
+      $pane->pid = 'new-026f9d2d-fd0e-d794-1971-47eb628a7f6e';
+      $pane->panel = 'one_main';
+      $pane->type = 'entity_field';
+      $pane->subtype = 'node:group_group';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'label' => 'hidden',
+        'formatter' => 'commons_groups_group_subscribe',
+        'delta_limit' => 0,
+        'delta_offset' => '0',
+        'delta_reversed' => FALSE,
+        'formatter_settings' => array(),
+        'context' => 'panelizer',
+        'override_title' => 0,
+        'override_title_text' => '',
+      );
+      $pane->cache = array();
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 0;
+      $pane->locks = array();
+      $pane->uuid = '026f9d2d-fd0e-d794-1971-47eb628a7f6e';
+      $display->content['new-026f9d2d-fd0e-d794-1971-47eb628a7f6e'] = $pane;
+      $display->panels['one_main'][0] = 'new-026f9d2d-fd0e-d794-1971-47eb628a7f6e';
+      $pane = new stdClass();
+      $pane->pid = 'new-13859111-e3fa-5e54-a93c-57f09d719e38';
+      $pane->panel = 'one_main';
+      $pane->type = 'token';
+      $pane->subtype = 'node:commons-groups-group-contributors-count-topics';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'sanitize' => 0,
+        'context' => 'panelizer',
+        'override_title' => 0,
+        'override_title_text' => '',
+      );
+      $pane->cache = array();
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 1;
+      $pane->locks = array();
+      $pane->uuid = '13859111-e3fa-5e54-a93c-57f09d719e38';
+      $display->content['new-13859111-e3fa-5e54-a93c-57f09d719e38'] = $pane;
+      $display->panels['one_main'][1] = 'new-13859111-e3fa-5e54-a93c-57f09d719e38';
+      $pane = new stdClass();
+      $pane->pid = 'new-f7a3719c-d7be-f024-ed91-c8c0df943df4';
+      $pane->panel = 'one_main';
+      $pane->type = 'token';
+      $pane->subtype = 'node:flag-commons-follow-group-link';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'sanitize' => 0,
+        'context' => 'panelizer',
+        'override_title' => 1,
+        'override_title_text' => '',
+      );
+      $pane->cache = array();
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 2;
+      $pane->locks = array();
+      $pane->uuid = 'f7a3719c-d7be-f024-ed91-c8c0df943df4';
+      $display->content['new-f7a3719c-d7be-f024-ed91-c8c0df943df4'] = $pane;
+      $display->panels['one_main'][2] = 'new-f7a3719c-d7be-f024-ed91-c8c0df943df4';
+      $pane = new stdClass();
+      $pane->pid = 'new-926a99b3-8e75-aa14-2542-16f2ab9e70b3';
+      $pane->panel = 'one_main';
+      $pane->type = 'entity_field';
+      $pane->subtype = 'node:field_group_logo';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'label' => 'hidden',
+        'formatter' => 'image',
+        'delta_limit' => 0,
+        'delta_offset' => '0',
+        'delta_reversed' => FALSE,
+        'formatter_settings' => array(
+          'image_style' => '50x50',
+          'image_link' => 'content',
+        ),
+        'context' => 'panelizer',
+        'override_title' => 0,
+        'override_title_text' => '',
+      );
+      $pane->cache = array();
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 3;
+      $pane->locks = array();
+      $pane->uuid = '926a99b3-8e75-aa14-2542-16f2ab9e70b3';
+      $display->content['new-926a99b3-8e75-aa14-2542-16f2ab9e70b3'] = $pane;
+      $display->panels['one_main'][3] = 'new-926a99b3-8e75-aa14-2542-16f2ab9e70b3';
+      $pane = new stdClass();
+      $pane->pid = 'new-c22911c5-3c21-75b4-c5f3-80efb733956b';
+      $pane->panel = 'one_main';
+      $pane->type = 'entity_field';
+      $pane->subtype = 'node:body';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'label' => 'hidden',
+        'formatter' => 'text_summary_or_trimmed',
+        'delta_limit' => 0,
+        'delta_offset' => '0',
+        'delta_reversed' => FALSE,
+        'formatter_settings' => array(
+          'trim_length' => '600',
+        ),
+        'context' => 'panelizer',
+        'override_title' => 0,
+        'override_title_text' => 'Por que no se ve?',
+      );
+      $pane->cache = array();
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 4;
+      $pane->locks = array();
+      $pane->uuid = 'c22911c5-3c21-75b4-c5f3-80efb733956b';
+      $display->content['new-c22911c5-3c21-75b4-c5f3-80efb733956b'] = $pane;
+      $display->panels['one_main'][4] = 'new-c22911c5-3c21-75b4-c5f3-80efb733956b';
+      $pane = new stdClass();
+      $pane->pid = 'new-cb706c02-36e8-a414-c9f5-c34bf15861ca';
+      $pane->panel = 'one_main';
+      $pane->type = 'views';
+      $pane->subtype = 'commons_groups_recent_content';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'override_pager_settings' => 0,
+        'use_pager' => 0,
+        'nodes_per_page' => '5',
+        'pager_id' => '0',
+        'offset' => '0',
+        'more_link' => 0,
+        'feed_icons' => 0,
+        'panel_args' => 0,
+        'link_to_view' => 0,
+        'args' => '',
+        'url' => '',
+        'display' => 'block',
+        'context' => array(
+          0 => 'panelizer.nid',
+        ),
+        'override_title' => 1,
+        'override_title_text' => 'Recent content',
+      );
+      $pane->cache = array();
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 5;
+      $pane->locks = array();
+      $pane->uuid = 'cb706c02-36e8-a414-c9f5-c34bf15861ca';
+      $display->content['new-cb706c02-36e8-a414-c9f5-c34bf15861ca'] = $pane;
+      $display->panels['one_main'][5] = 'new-cb706c02-36e8-a414-c9f5-c34bf15861ca';
+      $pane = new stdClass();
+      $pane->pid = 'new-6c3207ac-19f3-8184-11ba-e3aee789a9c8';
+      $pane->panel = 'one_main';
+      $pane->type = 'views_panes';
+      $pane->subtype = 'commons_contributors_group-panel_pane_1';
+      $pane->shown = TRUE;
+      $pane->access = array();
+      $pane->configuration = array(
+        'context' => array(
+          0 => 'panelizer',
+        ),
+      );
+      $pane->cache = array();
+      $pane->style = array(
+        'settings' => NULL,
+      );
+      $pane->css = array();
+      $pane->extras = array();
+      $pane->position = 6;
+      $pane->locks = array();
+      $pane->uuid = '6c3207ac-19f3-8184-11ba-e3aee789a9c8';
+      $display->content['new-6c3207ac-19f3-8184-11ba-e3aee789a9c8'] = $pane;
+      $display->panels['one_main'][6] = 'new-6c3207ac-19f3-8184-11ba-e3aee789a9c8';
+      $display->hide_title = PANELS_TITLE_FIXED;
+      $display->title_pane = '0';
+      $panelizer->display = $display;
+      $export["node:$bundle:default:teaser"] = $panelizer;
+    }
+  }
 
-  $panelizer = new stdClass();
-  $panelizer->disabled = FALSE; /* Edit this to true to make a default panelizer disabled initially */
-  $panelizer->api_version = 1;
-  $panelizer->name = 'node:group:default:teaser';
-  $panelizer->title = 'Default';
-  $panelizer->panelizer_type = 'node';
-  $panelizer->panelizer_key = 'group';
-  $panelizer->no_blocks = FALSE;
-  $panelizer->css_id = '';
-  $panelizer->css = '';
-  $panelizer->pipeline = 'standard';
-  $panelizer->contexts = array();
-  $panelizer->relationships = array();
-  $panelizer->access = array();
-  $panelizer->view_mode = 'teaser';
-  $panelizer->css_class = '';
-  $panelizer->title_element = 'H2';
-  $panelizer->link_to_entity = TRUE;
-  $panelizer->extra = array();
-  $display = new panels_display();
-  $display->layout = 'one';
-  $display->layout_settings = array();
-  $display->panel_settings = array(
-    'style_settings' => array(
-      'default' => NULL,
-      'one_main' => NULL,
-    ),
-  );
-  $display->cache = array();
-  $display->title = '%node:title';
-  $display->uuid = '2880dc3a-9be6-dc34-a563-b9748d152f92';
-  $display->content = array();
-  $display->panels = array();
-    $pane = new stdClass();
-    $pane->pid = 'new-026f9d2d-fd0e-d794-1971-47eb628a7f6e';
-    $pane->panel = 'one_main';
-    $pane->type = 'entity_field';
-    $pane->subtype = 'node:group_group';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'label' => 'hidden',
-      'formatter' => 'commons_groups_group_subscribe',
-      'delta_limit' => 0,
-      'delta_offset' => '0',
-      'delta_reversed' => FALSE,
-      'formatter_settings' => array(),
-      'context' => 'panelizer',
-      'override_title' => 0,
-      'override_title_text' => '',
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 0;
-    $pane->locks = array();
-    $pane->uuid = '026f9d2d-fd0e-d794-1971-47eb628a7f6e';
-    $display->content['new-026f9d2d-fd0e-d794-1971-47eb628a7f6e'] = $pane;
-    $display->panels['one_main'][0] = 'new-026f9d2d-fd0e-d794-1971-47eb628a7f6e';
-    $pane = new stdClass();
-    $pane->pid = 'new-13859111-e3fa-5e54-a93c-57f09d719e38';
-    $pane->panel = 'one_main';
-    $pane->type = 'token';
-    $pane->subtype = 'node:commons-groups-group-contributors-count-topics';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'sanitize' => 0,
-      'context' => 'panelizer',
-      'override_title' => 0,
-      'override_title_text' => '',
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 1;
-    $pane->locks = array();
-    $pane->uuid = '13859111-e3fa-5e54-a93c-57f09d719e38';
-    $display->content['new-13859111-e3fa-5e54-a93c-57f09d719e38'] = $pane;
-    $display->panels['one_main'][1] = 'new-13859111-e3fa-5e54-a93c-57f09d719e38';
-    $pane = new stdClass();
-    $pane->pid = 'new-f7a3719c-d7be-f024-ed91-c8c0df943df4';
-    $pane->panel = 'one_main';
-    $pane->type = 'token';
-    $pane->subtype = 'node:flag-commons-follow-group-link';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'sanitize' => 0,
-      'context' => 'panelizer',
-      'override_title' => 1,
-      'override_title_text' => '',
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 2;
-    $pane->locks = array();
-    $pane->uuid = 'f7a3719c-d7be-f024-ed91-c8c0df943df4';
-    $display->content['new-f7a3719c-d7be-f024-ed91-c8c0df943df4'] = $pane;
-    $display->panels['one_main'][2] = 'new-f7a3719c-d7be-f024-ed91-c8c0df943df4';
-    $pane = new stdClass();
-    $pane->pid = 'new-926a99b3-8e75-aa14-2542-16f2ab9e70b3';
-    $pane->panel = 'one_main';
-    $pane->type = 'entity_field';
-    $pane->subtype = 'node:field_group_logo';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'label' => 'hidden',
-      'formatter' => 'image',
-      'delta_limit' => 0,
-      'delta_offset' => '0',
-      'delta_reversed' => FALSE,
-      'formatter_settings' => array(
-        'image_style' => '50x50',
-        'image_link' => 'content',
-      ),
-      'context' => 'panelizer',
-      'override_title' => 0,
-      'override_title_text' => '',
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 3;
-    $pane->locks = array();
-    $pane->uuid = '926a99b3-8e75-aa14-2542-16f2ab9e70b3';
-    $display->content['new-926a99b3-8e75-aa14-2542-16f2ab9e70b3'] = $pane;
-    $display->panels['one_main'][3] = 'new-926a99b3-8e75-aa14-2542-16f2ab9e70b3';
-    $pane = new stdClass();
-    $pane->pid = 'new-c22911c5-3c21-75b4-c5f3-80efb733956b';
-    $pane->panel = 'one_main';
-    $pane->type = 'entity_field';
-    $pane->subtype = 'node:body';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'label' => 'hidden',
-      'formatter' => 'text_summary_or_trimmed',
-      'delta_limit' => 0,
-      'delta_offset' => '0',
-      'delta_reversed' => FALSE,
-      'formatter_settings' => array(
-        'trim_length' => '600',
-      ),
-      'context' => 'panelizer',
-      'override_title' => 0,
-      'override_title_text' => 'Por que no se ve?',
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 4;
-    $pane->locks = array();
-    $pane->uuid = 'c22911c5-3c21-75b4-c5f3-80efb733956b';
-    $display->content['new-c22911c5-3c21-75b4-c5f3-80efb733956b'] = $pane;
-    $display->panels['one_main'][4] = 'new-c22911c5-3c21-75b4-c5f3-80efb733956b';
-    $pane = new stdClass();
-    $pane->pid = 'new-cb706c02-36e8-a414-c9f5-c34bf15861ca';
-    $pane->panel = 'one_main';
-    $pane->type = 'views';
-    $pane->subtype = 'commons_groups_recent_content';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'override_pager_settings' => 0,
-      'use_pager' => 0,
-      'nodes_per_page' => '5',
-      'pager_id' => '0',
-      'offset' => '0',
-      'more_link' => 0,
-      'feed_icons' => 0,
-      'panel_args' => 0,
-      'link_to_view' => 0,
-      'args' => '',
-      'url' => '',
-      'display' => 'block',
-      'context' => array(
-        0 => 'panelizer.nid',
-      ),
-      'override_title' => 1,
-      'override_title_text' => 'Recent content',
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 5;
-    $pane->locks = array();
-    $pane->uuid = 'cb706c02-36e8-a414-c9f5-c34bf15861ca';
-    $display->content['new-cb706c02-36e8-a414-c9f5-c34bf15861ca'] = $pane;
-    $display->panels['one_main'][5] = 'new-cb706c02-36e8-a414-c9f5-c34bf15861ca';
-    $pane = new stdClass();
-    $pane->pid = 'new-6c3207ac-19f3-8184-11ba-e3aee789a9c8';
-    $pane->panel = 'one_main';
-    $pane->type = 'views_panes';
-    $pane->subtype = 'commons_contributors_group-panel_pane_1';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'context' => array(
-        0 => 'panelizer',
-      ),
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 6;
-    $pane->locks = array();
-    $pane->uuid = '6c3207ac-19f3-8184-11ba-e3aee789a9c8';
-    $display->content['new-6c3207ac-19f3-8184-11ba-e3aee789a9c8'] = $pane;
-    $display->panels['one_main'][6] = 'new-6c3207ac-19f3-8184-11ba-e3aee789a9c8';
-  $display->hide_title = PANELS_TITLE_FIXED;
-  $display->title_pane = '0';
-  $panelizer->display = $display;
-  $export['node:group:default:teaser'] = $panelizer;
 
   return $export;
 }
diff --git a/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.strongarm.inc b/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.strongarm.inc
index 626f9cc..8de19ca 100644
--- a/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.strongarm.inc
+++ b/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.strongarm.inc
@@ -10,31 +10,37 @@
 function commons_groups_pages_strongarm() {
   $export = array();
 
-  $strongarm = new stdClass();
-  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-  $strongarm->api_version = 1;
-  $strongarm->name = 'panelizer_defaults_node_group';
-  $strongarm->value = array(
-    'status' => 1,
-    'view modes' => array(
-      'page_manager' => array(
+  $group_bundles = og_get_all_group_bundle();
+  if (!empty($group_bundles['node'])) {
+    // Don't alter the group panel.
+    foreach ($group_bundles['node'] as $bundle => $name) {
+      $strongarm = new stdClass();
+      $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+      $strongarm->api_version = 1;
+      $strongarm->name = "panelizer_defaults_node_$bundle";
+      $strongarm->value = array(
         'status' => 1,
-        'default' => 1,
-        'choice' => 0,
-      ),
-      'default' => array(
-        'status' => 0,
-        'default' => 0,
-        'choice' => 0,
-      ),
-      'teaser' => array(
-        'status' => 1,
-        'default' => 1,
-        'choice' => 0,
-      ),
-    ),
-  );
-  $export['panelizer_defaults_node_group'] = $strongarm;
+        'view modes' => array(
+          'page_manager' => array(
+            'status' => 1,
+            'default' => 1,
+            'choice' => 0,
+          ),
+          'default' => array(
+            'status' => 0,
+            'default' => 0,
+            'choice' => 0,
+          ),
+          'teaser' => array(
+            'status' => 1,
+            'default' => 1,
+            'choice' => 0,
+          ),
+        ),
+      );
+      $export["panelizer_defaults_node_$bundle"] = $strongarm;
+    }
+  }
 
   return $export;
 }
diff --git a/modules/commons/commons_images/commons_images.default_breakpoint_group.inc b/modules/commons/commons_images/commons_images.default_breakpoint_group.inc
new file mode 100644
index 0000000..a5492eb
--- /dev/null
+++ b/modules/commons/commons_images/commons_images.default_breakpoint_group.inc
@@ -0,0 +1,90 @@
+<?php
+/**
+ * @file
+ * commons_images.default_breakpoint_group.inc
+ */
+
+/**
+ * Implements hook_default_breakpoint_group().
+ */
+function commons_images_default_breakpoint_group() {
+  $export = array();
+
+  // Breakpoints.
+  $breakpoints = array();
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons large';
+
+  // Breakpoint group.
+  $breakpoint_group = new stdClass();
+  $breakpoint_group->disabled = FALSE; /* Edit this to true to make a default breakpoint_group disabled initially */
+  $breakpoint_group->api_version = 1;
+  $breakpoint_group->machine_name = 'commons_default';
+  $breakpoint_group->name = 'Commons default';
+  $breakpoint_group->breakpoints = $breakpoints;
+  $breakpoint_group->type = 'module';
+  $breakpoint_group->overridden = 0;
+  $export['commons_default'] = $breakpoint_group;
+
+  // Breakpoints.
+  $breakpoints = array();
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons large';
+
+  // Breakpoint group.
+  $breakpoint_group = new stdClass();
+  $breakpoint_group->disabled = FALSE; /* Edit this to true to make a default breakpoint_group disabled initially */
+  $breakpoint_group->api_version = 1;
+  $breakpoint_group->machine_name = 'commons_full';
+  $breakpoint_group->name = 'Commons full';
+  $breakpoint_group->breakpoints = $breakpoints;
+  $breakpoint_group->type = 'module';
+  $breakpoint_group->overridden = 0;
+  $export['commons_full'] = $breakpoint_group;
+
+  // Breakpoints.
+  $breakpoints = array();
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons large';
+
+  // Breakpoint group.
+  $breakpoint_group = new stdClass();
+  $breakpoint_group->disabled = FALSE; /* Edit this to true to make a default breakpoint_group disabled initially */
+  $breakpoint_group->api_version = 1;
+  $breakpoint_group->machine_name = 'commons_origins';
+  $breakpoint_group->name = 'Commons Origins';
+  $breakpoint_group->breakpoints = $breakpoints;
+  $breakpoint_group->type = 'theme';
+  $breakpoint_group->overridden = 0;
+  $export['commons_origins'] = $breakpoint_group;
+
+  // Breakpoints.
+  $breakpoints = array();
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons large';
+
+  // Breakpoint group.
+  $breakpoint_group = new stdClass();
+  $breakpoint_group->disabled = FALSE; /* Edit this to true to make a default breakpoint_group disabled initially */
+  $breakpoint_group->api_version = 1;
+  $breakpoint_group->machine_name = 'commons_teaser';
+  $breakpoint_group->name = 'Commons teaser';
+  $breakpoint_group->breakpoints = $breakpoints;
+  $breakpoint_group->type = 'module';
+  $breakpoint_group->overridden = 0;
+  $export['commons_teaser'] = $breakpoint_group;
+
+  return $export;
+}
diff --git a/modules/commons/commons_images/commons_images.default_breakpoints.inc b/modules/commons/commons_images/commons_images.default_breakpoints.inc
new file mode 100644
index 0000000..fbda730
--- /dev/null
+++ b/modules/commons/commons_images/commons_images.default_breakpoints.inc
@@ -0,0 +1,89 @@
+<?php
+/**
+ * @file
+ * commons_images.default_breakpoints.inc
+ */
+
+/**
+ * Implements hook_default_breakpoints().
+ */
+function commons_images_default_breakpoints() {
+  $export = array();
+
+  $breakpoint = new stdClass();
+  $breakpoint->disabled = FALSE; /* Edit this to true to make a default breakpoint disabled initially */
+  $breakpoint->api_version = 1;
+  $breakpoint->machine_name = 'breakpoints.theme.commons_origins.commons large';
+  $breakpoint->name = 'Commons large';
+  $breakpoint->breakpoint = 'only screen and (min-width:935px)';
+  $breakpoint->source = 'commons_origins';
+  $breakpoint->source_type = 'theme';
+  $breakpoint->status = 1;
+  $breakpoint->weight = 4;
+  $breakpoint->multipliers = array(
+    '1x' => '1x',
+  );
+  $export['breakpoints.theme.commons_origins.commons large'] = $breakpoint;
+
+  $breakpoint = new stdClass();
+  $breakpoint->disabled = FALSE; /* Edit this to true to make a default breakpoint disabled initially */
+  $breakpoint->api_version = 1;
+  $breakpoint->machine_name = 'breakpoints.theme.commons_origins.commons medium landscape';
+  $breakpoint->name = 'Commons medium landscape';
+  $breakpoint->breakpoint = 'only screen and (min-width:769px) and (max-width:934px';
+  $breakpoint->source = 'commons_origins';
+  $breakpoint->source_type = 'theme';
+  $breakpoint->status = 1;
+  $breakpoint->weight = 3;
+  $breakpoint->multipliers = array(
+    '1x' => '1x',
+  );
+  $export['breakpoints.theme.commons_origins.commons medium landscape'] = $breakpoint;
+
+  $breakpoint = new stdClass();
+  $breakpoint->disabled = FALSE; /* Edit this to true to make a default breakpoint disabled initially */
+  $breakpoint->api_version = 1;
+  $breakpoint->machine_name = 'breakpoints.theme.commons_origins.commons medium portrait';
+  $breakpoint->name = 'Commons medium portrait';
+  $breakpoint->breakpoint = 'only screen and (min-width:481px) and (max-width:768px)';
+  $breakpoint->source = 'commons_origins';
+  $breakpoint->source_type = 'theme';
+  $breakpoint->status = 1;
+  $breakpoint->weight = 2;
+  $breakpoint->multipliers = array(
+    '1x' => '1x',
+  );
+  $export['breakpoints.theme.commons_origins.commons medium portrait'] = $breakpoint;
+
+  $breakpoint = new stdClass();
+  $breakpoint->disabled = FALSE; /* Edit this to true to make a default breakpoint disabled initially */
+  $breakpoint->api_version = 1;
+  $breakpoint->machine_name = 'breakpoints.theme.commons_origins.commons small landscape';
+  $breakpoint->name = 'Commons small landscape';
+  $breakpoint->breakpoint = 'only screen and (min-width:321px) and (max-width:480px)';
+  $breakpoint->source = 'commons_origins';
+  $breakpoint->source_type = 'theme';
+  $breakpoint->status = 1;
+  $breakpoint->weight = 1;
+  $breakpoint->multipliers = array(
+    '1x' => '1x',
+  );
+  $export['breakpoints.theme.commons_origins.commons small landscape'] = $breakpoint;
+
+  $breakpoint = new stdClass();
+  $breakpoint->disabled = FALSE; /* Edit this to true to make a default breakpoint disabled initially */
+  $breakpoint->api_version = 1;
+  $breakpoint->machine_name = 'breakpoints.theme.commons_origins.commons small portrait';
+  $breakpoint->name = 'Commons small portrait';
+  $breakpoint->breakpoint = 'only screen and (max-width:320px)';
+  $breakpoint->source = 'commons_origins';
+  $breakpoint->source_type = 'theme';
+  $breakpoint->status = 1;
+  $breakpoint->weight = 0;
+  $breakpoint->multipliers = array(
+    '1x' => '1x',
+  );
+  $export['breakpoints.theme.commons_origins.commons small portrait'] = $breakpoint;
+
+  return $export;
+}
diff --git a/modules/commons/commons_images/commons_images.default_picture_mapping.inc b/modules/commons/commons_images/commons_images.default_picture_mapping.inc
new file mode 100644
index 0000000..e91e30f
--- /dev/null
+++ b/modules/commons/commons_images/commons_images.default_picture_mapping.inc
@@ -0,0 +1,101 @@
+<?php
+/**
+ * @file
+ * commons_images.default_picture_mapping.inc
+ */
+
+/**
+ * Implements hook_default_picture_mapping().
+ */
+function commons_images_default_picture_mapping() {
+  $export = array();
+
+  $picture_mapping = new stdClass();
+  $picture_mapping->disabled = FALSE; /* Edit this to true to make a default picture_mapping disabled initially */
+  $picture_mapping->api_version = 1;
+  $picture_mapping->machine_name = 'commons_default';
+  $picture_mapping->breakpoint_group = 'commons_default';
+  $picture_mapping->mapping = array(
+    'breakpoints.theme.commons_origins.commons small portrait' => array(
+      '1x' => 'commons-default-small',
+      '1.5x' => 'commons-default-small-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons small landscape' => array(
+      '1x' => 'commons-default-small',
+      '1.5x' => 'commons-default-small-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons medium portrait' => array(
+      '1x' => 'commons-default-medium',
+      '1.5x' => 'commons-default-medium-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons medium landscape' => array(
+      '1x' => 'commons-default-medium',
+      '1.5x' => 'commons-default-medium-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons large' => array(
+      '1x' => 'commons-default-large',
+      '1.5x' => 'commons-default-large-1_5x',
+    ),
+  );
+  $export['commons_default'] = $picture_mapping;
+
+  $picture_mapping = new stdClass();
+  $picture_mapping->disabled = FALSE; /* Edit this to true to make a default picture_mapping disabled initially */
+  $picture_mapping->api_version = 1;
+  $picture_mapping->machine_name = 'commons_full';
+  $picture_mapping->breakpoint_group = 'commons_full';
+  $picture_mapping->mapping = array(
+    'breakpoints.theme.commons_origins.commons small portrait' => array(
+      '1x' => 'commons-full-small',
+      '1.5x' => 'commons-full-small-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons small landscape' => array(
+      '1x' => 'commons-full-small',
+      '1.5x' => 'commons-full-small-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons medium portrait' => array(
+      '1x' => 'commons-full-medium',
+      '1.5x' => 'commons-full-medium-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons medium landscape' => array(
+      '1x' => 'commons-full-medium',
+      '1.5x' => 'commons-full-medium-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons large' => array(
+      '1x' => 'commons-full-large',
+      '1.5x' => 'commons-full-large-1_5x',
+    ),
+  );
+  $export['commons_full'] = $picture_mapping;
+
+  $picture_mapping = new stdClass();
+  $picture_mapping->disabled = FALSE; /* Edit this to true to make a default picture_mapping disabled initially */
+  $picture_mapping->api_version = 1;
+  $picture_mapping->machine_name = 'commons_teaser';
+  $picture_mapping->breakpoint_group = 'commons_teaser';
+  $picture_mapping->mapping = array(
+    'breakpoints.theme.commons_origins.commons small portrait' => array(
+      '1x' => 'commons-teaser-small',
+      '1.5x' => 'commons-teaser-small-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons small landscape' => array(
+      '1x' => 'commons-teaser-small',
+      '1.5x' => 'commons-teaser-small-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons medium portrait' => array(
+      '1x' => 'commons-teaser-medium',
+      '1.5x' => 'commons-teaser-medium-1_5',
+    ),
+    'breakpoints.theme.commons_origins.commons medium landscape' => array(
+      '1x' => 'commons-teaser-medium',
+      '1.5x' => 'commons-teaser-medium-1_5',
+    ),
+    'breakpoints.theme.commons_origins.commons large' => array(
+      '1x' => 'commons-teaser-large',
+      '1.5x' => 'commons-teaser-large-1_5x',
+    ),
+  );
+  $export['commons_teaser'] = $picture_mapping;
+
+  return $export;
+}
diff --git a/modules/commons/commons_images/commons_images.features.inc b/modules/commons/commons_images/commons_images.features.inc
new file mode 100644
index 0000000..48d70d2
--- /dev/null
+++ b/modules/commons/commons_images/commons_images.features.inc
@@ -0,0 +1,455 @@
+<?php
+/**
+ * @file
+ * commons_images.features.inc
+ */
+
+/**
+ * Implements hook_ctools_plugin_api().
+ */
+function commons_images_ctools_plugin_api($module = NULL, $api = NULL) {
+  if ($module == "breakpoints" && $api == "default_breakpoint_group") {
+    return array("version" => "1");
+  }
+  if ($module == "breakpoints" && $api == "default_breakpoints") {
+    return array("version" => "1");
+  }
+  if ($module == "picture" && $api == "default_picture_mapping") {
+    return array("version" => "1");
+  }
+}
+
+/**
+ * Implements hook_image_default_styles().
+ */
+function commons_images_image_default_styles() {
+  $styles = array();
+
+  // Exported image style: commons-default-large.
+  $styles['commons-default-large'] = array(
+    'name' => 'commons-default-large',
+    'label' => 'Commons default large',
+    'effects' => array(
+      18 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 536,
+          'height' => 600,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-default-large-1_5x.
+  $styles['commons-default-large-1_5x'] = array(
+    'name' => 'commons-default-large-1_5x',
+    'label' => 'Commons default large 1.5x',
+    'effects' => array(
+      19 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 804,
+          'height' => 900,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-default-medium.
+  $styles['commons-default-medium'] = array(
+    'name' => 'commons-default-medium',
+    'label' => 'Commons default medium',
+    'effects' => array(
+      18 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 536,
+          'height' => 600,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-default-medium-1_5x.
+  $styles['commons-default-medium-1_5x'] = array(
+    'name' => 'commons-default-medium-1_5x',
+    'label' => 'Commons default medium 1.5x',
+    'effects' => array(
+      19 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 804,
+          'height' => 900,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-default-small.
+  $styles['commons-default-small'] = array(
+    'name' => 'commons-default-small',
+    'label' => 'Commons default small',
+    'effects' => array(
+      20 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 456,
+          'height' => 500,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-default-small-1_5x.
+  $styles['commons-default-small-1_5x'] = array(
+    'name' => 'commons-default-small-1_5x',
+    'label' => 'Commons default small 1.5x',
+    'effects' => array(
+      21 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 684,
+          'height' => 750,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-full-large.
+  $styles['commons-full-large'] = array(
+    'name' => 'commons-full-large',
+    'label' => 'Commons full large',
+    'effects' => array(
+      22 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 916,
+          'height' => '',
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-full-large-1_5x.
+  $styles['commons-full-large-1_5x'] = array(
+    'name' => 'commons-full-large-1_5x',
+    'label' => 'Commons full large 1.5x',
+    'effects' => array(
+      23 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 1374,
+          'height' => '',
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-full-medium.
+  $styles['commons-full-medium'] = array(
+    'name' => 'commons-full-medium',
+    'label' => 'Commons full medium',
+    'effects' => array(
+      24 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 768,
+          'height' => '',
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-full-medium-1_5.
+  $styles['commons-full-medium-1_5'] = array(
+    'name' => 'commons-full-medium-1_5',
+    'label' => 'Commons full medium 1.5',
+    'effects' => array(
+      25 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 1152,
+          'height' => '',
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-full-small.
+  $styles['commons-full-small'] = array(
+    'name' => 'commons-full-small',
+    'label' => 'Commons full small',
+    'effects' => array(
+      20 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 456,
+          'height' => 500,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-full-small-1_5x.
+  $styles['commons-full-small-1_5x'] = array(
+    'name' => 'commons-full-small-1_5x',
+    'label' => 'Commons full small 1.5x',
+    'effects' => array(
+      21 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 684,
+          'height' => 750,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-teaser-large.
+  $styles['commons-teaser-large'] = array(
+    'name' => 'commons-teaser-large',
+    'label' => 'Commons teaser large',
+    'effects' => array(
+      16 => array(
+        'label' => 'Scale and Smart Crop',
+        'help' => 'Similar to "Scale And Crop", but preserves the portion of the image with the most entropy.',
+        'effect callback' => 'smartcrop_scale_effect',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'smartcrop',
+        'name' => 'smartcrop_scale_and_crop',
+        'data' => array(
+          'width' => 124,
+          'height' => 124,
+          'upscale' => 1,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-teaser-large-1_5x.
+  $styles['commons-teaser-large-1_5x'] = array(
+    'name' => 'commons-teaser-large-1_5x',
+    'label' => 'Commons teaser large 1.5x',
+    'effects' => array(
+      17 => array(
+        'label' => 'Scale and Smart Crop',
+        'help' => 'Similar to "Scale And Crop", but preserves the portion of the image with the most entropy.',
+        'effect callback' => 'smartcrop_scale_effect',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'smartcrop',
+        'name' => 'smartcrop_scale_and_crop',
+        'data' => array(
+          'width' => 186,
+          'height' => 186,
+          'upscale' => 1,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-teaser-medium.
+  $styles['commons-teaser-medium'] = array(
+    'name' => 'commons-teaser-medium',
+    'label' => 'Commons teaser medium',
+    'effects' => array(
+      14 => array(
+        'label' => 'Scale and Smart Crop',
+        'help' => 'Similar to "Scale And Crop", but preserves the portion of the image with the most entropy.',
+        'effect callback' => 'smartcrop_scale_effect',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'smartcrop',
+        'name' => 'smartcrop_scale_and_crop',
+        'data' => array(
+          'width' => 72,
+          'height' => 72,
+          'upscale' => 1,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-teaser-medium-1_5x.
+  $styles['commons-teaser-medium-1_5x'] = array(
+    'name' => 'commons-teaser-medium-1_5x',
+    'label' => 'Commons teaser medium 1.5x',
+    'effects' => array(
+      15 => array(
+        'label' => 'Scale and Smart Crop',
+        'help' => 'Similar to "Scale And Crop", but preserves the portion of the image with the most entropy.',
+        'effect callback' => 'smartcrop_scale_effect',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'smartcrop',
+        'name' => 'smartcrop_scale_and_crop',
+        'data' => array(
+          'width' => 108,
+          'height' => 108,
+          'upscale' => 1,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-teaser-small.
+  $styles['commons-teaser-small'] = array(
+    'name' => 'commons-teaser-small',
+    'label' => 'Commons teaser small',
+    'effects' => array(
+      12 => array(
+        'label' => 'Scale and Smart Crop',
+        'help' => 'Similar to "Scale And Crop", but preserves the portion of the image with the most entropy.',
+        'effect callback' => 'smartcrop_scale_effect',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'smartcrop',
+        'name' => 'smartcrop_scale_and_crop',
+        'data' => array(
+          'width' => 54,
+          'height' => 54,
+          'upscale' => 1,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-teaser-small-1_5x.
+  $styles['commons-teaser-small-1_5x'] = array(
+    'name' => 'commons-teaser-small-1_5x',
+    'label' => 'Commons teaser small 1.5x',
+    'effects' => array(
+      13 => array(
+        'label' => 'Scale and Smart Crop',
+        'help' => 'Similar to "Scale And Crop", but preserves the portion of the image with the most entropy.',
+        'effect callback' => 'smartcrop_scale_effect',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'smartcrop',
+        'name' => 'smartcrop_scale_and_crop',
+        'data' => array(
+          'width' => 81,
+          'height' => 81,
+          'upscale' => 1,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  return $styles;
+}
diff --git a/modules/commons/commons_images/commons_images.info b/modules/commons/commons_images/commons_images.info
new file mode 100644
index 0000000..6afb9f2
--- /dev/null
+++ b/modules/commons/commons_images/commons_images.info
@@ -0,0 +1,45 @@
+name = Commons Images
+description = Image styles used in the Commons distribution
+core = 7.x
+package = Commons - Building blocks
+project = commons_images
+dependencies[] = breakpoints
+dependencies[] = ctools
+dependencies[] = file_entity
+dependencies[] = image
+dependencies[] = picture
+dependencies[] = smartcrop
+features[breakpoint_group][] = commons_default
+features[breakpoint_group][] = commons_full
+features[breakpoint_group][] = commons_origins
+features[breakpoint_group][] = commons_teaser
+features[breakpoints][] = breakpoints.theme.commons_origins.commons large
+features[breakpoints][] = breakpoints.theme.commons_origins.commons medium landscape
+features[breakpoints][] = breakpoints.theme.commons_origins.commons medium portrait
+features[breakpoints][] = breakpoints.theme.commons_origins.commons small landscape
+features[breakpoints][] = breakpoints.theme.commons_origins.commons small portrait
+features[ctools][] = breakpoints:default_breakpoint_group:1
+features[ctools][] = breakpoints:default_breakpoints:1
+features[ctools][] = picture:default_picture_mapping:1
+features[features_api][] = api:2
+features[image][] = commons-default-large
+features[image][] = commons-default-large-1_5x
+features[image][] = commons-default-medium
+features[image][] = commons-default-medium-1_5x
+features[image][] = commons-default-small
+features[image][] = commons-default-small-1_5x
+features[image][] = commons-full-large
+features[image][] = commons-full-large-1_5x
+features[image][] = commons-full-medium
+features[image][] = commons-full-medium-1_5
+features[image][] = commons-full-small
+features[image][] = commons-full-small-1_5x
+features[image][] = commons-teaser-large
+features[image][] = commons-teaser-large-1_5x
+features[image][] = commons-teaser-medium
+features[image][] = commons-teaser-medium-1_5x
+features[image][] = commons-teaser-small
+features[image][] = commons-teaser-small-1_5x
+features[picture_mapping][] = commons_default
+features[picture_mapping][] = commons_full
+features[picture_mapping][] = commons_teaser
diff --git a/modules/commons/commons_images/commons_images.module b/modules/commons/commons_images/commons_images.module
new file mode 100644
index 0000000..f3ec52e
--- /dev/null
+++ b/modules/commons/commons_images/commons_images.module
@@ -0,0 +1,76 @@
+<?php
+/**
+ * @file
+ * Code for the Commons Images feature.
+ */
+
+include_once 'commons_images.features.inc';
+
+/**
+ * Implements hook_file_default_displays_alter().
+ */
+function commons_images_file_default_displays_alter(&$file_displays) {
+  // Copy all default image formatters to full image formatters.
+  foreach ($file_displays as $file_display) {
+    if (strpos($file_display->name, 'image__default__') !== false) {
+      $display = clone $file_display;
+      $name = str_replace('image__default__', 'image__full__', $display->name);
+      $display->name = $name;
+      $file_displays[$name] = $display;
+    }
+  }
+
+  // Default images should be displayed using the 'default' picture group.
+  if (isset($file_displays['image__default__file_field_image'])) {
+    $file_displays['image__default__file_field_image']->status = FALSE;
+  }
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__default__file_field_picture';
+  $file_display->weight = 1;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'picture_group' => 'commons_default',
+    'fallback_image_style' => 'commons-default-small',
+    'image_link' => 'content',
+    'colorbox' => 'commons_default',
+  );
+  $file_displays['image__default__file_field_picture'] = $file_display;
+
+  // Full images should be displayed using the 'full' picture group.
+  if (isset($file_displays['image__full__file_field_image'])) {
+    $file_displays['image__full__file_field_image']->status = FALSE;
+  }
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__full__file_field_picture';
+  $file_display->weight = 1;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'picture_group' => 'commons_full',
+    'fallback_image_style' => 'commons-full-small',
+    'image_link' => '',
+    'colorbox' => 'commons_full',
+  );
+  $file_displays['image__full__file_field_picture'] = $file_display;
+
+  // Teaser images should be displayed using the 'teaser' picture group.
+  if (isset($file_displays['image__teaser__file_field_image'])) {
+    $file_displays['image__teaser__file_field_image']->status = FALSE;
+  }
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__teaser__file_field_picture';
+  $file_display->weight = -1;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'picture_group' => 'commons_teaser',
+    'fallback_image_style' => 'commons-teaser-small',
+    'image_link' => '',
+    'colorbox' => 'commons_teaser',
+  );
+  $file_displays['image__teaser__file_field_picture'] = $file_display;
+}
diff --git a/modules/commons/commons_kissmetrics/commons_kissmetrics.rules_defaults.inc b/modules/commons/commons_kissmetrics/commons_kissmetrics.rules_defaults.inc
index 645aef7..7d64ab8 100644
--- a/modules/commons/commons_kissmetrics/commons_kissmetrics.rules_defaults.inc
+++ b/modules/commons/commons_kissmetrics/commons_kissmetrics.rules_defaults.inc
@@ -12,6 +12,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_collect_referenced_groups'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_collect_referenced_groups" : {
       "LABEL" : "Commons KISSmetrics: Collect Referenced Groups",
       "PLUGIN" : "rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules" ],
       "USES VARIABLES" : {
@@ -45,6 +46,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_adds_a_trusted_contact'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_adds_a_trusted_contact" : {
       "LABEL" : "Commons KISSmetrics: User Adds A Trusted Contact",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics", "og" ],
       "ON" : { "og_user_insert" : [] },
@@ -61,6 +63,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_approves_a_trusted_contact'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_approves_a_trusted_contact" : {
       "LABEL" : "Commons KISSmetrics: User Approves A Trusted Contact",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics", "og" ],
       "ON" : { "og_user_approved" : [] },
@@ -77,6 +80,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_creates_content'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_creates_content" : {
       "LABEL" : "Commons KISSmetrics: User Creates Content",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics" ],
       "ON" : { "node_insert" : [] },
@@ -97,6 +101,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_edits_profile'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_edits_profile" : {
       "LABEL" : "Commons KISSmetrics: User Edits Profile",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics" ],
       "ON" : { "user_update" : [] },
@@ -108,6 +113,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_edits_wiki'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_edits_wiki" : {
       "LABEL" : "Commons KISSmetrics: User Edits Wiki",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics" ],
       "ON" : { "node_update" : [] },
@@ -131,6 +137,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_flags_content_as_inappropriate'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_flags_content_as_inappropriate" : {
       "LABEL" : "Commons KISSmetrics: User Flags Content As Inappropriate",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics", "flag" ],
       "ON" : { "flag_flagged_inappropriate_node" : [] },
@@ -146,6 +153,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_follows_content'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_follows_content" : {
       "LABEL" : "Commons KISSmetrics: User Follows Content",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics", "flag" ],
       "ON" : { "flag_flagged_commons_follow_node" : [] },
@@ -166,6 +174,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_follows_group'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_follows_group" : {
       "LABEL" : "Commons KISSmetrics: User Follows Group",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics", "flag" ],
       "ON" : { "flag_flagged_commons_follow_group" : [] },
@@ -181,6 +190,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_follows_topic'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_follows_topic" : {
       "LABEL" : "Commons KISSmetrics: User Follows Topic",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics", "flag" ],
       "ON" : { "flag_flagged_commons_follow_term" : [] },
@@ -196,6 +206,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_follows_user'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_follows_user" : {
       "LABEL" : "Commons KISSmetrics: User Follows User",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics", "flag" ],
       "ON" : { "flag_flagged_commons_follow_user" : [] },
@@ -211,6 +222,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_likes_content'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_likes_content" : {
       "LABEL" : "Commons KISSmetrics: User Likes Content",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics", "voting_rules" ],
       "ON" : { "voting_rules_insert_node" : [] },
@@ -222,6 +234,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_logs_in'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_logs_in" : {
       "LABEL" : "Commons KISSmetrics: User Logs In",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics" ],
       "ON" : { "user_login" : [] },
@@ -233,6 +246,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_logs_out'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_logs_out" : {
       "LABEL" : "Commons KISSmetrics: User Logs Out",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics" ],
       "ON" : { "user_logout" : [] },
@@ -244,6 +258,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_posts_comment'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_posts_comment" : {
       "LABEL" : "Commons KISSmetrics: User Posts Comment",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics", "comment" ],
       "ON" : { "comment_insert" : [] },
@@ -264,6 +279,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_registers'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_registers" : {
       "LABEL" : "Commons KISSmetrics: User Registers",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics" ],
       "ON" : { "user_insert" : [] },
@@ -275,6 +291,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_replies_to_private_message_thread'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_replies_to_private_message_thread" : {
       "LABEL" : "Commons KISSmetrics: User Replies To Private Message Thread",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics", "privatemsg_rules" ],
       "ON" : { "privatemsg_insert" : [] },
@@ -293,6 +310,7 @@ function commons_kissmetrics_default_rules_configuration() {
   $items['rules_commons_kissmetrics_user_starts_new_private_message_thread'] = entity_import('rules_config', '{ "rules_commons_kissmetrics_user_starts_new_private_message_thread" : {
       "LABEL" : "Commons KISSmetrics: User Starts New Private Message Thread",
       "PLUGIN" : "reaction rule",
+      "OWNER" : "rules",
       "TAGS" : [ "Commons KISSmetrics" ],
       "REQUIRES" : [ "rules", "kissmetrics", "privatemsg_rules" ],
       "ON" : { "privatemsg_insert" : [] },
diff --git a/modules/commons/commons_like/commons_like.features.inc b/modules/commons/commons_like/commons_like.features.inc
index d5ecfdb..16f1761 100644
--- a/modules/commons/commons_like/commons_like.features.inc
+++ b/modules/commons/commons_like/commons_like.features.inc
@@ -34,9 +34,9 @@ function commons_like_default_message_type() {
           "safe_value" : "[message:user:picture]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E liked the [message:field-target-nodes:0:type] \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E liked the [message:field-target-nodes:0:type] \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E liked the [message:field-target-nodes:0:type] \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E liked the [message:field-target-nodes:0:type] \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E"
         }
       ]
     },
diff --git a/modules/commons/commons_like/commons_like.info b/modules/commons/commons_like/commons_like.info
index c2b7997..a40f432 100644
--- a/modules/commons/commons_like/commons_like.info
+++ b/modules/commons/commons_like/commons_like.info
@@ -2,7 +2,6 @@ name = Commons Like
 description = Community members can indicate that they like content and comments.
 core = 7.x
 package = Commons - Building blocks
-project = commons_like
 dependencies[] = entityreference
 dependencies[] = features
 dependencies[] = message
diff --git a/modules/commons/commons_like/commons_like.module b/modules/commons/commons_like/commons_like.module
index 5ed5021..49f6f2e 100644
--- a/modules/commons/commons_like/commons_like.module
+++ b/modules/commons/commons_like/commons_like.module
@@ -25,7 +25,7 @@ function commons_like_features_export_alter(&$export, $module_name) {
   if (!empty($items['rate_widgets']->value)) {
     foreach($items['rate_widgets']->value as $key => $widget) {
       if ($widget->name == 'commons_like') {
-        $commons_entity_integrations = module_invoke_all('commons_entity_integration');
+        $commons_entity_integrations = commons_entity_integration_info();
         if (!empty($commons_entity_integrations['node'])) {
           foreach ($commons_entity_integrations['node'] as $bundle => $options) {
             if (!isset($options['exclude_rate']) || $options['exclude_rate'] != TRUE) {
diff --git a/modules/commons/commons_media/commons_media.css b/modules/commons/commons_media/commons_media.css
new file mode 100644
index 0000000..66d560a
--- /dev/null
+++ b/modules/commons/commons_media/commons_media.css
@@ -0,0 +1,28 @@
+iframe,
+object,
+embed {
+  max-width: 100%;
+}
+
+video {
+  height: auto;
+  max-width: 100%;
+}
+
+.oembed {
+  height: 0;
+  overflow: hidden;
+  padding-bottom: 56.25%;
+  padding-top: 30px;
+  position: relative;
+}
+
+.oembed iframe,
+.oembed object,
+.oembed embed {
+  height: 100%;
+  left: 0;
+  position: absolute;
+  top: 0;
+  width: 100%;
+}
diff --git a/modules/commons/commons_media/commons_media.features.field_base.inc b/modules/commons/commons_media/commons_media.features.field_base.inc
new file mode 100644
index 0000000..3a93532
--- /dev/null
+++ b/modules/commons/commons_media/commons_media.features.field_base.inc
@@ -0,0 +1,45 @@
+<?php
+/**
+ * @file
+ * commons_media.features.field_base.inc
+ */
+
+/**
+ * Implements hook_field_default_field_bases().
+ */
+function commons_media_field_default_field_bases() {
+  $field_bases = array();
+
+  // Exported field_base: 'field_media'
+  $field_bases['field_media'] = array(
+    'active' => 1,
+    'cardinality' => -1,
+    'deleted' => 0,
+    'entity_types' => array(),
+    'field_name' => 'field_media',
+    'foreign keys' => array(
+      'fid' => array(
+        'columns' => array(
+          'fid' => 'fid',
+        ),
+        'table' => 'file_managed',
+      ),
+    ),
+    'indexes' => array(
+      'fid' => array(
+        0 => 'fid',
+      ),
+    ),
+    'locked' => 0,
+    'module' => 'file',
+    'settings' => array(
+      'display_default' => 0,
+      'display_field' => 0,
+      'uri_scheme' => 'public',
+    ),
+    'translatable' => 0,
+    'type' => 'file',
+  );
+
+  return $field_bases;
+}
diff --git a/modules/commons/commons_media/commons_media.features.field_instance.inc b/modules/commons/commons_media/commons_media.features.field_instance.inc
new file mode 100644
index 0000000..91e86d0
--- /dev/null
+++ b/modules/commons/commons_media/commons_media.features.field_instance.inc
@@ -0,0 +1,98 @@
+<?php
+/**
+ * @file
+ * commons_media.features.field_instance.inc
+ */
+
+/**
+ * Implements hook_field_default_field_instances().
+ */
+function commons_media_field_default_field_instances() {
+  $field_instances = array();
+
+  $commons_groups_entity_types = commons_groups_get_group_content_entity_types();
+  if (!empty($commons_groups_entity_types)) {
+    foreach ($commons_groups_entity_types as $entity_type => $bundles) {
+      foreach ($bundles as $bundle => $integrations) {
+        if (!empty($integrations['media'])) {
+          commons_media_field_definition($field_instances, $entity_type, $bundle);
+        }
+      }
+    }
+  }
+
+  return $field_instances;
+}
+
+function commons_media_field_definition(&$field_instances, $entity_type, $bundle) {
+  // Exported field_instance: 'entity-bundle-field_media'
+  $field_instances["$entity_type-$bundle-field_media"] = array(
+    'bundle' => $bundle,
+    'deleted' => 0,
+    'description' => 'Attach an image or video.',
+    'display' => array(
+      'default' => array(
+        'label' => 'hidden',
+        'module' => 'file_entity',
+        'settings' => array(
+          'file_view_mode' => 'default',
+        ),
+        'type' => 'file_rendered',
+        'weight' => 0,
+      ),
+      'teaser' => array(
+        'label' => 'hidden',
+        'module' => 'file_entity',
+        'settings' => array(
+          'file_view_mode' => 'teaser',
+        ),
+        'type' => 'file_rendered',
+        'weight' => 0,
+      ),
+    ),
+    'display_in_partial_form' => 1,
+    'entity_type' => 'node',
+    'field_name' => 'field_media',
+    'label' => 'Media',
+    'required' => 0,
+    'settings' => array(
+      'description_field' => 0,
+      'file_directory' => 'media',
+      'file_extensions' => 'jpg jpeg gif png oembed mov mp4 m4v mpeg avi ogv webp webm',
+      'max_filesize' => '',
+      'user_register_form' => FALSE,
+    ),
+    'widget' => array(
+      'active' => 1,
+      'module' => 'media',
+      'settings' => array(
+        'allowed_schemes' => array(
+          'oembed' => 'oembed',
+          'public' => 'public',
+        ),
+        'allowed_types' => array(
+          'audio' => 0,
+          'document' => 0,
+          'image' => 'image',
+          'video' => 'video',
+        ),
+        'browser_plugins' => array(
+          'media_default--media_browser_1' => 0,
+          'media_default--media_browser_my_files' => 0,
+          'media_internet' => 'media_internet',
+          'upload' => 'upload',
+        ),
+        'progress_indicator' => 'throbber',
+      ),
+      'type' => 'media_generic',
+      'weight' => 2,
+    ),
+  );
+
+  // Translatables
+  // Included for use with string extractors like potx.
+  t('Attach an image or video.');
+  t('Media');
+
+  return $field_instances;
+}
diff --git a/modules/commons/commons_media/commons_media.features.inc b/modules/commons/commons_media/commons_media.features.inc
new file mode 100644
index 0000000..b77b46f
--- /dev/null
+++ b/modules/commons/commons_media/commons_media.features.inc
@@ -0,0 +1,14 @@
+<?php
+/**
+ * @file
+ * commons_media.features.inc
+ */
+
+/**
+ * Implements hook_ctools_plugin_api().
+ */
+function commons_media_ctools_plugin_api($module = NULL, $api = NULL) {
+  if ($module == "strongarm" && $api == "strongarm") {
+    return array("version" => "1");
+  }
+}
diff --git a/modules/commons/commons_media/commons_media.features.user_permission.inc b/modules/commons/commons_media/commons_media.features.user_permission.inc
new file mode 100644
index 0000000..e7a5c77
--- /dev/null
+++ b/modules/commons/commons_media/commons_media.features.user_permission.inc
@@ -0,0 +1,64 @@
+<?php
+/**
+ * @file
+ * commons_media.features.user_permission.inc
+ */
+
+/**
+ * Implements hook_user_default_permissions().
+ */
+function commons_media_user_default_permissions() {
+  $permissions = array();
+
+  // Exported permission: 'access media browser'.
+  $permissions['access media browser'] = array(
+    'name' => 'access media browser',
+    'roles' => array(
+      'administrator' => 'administrator',
+      'authenticated user' => 'authenticated user',
+    ),
+    'module' => 'media',
+  );
+
+  // Exported permission: 'add media from remote sources'.
+  $permissions['add media from remote sources'] = array(
+    'name' => 'add media from remote sources',
+    'roles' => array(
+      'administrator' => 'administrator',
+      'authenticated user' => 'authenticated user',
+    ),
+    'module' => 'media_internet',
+  );
+
+  // Exported permission: 'create files'.
+  $permissions['create files'] = array(
+    'name' => 'create files',
+    'roles' => array(
+      'administrator' => 'administrator',
+      'authenticated user' => 'authenticated user',
+    ),
+    'module' => 'file_entity',
+  );
+
+  // Exported permission: 'delete own image files'.
+  $permissions['delete own image files'] = array(
+    'name' => 'delete own image files',
+    'roles' => array(
+      'administrator' => 'administrator',
+      'authenticated user' => 'authenticated user',
+    ),
+    'module' => 'file_entity',
+  );
+
+  // Exported permission: 'delete own video files'.
+  $permissions['delete own video files'] = array(
+    'name' => 'delete own video files',
+    'roles' => array(
+      'administrator' => 'administrator',
+      'authenticated user' => 'authenticated user',
+    ),
+    'module' => 'file_entity',
+  );
+
+  return $permissions;
+}
diff --git a/modules/commons/commons_media/commons_media.info b/modules/commons/commons_media/commons_media.info
new file mode 100644
index 0000000..276462e
--- /dev/null
+++ b/modules/commons/commons_media/commons_media.info
@@ -0,0 +1,24 @@
+name = Commons Media
+description = Provides media handling capabilities.
+core = 7.x
+package = Commons - Building blocks
+dependencies[] = ctools
+dependencies[] = features
+dependencies[] = file
+dependencies[] = file_entity
+dependencies[] = media
+dependencies[] = media_internet
+dependencies[] = media_oembed
+dependencies[] = strongarm
+features[ctools][] = strongarm:strongarm:1
+features[features_api][] = api:2
+features[field_base][] = field_media
+features[user_permission][] = access media browser
+features[user_permission][] = add media from remote sources
+features[user_permission][] = create files
+features[user_permission][] = delete own image files
+features[user_permission][] = delete own video files
+features[variable][] = file_entity_file_upload_wizard_skip_fields
+features[variable][] = file_entity_file_upload_wizard_skip_file_type
+features[variable][] = file_entity_file_upload_wizard_skip_scheme
+features[variable][] = media_dialog_theme
diff --git a/modules/commons/commons_media/commons_media.install b/modules/commons/commons_media/commons_media.install
new file mode 100644
index 0000000..e813ba7
--- /dev/null
+++ b/modules/commons/commons_media/commons_media.install
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * @file
+ * Install, update and uninstall functions for the Commons Media module.
+ */
+
+/**
+ * Accommodate the latest changes to the Media module.
+ */
+function commons_media_update_7300() {
+  $revert = array(
+    'commons_media' => array('user_permission', 'variable'),
+  );
+  features_revert($revert);
+  return array();
+}
+
+/**
+ * Configure File Entity upload wizard settings.
+ */
+function commons_media_update_7301() {
+  $revert = array(
+    'commons_media' => array('variable'),
+  );
+  features_revert($revert);
+  return array();
+}
diff --git a/modules/commons/commons_media/commons_media.module b/modules/commons/commons_media/commons_media.module
new file mode 100644
index 0000000..6a06b1f
--- /dev/null
+++ b/modules/commons/commons_media/commons_media.module
@@ -0,0 +1,293 @@
+<?php
+/**
+ * @file
+ * Code for the Commons Media feature.
+ */
+
+include_once 'commons_media.features.inc';
+
+// Functions to ensure that the private file system is used when embedding files in private group content.
+include_once 'commons_media.private_files.inc';
+
+/**
+ * Implements hook_system_info_alter().
+ */
+function commons_media_system_info_alter(&$info, $file, $type) {
+  if ($file->name == 'commons_media') {
+    $entity_integrations = commons_entity_integration_info();
+
+    if (!empty($entity_integrations)) {
+      foreach ($entity_integrations as $entity_type => $bundles) {
+        foreach ($bundles as $bundle => $integrations) {
+          if (!empty($integrations['media'])) {
+            $info['features']['field_instance'][] = "$entity_type-$bundle-field_media";
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_menu_alter().
+ */
+function commons_media_menu_alter(&$items) {
+  // Use a tweaked AJAX page callback for managed_file and media elements in
+  // order to bypass a core issue that occurs when more than one browsing widget
+  // tab contains a managed_file or media file field widget.
+  if (isset($items['file/ajax'])) {
+    $items['file/ajax']['page callback'] = 'commons_ajax_upload';
+  }
+  if (isset($items['media/ajax'])) {
+    $items['media/ajax']['page callback'] = 'commons_ajax_upload';
+  }
+}
+
+/**
+ * Menu callback; Shared Ajax callback for managed_file and media elements.
+ *
+ * Identical to the Ajax callback used by file.module and media.module except
+ * with the $form_build_id != $_POST['form_build_id'] check removed in order to
+ * prevent errors when more than one browsing widget tab contains a managed_file
+ * or media file field widget.
+ *
+ * @see file_ajax_upload()
+ * @see media_ajax_upload()
+ */
+function commons_ajax_upload() {
+  $form_parents = func_get_args();
+  $form_build_id = (string) array_pop($form_parents);
+
+  if (empty($_POST['form_build_id'])) {
+    // Invalid request.
+    drupal_set_message(t('An unrecoverable error occurred. The uploaded file likely exceeded the maximum file size (@size) that this server supports.', array('@size' => format_size(file_upload_max_size()))), 'error');
+    $commands = array();
+    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
+    return array('#type' => 'ajax', '#commands' => $commands);
+  }
+
+  list($form, $form_state, $form_id, $form_build_id, $commands) = ajax_get_form();
+
+  if (!$form) {
+    // Invalid form_build_id.
+    drupal_set_message(t('An unrecoverable error occurred. Use of this form has expired. Try reloading the page and submitting again.'), 'error');
+    $commands = array();
+    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
+    return array('#type' => 'ajax', '#commands' => $commands);
+  }
+
+  // Get the current element and count the number of files.
+  $current_element = $form;
+  foreach ($form_parents as $parent) {
+    $current_element = $current_element[$parent];
+  }
+  $current_file_count = isset($current_element['#file_upload_delta']) ? $current_element['#file_upload_delta'] : 0;
+
+  // Process user input. $form and $form_state are modified in the process.
+  drupal_process_form($form['#form_id'], $form, $form_state);
+
+  // Retrieve the element to be rendered.
+  foreach ($form_parents as $parent) {
+    $form = $form[$parent];
+  }
+
+  // Add the special Ajax class if a new file was added.
+  if (isset($form['#file_upload_delta']) && $current_file_count < $form['#file_upload_delta']) {
+    $form[$current_file_count]['#attributes']['class'][] = 'ajax-new-content';
+  }
+  // Otherwise just add the new content class on a placeholder.
+  else {
+    $form['#suffix'] .= '<span class="ajax-new-content"></span>';
+  }
+
+  $output = theme('status_messages') . drupal_render($form);
+  $js = drupal_add_js();
+  $settings = call_user_func_array('array_merge_recursive', $js['settings']['data']);
+
+  $commands[] = ajax_command_replace(NULL, $output, $settings);
+  return array('#type' => 'ajax', '#commands' => $commands);
+}
+
+/**
+ * Implements hook_element_info_alter().
+ */
+function commons_media_element_info_alter(&$type) {
+  $type['media']['#process'][] = 'commons_media_simplify_media_buttons';
+}
+
+/**
+ * Extra #process callback which simplifies the media element buttons.
+ */
+function commons_media_simplify_media_buttons($element, $edit, &$form_state) {
+  // Remove extraneous elements.
+  $element['#title_display'] = 'invisible';
+
+  return $element;
+}
+
+/**
+ * Implements hook_page_build().
+ */
+function commons_media_page_build(&$page) {
+  $page['page_bottom']['commons_media']['#attached']['css'] = array(
+    drupal_get_path('module', 'commons_media') . '/commons_media.css' => array(
+      'every_page' => TRUE,
+    ),
+  );
+}
+
+/**
+ * Implements hook_filter_default_formats_alter().
+ */
+function commons_media_filter_default_formats_alter(&$formats) {
+  if (module_exists('media_wysiwyg')) {
+    // Allow markup from remote media.
+    $formats['filtered_html']['filters']['filter_html']['settings']['allowed_html'] = '<a> <em> <strong> <u> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <h4> <h5> <h6>  <p> <br> <img> <strike> <iframe></iframe>';
+
+    // Enable the media filter.
+    $formats['filtered_html']['filters'] += array(
+      'media_filter' => array(
+        'status' => 1,
+        'weight' => 2,
+      ),
+    );
+  }
+}
+
+/**
+ * Implements hook_ckeditor_profile_defaults().
+ */
+function commons_media_ckeditor_profile_defaults_alter(&$profiles) {
+  if (module_exists('media_wysiwyg')) {
+    // Disable the advanced content filter.
+    $profiles['Advanced']['settings']['allowed_content'] = 'f';
+
+    // Add the media button.
+    $profiles['Advanced']['settings']['toolbar'] = '[
+    [\'Format\'],
+    [\'Bold\',\'Italic\',\'Strike\'],
+    [\'NumberedList\',\'BulletedList\',\'Indent\',\'Outdent\',\'Blockquote\'],
+    [\'Link\',\'Unlink\',\'Media\']
+    ]';
+
+    // Load the media plugin.
+    $profiles['Advanced']['settings']['loadPlugins'] += array(
+      'media' => array(
+        'default' => 'f',
+        'desc' => 'Plugin for inserting images from Drupal media module',
+        'name' => 'media',
+        'path' => '%plugin_dir%media/',
+      ),
+    );
+  }
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function commons_media_form_file_entity_add_upload_alter(&$form, &$form_state, $form_id) {
+  // Automatically upload selected files.
+  if ($form['#step'] == 1) {
+    $form['#attached']['js'][] = drupal_get_path('module', 'commons_media') . '/commons_media_autoupload.js';
+  }
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function commons_media_form_media_internet_add_alter(&$form, &$form_state, $form_id) {
+  if (isset($form['embed_code'])) {
+    $form['embed_code']['#description'] = t('Enter a URL or link to the media you would like to embed, such as a video or image. You can upload video from a range of providers, such as YouTube, Flickr or Vimeo.');
+  }
+}
+
+/**
+ * Implements hook_media_format_form_prepare_alter().
+ */
+function commons_media_media_wysiwyg_format_form_prepare_alter(&$form, &$form_state, $media) {
+  // Remove the ability to override field values through WYSIWYG.
+  $form['options']['fields']['#access'] = FALSE;
+
+  // Attach JavaScript to automatically embed files.
+  $form['#attached']['js'][] = drupal_get_path('module', 'commons_media') . '/commons_media_autoembed.js';
+}
+
+/**
+ * Implements hook_entity_presave().
+ */
+function commons_media_entity_presave($entity, $type) {
+  // Only proceed if the private file system has been configured.
+  if (!variable_get('file_private_path', FALSE)) {
+    return;
+  }
+
+  list($entity_id, $entity_vid, $entity_bundle) = entity_extract_ids($type, $entity);
+
+  // Only proceed if the entity has been configured as group content.
+  if (!og_is_group_content_type($type, $entity_bundle)) {
+    return;
+  }
+
+  // Loop over all the file and image fields attached to this entity.
+  foreach (_commons_media_get_file_and_image_fields($entity, $type) as $field_name) {
+    // Iterate over the items arrays for each language.
+    foreach (array_keys($entity->{$field_name}) as $langcode) {
+      $items = isset($entity->{$field_name}[$langcode]) ? $entity->{$field_name}[$langcode] : array();
+
+      // Ensure that the private file system is used when attaching files to
+      // private group content.
+      foreach ($items as $delta => $item) {
+        // Move files to the private file system if the content is private.
+        if ($entity->group_content_access[LANGUAGE_NONE][0]['value'] == 2) {
+          $source_file = file_load($item['fid']);
+
+          // Only move public files.
+          if (file_uri_scheme($source_file->uri) == 'public') {
+            $usage = file_usage_list($source_file);
+
+            // Only move files that aren't currently in use.
+            if (empty($usage)) {
+              $scheme = 'private://';
+              $uri = file_stream_wrapper_uri_normalize($scheme . $source_file->filename);
+              file_move($source_file, $uri, FILE_EXISTS_RENAME);
+            }
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Returns an array of image field names from a specific entity.
+ *
+ * @param $entity
+ *   The entity variable passed through hook_entity_presave().
+ * @param $type
+ *   The entity type variable passed through hook_entity_presave().
+ *
+ * @return array
+ *   An array of file and image field names or an empty array if none are found.
+ */
+function _commons_media_get_file_and_image_fields($entity, $type) {
+  $collected_fields = array();
+
+  // Determine the list of instances to iterate on.
+  list(, , $bundle) = entity_extract_ids($type, $entity);
+  $instances = field_info_instances($type, $bundle);
+  $fields = field_info_fields();
+
+  // Iterate through the instances and collect results.
+  foreach ($instances as $instance) {
+    $field_name = $instance['field_name'];
+
+    // Only collect file and image fields.
+    if ($fields[$field_name]['type'] == 'file' || $fields[$field_name]['type'] == 'image') {
+      if (isset($entity->{$field_name})) {
+        $collected_fields[] = $field_name;
+      }
+    }
+  }
+
+  return $collected_fields;
+}
diff --git a/modules/commons/commons_media/commons_media.private_files.inc b/modules/commons/commons_media/commons_media.private_files.inc
new file mode 100644
index 0000000..0721b78
--- /dev/null
+++ b/modules/commons/commons_media/commons_media.private_files.inc
@@ -0,0 +1,126 @@
+<?php
+
+/**
+ * @file
+ * Functions related to ensuring that the private file system is used when embedding files in private group content.
+ */
+
+/**
+ * Implements hook_field_attach_insert().
+ */
+function commons_media_field_attach_insert($entity_type, $entity) {
+  _commons_media_filter_add_file_usage_from_fields($entity_type, $entity);
+}
+
+/**
+ * Implements hook_field_attach_update().
+ */
+function commons_media_field_attach_update($entity_type, $entity) {
+  _commons_media_filter_add_file_usage_from_fields($entity_type, $entity);
+}
+
+/**
+ * Ensure that the private file system is used when embedding files in private group content.
+ */
+function _commons_media_filter_add_file_usage_from_fields($entity_type, $entity) {
+  // Only proceed if the Media: WYSIWYG module is enabled.
+  if (!module_exists('media_wysiwyg')) {
+    return;
+  }
+
+  // Only proceed if the private file system has been configured.
+  if (!variable_get('file_private_path', FALSE)) {
+    return;
+  }
+
+  // Track the total usage for files from all fields combined.
+  $entity_files = commons_media_entity_field_count_files($entity_type, $entity);
+
+  list($entity_id, $entity_vid, $entity_bundle) = entity_extract_ids($entity_type, $entity);
+
+  // Only proceed if the entity has been configured as group content.
+  if (!og_is_group_content_type($entity_type, $entity_bundle)) {
+    return;
+  }
+
+  // Ensure that the private file system is used when attaching files to private
+  // group content.
+  foreach ($entity_files as $fid => $entity_count) {
+    // Move files to the private file system if the content is private.
+    if ($entity->group_content_access[LANGUAGE_NONE][0]['value'] == 2) {
+      if ($source_file = file_load($fid)) {
+
+        // Only move public files.
+        if (file_uri_scheme($source_file->uri) == 'public') {
+          $usage = file_usage_list($source_file);
+
+          // Only move files that aren't currently in use.
+          if (empty($usage)) {
+            $scheme = 'private://';
+            $uri = file_stream_wrapper_uri_normalize($scheme . $source_file->filename);
+            file_move($source_file, $uri, FILE_EXISTS_RENAME);
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Utility function to get the file count in this entity
+ *
+ * @param type $entity
+ * @param type $entity_type
+ * @return int
+ */
+function commons_media_entity_field_count_files($entity_type, $entity) {
+  $entity_files = array();
+
+  foreach (commons_media_filter_parse_from_fields($entity_type, $entity) as $file_reference) {
+    if (empty($entity_files[$file_reference['fid']])) {
+      $entity_files[$file_reference['fid']] = 1;
+    }
+    else {
+      $entity_files[$file_reference['fid']]++;
+    }
+  }
+
+  return $entity_files;
+}
+
+/**
+ * Parse file references from an entity's text fields and return them as an array.
+ */
+function commons_media_filter_parse_from_fields($entity_type, $entity) {
+  $file_references = array();
+
+  foreach (media_wysiwyg_filter_fields_with_text_filtering($entity_type, $entity) as $field_name) {
+    if ($field_items = field_get_items($entity_type, $entity, $field_name)) {
+      foreach ($field_items as $field_item) {
+        preg_match_all(MEDIA_WYSIWYG_TOKEN_REGEX, $field_item['value'], $matches);
+
+        foreach ($matches[0] as $tag) {
+          $tag = str_replace(array('[[', ']]'), '', $tag);
+          $tag_info = drupal_json_decode($tag);
+
+          if (isset($tag_info['fid']) && $tag_info['type'] == 'media') {
+            $file_references[] = $tag_info;
+          }
+        }
+
+        preg_match_all(MEDIA_WYSIWYG_TOKEN_REGEX, $field_item['value'], $matches_alt);
+
+        foreach ($matches_alt[0] as $tag) {
+          $tag = urldecode($tag);
+          $tag_info = drupal_json_decode($tag);
+
+          if (isset($tag_info['fid']) && $tag_info['type'] == 'media') {
+            $file_references[] = $tag_info;
+          }
+        }
+      }
+    }
+  }
+
+  return $file_references;
+}
diff --git a/modules/commons/commons_media/commons_media.strongarm.inc b/modules/commons/commons_media/commons_media.strongarm.inc
new file mode 100644
index 0000000..50fa0a5
--- /dev/null
+++ b/modules/commons/commons_media/commons_media.strongarm.inc
@@ -0,0 +1,42 @@
+<?php
+/**
+ * @file
+ * commons_media.strongarm.inc
+ */
+
+/**
+ * Implements hook_strongarm().
+ */
+function commons_media_strongarm() {
+  $export = array();
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'file_entity_file_upload_wizard_skip_fields';
+  $strongarm->value = 0;
+  $export['file_entity_file_upload_wizard_skip_fields'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'file_entity_file_upload_wizard_skip_file_type';
+  $strongarm->value = 1;
+  $export['file_entity_file_upload_wizard_skip_file_type'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'file_entity_file_upload_wizard_skip_scheme';
+  $strongarm->value = 1;
+  $export['file_entity_file_upload_wizard_skip_scheme'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'media_dialog_theme';
+  $strongarm->value = 'ember';
+  $export['media_dialog_theme'] = $strongarm;
+
+  return $export;
+}
diff --git a/modules/commons/commons_media/commons_media_autoembed.js b/modules/commons/commons_media/commons_media_autoembed.js
new file mode 100644
index 0000000..bd64f21
--- /dev/null
+++ b/modules/commons/commons_media/commons_media_autoembed.js
@@ -0,0 +1,10 @@
+(function ($) {
+
+Drupal.behaviors.autoEmbed = {
+  attach: function (context, settings) {
+    // Automatically click the submit button to embed the file.
+    $('.button.fake-ok').click();
+  }
+};
+
+})(jQuery);
diff --git a/modules/commons/commons_media/commons_media_autoupload.js b/modules/commons/commons_media/commons_media_autoupload.js
new file mode 100644
index 0000000..31a32d6
--- /dev/null
+++ b/modules/commons/commons_media/commons_media_autoupload.js
@@ -0,0 +1,20 @@
+(function ($) {
+
+Drupal.behaviors.autoUpload = {
+  attach: function (context, settings) {
+    // Loop through all of the managed file form elements on the page.
+    $('.form-managed-file').each(function(index, element) {
+      // Hide/show the file upload/remove button if a file is not present.
+      if ($(this).children('span.file').length == 0 ) {
+        $(this).children('input.form-submit').hide();
+      };
+
+      // Automatically upload the file if a file is selected.
+      $(this).delegate('input.form-file', 'change', function() {
+        $(this).siblings('input.form-submit').mousedown();
+      });
+    });
+  }
+};
+
+})(jQuery);
diff --git a/modules/commons/commons_misc/commons_misc.features.user_role.inc b/modules/commons/commons_misc/commons_misc.features.user_role.inc
new file mode 100644
index 0000000..354ec88
--- /dev/null
+++ b/modules/commons/commons_misc/commons_misc.features.user_role.inc
@@ -0,0 +1,20 @@
+<?php
+/**
+ * @file
+ * commons_misc.features.user_role.inc
+ */
+
+/**
+ * Implements hook_user_default_roles().
+ */
+function commons_misc_user_default_roles() {
+  $roles = array();
+
+  // Exported role: administrator.
+  $roles['administrator'] = array(
+    'name' => 'administrator',
+    'weight' => 10,
+  );
+
+  return $roles;
+}
diff --git a/modules/commons/commons_misc/commons_misc.info b/modules/commons/commons_misc/commons_misc.info
index d7b88d0..c6d9557 100644
--- a/modules/commons/commons_misc/commons_misc.info
+++ b/modules/commons/commons_misc/commons_misc.info
@@ -2,14 +2,12 @@ name = Commons Miscellaneous Configuration
 description = Various suggested bits of configuration for Commons sites.
 core = 7.x
 package = Commons - Building blocks
-project = commons_misc
 dependencies[] = comment
 dependencies[] = ctools
 dependencies[] = features
 dependencies[] = node
 dependencies[] = strongarm
 dependencies[] = user
-datestamp = 1355530534
 features[ctools][] = page_manager:pages_default:1
 features[ctools][] = strongarm:strongarm:1
 features[features_api][] = api:2
@@ -20,6 +18,8 @@ features[user_permission][] = access user profiles
 features[user_permission][] = post comments
 features[user_permission][] = skip comment approval
 features[user_permission][] = view own unpublished content
+features[user_role][] = administrator
+features[variable][] = navbar_libraries_variants
 features[variable][] = theme_adaptivetheme_settings
 features[variable][] = theme_commons_origins_settings
 features[variable][] = user_register
diff --git a/modules/commons/commons_misc/commons_misc.install b/modules/commons/commons_misc/commons_misc.install
index ab93fe7..b8ab941 100644
--- a/modules/commons/commons_misc/commons_misc.install
+++ b/modules/commons/commons_misc/commons_misc.install
@@ -5,6 +5,27 @@
  */
 
 /**
+ * Implements hook_install().
+ */
+function commons_misc_install() {
+  // While the administrator role will be created by Features, it will not be
+  // available yet when hook_install() is run, so we need to test for and create
+  // it here.
+  if (!$role = user_role_load_by_name('administrator')) {
+    $role = new stdClass();
+    $role->name = 'administrator';
+    $role->weight = 10;
+    user_role_save($role);
+  }
+
+  // Grant user 1 the 'administrator' role.
+  user_multiple_role_edit(array(1), 'add_role', $role->rid);
+
+  // Set the 'administrator' role as the 'administrator role'.
+  variable_set('user_admin_role', $role->rid);
+}
+
+/**
  * Enable legacy IE settings for Commons Origins.
  */
 function commons_misc_update_7000() {
@@ -21,3 +42,26 @@ function commons_misc_update_7000() {
   // Save the new Commons Origins settings.
   variable_set('theme_commons_origins_settings', $settings);
 }
+
+/**
+ * Assign the administrator role a larger weight.
+ */
+function commons_misc_update_7001() {
+  $revert = array(
+    'commons_misc' => array('user_role'),
+  );
+  features_revert($revert);
+  return array();
+}
+
+/**
+ * Configure navbar to use the source version of Modernizr since it isn't
+ * currently possible to include a minified version of the library.
+ */
+function commons_misc_update_7002() {
+  $revert = array(
+    'commons_misc' => array('variable'),
+  );
+  features_revert($revert);
+  return array();
+}
diff --git a/modules/commons/commons_misc/commons_misc.module b/modules/commons/commons_misc/commons_misc.module
index 32fbc63..c2df42c 100644
--- a/modules/commons/commons_misc/commons_misc.module
+++ b/modules/commons/commons_misc/commons_misc.module
@@ -44,4 +44,31 @@ function commons_misc_form_system_theme_settings_alter(&$form, &$form_state, $fo
     require_once(drupal_get_path('theme', 'commons_origins') . '/commons_origins.palettes.inc');
     commons_origins_palettes_form($form);
   }
-}
\ No newline at end of file
+}
+
+/**
+ * Implements hook_navbar().
+ */
+function commons_misc_navbar() {
+  $items = array();
+
+  // Add a link to the official commons documentation.
+  $items['documentation'] = array(
+    '#type' => 'navbar_item',
+    'tab' => array(
+      '#type' => 'link',
+      '#title' => t('Documentation'),
+      '#href' => 'https://docs.acquia.com/commons',
+      '#options' => array(
+        'attributes' => array(
+          'title' => t('Commons Documentation'),
+          'class' => array('icon', 'icon-help'),
+          'target' => '_blank',
+        ),
+      ),
+    ),
+    '#weight' => 20,
+  );
+
+  return $items;
+}
diff --git a/modules/commons/commons_misc/commons_misc.strongarm.inc b/modules/commons/commons_misc/commons_misc.strongarm.inc
index 4fe438d..53ef917 100644
--- a/modules/commons/commons_misc/commons_misc.strongarm.inc
+++ b/modules/commons/commons_misc/commons_misc.strongarm.inc
@@ -307,6 +307,15 @@ function commons_misc_strongarm() {
   $strongarm = new stdClass();
   $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
   $strongarm->api_version = 1;
+  $strongarm->name = 'navbar_libraries_variants';
+  $strongarm->value = array(
+    'modernizr' => 'source',
+  );
+  $export['navbar_libraries_variants'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
   $strongarm->name = 'user_register';
   $strongarm->value = '1';
   $export['user_register'] = $strongarm;
diff --git a/modules/commons/commons_notify/commons_notify.features.field_instance.inc b/modules/commons/commons_notify/commons_notify.features.field_instance.inc
index 57ff66e..d03df1f 100644
--- a/modules/commons/commons_notify/commons_notify.features.field_instance.inc
+++ b/modules/commons/commons_notify/commons_notify.features.field_instance.inc
@@ -211,6 +211,208 @@ function commons_notify_field_default_field_instances() {
     ),
   );
 
+  // Exported field_instance: 'message-commons_notify_comment_created_no_groups-field_message_rendered_body'
+  $field_instances['message-commons_notify_comment_created_no_groups-field_message_rendered_body'] = array(
+    'bundle' => 'commons_notify_comment_created_no_groups',
+    'default_value' => NULL,
+    'deleted' => 0,
+    'description' => '',
+    'display' => array(
+      'default' => array(
+        'label' => 'above',
+        'module' => 'text',
+        'settings' => array(),
+        'type' => 'text_default',
+        'weight' => 2,
+      ),
+      'message_notify_email_body' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 4,
+      ),
+      'message_notify_email_subject' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 4,
+      ),
+    ),
+    'entity_type' => 'message',
+    'field_name' => 'field_message_rendered_body',
+    'label' => 'Body',
+    'required' => 0,
+    'settings' => array(
+      'text_processing' => 0,
+      'user_register_form' => FALSE,
+    ),
+    'widget' => array(
+      'active' => 1,
+      'module' => 'text',
+      'settings' => array(
+        'rows' => 5,
+      ),
+      'type' => 'text_textarea',
+      'weight' => 6,
+    ),
+  );
+
+  // Exported field_instance: 'message-commons_notify_comment_created_no_groups-field_message_rendered_subject'
+  $field_instances['message-commons_notify_comment_created_no_groups-field_message_rendered_subject'] = array(
+    'bundle' => 'commons_notify_comment_created_no_groups',
+    'default_value' => NULL,
+    'deleted' => 0,
+    'description' => '',
+    'display' => array(
+      'default' => array(
+        'label' => 'above',
+        'module' => 'text',
+        'settings' => array(),
+        'type' => 'text_default',
+        'weight' => 3,
+      ),
+      'message_notify_email_body' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 3,
+      ),
+      'message_notify_email_subject' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 3,
+      ),
+    ),
+    'entity_type' => 'message',
+    'field_name' => 'field_message_rendered_subject',
+    'label' => 'Subject',
+    'required' => FALSE,
+    'settings' => array(
+      'text_processing' => 0,
+      'user_register_form' => FALSE,
+    ),
+    'widget' => array(
+      'module' => 'text',
+      'settings' => array(
+        'size' => 60,
+      ),
+      'type' => 'text_textfield',
+      'weight' => 8,
+    ),
+  );
+
+
+  // Exported field_instance: 'message-commons_notify_comment_created_no_groups-field_target_comments'
+  $field_instances['message-commons_notify_comment_created_no_groups-field_target_comments'] = array(
+    'bundle' => 'commons_notify_comment_created_no_groups',
+    'default_value' => NULL,
+    'default_value_function' => '',
+    'deleted' => 0,
+    'description' => '',
+    'display' => array(
+      'default' => array(
+        'label' => 'above',
+        'module' => 'entityreference',
+        'settings' => array(
+          'link' => FALSE,
+        ),
+        'type' => 'entityreference_label',
+        'weight' => 1,
+      ),
+      'message_notify_email_body' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 5,
+      ),
+      'message_notify_email_subject' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 5,
+      ),
+    ),
+    'entity_type' => 'message',
+    'field_name' => 'field_target_comments',
+    'label' => 'Target comment',
+    'required' => 1,
+    'settings' => array(
+      'behaviors' => array(
+        'prepopulate' => array(
+          'status' => 0,
+        ),
+      ),
+      'user_register_form' => FALSE,
+    ),
+    'widget' => array(
+      'active' => 1,
+      'module' => 'entityreference',
+      'settings' => array(
+        'match_operator' => 'CONTAINS',
+        'path' => '',
+        'size' => 60,
+      ),
+      'type' => 'entityreference_autocomplete',
+      'weight' => 4,
+    ),
+  );
+
+  // Exported field_instance: 'message-commons_notify_comment_created_no_groups-field_target_nodes'
+  $field_instances['message-commons_notify_comment_created_no_groups-field_target_nodes'] = array(
+    'bundle' => 'commons_notify_comment_created_no_groups',
+    'default_value' => NULL,
+    'default_value_function' => '',
+    'deleted' => 0,
+    'description' => '',
+    'display' => array(
+      'default' => array(
+        'label' => 'above',
+        'module' => 'entityreference',
+        'settings' => array(
+          'link' => FALSE,
+        ),
+        'type' => 'entityreference_label',
+        'weight' => 0,
+      ),
+      'message_notify_email_body' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 6,
+      ),
+      'message_notify_email_subject' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 6,
+      ),
+    ),
+    'entity_type' => 'message',
+    'field_name' => 'field_target_nodes',
+    'label' => 'Target nodes',
+    'required' => 0,
+    'settings' => array(
+      'behaviors' => array(
+        'prepopulate' => array(
+          'status' => 0,
+        ),
+      ),
+      'user_register_form' => FALSE,
+    ),
+    'widget' => array(
+      'active' => 1,
+      'module' => 'entityreference',
+      'settings' => array(
+        'match_operator' => 'CONTAINS',
+        'path' => '',
+        'size' => 60,
+      ),
+      'type' => 'entityreference_autocomplete',
+      'weight' => 2,
+    ),
+  );
+
   // Exported field_instance: 'message-commons_notify_node_created-field_message_rendered_body'
   $field_instances['message-commons_notify_node_created-field_message_rendered_body'] = array(
     'bundle' => 'commons_notify_node_created',
@@ -444,61 +646,6 @@ function commons_notify_field_default_field_instances() {
     ),
   );
 
-  // Exported field_instance: 'message-commons_notify_node_created_no_groups-field_target_comments'
-  $field_instances['message-commons_notify_node_created_no_groups-field_target_comments'] = array(
-    'bundle' => 'commons_notify_node_created_no_groups',
-    'default_value' => NULL,
-    'default_value_function' => '',
-    'deleted' => 0,
-    'description' => '',
-    'display' => array(
-      'default' => array(
-        'label' => 'above',
-        'module' => 'entityreference',
-        'settings' => array(
-          'link' => FALSE,
-        ),
-        'type' => 'entityreference_label',
-        'weight' => 3,
-      ),
-      'message_notify_email_body' => array(
-        'label' => 'above',
-        'settings' => array(),
-        'type' => 'hidden',
-        'weight' => 0,
-      ),
-      'message_notify_email_subject' => array(
-        'label' => 'above',
-        'settings' => array(),
-        'type' => 'hidden',
-        'weight' => 0,
-      ),
-    ),
-    'entity_type' => 'message',
-    'field_name' => 'field_target_comments',
-    'label' => 'Target comment',
-    'required' => 0,
-    'settings' => array(
-      'behaviors' => array(
-        'prepopulate' => array(
-          'status' => 0,
-        ),
-      ),
-      'user_register_form' => FALSE,
-    ),
-    'widget' => array(
-      'active' => 1,
-      'module' => 'entityreference',
-      'settings' => array(
-        'match_operator' => 'CONTAINS',
-        'path' => '',
-        'size' => 60,
-      ),
-      'type' => 'entityreference_autocomplete',
-      'weight' => 1,
-    ),
-  );
-
   // Exported field_instance: 'message-commons_notify_node_created_no_groups-field_target_nodes'
   $field_instances['message-commons_notify_node_created_no_groups-field_target_nodes'] = array(
     'bundle' => 'commons_notify_node_created_no_groups',
diff --git a/modules/commons/commons_notify/commons_notify.features.inc b/modules/commons/commons_notify/commons_notify.features.inc
index 58233d0..529cbef 100644
--- a/modules/commons/commons_notify/commons_notify.features.inc
+++ b/modules/commons/commons_notify/commons_notify.features.inc
@@ -29,14 +29,41 @@ function commons_notify_default_message_type() {
     "arguments" : null,
     "message_text" : { "und" : [
         {
-          "value" : "New comment on [message:field-target-nodes:0:title] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title]",
+          "value" : "New comment on [message:field-target-nodes:0:title_field] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title_field]",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003ENew comment on [message:field-target-nodes:0:title] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title]\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003ENew comment on [message:field-target-nodes:0:title_field] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title_field]\\u003C\\/p\\u003E\\n"
         },
         {
-          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title] [commons-groups:in-groups-text]:\\r\\n\\r\\n[message:field-target-comments:0:body]\\r\\n\\r\\nRead \\u0026 respond: [message:field-target-comments:0:url]\\r\\nUpdate your notification settings: [site:url]\\/user\\/[message:user:uid]\\/notification-settings",
+          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title_field] [commons-groups:in-groups-text]:\\r\\n\\r\\n[message:field-target-comments:0:body]\\r\\n\\r\\nRead \\u0026 respond: [message:field-target-comments:0:url]\\r\\nUpdate your notification settings: [site:url]\\/user\\/[message:user:uid]\\/notification-settings",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title] [commons-groups:in-groups-text]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003ERead \\u0026amp; respond: [message:field-target-comments:0:url]\\u003Cbr \\/\\u003E\\nUpdate your notification settings: [site:url]\\/user\\/[message:user:uid]\\/notification-settings\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title_field] [commons-groups:in-groups-text]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003ERead \\u0026amp; respond: [message:field-target-comments:0:url]\\u003Cbr \\/\\u003E\\nUpdate your notification settings: [site:url]\\/user\\/[message:user:uid]\\/notification-settings\\u003C\\/p\\u003E\\n"
+        }
+      ]
+    },
+    "rdf_mapping" : []
+  }');
+  $items['commons_notify_comment_created_no_groups'] = entity_import('message_type', '{
+    "name" : "commons_notify_comment_created_no_groups",
+    "description" : "Commons Notify: Comment created no groups",
+    "argument_keys" : [],
+    "argument" : [],
+    "category" : "commons_notify",
+    "data" : {
+      "token options" : { "clear" : 0 },
+      "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" }
+    },
+    "language" : "",
+    "arguments" : null,
+    "message_text" : { "und" : [
+        {
+          "value" : "New comment on [message:field-target-nodes:0:title_field] ",
+          "format" : "plain_text",
+          "safe_value" : "\\u003Cp\\u003ENew comment on [message:field-target-nodes:0:title_field]\\u003C\\/p\\u003E\\n"
+        },
+        {
+          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title_field]:\\r\\n\\r\\n[message:field-target-comments:0:body]\\r\\n\\r\\nRead \\u0026 respond: [message:field-target-comments:0:url]\\r\\nUpdate your notification settings: [site:url]\\/notification-settings",
+          "format" : "plain_text",
+          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title_field]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003ERead \\u0026amp; respond: [message:field-target-comments:0:url]\\u003Cbr \\/\\u003E\\nUpdate your notification settings: [site:url]\\/notification-settings\\u003C\\/p\\u003E\\n"
         }
       ]
     },
@@ -53,14 +80,14 @@ function commons_notify_default_message_type() {
     "arguments" : null,
     "message_text" : { "und" : [
         {
-          "value" : "New [message:field-target-nodes:0:content-type] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title]",
+          "value" : "New [message:field-target-nodes:0:content-type] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title_field]",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003ENew [message:field-target-nodes:0:content-type] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title]\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003ENew [message:field-target-nodes:0:content-type] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title_field]\\u003C\\/p\\u003E\\n"
         },
         {
-          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\r\\n\\r\\n[message:field-target-nodes:0:body]\\r\\n\\r\\n\\r\\nPermalink: [message:field-target-nodes:0:url]\\r\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\r\\n\\r\\nChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings",
+          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title_field]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\r\\n\\r\\n[message:field-target-nodes:0:body]\\r\\n\\r\\n\\r\\nPermalink: [message:field-target-nodes:0:url]\\r\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\r\\n\\r\\nChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003EPermalink: [message:field-target-nodes:0:url]\\u003Cbr \\/\\u003E\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\u003C\\/p\\u003E\\n\\u003Cp\\u003EChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title_field]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003EPermalink: [message:field-target-nodes:0:url]\\u003Cbr \\/\\u003E\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\u003C\\/p\\u003E\\n\\u003Cp\\u003EChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings\\u003C\\/p\\u003E\\n"
         }
       ]
     },
@@ -77,14 +104,14 @@ function commons_notify_default_message_type() {
     "arguments" : null,
     "message_text" : { "und" : [
         {
-          "value" : "New [message:field-target-nodes:0:content-type] on [site:name]: [message:field-target-nodes:0:title]",
+          "value" : "New [message:field-target-nodes:0:content-type] on [site:name]: [message:field-target-nodes:0:title_field]",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003ENew [message:field-target-nodes:0:content-type] on [site:name]: [message:field-target-nodes:0:title]\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003ENew [message:field-target-nodes:0:content-type] on [site:name]: [message:field-target-nodes:0:title_field]\\u003C\\/p\\u003E\\n"
         },
         {
-          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\r\\n\\r\\n[message:field-target-nodes:0:body]\\r\\n\\r\\n\\r\\nPermalink: [message:field-target-nodes:0:url]\\r\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\r\\n\\r\\nChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings",
+          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title_field]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\r\\n\\r\\n[message:field-target-nodes:0:body]\\r\\n\\r\\n\\r\\nPermalink: [message:field-target-nodes:0:url]\\r\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\r\\n\\r\\nChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003EPermalink: [message:field-target-nodes:0:url]\\u003Cbr \\/\\u003E\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\u003C\\/p\\u003E\\n\\u003Cp\\u003EChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title_field]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003EPermalink: [message:field-target-nodes:0:url]\\u003Cbr \\/\\u003E\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\u003C\\/p\\u003E\\n\\u003Cp\\u003EChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings\\u003C\\/p\\u003E\\n"
         }
       ]
     },
diff --git a/modules/commons/commons_notify/commons_notify.info b/modules/commons/commons_notify/commons_notify.info
index 7900e88..1e5688a 100644
--- a/modules/commons/commons_notify/commons_notify.info
+++ b/modules/commons/commons_notify/commons_notify.info
@@ -1,7 +1,6 @@
 name = Commons Notify
 core = 7.x
 package = Commons - Building blocks
-project = commons_notify
 dependencies[] = commons_follow
 dependencies[] = ctools
 dependencies[] = entity
@@ -15,7 +14,6 @@ dependencies[] = number
 dependencies[] = options
 dependencies[] = strongarm
 dependencies[] = text
-datestamp = 1354747303
 features[ctools][] = strongarm:strongarm:1
 features[features_api][] = api:2
 features[field_base][] = field_message_rendered_body
@@ -25,20 +23,25 @@ features[field_instance][] = message-commons_notify_comment_created-field_messag
 features[field_instance][] = message-commons_notify_comment_created-field_message_rendered_subject
 features[field_instance][] = message-commons_notify_comment_created-field_target_comments
 features[field_instance][] = message-commons_notify_comment_created-field_target_nodes
+features[field_instance][] = message-commons_notify_comment_created_no_groups-field_message_rendered_body
+features[field_instance][] = message-commons_notify_comment_created_no_groups-field_message_rendered_subject
+features[field_instance][] = message-commons_notify_comment_created_no_groups-field_target_comments
+features[field_instance][] = message-commons_notify_comment_created_no_groups-field_target_nodes
 features[field_instance][] = message-commons_notify_node_created-field_message_rendered_body
 features[field_instance][] = message-commons_notify_node_created-field_message_rendered_subject
 features[field_instance][] = message-commons_notify_node_created-field_target_nodes
 features[field_instance][] = message-commons_notify_node_created_no_groups-field_message_rendered_body
 features[field_instance][] = message-commons_notify_node_created_no_groups-field_message_rendered_subject
-features[field_instance][] = message-commons_notify_node_created_no_groups-field_target_comments
 features[field_instance][] = message-commons_notify_node_created_no_groups-field_target_nodes
 features[field_instance][] = message_type-commons_notify-message_text
 features[field_instance][] = user-user-message_subscribe_email
 features[message_type][] = commons_notify_comment_created
+features[message_type][] = commons_notify_comment_created_no_groups
 features[message_type][] = commons_notify_node_created
 features[message_type][] = commons_notify_node_created_no_groups
 features[message_type_category][] = commons_notify
 features[variable][] = field_bundle_settings_message__commons_notify_comment_created
+features[variable][] = field_bundle_settings_message__commons_notify_comment_created_no_groups
 features[variable][] = field_bundle_settings_message__commons_notify_node_created
 features[variable][] = field_bundle_settings_message__commons_notify_node_created_no_groups
 features[variable][] = message_subscribe_default_notifiers
diff --git a/modules/commons/commons_notify/commons_notify.install b/modules/commons/commons_notify/commons_notify.install
index 0db44df..ba5b31a 100644
--- a/modules/commons/commons_notify/commons_notify.install
+++ b/modules/commons/commons_notify/commons_notify.install
@@ -23,3 +23,11 @@ function commons_notify_update_7303() {
   features_revert(array('commons_notify' => array('message_type')));
   return array();
 }
+
+/**
+ * Add message notify for comments that have no group.
+ */
+function commons_notify_update_7304() {
+  features_revert(array('commons_notify' => array('message_type')));
+  return array();
+}
diff --git a/modules/commons/commons_notify/commons_notify.module b/modules/commons/commons_notify/commons_notify.module
index 7be270c..2cfcc7d 100644
--- a/modules/commons/commons_notify/commons_notify.module
+++ b/modules/commons/commons_notify/commons_notify.module
@@ -12,14 +12,14 @@ include_once 'commons_notify.features.inc';
  * a shutdown function, because node access grants haven not been written
  * by the time hook_node_insert() is invoked. For more background,
  * see https://drupal.org/node/1918666.
- * 
+ *
  */
 function commons_notify_node_insert($node) {
   drupal_register_shutdown_function('commons_notify_send_message_on_shutdown', $node);
 }
 
 /**
- * Send a notification for newly created nodes. 
+ * Send a notification for newly created nodes.
  * This function is registered as a shutdown function
  * in commons_notify_node_insert.
  * Note that shutdown functions run after drupal_set_message() messages are
@@ -38,7 +38,6 @@ function commons_notify_send_message_on_shutdown($node) {
   // the realm to the user, since if no realms are provided then the message
   // is automatically assigned to the user passed in the function, or if no
   // user object is provided, then to the acting user.
-
   $message_type = 'commons_notify_node_created';
   // We need to clear the static loading cache so that the node body will be
   // ready in time for token replacement for the  message.
@@ -76,7 +75,7 @@ function commons_notify_comment_insert($comment) {
   $message_type = 'commons_notify_comment_created';
   $hook = 'comment_insert';
   if (!isset($node->og_group_ref[LANGUAGE_NONE][0]['target_id'])) {
-    $message_type = 'commons_notify_node_created_no_groups';
+    $message_type = 'commons_notify_comment_created_no_groups';
   }
   drupal_alter('commons_notify_message_selection', $message_type, $hook, $comment);
   $message = message_create($message_type, array('uid' => $account->uid, 'timestamp' => $comment->created));
@@ -102,65 +101,3 @@ function commons_notify_comment_insert($comment) {
   );
   message_subscribe_send_message('comment', $comment, $message, array('email' => $options));
 }
-
-/**
- * Implements hook_commons_utility_links().
- *
- * Add unread-invitations and unread-messages notifications to utility links.
- */
-function commons_notify_commons_utility_links_alter(&$links) {
-  global $user;
-
-  if (user_is_anonymous()) {
-    // Anonymous user.
-    return;
-  }
-
-  $new_links = array(
-    'name' => $links['name'],
-  );
-
-  $account = $user;
-
-  $unread_invitations = 0;
-  if (module_exists('commons_trusted_contacts')) {
-    $unread_invitations = count(commons_trusted_contacts_get_pending_invitations($account->uid));
-  }
-
-  $unread_messages = 0;
-  if (module_exists('privatemsg')) {
-    $unread_messages = privatemsg_unread_count($account);
-  }
-
-
-  if (empty($unread_invitations) && empty($unread_messages)) {
-    // Provide a default mailbox icon pointing to the private messages UI
-    // when there are no unread messages or invitations.
-    $new_links['no-unread-messages'] = array(
-      'href' => 'user/' . $user->uid . '/contacts',
-      'query' => array('qt-commons_trusted_contacts' => 'messages'),
-      'title' => t('No unread messages'),
-    );
-  }
-
-  if ($unread_invitations) {
-    $new_links['unread-invitations']= array(
-      'href' => 'user/' . $user->uid . '/contacts',
-      'query' => array('qt-commons_trusted_contacts' => 'invitations'),
-      'title' => format_plural($unread_invitations, '1 invitation', '@count invitations'),
-    );
-  }
-
-  if ($unread_messages) {
-    $new_links['unread-messages']= array(
-      'href' => 'user/' . $user->uid . '/contacts',
-      'query' => array('qt-commons_trusted_contacts' => 'messages'),
-      'title' => format_plural($unread_messages, '1 message', '@count messages'),
-    );
-  }
-
-  $new_links['logout'] = $links['logout'];
-  $new_links['settings'] = $links['settings'];
-
-  $links = $new_links;
-}
diff --git a/modules/commons/commons_notify/commons_notify.strongarm.inc b/modules/commons/commons_notify/commons_notify.strongarm.inc
index 7e4f9a6..7908a70 100644
--- a/modules/commons/commons_notify/commons_notify.strongarm.inc
+++ b/modules/commons/commons_notify/commons_notify.strongarm.inc
@@ -47,6 +47,40 @@ function commons_notify_strongarm() {
   $strongarm = new stdClass();
   $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
   $strongarm->api_version = 1;
+  $strongarm->name = 'field_bundle_settings_message__commons_notify_comment_created_no_groups';
+  $strongarm->value = array(
+    'view_modes' => array(),
+    'extra_fields' => array(
+      'form' => array(),
+      'display' => array(
+        'message__message_text__0' => array(
+          'message_notify_email_subject' => array(
+            'visible' => TRUE,
+            'weight' => 0,
+          ),
+          'message_notify_email_body' => array(
+            'visible' => FALSE,
+            'weight' => 0,
+          ),
+        ),
+        'message__message_text__1' => array(
+          'message_notify_email_subject' => array(
+            'visible' => FALSE,
+            'weight' => 0,
+          ),
+          'message_notify_email_body' => array(
+            'visible' => TRUE,
+            'weight' => 0,
+          ),
+        ),
+      ),
+    ),
+  );
+  $export['field_bundle_settings_message__commons_notify_comment_created_no_groups'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
   $strongarm->name = 'field_bundle_settings_message__commons_notify_node_created';
   $strongarm->value = array(
     'view_modes' => array(),
diff --git a/modules/commons/commons_polls/commons_polls.info b/modules/commons/commons_polls/commons_polls.info
index 65aa041..c049736 100644
--- a/modules/commons/commons_polls/commons_polls.info
+++ b/modules/commons/commons_polls/commons_polls.info
@@ -2,7 +2,6 @@ name = Commons Polls
 description = Commons poll content type
 core = 7.x
 package = Commons - Content types
-project = commons_polls
 dependencies[] = commons_body
 dependencies[] = commons_topics
 dependencies[] = ctools
diff --git a/modules/commons/commons_polls/commons_polls.install b/modules/commons/commons_polls/commons_polls.install
index e3f1d7b..e196d60 100644
--- a/modules/commons/commons_polls/commons_polls.install
+++ b/modules/commons/commons_polls/commons_polls.install
@@ -32,3 +32,25 @@ function commons_polls_update_7002() {
   features_revert($revert);
   return array();
 }
+
+/**
+ * Display sticky content at top of lists.
+ */
+function commons_polls_update_7003() {
+  $revert = array(
+    'commons_polls' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
+
+/**
+ * Add links to node teasers in the browsing widget.
+ */
+function commons_polls_update_7004() {
+  $revert = array(
+    'commons_polls' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
diff --git a/modules/commons/commons_polls/commons_polls.module b/modules/commons/commons_polls/commons_polls.module
index 115fd00..7e1ec8d 100644
--- a/modules/commons/commons_polls/commons_polls.module
+++ b/modules/commons/commons_polls/commons_polls.module
@@ -23,12 +23,14 @@ function commons_polls_commons_bw_group_widget() {
 }
 
 /**
- * Implements hook_commons_entity_integration.
+ * Implements hook_commons_entity_integration().
  */
 function commons_polls_commons_entity_integration() {
   return array(
     'node' => array(
       'poll' => array(
+        'media' => TRUE,
+        'is_group_content' => TRUE,
       ),
     ),
   );
@@ -89,7 +91,7 @@ function commons_polls_form_commons_bw_partial_node_form_alter(&$form, &$form_st
 
   // Prepare the form for collapsing.
   $form['body']['#attributes']['class'][] = 'trigger-field';
-  foreach (array('field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
+  foreach (array('field_media', 'field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
     if (isset($form[$field])) {
       $form[$field]['#attributes']['class'][] = 'hideable-field';
     }
diff --git a/modules/commons/commons_polls/commons_polls.views_default.inc b/modules/commons/commons_polls/commons_polls.views_default.inc
index 1bb05b4..ff5609c 100644
--- a/modules/commons/commons_polls/commons_polls.views_default.inc
+++ b/modules/commons/commons_polls/commons_polls.views_default.inc
@@ -36,7 +36,6 @@ function commons_polls_views_default_views() {
   $handler->display->display_options['pager']['options']['quantity'] = '9';
   $handler->display->display_options['style_plugin'] = 'default';
   $handler->display->display_options['row_plugin'] = 'node';
-  $handler->display->display_options['row_options']['links'] = FALSE;
   /* Header: Global: Node partial form */
   $handler->display->display_options['header']['commons_bw_node_partial_form']['id'] = 'commons_bw_node_partial_form';
   $handler->display->display_options['header']['commons_bw_node_partial_form']['table'] = 'views';
@@ -64,6 +63,7 @@ function commons_polls_views_default_views() {
   $handler->display->display_options['sorts']['sticky']['id'] = 'sticky';
   $handler->display->display_options['sorts']['sticky']['table'] = 'node';
   $handler->display->display_options['sorts']['sticky']['field'] = 'sticky';
+  $handler->display->display_options['sorts']['sticky']['order'] = 'DESC';
   /* Sort criterion: Content: Post date */
   $handler->display->display_options['sorts']['created']['id'] = 'created';
   $handler->display->display_options['sorts']['created']['table'] = 'node';
diff --git a/modules/commons/commons_posts/commons_posts.features.inc b/modules/commons/commons_posts/commons_posts.features.inc
index bf03f79..46180d3 100644
--- a/modules/commons/commons_posts/commons_posts.features.inc
+++ b/modules/commons/commons_posts/commons_posts.features.inc
@@ -41,13 +41,13 @@ function commons_posts_default_message_type() {
           "safe_value" : "[message:user:picture:35x35]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E posted \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E posted \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E posted \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E posted \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E"
         },
         {
           "value" : "[commons-groups:in-groups-text]",
-          "format" : "full_html",
+          "format" : "filtered_html",
           "safe_value" : "[commons-groups:in-groups-text]"
         }
       ]
diff --git a/modules/commons/commons_posts/commons_posts.info b/modules/commons/commons_posts/commons_posts.info
index dddb5c1..2b84e7c 100644
--- a/modules/commons/commons_posts/commons_posts.info
+++ b/modules/commons/commons_posts/commons_posts.info
@@ -2,7 +2,6 @@ name = Commons Posts
 description = Commons Post content type
 core = 7.x
 package = Commons - Content types
-project = commons_posts
 dependencies[] = commons_body
 dependencies[] = commons_bw
 dependencies[] = commons_topics
diff --git a/modules/commons/commons_posts/commons_posts.install b/modules/commons/commons_posts/commons_posts.install
index 106f277..688c79f 100644
--- a/modules/commons/commons_posts/commons_posts.install
+++ b/modules/commons/commons_posts/commons_posts.install
@@ -43,3 +43,25 @@ function commons_posts_update_7003() {
   features_revert($revert);
   return array();
 }
+
+/**
+ * Display sticky content at top of lists.
+ */
+function commons_posts_update_7004() {
+  $revert = array(
+    'commons_posts' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
+
+/**
+ * Add links to node teasers in the browsing widget.
+ */
+function commons_posts_update_7005() {
+  $revert = array(
+    'commons_posts' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
diff --git a/modules/commons/commons_posts/commons_posts.module b/modules/commons/commons_posts/commons_posts.module
index b51edde..8c3b11d 100644
--- a/modules/commons/commons_posts/commons_posts.module
+++ b/modules/commons/commons_posts/commons_posts.module
@@ -57,7 +57,7 @@ function commons_posts_form_commons_bw_partial_node_form_alter(&$form, &$form_st
 
   // Set fields as hideable so the forms can be compacted.
   $form['body']['#attributes']['class'][] = 'trigger-field';
-  foreach (array('field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
+  foreach (array('field_media', 'field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
     if (isset($form[$field])) {
       $form[$field]['#attributes']['class'][] = 'hideable-field';
     }
@@ -92,12 +92,14 @@ function commons_posts_commons_activity_streams_message_selection_alter(&$messag
 }
 
 /**
- * Implements hook_commons_entity_integration.
+ * Implements hook_commons_entity_integration().
  */
 function commons_posts_commons_entity_integration() {
   return array(
     'node' => array(
       'post' => array(
+        'media' => TRUE,
+        'is_group_content' => TRUE,
       ),
     ),
   );
diff --git a/modules/commons/commons_posts/commons_posts.views_default.inc b/modules/commons/commons_posts/commons_posts.views_default.inc
index 06e98bb..fb7c0ea 100644
--- a/modules/commons/commons_posts/commons_posts.views_default.inc
+++ b/modules/commons/commons_posts/commons_posts.views_default.inc
@@ -36,7 +36,6 @@ function commons_posts_views_default_views() {
   $handler->display->display_options['pager']['options']['quantity'] = '9';
   $handler->display->display_options['style_plugin'] = 'default';
   $handler->display->display_options['row_plugin'] = 'node';
-  $handler->display->display_options['row_options']['links'] = FALSE;
   /* Header: Global: Node partial form */
   $handler->display->display_options['header']['commons_bw_node_partial_form']['id'] = 'commons_bw_node_partial_form';
   $handler->display->display_options['header']['commons_bw_node_partial_form']['table'] = 'views';
@@ -65,6 +64,7 @@ function commons_posts_views_default_views() {
   $handler->display->display_options['sorts']['sticky']['id'] = 'sticky';
   $handler->display->display_options['sorts']['sticky']['table'] = 'node';
   $handler->display->display_options['sorts']['sticky']['field'] = 'sticky';
+  $handler->display->display_options['sorts']['sticky']['order'] = 'DESC';
   /* Sort criterion: Content: Post date */
   $handler->display->display_options['sorts']['created']['id'] = 'created';
   $handler->display->display_options['sorts']['created']['table'] = 'node';
diff --git a/modules/commons/commons_profile_base/commons_profile_base.info b/modules/commons/commons_profile_base/commons_profile_base.info
index 2a654a1..3ae9767 100644
--- a/modules/commons/commons_profile_base/commons_profile_base.info
+++ b/modules/commons/commons_profile_base/commons_profile_base.info
@@ -2,13 +2,12 @@ name = Commons Profile Base
 description = Provides a base set of profile fields for user profiles.
 core = 7.x
 package = Commons - Building blocks
-php = 5.2.4
-project = commons_profile_base
+dependencies[] = ctools
 dependencies[] = features
 dependencies[] = strongarm
-datestamp = 1346372016
+dependencies[] = text
 features[ctools][] = strongarm:strongarm:1
-features[features_api][] = api:1
+features[features_api][] = api:2
 features[field_base][] = field_bio
 features[field_base][] = field_name_first
 features[field_base][] = field_name_last
@@ -16,6 +15,9 @@ features[field_instance][] = user-user-field_bio
 features[field_instance][] = user-user-field_name_first
 features[field_instance][] = user-user-field_name_last
 features[variable][] = realname_pattern
+features[variable][] = user_mail_register_admin_created_body
+features[variable][] = user_mail_register_no_approval_required_body
+features[variable][] = user_mail_status_activated_body
 features[variable][] = user_picture_dimensions
 features[variable][] = user_picture_file_size
 features[variable][] = user_picture_style
diff --git a/modules/commons/commons_profile_base/commons_profile_base.install b/modules/commons/commons_profile_base/commons_profile_base.install
new file mode 100644
index 0000000..c8541cc
--- /dev/null
+++ b/modules/commons/commons_profile_base/commons_profile_base.install
@@ -0,0 +1,23 @@
+<?php
+
+/**
+ * Revert strongarm varibles related to realname recursion error.
+ */
+function commons_profile_base_update_7000() {
+    $revert = array(
+      'commons_profile_base' => array('variable'),
+  );
+  features_revert($revert);
+  return array();
+}
+
+/**
+ * Replace tokens with their raw equivalents in user registration emails.
+ */
+function commons_profile_base_update_7001() {
+  $revert = array(
+    'commons_profile_base' => array('variable'),
+  );
+  features_revert($revert);
+  return array();
+}
diff --git a/modules/commons/commons_profile_base/commons_profile_base.module b/modules/commons/commons_profile_base/commons_profile_base.module
index f7a47ce..8e68057 100644
--- a/modules/commons/commons_profile_base/commons_profile_base.module
+++ b/modules/commons/commons_profile_base/commons_profile_base.module
@@ -32,3 +32,88 @@ function commons_profile_base_form_user_register_form_alter(&$form, &$form_state
 function commons_profile_base_menu_alter(&$items) {
   $items['user/register']['title'] = 'Sign up';
 }
+
+/**
+ * Implements hook_modules_enabled().
+ *
+ * Replace tokens with their raw equivalents in user registration emails.
+ */
+function commons_profile_base_modules_enabled($modules) {
+  if (in_array('realname', $modules)) {
+    features_revert(array('commons_profile_base' => array('variable')));
+  }
+}
+
+/**
+ * Implements hook_modules_disabled().
+ *
+ * Restore default user registration emails.
+ */
+function commons_profile_base_modules_disabled($modules) {
+  if (in_array('realname', $modules)) {
+    features_revert(array('commons_profile_base' => array('variable')));
+  }
+}
+
+/**
+ * Implements hook_strongarm_alter().
+ */
+function commons_profile_base_strongarm_alter(&$items) {
+  // The default user registration emails include tokens which display user
+  // names as realnames. Realnames cannot be used for logging in or resetting
+  // passwords which leads to confusion.
+  // Replace the tokens with their raw equivalents so user emails display
+  // usernames instead of realnames.
+  if (module_exists('realname')) {
+    if (isset($items['user_mail_register_admin_created_body'])) {
+      $items['user_mail_register_admin_created_body']->value = '[user:name-raw],
+
+A site administrator at [site:name] has created an account for you. You may now log in by clicking this link or copying and pasting it to your browser:
+
+[user:one-time-login-url]
+
+This link can only be used once to log in and will lead you to a page where you can set your password.
+
+After setting your password, you will be able to log in at [site:login-url] in the future using:
+
+username: [user:name-raw]
+password: Your password
+
+--  [site:name] team';
+    }
+    if (isset($items['user_mail_register_no_approval_required_body'])) {
+      $items['user_mail_register_no_approval_required_body']->value = '[user:name-raw],
+
+Thank you for registering at [site:name]. You may now log in by clicking this link or copying and pasting it to your browser:
+
+[user:one-time-login-url]
+
+This link can only be used once to log in and will lead you to a page where you can set your password.
+
+After setting your password, you will be able to log in at [site:login-url] in the future using:
+
+username: [user:name-raw]
+password: Your password
+
+--  [site:name] team';
+    }
+    if (isset($items['user_mail_status_activated_body'])) {
+      $items['user_mail_status_activated_body']->value = '[user:name],
+
+Your account at [site:name] has been activated.
+
+You may now log in by clicking this link or copying and pasting it into your browser:
+
+[user:one-time-login-url]
+
+This link can only be used once to log in and will lead you to a page where you can set your password.
+
+After setting your password, you will be able to log in at [site:login-url] in the future using:
+
+username: [user:name-raw]
+password: Your password
+
+--  [site:name] team';
+    }
+  }
+}
diff --git a/modules/commons/commons_profile_base/commons_profile_base.strongarm.inc b/modules/commons/commons_profile_base/commons_profile_base.strongarm.inc
index 8475a47..dd25435 100644
--- a/modules/commons/commons_profile_base/commons_profile_base.strongarm.inc
+++ b/modules/commons/commons_profile_base/commons_profile_base.strongarm.inc
@@ -14,12 +14,74 @@ function commons_profile_base_strongarm() {
   $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
   $strongarm->api_version = 1;
   $strongarm->name = 'realname_pattern';
-  $strongarm->value = '[user:field_name_first] [user:field_name_last]';
+  $strongarm->value = '[user:field-name-first] [user:field-name-last]';
   $export['realname_pattern'] = $strongarm;
 
   $strongarm = new stdClass();
   $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
   $strongarm->api_version = 1;
+  $strongarm->name = 'user_mail_register_admin_created_body';
+  $strongarm->value = '[user:name],
+
+A site administrator at [site:name] has created an account for you. You may now log in by clicking this link or copying and pasting it to your browser:
+
+[user:one-time-login-url]
+
+This link can only be used once to log in and will lead you to a page where you can set your password.
+
+After setting your password, you will be able to log in at [site:login-url] in the future using:
+
+username: [user:name]
+password: Your password
+
+--  [site:name] team';
+  $export['user_mail_register_admin_created_body'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'user_mail_register_no_approval_required_body';
+  $strongarm->value = '[user:name],
+
+Thank you for registering at [site:name]. You may now log in by clicking this link or copying and pasting it to your browser:
+
+[user:one-time-login-url]
+
+This link can only be used once to log in and will lead you to a page where you can set your password.
+
+After setting your password, you will be able to log in at [site:login-url] in the future using:
+
+username: [user:name]
+password: Your password
+
+--  [site:name] team';
+  $export['user_mail_register_no_approval_required_body'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'user_mail_status_activated_body';
+  $strongarm->value = '[user:name],
+
+Your account at [site:name] has been activated.
+
+You may now log in by clicking this link or copying and pasting it into your browser:
+
+[user:one-time-login-url]
+
+This link can only be used once to log in and will lead you to a page where you can set your password.
+
+After setting your password, you will be able to log in at [site:login-url] in the future using:
+
+username: [user:name]
+password: Your password
+
+--  [site:name] team';
+  $export['user_mail_status_activated_body'] = $strongarm;
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
   $strongarm->name = 'user_pictures';
   $strongarm->value = '1';
   $export['user_pictures'] = $strongarm;
diff --git a/modules/commons/commons_profile_social/commons_profile_social.info b/modules/commons/commons_profile_social/commons_profile_social.info
index 9558d3b..484a492 100644
--- a/modules/commons/commons_profile_social/commons_profile_social.info
+++ b/modules/commons/commons_profile_social/commons_profile_social.info
@@ -2,7 +2,6 @@ name = Commons Profile (Social fields)
 description = Provides a set of link fields to the user's profile for the user's Facebook, Linkedin and Twitter accounts.
 core = 7.x
 package = Commons - Building blocks
-project = commons_profile_social
 dependencies[] = features
 dependencies[] = field_sql_storage
 dependencies[] = link
diff --git a/modules/commons/commons_q_a/commons_q_a.features.inc b/modules/commons/commons_q_a/commons_q_a.features.inc
index 994358d..f230f42 100644
--- a/modules/commons/commons_q_a/commons_q_a.features.inc
+++ b/modules/commons/commons_q_a/commons_q_a.features.inc
@@ -44,9 +44,9 @@ function commons_q_a_default_message_type() {
           "safe_value" : "[message:user:picture:35x35]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E answered the question \\u003Cem\\u003E[message:field-target-nodes:0:field-related-question:title]\\u003C\\/em\\u003E with \\u0022\\u003Ca href=\\u0022[message:field-target-nodes:0:field-related-question:url]#node-[message:field-target-nodes:0:nid]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E\\u0022",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E answered the question \\u003Cem\\u003E[message:field-target-nodes:0:field-related-question:title]\\u003C\\/em\\u003E with \\u0022\\u003Ca href=\\u0022[message:field-target-nodes:0:field-related-question:url]#node-[message:field-target-nodes:0:nid]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E\\u0022",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E answered the question \\u003Cem\\u003E[message:field-target-nodes:0:field-related-question:title]\\u003C\\/em\\u003E with \\u0022\\u003Ca href=\\u0022[message:field-target-nodes:0:field-related-question:url]#node-[message:field-target-nodes:0:nid]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E\\u0022"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E answered the question \\u003Cem\\u003E[message:field-target-nodes:0:field-related-question:title]\\u003C\\/em\\u003E with \\u0022\\u003Ca href=\\u0022[message:field-target-nodes:0:field-related-question:url]#node-[message:field-target-nodes:0:nid]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E\\u0022"
         },
         {
           "value" : "[commons-groups:in-groups-text]",
@@ -73,9 +73,9 @@ function commons_q_a_default_message_type() {
           "safe_value" : "[message:user:picture:35x35]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E asked the question \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E asked the question \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E asked the question \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E asked the question \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E"
         },
         {
           "value" : "[commons-groups:in-groups-text]",
diff --git a/modules/commons/commons_q_a/commons_q_a.info b/modules/commons/commons_q_a/commons_q_a.info
index 89653e0..6ffb85c 100644
--- a/modules/commons/commons_q_a/commons_q_a.info
+++ b/modules/commons/commons_q_a/commons_q_a.info
@@ -2,7 +2,6 @@ name = Commons Q&A
 description = Allows community members to ask questions and vote for the best answers
 core = 7.x
 package = Commons - Content types
-project = commons_q_a
 dependencies[] = commons_topics
 dependencies[] = ctools
 dependencies[] = entity
diff --git a/modules/commons/commons_q_a/commons_q_a.install b/modules/commons/commons_q_a/commons_q_a.install
index 7cbfea5..32a6078 100644
--- a/modules/commons/commons_q_a/commons_q_a.install
+++ b/modules/commons/commons_q_a/commons_q_a.install
@@ -103,3 +103,25 @@ function commons_q_a_update_3108() {
   features_revert($revert);
   return array();
 }
+
+/**
+ * Display sticky content at top of lists.
+ */
+function commons_q_a_update_3109() {
+  $revert = array(
+    'commons_q_a' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
+
+/**
+ * Indicate in the view that empty answers text is overridden by commons_q_a.
+ */
+function commons_q_a_update_3110() {
+  $revert = array(
+    'commons_q_a' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
diff --git a/modules/commons/commons_q_a/commons_q_a.module b/modules/commons/commons_q_a/commons_q_a.module
index 39067fa..b406183 100644
--- a/modules/commons/commons_q_a/commons_q_a.module
+++ b/modules/commons/commons_q_a/commons_q_a.module
@@ -35,24 +35,31 @@ function commons_q_a_commons_bw_group_widget() {
   );
 }
 
+/**
+ * Implements hook_node_view().
+ *
+ * Provides an answer button to bring a user down to the answer form.
+ */
 function commons_q_a_node_view($node, $view_mode) {
-  if($node->type == 'question' && $view_mode == 'full') {
+  if ($node->type == 'question' && $view_mode == 'full') {
     // Remove add comment link.
     unset($node->content['links']['comment']);
     // Add the answer link below.
-    $node->content['links']['answer'] = array(
-      '#theme' => 'links__node__answer',
-      '#links' => array(
-        'answer-add' => array(
-          'title' => t('Answer'),
-          'attributes' => array(
-            'title' => t('Answer this question')
+    if (commons_q_a_check_answer_access($node)) {
+      $node->content['links']['answer'] = array(
+        '#theme' => 'links__node__answer',
+        '#links' => array(
+          'answer-add' => array(
+            'title' => t('Answer'),
+            'attributes' => array(
+              'title' => t('Answer this question'),
+            ),
+            'href' => 'node/' . $node->nid,
+            'fragment' => 'answer',
           ),
-          'href' => 'node/'.$node->nid,
-          'fragment' => 'answer',
         ),
-      ),
-    );
+      );
+    }
     return $node;
   }
 }
@@ -75,7 +82,7 @@ function commons_q_a_form_commons_bw_partial_node_form_alter(&$form, &$form_stat
 
   // Set fields as hideable so the forms can be compacted.
   $form['body']['#attributes']['class'][] = 'trigger-field';
-  foreach (array('field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
+  foreach (array('field_media', 'field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
     if (isset($form[$field])) {
       $form[$field]['#attributes']['class'][] = 'hideable-field';
     }
@@ -109,6 +116,30 @@ function commons_q_a_views_default_views_alter(&$views) {
   }
 }
 
+/*
+ * Run an access check to see if the current user can create answer nodes based
+ * off of the question node.
+ */
+function commons_q_a_check_answer_access($question) {
+  $group_ref = array();
+  if (!empty($question->og_group_ref[LANGUAGE_NONE])) {
+    foreach ($question->og_group_ref[LANGUAGE_NONE] as $key => $value) {
+      // Check to see the user has access to the group the question is in, only attach to those groups they have permission to post in.
+      if (og_user_access('node', $value['target_id'], 'create answer content')) {
+        $group_ref[] = $value['target_id'];
+        return TRUE;
+      }
+    }
+  }
+  // If user belongs to no groups, or no groups are assigned to the Question, check node_access for user.
+  else {
+    if (node_access('create', 'answer')) {
+      return TRUE;
+    }
+  }
+  return FALSE;
+}
+
 /**
  * Implements hook_views_pre_render().
  */
@@ -118,36 +149,32 @@ function commons_q_a_views_pre_render(&$view) {
     // with the question, embed a simplified answer node form.
     global $user;
 
-    $question_nid = $view->args[0];
-    $question = node_load($question_nid);
-    $group_ref = array();
-    $answer_access = FALSE;
-    if (!empty($question->og_group_ref[LANGUAGE_NONE])) {
-      foreach ($question->og_group_ref[LANGUAGE_NONE] as $key => $value) {
-        // Check to see the user has access to the group the question is in, only attach to those groups they have permission to post in.
-        if (og_user_access('node', $value['target_id'], 'create answer content')) {
-          $group_ref[] = $value['target_id'];
-          $answer_access = TRUE;
-        }
-      }
+    if (user_is_anonymous()) {
+      $account = drupal_anonymous_user();
     }
-    // If user belongs to no groups, or no groups are assigned to the Question, check node_access for user.
     else {
-      if (node_access('create', $question, $user)) {
-        $answer_access = TRUE;
-      }
+      $account = $user;
     }
 
+    $question_nid = $view->args[0];
+    $question = node_load($question_nid);
+
+    $answer_access = commons_q_a_check_answer_access($question);
     // Check global user access before showing the answer form.
     if ($answer_access) {
+      $view->empty['area']->options['content'] = t("This question hasn't been answered yet. You can be the first to answer it!");
       module_load_include('inc', 'node', 'node.pages');
       $types = node_type_get_types();
-      $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => 'answer', 'language' => LANGUAGE_NONE);
+      $node = (object) array(
+        'uid' => $account->uid,
+        'name' => (isset($account->name) ? $account->name : ''),
+        'type' => 'answer', 'language' => LANGUAGE_NONE
+      );
       // Prepopulate the Related question field
       // with Entityreference Prepopulate, which looks strictly at $_GET.
       $_GET['field_related_question'] = $view->args[0];
       if (!empty($group_ref)) {
-        $_GET['og_group_ref'] = implode(',',$group_ref);
+        $_GET['og_group_ref'] = implode(',', $group_ref);
       }
       $answer_form = drupal_get_form('answer_node_form', $node);
       $answer_form['header'] = array(
@@ -164,6 +191,17 @@ function commons_q_a_views_pre_render(&$view) {
       // post questions into any of the groups associated with the parent.
       return;
     }
+    // Tell Anonymous users to login.
+    elseif ($account->uid === 0) {
+      $view->empty['area']->options['content'] = t("This question hasn't been answered yet. !create to be the first to answer it!", array('!create' => l(t("Login or create an account"), 'user')));
+      return;
+    }
+    // If the user is not anonymous, but cannot answer the question. Don't tell
+    // them they should be the first to answer it.
+    else {
+      $view->empty['area']->options['content'] = t("This question hasn't been answered yet.");
+      return;
+    }
   }
 }
 
@@ -188,7 +226,7 @@ function commons_q_a_form_alter(&$form, &$form_state, $form_id) {
   if ($form_id == 'answer_node_form') {
     $form['og_group_ref']['#access'] = FALSE;
     $form['actions']['submit']['#submit'][] = 'commons_q_a_answer_submit';
-    // Ensure that the answer node inherits group membership from the 
+    // Ensure that the answer node inherits group membership from the
     // parent question by preventing users from changing the audience through
     // the Trusted Contacts toggle when commons_trusted_contacts.module
     // is enabled.
@@ -245,15 +283,19 @@ function commons_q_a_commons_bw_create_all_widget($group) {
 }
 
 /**
- * Implements hook_commons_entity_integration.
+ * Implements hook_commons_entity_integration().
  */
 function commons_q_a_commons_entity_integration() {
   return array(
     'node' => array(
-      'question' => array(),
+      'question' => array(
+        'media' => TRUE,
+        'is_group_content' => TRUE,
+      ),
       'answer' => array(
         'exclude_topics' => TRUE,
         'exclude_rate' => TRUE,
+        'is_group_content' => TRUE,
       ),
     ),
   );
diff --git a/modules/commons/commons_q_a/commons_q_a.views_default.inc b/modules/commons/commons_q_a/commons_q_a.views_default.inc
index 1a20238..8d70d39 100644
--- a/modules/commons/commons_q_a/commons_q_a.views_default.inc
+++ b/modules/commons/commons_q_a/commons_q_a.views_default.inc
@@ -64,6 +64,7 @@ function commons_q_a_views_default_views() {
   $handler->display->display_options['sorts']['sticky']['id'] = 'sticky';
   $handler->display->display_options['sorts']['sticky']['table'] = 'node';
   $handler->display->display_options['sorts']['sticky']['field'] = 'sticky';
+  $handler->display->display_options['sorts']['sticky']['order'] = 'DESC';
   /* Sort criterion: Content: Post date */
   $handler->display->display_options['sorts']['created']['id'] = 'created';
   $handler->display->display_options['sorts']['created']['table'] = 'node';
@@ -131,7 +132,7 @@ function commons_q_a_views_default_views() {
   $view = new view();
   $view->name = 'commons_question_answers';
   $view->description = '';
-  $view->tag = 'default';
+  $view->tag = 'Commons Q&A';
   $view->base_table = 'node';
   $view->human_name = 'Answers to a question';
   $view->core = 7;
@@ -154,7 +155,7 @@ function commons_q_a_views_default_views() {
   $handler->display->display_options['empty']['area']['table'] = 'views';
   $handler->display->display_options['empty']['area']['field'] = 'area';
   $handler->display->display_options['empty']['area']['empty'] = TRUE;
-  $handler->display->display_options['empty']['area']['content'] = 'This question hasn\'t been answered yet. You can be the first to answer it!';
+  $handler->display->display_options['empty']['area']['content'] = 'This Empty text is overridden in commons_q_a.module';
   $handler->display->display_options['empty']['area']['format'] = 'filtered_html';
   /* Field: Content: Title */
   $handler->display->display_options['fields']['title']['id'] = 'title';
@@ -229,7 +230,7 @@ function commons_q_a_views_default_views() {
     t('‹ previous'),
     t('next ›'),
     t('last »'),
-    t('This question hasn\'t been answered yet. You can be the first to answer it!'),
+    t('This Empty text is overridden in commons_q_a.module'),
     t('All'),
     t('Content pane'),
     t('Commons'),
diff --git a/modules/commons/commons_radioactivity/commons_radioactivity.features.field_instance.inc b/modules/commons/commons_radioactivity/commons_radioactivity.features.field_instance.inc
index ddd4985..03574bc 100644
--- a/modules/commons/commons_radioactivity/commons_radioactivity.features.field_instance.inc
+++ b/modules/commons/commons_radioactivity/commons_radioactivity.features.field_instance.inc
@@ -21,51 +21,52 @@ function commons_radioactivity_field_default_field_instances() {
 }
 
 /**
-* Contains a field definition export for the Radioactivity field for re-use
-* across content types.
-*/
+ * Contains a field definition export for the Radioactivity field for re-use
+ * across content types.
+ */
 function commons_radioactivity_field_definition(&$field_instances, $entity_type, $bundle) {
   $field_instances["$entity_type-$bundle-field_radioactivity"] = array(
-  'bundle' => $bundle,
-  'default_value' => array(
-    0 => array(
-      'radioactivity_energy' => '8',
+    'bundle' => $bundle,
+    'default_value' => array(
+      0 => array(
+        'radioactivity_energy' => '8',
+      ),
     ),
-  ),
-  'deleted' => '0',
-  'description' => '',
-  'display' => array(
-    'default' => array(
-      'label' => 'above',
-      'module' => 'radioactivity',
-      'settings' => array(
-        'energy' => 10,
-        'type' => 'none',
-        'accuracy' => '100',
+    'deleted' => '0',
+    'description' => '',
+    'display' => array(
+      'default' => array(
+        'label' => 'above',
+        'module' => 'radioactivity',
+        'settings' => array(
+          'energy' => 10,
+          'type' => 'none',
+          'accuracy' => '100',
+        ),
+        'type' => 'radioactivity_combo_formatter',
+        'weight' => 3,
+      ),
+      'teaser' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 0,
       ),
-      'type' => 'radioactivity_combo_formatter',
-      'weight' => 3,
     ),
-    'teaser' => array(
-      'label' => 'above',
-      'settings' => array(),
-      'type' => 'hidden',
-      'weight' => 0,
+    'entity_type' => $entity_type,
+    'field_name' => 'field_radioactivity',
+    'label' => 'Radioactivity',
+    'required' => 0,
+    'settings' => array(
+      'history_limit' => 8,
+      'profile' => "commons_ra_$entity_type",
+      'user_register_form' => FALSE,
     ),
-  ),
-  'entity_type' => $entity_type,
-  'field_name' => 'field_radioactivity',
-  'label' => 'Radioactivity',
-  'required' => 0,
-  'settings' => array(
-    'profile' => "commons_ra_$entity_type",
-    'user_register_form' => FALSE,
-  ),
-  'widget' => array(
-    'active' => 0,
-    'module' => 'radioactivity',
-    'settings' => array(),
-    'type' => 'radioactivity_basic_widget',
-    'weight' => '3',
-  ));
+    'widget' => array(
+      'active' => 0,
+      'module' => 'radioactivity',
+      'settings' => array(),
+      'type' => 'radioactivity_basic_widget',
+      'weight' => '3',
+    ));
 }
\ No newline at end of file
diff --git a/modules/commons/commons_radioactivity/commons_radioactivity.info b/modules/commons/commons_radioactivity/commons_radioactivity.info
index 6e31f19..e3f4551 100644
--- a/modules/commons/commons_radioactivity/commons_radioactivity.info
+++ b/modules/commons/commons_radioactivity/commons_radioactivity.info
@@ -2,14 +2,12 @@ name = Commons Radioactivity
 description = Helps to identify interesting content by automatically determining a decaying radioactivity value for individual pieces of conte
 core = 7.x
 package = Commons - Building blocks
-project = commons_radioactivity
 dependencies[] = ctools
 dependencies[] = features
 dependencies[] = field_sql_storage
 dependencies[] = radioactivity
 dependencies[] = strongarm
 dependencies[] = views
-datestamp = 1359684043
 features[ctools][] = radioactivity:radioactivity_decay_profile:1
 features[ctools][] = strongarm:strongarm:1
 features[ctools][] = views:views_default:3.0
diff --git a/modules/commons/commons_radioactivity/commons_radioactivity.module b/modules/commons/commons_radioactivity/commons_radioactivity.module
index 720a40e..7a5cfe4 100644
--- a/modules/commons/commons_radioactivity/commons_radioactivity.module
+++ b/modules/commons/commons_radioactivity/commons_radioactivity.module
@@ -98,7 +98,7 @@ function commons_radioactivity_features_pipe_alter(&$pipe, $data, $export) {
 */
 function commons_radioactivity_get_radioactive_entity_types() {
   // Find all Commons Entity integrations.
-  $commons_entity_integrations = module_invoke_all('commons_entity_integration');
+  $commons_entity_integrations = commons_entity_integration_info();
   if (empty($commons_entity_integrations)) {
     return array();
   }
@@ -125,7 +125,7 @@ function commons_radioactivity_incident_node($node, $value) {
   $profile = radioactivity_get_field_profile('node', $node->type, 'field_radioactivity');
 
   // Return if radioactivity doesn't exist or hasn't been created for the node yet
-  if (!isset($node->field_radioactivity)) {
+  if (empty($node->field_radioactivity)) {
     return;
   }
   // Prevent groups from going negative in energy.
diff --git a/modules/commons/commons_radioactivity/commons_radioactivity_groups/commons_radioactivity_groups.info b/modules/commons/commons_radioactivity/commons_radioactivity_groups/commons_radioactivity_groups.info
index 7c9549f..54e8dd2 100644
--- a/modules/commons/commons_radioactivity/commons_radioactivity_groups/commons_radioactivity_groups.info
+++ b/modules/commons/commons_radioactivity/commons_radioactivity_groups/commons_radioactivity_groups.info
@@ -2,12 +2,10 @@ name = Commons Radioactivity Groups
 description = Views integration for Group radioactivity
 core = 7.x
 package = Commons - Building Blocks
-project = commons_radioactivity
 dependencies[] = commons_radioactivity
 dependencies[] = og
 dependencies[] = views_content
 dependencies[] = views_field_view
-datestamp = 1350676260
 features[ctools][] = views:views_default:3.0
 features[features_api][] = api:2
 features[views_view][] = commons_radioactivity_groups_active_in_group
diff --git a/modules/commons/commons_search/2018929-solr-overidden-3.patch b/modules/commons/commons_search/2018929-solr-overidden-3.patch
deleted file mode 100644
index 378c572..0000000
--- a/modules/commons/commons_search/2018929-solr-overidden-3.patch
+++ /dev/null
@@ -1,36 +0,0 @@
-diff --git a/modules/commons_search_solr/commons_search_solr.features.inc b/modules/commons_search_solr/commons_search_solr.features.inc
-index 3117ccf..f927dab 100644
---- a/modules/commons_search_solr/commons_search_solr.features.inc
-+++ b/modules/commons_search_solr/commons_search_solr.features.inc
-@@ -17,6 +17,10 @@ function commons_search_solr_ctools_plugin_api() {
-     return array("version" => "3");
-   }
-   list($module, $api) = func_get_args();
-+  if ($module == "facetapi" && $api == "facetapi_defaults") {
-+    return array("version" => "1");
-+  }
-+  list($module, $api) = func_get_args();
-   if ($module == "page_manager" && $api == "pages_default") {
-     return array("version" => "1");
-   }
-diff --git a/modules/commons_search_solr/commons_search_solr.info b/modules/commons_search_solr/commons_search_solr.info
-index c2c139a..8e29c77 100644
---- a/modules/commons_search_solr/commons_search_solr.info
-+++ b/modules/commons_search_solr/commons_search_solr.info
-@@ -1,6 +1,7 @@
- name = Commons Search Solr
- description = Site search using Apache Solr server.
- core = 7.x
-+php = 5.2.4
- package = Commons - Search
- dependencies[] = apachesolr
- dependencies[] = apachesolr_proximity
-@@ -18,7 +19,7 @@ features[ctools][] = facetapi:facetapi_defaults:1
- features[ctools][] = page_manager:pages_default:1
- features[ctools][] = pm_existing_pages:pm_existing_pages:1
- features[ctools][] = strongarm:strongarm:1
--features[features_api][] = api:1
-+features[features_api][] = api:2
- features[page_manager_existing_pages][] = solr_search
- features[page_manager_handlers][] = pm_existing_pages_solr_search_panel_context
- features[variable][] = apachesolr_search_default_search_page
diff --git a/modules/commons/commons_search/commons_search.info b/modules/commons/commons_search/commons_search.info
index fa4640a..a1789c7 100644
--- a/modules/commons/commons_search/commons_search.info
+++ b/modules/commons/commons_search/commons_search.info
@@ -2,7 +2,6 @@ name = Commons Search
 description = Provide the global search block.
 core = 7.x
 package = Commons - Search
-project = commons_search
 dependencies[] = ctools
 dependencies[] = custom_search
 dependencies[] = features
diff --git a/modules/commons/commons_search/modules/commons_search_core/commons_search_core.info b/modules/commons/commons_search/modules/commons_search_core/commons_search_core.info
index 08af5d8..e0fc12f 100644
--- a/modules/commons/commons_search/modules/commons_search_core/commons_search_core.info
+++ b/modules/commons/commons_search/modules/commons_search_core/commons_search_core.info
@@ -2,8 +2,6 @@ name = Commons Search Core
 description = Core search with facets.
 core = 7.x
 package = Commons - Search
-php = 5.2.4
-project = commons_search_core
 dependencies[] = commons_search
 dependencies[] = date_facets
 dependencies[] = facetapi
diff --git a/modules/commons/commons_search/modules/commons_search_solr/asd.diff b/modules/commons/commons_search/modules/commons_search_solr/asd.diff
deleted file mode 100644
index 3386377..0000000
--- a/modules/commons/commons_search/modules/commons_search_solr/asd.diff
+++ /dev/null
@@ -1,55 +0,0 @@
-diff --git a/modules/commons_search_solr/commons_search_solr.strongarm.inc b/modules/commons_search_solr/commons_search_solr.strongarm.inc
-index 60f2436..6162040 100644
---- a/modules/commons_search_solr/commons_search_solr.strongarm.inc
-+++ b/modules/commons_search_solr/commons_search_solr.strongarm.inc
-@@ -20,6 +20,16 @@ function commons_search_solr_strongarm() {
-   $strongarm = new stdClass();
-   $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-   $strongarm->api_version = 1;
-+  $strongarm->name = 'custom_search_other';
-+  $strongarm->value = array(
-+    'apachesolr_search' => 'apachesolr_search',
-+    'user' => 'user',
-+  );
-+  $export['custom_search_other'] = $strongarm;
-+
-+  $strongarm = new stdClass();
-+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-+  $strongarm->api_version = 1;
-   $strongarm->name = 'page_manager_search_disabled_apachesolr_search';
-   $strongarm->value = TRUE;
-   $export['page_manager_search_disabled_apachesolr_search'] = $strongarm;
-@@ -30,7 +40,7 @@ function commons_search_solr_strongarm() {
-   $strongarm->name = 'pm_existing_pages_disabled_solr_search';
-   $strongarm->value = FALSE;
-   $export['pm_existing_pages_disabled_solr_search'] = $strongarm;
--  
-+
-   $strongarm = new stdClass();
-   $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-   $strongarm->api_version = 1;
-@@ -40,23 +50,13 @@ function commons_search_solr_strongarm() {
-     'user' => 'user',
-   );
-   $export['search_active_modules'] = $strongarm;
--  
-+
-   $strongarm = new stdClass();
-   $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
-   $strongarm->api_version = 1;
-   $strongarm->name = 'search_default_module';
-   $strongarm->value = 'apachesolr_search';
-   $export['search_default_module'] = $strongarm;
--  
--  $strongarm = new stdClass();
--  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
--  $strongarm->api_version = 1;
--  $strongarm->name = 'custom_search_other';
--  $strongarm->value = array(
--    'apachesolr_search' => 'apachesolr_search',
--    'user' => 'user',
--  );
--  $export['custom_search_other'] = $strongarm;
- 
-   return $export;
- }
diff --git a/modules/commons/commons_search/modules/commons_search_solr_user/commons_search_solr_user.info b/modules/commons/commons_search/modules/commons_search_solr_user/commons_search_solr_user.info
index 28707fd..b5c8055 100644
--- a/modules/commons/commons_search/modules/commons_search_solr_user/commons_search_solr_user.info
+++ b/modules/commons/commons_search/modules/commons_search_solr_user/commons_search_solr_user.info
@@ -2,8 +2,6 @@ name = Commons Search Solr User
 description = Provides user entity indexing capabilities to Apache Solr, and search functionality
 core = 7.x
 package = Commons - Search
-php = 5.2.4
-project = commons_search_solr_user
 dependencies[] = apachesolr_search
 dependencies[] = apachesolr_user
 dependencies[] = commons_search_solr
diff --git a/modules/commons/commons_search/modules/commons_search_solr_user/commons_search_solr_user.module b/modules/commons/commons_search/modules/commons_search_solr_user/commons_search_solr_user.module
index 6477c81..319e9fe 100644
--- a/modules/commons/commons_search/modules/commons_search_solr_user/commons_search_solr_user.module
+++ b/modules/commons/commons_search/modules/commons_search_solr_user/commons_search_solr_user.module
@@ -80,17 +80,22 @@ function commons_search_solr_user_apachesolr_search_page_alter(&$build, $search_
 
     // First check to see if the flagged key is set. If so we don't want to query
     // Using EFQ because flags aren't entities.
+    $limit = isset($search_page['settings']['apachesolr_search_per_page']) ? $search_page['settings']['apachesolr_search_per_page'] : 12;
+    $flagged = (isset($_GET['flagged']) && is_numeric($_GET['flagged'])) ? check_plain($_GET['flagged']) : 0;
+
     $out_results = array();
-    if (isset($_GET['flagged']) && $flagged = check_plain($_GET['flagged'])) {
-      // Get the count of flagged users for a particular account
+    if ($flagged && $flag = flag_get_flag('commons_follow_user')) {
+      // Get the count of flagged users for a particular account.
       $fl_results = db_select('flag_content', 'f')
         ->fields('f', array('content_id', 'uid'))
-        ->condition('f.content_type','user','=')
-        ->condition('f.uid',$user->uid,'=')
-        ->extend('PagerDefault')->limit(12)
+        ->condition('f.content_type', 'user', '=')
+        ->condition('f.uid', $user->uid, '=')
+        ->condition('f.fid', $flag->fid, '=')
+        ->extend('PagerDefault')->limit($limit)
         ->addTag('commons_search_solr_user_people')
+        ->addMetaData('flagged', $flagged)
         ->execute();
-      while($record = $fl_results->fetchAssoc()) {
+      while ($record = $fl_results->fetchAssoc()) {
         $out_results[] = user_view(user_load($record['content_id']), 'search_results');
       }
       $build['pager'] = array('#theme' => 'pager');
@@ -102,10 +107,11 @@ function commons_search_solr_user_apachesolr_search_page_alter(&$build, $search_
       $users = new EntityFieldQuery();
       $results = $users->entityCondition('entity_type', 'user')
         ->propertyCondition('status', 1)
-        ->pager(12, 1)
+        ->addTag('commons_search_solr_user_people')
+        ->pager($limit, 1)
         ->execute();
       $user_ids = array_keys($results['user']);
-      foreach($user_ids AS $uid) {
+      foreach ($user_ids as $uid) {
         $out_results[] = user_view(user_load($uid), 'search_results');($user_ids);
       }
       $build['pager'] = array(
diff --git a/modules/commons/commons_site_homepage/commons_site_homepage.info b/modules/commons/commons_site_homepage/commons_site_homepage.info
index 00f2e56..60f9e39 100644
--- a/modules/commons/commons_site_homepage/commons_site_homepage.info
+++ b/modules/commons/commons_site_homepage/commons_site_homepage.info
@@ -2,9 +2,7 @@ name = Commons Site Homepage
 description = Provides a homepage for the site for anonymous and authenticated users
 core = 7.x
 package = Commons - Landing pages
-project = commons_site_homepage
 dependencies[] = commons_activity_streams
-dependencies[] = commons_events
 dependencies[] = commons_featured
 dependencies[] = commons_follow
 dependencies[] = commons_radioactivity_groups
@@ -13,7 +11,6 @@ dependencies[] = page_manager
 dependencies[] = strongarm
 dependencies[] = views
 dependencies[] = views_litepager
-datestamp = 1354747296
 features[ctools][] = page_manager:pages_default:1
 features[ctools][] = strongarm:strongarm:1
 features[ctools][] = views:views_default:3.0
diff --git a/modules/commons/commons_site_homepage/commons_site_homepage.module b/modules/commons/commons_site_homepage/commons_site_homepage.module
index af39500..4b6c52c 100644
--- a/modules/commons/commons_site_homepage/commons_site_homepage.module
+++ b/modules/commons/commons_site_homepage/commons_site_homepage.module
@@ -69,5 +69,40 @@ function commons_site_homepage_default_page_manager_pages_alter(&$items) {
   if (isset($items['commons_home'])) {
     $items['commons_home']->default_handlers['page_commons_home_panel_context_2']->conf['display']->content['new-2ab570f0-8498-44f4-e9d0-9977e3d8d4df']->configuration['title'] = variable_get('commons_anonymous_welcome_title', t('The open-source alternative for enterprise-scale business software'));
     $items['commons_home']->default_handlers['page_commons_home_panel_context_2']->conf['display']->content['new-2ab570f0-8498-44f4-e9d0-9977e3d8d4df']->configuration['body'] = variable_get('commons_anonymous_welcome_body', t('Enable social networking to create productive interactions. Whether your community is public or private, Commons does it!'));
+
+    $pane = new stdClass();
+    $pane->pid = 'new-94106ddd-1278-0954-c5ba-b59ff1b9bf49';
+    $pane->panel = 'three_33_first';
+    $pane->type = 'views';
+    $pane->subtype = 'commons_events_upcoming';
+    $pane->shown = TRUE;
+    $pane->access = array();
+    $pane->configuration = array(
+      'override_pager_settings' => 0,
+      'use_pager' => 0,
+      'nodes_per_page' => '5',
+      'pager_id' => '0',
+      'offset' => '0',
+      'more_link' => 0,
+      'feed_icons' => 0,
+      'panel_args' => 0,
+      'link_to_view' => 0,
+      'args' => '',
+      'url' => '',
+      'display' => 'commons_events_upcoming_global_block',
+      'override_title' => 0,
+      'override_title_text' => '',
+    );
+    $pane->cache = array();
+    $pane->style = array(
+      'settings' => NULL,
+    );
+    $pane->css = array();
+    $pane->extras = array();
+    $pane->position = 1;
+    $pane->locks = array();
+    $pane->uuid = '94106ddd-1278-0954-c5ba-b59ff1b9bf49';
+    $items['commons_home']->default_handlers['page_commons_home_panel_context_2']->conf['display']->content['new-94106ddd-1278-0954-c5ba-b59ff1b9bf49'] = $pane;
+    $items['commons_home']->default_handlers['page_commons_home_panel_context_2']->conf['display']->panels['three_33_first'][1] = 'new-94106ddd-1278-0954-c5ba-b59ff1b9bf49';
   }
 }
diff --git a/modules/commons/commons_site_homepage/commons_site_homepage.pages_default.inc b/modules/commons/commons_site_homepage/commons_site_homepage.pages_default.inc
index 9e5b3f2..213f998 100644
--- a/modules/commons/commons_site_homepage/commons_site_homepage.pages_default.inc
+++ b/modules/commons/commons_site_homepage/commons_site_homepage.pages_default.inc
@@ -242,40 +242,6 @@ function commons_site_homepage_default_page_manager_pages() {
     $display->content['new-0ae8e5a2-44f6-8584-21f2-8be6e340e62f'] = $pane;
     $display->panels['three_33_first'][0] = 'new-0ae8e5a2-44f6-8584-21f2-8be6e340e62f';
     $pane = new stdClass();
-    $pane->pid = 'new-94106ddd-1278-0954-c5ba-b59ff1b9bf49';
-    $pane->panel = 'three_33_first';
-    $pane->type = 'views';
-    $pane->subtype = 'commons_events_upcoming';
-    $pane->shown = TRUE;
-    $pane->access = array();
-    $pane->configuration = array(
-      'override_pager_settings' => 0,
-      'use_pager' => 0,
-      'nodes_per_page' => '5',
-      'pager_id' => '0',
-      'offset' => '0',
-      'more_link' => 0,
-      'feed_icons' => 0,
-      'panel_args' => 0,
-      'link_to_view' => 0,
-      'args' => '',
-      'url' => '',
-      'display' => 'commons_events_upcoming_global_block',
-      'override_title' => 0,
-      'override_title_text' => '',
-    );
-    $pane->cache = array();
-    $pane->style = array(
-      'settings' => NULL,
-    );
-    $pane->css = array();
-    $pane->extras = array();
-    $pane->position = 1;
-    $pane->locks = array();
-    $pane->uuid = '94106ddd-1278-0954-c5ba-b59ff1b9bf49';
-    $display->content['new-94106ddd-1278-0954-c5ba-b59ff1b9bf49'] = $pane;
-    $display->panels['three_33_first'][1] = 'new-94106ddd-1278-0954-c5ba-b59ff1b9bf49';
-    $pane = new stdClass();
     $pane->pid = 'new-b6e290b7-1d2b-5db4-a181-28befdcde628';
     $pane->panel = 'three_33_second';
     $pane->type = 'views_panes';
diff --git a/modules/commons/commons_social_sharing/commons_social_sharing.info b/modules/commons/commons_social_sharing/commons_social_sharing.info
index 5c73212..a16a207 100644
--- a/modules/commons/commons_social_sharing/commons_social_sharing.info
+++ b/modules/commons/commons_social_sharing/commons_social_sharing.info
@@ -2,7 +2,6 @@ name = Commons Social Sharing
 description = Provide links to share content to external social services such as Facebook and Google+
 core = 7.x
 package = Commons - Building blocks
-project = commons_social_sharing
 dependencies[] = ctools
 dependencies[] = sharethis
 dependencies[] = strongarm
diff --git a/modules/commons/commons_social_sharing/commons_social_sharing.module b/modules/commons/commons_social_sharing/commons_social_sharing.module
index db2ac2f..2a0bc9e 100644
--- a/modules/commons/commons_social_sharing/commons_social_sharing.module
+++ b/modules/commons/commons_social_sharing/commons_social_sharing.module
@@ -26,7 +26,7 @@ function commons_social_sharing_features_export_alter(&$export, $module_name) {
   if (!empty($items['rate_widgets']->value)) {
     foreach($items['rate_widgets']->value as $key => $widget) {
       if ($widget->name == 'commons_social_sharing') {
-        $commons_entity_integrations = module_invoke_all('commons_entity_integration');
+        $commons_entity_integrations = commons_entity_integration_info();
         if (!empty($commons_entity_integrations['node'])) {
           foreach ($commons_entity_integrations['node'] as $bundle => $options) {
             if (!isset($options['exclude_rate']) || $options['exclude_rate'] != TRUE) {
diff --git a/modules/commons/commons_topics/commons_topics.info b/modules/commons/commons_topics/commons_topics.info
index 337ca69..7546f1a 100644
--- a/modules/commons/commons_topics/commons_topics.info
+++ b/modules/commons/commons_topics/commons_topics.info
@@ -1,10 +1,8 @@
 name = Commons Topics
 core = 7.x
 package = Commons - Building blocks
-project = commons_topics
 dependencies[] = features
 dependencies[] = taxonomy
-datestamp = 1359684035
 features[features_api][] = api:2
 features[field_base][] = field_topics
 features[taxonomy][] = topics
diff --git a/modules/commons/commons_topics/commons_topics.module b/modules/commons/commons_topics/commons_topics.module
index 0b43123..b4dc6dd 100644
--- a/modules/commons/commons_topics/commons_topics.module
+++ b/modules/commons/commons_topics/commons_topics.module
@@ -51,7 +51,7 @@ function commons_topics_form_node_form_alter(&$form, &$form_state) {
  */
 function commons_topics_get_entity_types_with_topics() {
   // Find all Commons Entity integrations.
-  $commons_entity_integrations = module_invoke_all('commons_entity_integration');
+  $commons_entity_integrations = commons_entity_integration_info();
   if (empty($commons_entity_integrations)) {
     return array();
   }
diff --git a/modules/commons/commons_topics/js/commons_topics.js b/modules/commons/commons_topics/js/commons_topics.js
index 231a94a..8d7c175 100644
--- a/modules/commons/commons_topics/js/commons_topics.js
+++ b/modules/commons/commons_topics/js/commons_topics.js
@@ -3,7 +3,7 @@
     attach: function (context, settings) {
       $(':input[name^="field_topics"]').change(function() {
         if ($(':input[name^="field_topics"]').val() == "") {
-          $("[id^='edit-topics-wrapper'] .summary").text("No topics");
+          $("[id^='edit-topics-wrapper'] .summary").text(Drupal.t("No topics"));
         }
         else {
           $("[id^='edit-topics-wrapper'] .summary").text($(':input[name^="field_topics"]').val());
diff --git a/modules/commons/commons_trusted_contacts/commons_trusted_contacts.commons_utility_links.inc b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.commons_utility_links.inc
new file mode 100644
index 0000000..3ffe7ea
--- /dev/null
+++ b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.commons_utility_links.inc
@@ -0,0 +1,57 @@
+<?php
+
+/**
+ * @file
+ * Commons Utility Links hooks implemented by the Commons Trusted Contacts module.
+ */
+
+/**
+ * Implements hook_commons_utility_links().
+ */
+function commons_trusted_contacts_commons_utility_links() {
+  $links = array();
+
+  if (user_is_logged_in()) {
+    global $user;
+    $account = $user;
+
+    // Check for unread invitations.
+    $unread_invitations = count(commons_trusted_contacts_get_pending_invitations($account->uid));
+
+    // Check for unread messages.
+    $unread_messages = privatemsg_unread_count($account);
+
+    // Provide a default mailbox icon pointing to the private messages UI when
+    // there are no unread messages or invitations.
+    if (empty($unread_invitations) && empty($unread_messages)) {
+      $links['no-unread-messages'] = array(
+        'href' => 'user/' . $user->uid . '/contacts',
+        'query' => array('qt-commons_trusted_contacts' => 'messages'),
+        'title' => t('No unread messages'),
+        'weight' => -9,
+      );
+    }
+
+    // Add a link to the user's invitations.
+    if ($unread_invitations) {
+      $links['unread-invitations']= array(
+        'href' => 'user/' . $user->uid . '/contacts',
+        'query' => array('qt-commons_trusted_contacts' => 'invitations'),
+        'title' => format_plural($unread_invitations, '1 invitation', '@count invitations'),
+        'weight' => -8,
+      );
+    }
+
+    // Add a link to the user's unread messages.
+    if ($unread_messages) {
+      $links['unread-messages']= array(
+        'href' => 'user/' . $user->uid . '/contacts',
+        'query' => array('qt-commons_trusted_contacts' => 'messages'),
+        'title' => format_plural($unread_messages, '1 message', '@count messages'),
+        'weight' => -7,
+      );
+    }
+  }
+
+  return $links;
+}
diff --git a/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_base.inc b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_base.inc
index 559e7bd..3edeb77 100644
--- a/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_base.inc
+++ b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_base.inc
@@ -319,6 +319,9 @@ function commons_trusted_contacts_field_default_field_bases() {
           ),
         ),
         'membership_type' => 'trusted_contacts',
+        'sort' => array(
+          'type' => 'none',
+        ),
         'target_bundles' => array(),
       ),
       'handler_submit' => 'Change handler',
diff --git a/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_instance.inc b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_instance.inc
index 25a7342..f5be65e 100644
--- a/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_instance.inc
+++ b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_instance.inc
@@ -350,7 +350,7 @@ function commons_trusted_contacts_field_default_field_instances() {
             'widget_type' => 'entityreference_autocomplete',
           ),
           'default' => array(
-            'widget_type' => 'options_select',
+            'widget_type' => 'entityreference_autocomplete',
           ),
           'status' => TRUE,
         ),
diff --git a/modules/commons/commons_trusted_contacts/commons_trusted_contacts.info b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.info
index ca4ab89..4c658b6 100644
--- a/modules/commons/commons_trusted_contacts/commons_trusted_contacts.info
+++ b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.info
@@ -2,8 +2,6 @@ name = Commons Trusted Contacts
 description = Commons Trusted Contacts Functionality
 core = 7.x
 package = Commons - Building blocks
-version = 7.x-3.0
-project = commons_trusted_contacts
 dependencies[] = commons_groups
 dependencies[] = ctools
 dependencies[] = date
diff --git a/modules/commons/commons_trusted_contacts/commons_trusted_contacts.install b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.install
index da23dfd..79b4148 100644
--- a/modules/commons/commons_trusted_contacts/commons_trusted_contacts.install
+++ b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.install
@@ -10,16 +10,24 @@ function commons_trusted_contacts_requirements($phase) {
 
   if ($phase == 'runtime') {
 
-    // Check if there are users needed to be set as group.
+    // Count the current number of users.
     $query = new EntityFieldQuery;
-    $count = $query->entityCondition('entity_type', 'user')
+    $user_count = $query->entityCondition('entity_type', 'user')
       // Ignore the anonymous user.
       ->propertyCondition('uid', 0, '<>')
       ->count()
       ->execute();
 
+    // Count the current number of user groups.
+    $query = new EntityFieldQuery();
+    $group_count = $query
+      ->entityCondition('entity_type', 'user')
+      ->fieldCondition(OG_GROUP_FIELD, 'value', 1, '=')
+      ->count()
+      ->execute();
+
     // Check if there are more users than "group" users.
-    if ($count > count(og_get_all_group('user'))) {
+    if ($user_count > $group_count) {
       $requirements['commons_trusted_contacts_users_updated']['title'] = t('Trusted contacts');
       $requirements['commons_trusted_contacts_users_updated']['severity'] = REQUIREMENT_ERROR;
       $requirements['commons_trusted_contacts_users_updated']['description'] = t('Some users need an update. !link.', array('!link' => l(t('Upgrade users'), 'admin/people/trusted-contacts-upgrade')));
@@ -49,3 +57,24 @@ function commons_trusted_contacts_update_3100() {
   features_revert($revert);
   return array();
 }
+
+/**
+ * Change the background options widget to use autocomplete instead
+ * See https://drupal.org/node/2151637 for more info
+ */
+function commons_trusted_contacts_update_3101() {
+  $revert = array(
+    'commons_trusted_contacts' => array('field_instance', 'field_base'),
+  );
+  features_revert($revert);
+  return array();
+}
+
+/**
+ * Set the limit for trusted contacts to unlimited for existing sites.
+ */
+function commons_trusted_contacts_update_3102() {
+
+  variable_set('commons_trusted_contacts_limit', 0);
+  return array();
+}
\ No newline at end of file
diff --git a/modules/commons/commons_trusted_contacts/commons_trusted_contacts.module b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.module
index e2afe4e..4f6b97c 100644
--- a/modules/commons/commons_trusted_contacts/commons_trusted_contacts.module
+++ b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.module
@@ -25,7 +25,7 @@ function commons_trusted_contacts_system_info_alter(&$info, $file, $type) {
  *
  */
 function commons_trusted_contacts_user_presave(&$edit, $account, $category) {
-  // Ensure that a value is always set for the user's group_access field, 
+  // Ensure that a value is always set for the user's group_access field,
   // so that the user remains public while content shared with the user's
   // trusted contacts group is private. If the value of $user->group_access
   // is not set, og_access.module will throw an exception in
@@ -187,6 +187,29 @@ function commons_trusted_contacts_module_implements_alter(&$implementations, $ho
     unset($implementations['commons_trusted_contacts']);
     $implementations['commons_trusted_contacts'] = $group;
   }
+  if ($hook == 'node_presave') {
+    $group = $implementations['commons_trusted_contacts'];
+    unset($implementations['commons_trusted_contacts']);
+    $implementations['commons_trusted_contacts'] = $group;
+  }
+}
+
+/**
+ * Implements hook_form_user_admin_settings_alter().
+ */
+function commons_trusted_contacts_form_user_admin_settings_alter(&$form, &$form_state) {
+  $form['commons_trusted_contacts'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Commons Trusted Contacts'),
+    '#weight' => 0,
+    '#description' => t("Important! Lowering this number will restrict users over the new limit from adding or approving any trusted contacts until they go below it."),
+  );
+  $form['commons_trusted_contacts']['commons_trusted_contacts_limit'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Maximum number of trusted contacts per user'),
+    '#default_value' => variable_get('commons_trusted_contacts_limit', 1000),
+    '#description' => t('This setting defaults to 1000 maximum contacts for performance reasons, and should be sufficient for most sites. Set to 0 for no limit.'),
+  );
 }
 
 /**
@@ -213,13 +236,6 @@ function commons_trusted_contacts_form_alter(&$form, &$form_state, $form_id) {
       $form['select']['#access'] = FALSE;
     }
   }
-  // Hide internal fields that the user should not be able to edit directly.
-  if ($form_id == 'edit_profile_user_profile_form' || substr($form_id, -10) === '_node_form') {
-    $internal_fields = array('field_unread_invitations', 'field_unread_messages', 'user_trusted_contacts', 'og_user_group_ref');
-    foreach ($internal_fields as $field_name) {
-      $form[$field_name]['#access'] = FALSE;
-    }
-  }
   if ($form_id == 'privatemsg_list') {
     // Load privatemsg.pages.inc and ensure it is automatically reloaded if
     // this form is rebuilt via AJAX or other means.
@@ -515,6 +531,12 @@ function commons_trusted_contacts_og_membership_update(OgMembership $og_membersh
     ->propertyCondition('gid', $og_membership->etid)
     ->execute();
 
+  // Membership not found, return but throw an error to watchdog.
+  if (!isset($return['og_membership'])) {
+    watchdog('commons_trusted_contacts', "Warning: expected trusted contact link not found between " . $og_membership->gid . " and " . $og_membership->etid, WATCHDOG_WARNING);
+    return;
+  }
+
   $membership_id = key($return['og_membership']);
 
   $wrapper2 = entity_metadata_wrapper('og_membership', $membership_id);
@@ -594,16 +616,20 @@ function commons_trusted_contacts_og_membership_delete(OgMembership $og_membersh
  */
 function commons_trusted_contacts_request_trust($account, $ajax) {
   global $user;
+  $requestor = $user;
 
   if ($account->uid == $user->uid) {
     // Users cannot join their own group.
     return;
   }
+  if (!commons_trusted_contacts_check_limit($requestor, $account, $ajax)) {
+    return;
+  }
 
   // This actually adds 2 OG memberships - one for each user.
   $og_membership = og_group('user', $account, array(
     'field_name' => 'user_trusted_contacts',
-    'state' => OG_STATE_PENDING
+    'state' => OG_STATE_PENDING,
   ));
 
   // Notify.
@@ -617,11 +643,11 @@ function commons_trusted_contacts_request_trust($account, $ajax) {
   );
   $message = message_create('trusted_contact_request_pending', array(
     'uid' => $account->uid,
-    'arguments' => $arguments
+    'arguments' => $arguments,
   ));
 
   $wrapper = entity_metadata_wrapper('message', $message);
-  $wrapper->field_requesting_user->set($user);
+  $wrapper->field_requesting_user->set($requestor);
   $wrapper->save();
 
   message_notify_send_message($message);
@@ -694,6 +720,13 @@ function commons_trusted_contacts_approve_trust(OgMembership $og_membership) {
     return;
   }
 
+  // Get approving user.
+  $account = user_load($og_membership->gid);
+
+  if (!commons_trusted_contacts_check_limit($account, $og_membership->etid)) {
+    return;
+  }
+
   // This actually changes both OG memberships - one for each user.
   $wrapper = entity_metadata_wrapper('og_membership', $og_membership);
   $wrapper->state->set(OG_STATE_ACTIVE);
@@ -701,10 +734,7 @@ function commons_trusted_contacts_approve_trust(OgMembership $og_membership) {
 
   // Notify.
 
-  // Get approving user.
-  $account = user_load($og_membership->etid);
-
-  $message = message_create('trusted_contact_request_approved', array('uid' => $account->uid));
+  $message = message_create('trusted_contact_request_approved', array('uid' => $og_membership->etid));
 
   $wrapper = entity_metadata_wrapper('message', $message);
   $wrapper->field_approving_user->set($account);
@@ -743,6 +773,75 @@ function commons_trusted_contacts_ignore_trust(OgMembership $og_membership) {
 }
 
 /**
+ * Internal check to see if a user or its contact has gone over the limit.
+ *
+ * @param $requestor The current user checking the limit.
+ * @param $requestee The user of the other side of the relationship.
+ * @param bool $ajax To use ajax or not.
+ * @return bool - False for over the limit, True for under the limit.
+ */
+function commons_trusted_contacts_check_limit($requestor, $requestee, $ajax = FALSE) {
+  // Validate that neither the requesting user nor the target user has exceeded
+  // her trusted contacts limit.
+  if ($contacts_limit = variable_get('commons_trusted_contacts_limit', 1000)) {
+    $requestor_groups = og_get_entity_groups('user', $requestor, array(OG_STATE_ACTIVE), 'user_trusted_contacts');
+    $requestee_groups = og_get_entity_groups('user', $requestee, array(OG_STATE_ACTIVE), 'user_trusted_contacts');
+
+    // This should always be set, because the user is a member of their own group.
+    // But we know funky things can happen, so lets add a check just in case.
+    $requestor_memberships = $requestor_groups['user'] ? count($requestor_groups['user']) : 0;
+    $requestee_memberships = $requestee_groups['user'] ? count($requestee_groups['user']) : 0;
+
+    $message = '';
+    $exceeds_limit = FALSE;
+
+    // We use greater than because the membership count includes the user.
+    if ($requestor_memberships > $contacts_limit) {
+      $exceeds_limit = TRUE;
+
+      drupal_set_message(
+        t('You have exceeded the limit of @limit trusted contacts. Before you can add more contacts, you must <a href="@remove-contacts-links">remove some of your existing contacts.</a>',
+          array(
+            '@limit' => $contacts_limit,
+            '@remove-contacts-link' => url('user/' . $requestor->uid . '/contacts',
+              array(
+                'query' => array(
+                  'qt-commons_trusted_contacts' => 'contacts',
+                ),
+                'fragment' => 'qt-commons_trusted_contacts',
+              )
+            ),
+          )
+        )
+      );
+    }
+    if ($requestee_memberships > $contacts_limit) {
+      $exceeds_limit = TRUE;
+
+      drupal_set_message(t('@requestee has exceeded the limit of @limit trusted contacts and cannot accept any more contacts at this time.',
+        array(
+          '@requestee' => $requestee->name,
+          '@limit' => $contacts_limit,
+        ))
+      );
+    }
+    if ($exceeds_limit) {
+      if ($ajax == 'ajax') {
+        $commands = array();
+        $commands[] = ajax_command_append('#messages', theme('status_messages'));
+        $page = array('#type' => 'ajax', '#commands' => $commands);
+        ajax_deliver($page);
+      }
+      else {
+        drupal_goto();
+      }
+      return FALSE;
+    }
+  }
+  return TRUE;
+}
+
+/**
  * Access callback for creating a Trusted-Contact request; Makes sure that the
  * token is correct.
  *
@@ -900,7 +999,7 @@ function commons_trusted_contacts_form_add_privacy_toggle(&$form, &$form_state)
     '#default_value' => empty($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE][0]['default']['#default_value']) ? 'private' : 'custom',
     '#options' => array(
       'custom' => t('Post to specific groups'),
-      'private' => t('Post to contacts (private)'),
+      'private' => t('Post privately to all trusted contacts'),
     ),
     '#weight' => 70,
     '#attributes' => array(
@@ -945,9 +1044,6 @@ function commons_trusted_contacts_form_node_form_alter(&$form, &$form_state) {
   if (empty($form[OG_AUDIENCE_FIELD])) {
     $form['group_audience_type']['#options']['custom'] = t('Post site-wide');
   }
-  else {
-    $form['#validate'][] = 'commons_trusted_contacts_partial_node_form_validate';
-  }
 }
 
 /**
@@ -956,7 +1052,7 @@ function commons_trusted_contacts_form_node_form_alter(&$form, &$form_state) {
  */
 function commons_trusted_contacts_partial_node_form_validate($form, $form_state) {
   if ($form_state['values']['group_audience_type'] == 'custom' && empty($form_state['values'][OG_AUDIENCE_FIELD][LANGUAGE_NONE][0])) {
-    form_set_error(OG_AUDIENCE_FIELD, t('No groups were selected.'));
+    form_set_error(OG_AUDIENCE_FIELD, t('Please enter one more groups where this content will be posted.'));
     return FALSE;
   }
 }
@@ -995,7 +1091,7 @@ function commons_trusted_contacts_node_presave($node) {
     $wrapper->{OG_AUDIENCE_FIELD}->set(array());
   }
   // The content is submitted to specific groups.
-  else {
+  else if (!empty($node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE])) {
     // Extract group IDs from selection.
     $group_ids = array();
     foreach ($node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE] as $group) {
@@ -1100,7 +1196,7 @@ function commons_trusted_contacts_messages_popup($form, &$form_state, $account)
 }
 
 /**
- * Helper function to get all of the pending invitations for a given 
+ * Helper function to get all of the pending invitations for a given
  * recipient user. Returns an array of OG memberships.
  */
 function commons_trusted_contacts_get_pending_invitations($uid) {
diff --git a/modules/commons/commons_user_profile_pages/commons_user_profile_pages.info b/modules/commons/commons_user_profile_pages/commons_user_profile_pages.info
index 4e474cd..e6b9782 100644
--- a/modules/commons/commons_user_profile_pages/commons_user_profile_pages.info
+++ b/modules/commons/commons_user_profile_pages/commons_user_profile_pages.info
@@ -2,9 +2,7 @@ name = Commons User Profile Pages
 description = Exports a default user profile page, powered by the Panels module.
 core = 7.x
 package = Commons - Landing pages
-project = commons_user_profile_pages
 dependencies[] = commons_activity_streams
-dependencies[] = commons_events
 dependencies[] = commons_follow
 dependencies[] = commons_profile_base
 dependencies[] = commons_profile_social
diff --git a/modules/commons/commons_utility_links/commons_utility_links.api.php b/modules/commons/commons_utility_links/commons_utility_links.api.php
new file mode 100644
index 0000000..ac904e8
--- /dev/null
+++ b/modules/commons/commons_utility_links/commons_utility_links.api.php
@@ -0,0 +1,68 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by the Commons Utility Links module.
+ */
+
+/**
+ * @addtogroup hooks
+ * @{
+ */
+
+/**
+ * Define utility links.
+ *
+ * This hook allows modules to register utility links for the functionality that
+ * they provide. For example, a social integration module could use it to
+ * register a "Find Friends" utility link which points to a page where the
+ * current user can search for other site users that they have connected with on
+ * social networks such as Twitter or Facebook.
+ *
+ * @return
+ *   An associative array of utility links whose keys are used as its CSS class.
+ *   Each link should be itself an array, with the same elements used in
+ *   theme_links(), except for the addition of a 'weight' element that is used
+ *   for ordering the links.
+ *
+ * For a detailed usage example, see commons_utility_links.module.
+ *
+ * @see theme_links()
+ * @see hook_commons_utility_links_alter()
+ */
+function hook_commons_utility_links() {
+  $links = array();
+
+  if (user_is_logged_in()) {
+    global $user;
+    $account = $user;
+    $links['find_fiends']= array(
+      'href' => 'user/' . $account->uid . '/find_friends',
+      'title' => t('Find friends'),
+    );
+  }
+
+  return $links;
+}
+
+/**
+ * Perform alterations on utility links.
+ *
+ * @param $links
+ *   An associative array of utility links whose keys are used as its CSS class.
+ *   Each link should be itself an array, with the same elements used in
+ *   theme_links(), except for the addition of a 'weight' element that is used
+ *   for ordering the links.
+ *
+ * @see theme_links()
+ * @see hook_commons_utility_links()
+ */
+function hook_commons_utility_links_alter(&$links) {
+  // Change the title of the user account link from the user's name to
+  // 'Account'.
+  $links['name']['title'] = t('Account');
+}
+
+/**
+ * @} End of "addtogroup hooks".
+ */
diff --git a/modules/commons/commons_utility_links/commons_utility_links.commons_utility_links.inc b/modules/commons/commons_utility_links/commons_utility_links.commons_utility_links.inc
new file mode 100644
index 0000000..abe465c
--- /dev/null
+++ b/modules/commons/commons_utility_links/commons_utility_links.commons_utility_links.inc
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * @file
+ * Commons Utility Links hooks implemented by the Commons Utility Links module.
+ */
+
+/**
+ * Implements hook_commons_utility_links().
+ */
+function commons_utility_links_commons_utility_links() {
+  if (user_is_logged_in()) {
+    global $user;
+    $account = $user;
+    $links['name'] = array(
+      'href' => 'user',
+      'title' => format_username($account),
+      'weight' => -10,
+    );
+    $links['logout'] = array(
+      'href' => 'user/logout',
+      'title' => t('Logout'),
+      'weight' => 9,
+    );
+  }
+  else {
+    if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
+      $links['signup'] = array(
+        'href' => 'user/register',
+        'title' => t('Signup'),
+        'weight' => -10,
+      );
+    }
+    $links['login'] = array(
+      'href' => 'user/login',
+      'title' => t('Login'),
+      'weight' => -9,
+    );
+  }
+
+  return $links;
+}
diff --git a/modules/commons/commons_utility_links/commons_utility_links.module b/modules/commons/commons_utility_links/commons_utility_links.module
index f647c97..e8c2f5c 100644
--- a/modules/commons/commons_utility_links/commons_utility_links.module
+++ b/modules/commons/commons_utility_links/commons_utility_links.module
@@ -1,6 +1,18 @@
 <?php
 
 /**
+ * Implements hook_hook_info().
+ */
+function commons_utility_links_hook_info() {
+  $hooks = array(
+    'commons_utility_links',
+    'commons_utility_links_alter',
+  );
+
+  return array_fill_keys($hooks, array('group' => 'commons_utility_links'));
+}
+
+/**
  * Implements hook_block_info().
  */
 function commons_utility_links_block_info() {
@@ -12,48 +24,33 @@ function commons_utility_links_block_info() {
     'pages' => 0,
     'weight' => 1,
   );
+
   return $blocks;
 }
 
 /**
  * Implements hook_block_view().
  */
-function commons_utility_links_block_view() {
-  $block['subject'] = '';
-  $block['content'] = '';
-  $links = array();
-
-  if (user_is_logged_in()) {
-    global $user;
-    $account = $user;
-    $links['name'] = array(
-      'href' => 'user',
-      'title' => format_username($account),
-    );
-    $links['logout'] = array(
-      'href' => 'user/logout',
-      'title' => t('Logout'),
-    );
-  }
-  else {
-    if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
-      $links['signup'] = array(
-        'href' => 'user/register',
-        'title' => t('Signup'),
-      );
-    }
-    $links['login'] = array(
-      'href' => 'user/login',
-      'title' => t('Login'),
+function commons_utility_links_block_view($delta = '') {
+  $block = array();
+
+  // Gather all of the available utility links.
+  $links = module_invoke_all('commons_utility_links');
+  drupal_alter('commons_utility_links', $links);
+
+  if (!empty($links)) {
+    // Sort the links by weight before rendering them.
+    uasort($links, 'drupal_sort_weight');
+
+    $block['subject'] = NULL;
+    $block['content'] = array(
+      '#theme' => 'links__commons_utility_links',
+      '#links' => $links,
+      '#attributes' => array(
+        'class' => array('commons-utility-links'),
+      ),
     );
   }
-  drupal_alter('commons_utility_links', $links);
-  $block['content'] = array(
-    '#theme' => 'links__commons_utility_links',
-    '#links' => $links,
-    '#attributes' => array(
-      'class' => array('commons-utility-links'),
-    ),
-  );
+
   return $block;
 }
diff --git a/modules/commons/commons_wikis/commons_wikis.features.inc b/modules/commons/commons_wikis/commons_wikis.features.inc
index 66b1e34..13fd5b9 100644
--- a/modules/commons/commons_wikis/commons_wikis.features.inc
+++ b/modules/commons/commons_wikis/commons_wikis.features.inc
@@ -44,9 +44,9 @@ function commons_wikis_default_message_type() {
           "safe_value" : "[message:user:picture:35x35]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E has updated the \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E wiki page",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E has updated the \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E wiki page",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E has updated the \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E wiki page"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E has updated the \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E wiki page"
         },
         {
           "value" : "[commons-groups:in-groups-text]",
diff --git a/modules/commons/commons_wikis/commons_wikis.info b/modules/commons/commons_wikis/commons_wikis.info
index 327f34e..f478856 100644
--- a/modules/commons/commons_wikis/commons_wikis.info
+++ b/modules/commons/commons_wikis/commons_wikis.info
@@ -2,7 +2,6 @@ name = Commons Wikis
 description = Provides the wiki functionality for Drupal Commons
 core = 7.x
 package = Commons - Content types
-project = commons_wikis
 dependencies[] = commons_body
 dependencies[] = commons_groups
 dependencies[] = commons_topics
@@ -22,7 +21,6 @@ dependencies[] = text
 dependencies[] = views
 dependencies[] = views_content
 dependencies[] = views_litepager
-datestamp = 1359684042
 features[ctools][] = page_manager:pages_default:1
 features[ctools][] = strongarm:strongarm:1
 features[ctools][] = views:views_default:3.0
diff --git a/modules/commons/commons_wikis/commons_wikis.install b/modules/commons/commons_wikis/commons_wikis.install
index ca392a2..c2bb6df 100644
--- a/modules/commons/commons_wikis/commons_wikis.install
+++ b/modules/commons/commons_wikis/commons_wikis.install
@@ -72,3 +72,14 @@ function commons_wikis_update_7006() {
   features_revert($revert);
   return array();
 }
+
+/**
+ * Display sticky content at top of lists.
+ */
+function commons_wikis_update_7007() {
+  $revert = array(
+    'commons_wikis' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
diff --git a/modules/commons/commons_wikis/commons_wikis.module b/modules/commons/commons_wikis/commons_wikis.module
index 20cf44b..c6e9ce4 100644
--- a/modules/commons/commons_wikis/commons_wikis.module
+++ b/modules/commons/commons_wikis/commons_wikis.module
@@ -23,8 +23,8 @@ function commons_wikis_module_implements_alter(&$implementations, $hook) {
  * Implements hook_commons_bw_create_all_widget().
  */
 function commons_wikis_commons_bw_create_all_widget($group) {
-   if (og_user_access('node', $group->nid, 'create wiki content')) {
-      $link = l(t('Start a wiki'), 'node/add/wiki',
+  if (og_user_access('node', $group->nid, 'create wiki content')) {
+    $link = l(t('Start a wiki'), 'node/add/wiki',
       array('attributes' => array('class' => 'commons-wikis-create'), 'query' => array('og_group_ref' => $group->nid))
     );
     return array(
@@ -41,16 +41,13 @@ function commons_wikis_commons_bw_create_all_widget($group) {
  * Implements hook_menu_alter().
  */
 function commons_wikis_menu_alter(&$items) {
-  // Find all menu items that are related to viewing a revision and change the
+  // Alter the two node menu revision items and change the
   // access callback to our custom one.
-  foreach ($items as $route => $info) {
-    if (strpos($route, 'revisions') !== FALSE
-      && strpos($route, 'revert') === FALSE
-      && strpos($route, 'delete') === FALSE) {
-      $items[$route]['access arguments'][] = $items[$route]['access callback'];
-      $items[$route]['access callback'] = 'commons_wikis_user_revision_access';
-    }
-  }
+  $items['node/%node/revisions']['access arguments'][] = $items['node/%node/revisions']['access callback'];
+  $items['node/%node/revisions']['access callback'] = 'commons_wikis_user_revision_access';
+
+  $items['node/%node/revisions/%/view']['access arguments'][] = $items['node/%node/revisions']['access callback'];
+  $items['node/%node/revisions/%/view']['access callback'] = 'commons_wikis_user_revision_access';
 }
 
 /**
@@ -68,34 +65,44 @@ function commons_wikis_views_default_views_alter(&$views) {
  * Custom access callback for viewing revision info.
  */
 function commons_wikis_user_revision_access($node = NULL, $old_callback = '_node_revision_access') {
+  // Only use custom revision access for wikis. Access to other content types
+  // should be handled by the standard callback.
   if ($node->type == 'wiki') {
-    return TRUE;
-  }
-  else {
-    return node_access('view', $node) && $old_callback($node, 'view');
+    // The content was posted to specific groups.
+    if (isset($node->og_group_ref[LANGUAGE_NONE][0]['target_id'])) {
+      return og_user_access('node', $node->og_group_ref[LANGUAGE_NONE][0]['target_id'], 'update any wiki content');
+    }
+    // The content was posted privately to all trusted contacts.
+    elseif (isset($node->og_user_group_ref[LANGUAGE_NONE][0]['target_id'])) {
+      return og_user_access('user', $node->og_user_group_ref[LANGUAGE_NONE][0]['target_id'], 'update any wiki content');
+    }
   }
+  return $old_callback($node, 'view');
 }
 
 /**
-* Implements hook_og_user_access_alter().
-*/
+ * Implements hook_og_user_access_alter().
+ */
 function commons_wikis_og_user_access_alter(&$temp_perm, $context) {
-  // Grant access to non-group members to be able to edit wiki nodes.
-  // where the group node is public and content is public within the group.
-  if ($context['string'] == "update any wiki content") {
-    $commons_groups_entity_types = commons_groups_get_group_content_entity_types();
-    $group_content_restricted = (bool) (isset($context['group']->group_content_access[LANGUAGE_NONE][0]['value']) && $context['group']->group_content_access[LANGUAGE_NONE][0]['value'] == 2);
-    $user_is_member = FALSE;
-    if ($context['group_type'] == 'node') {
-      $user_is_member = (bool) og_is_member('node', $context['group']->nid, 'user', $context['account']);
-    }
-    if ($context['group_type'] == 'user') {
-      $user_is_member = (bool) og_is_member('user', $context['group']->uid, 'user', $context['account']);
-    }
-    if (user_access('edit any wiki content', $context['account'])
-    && (!$group_content_restricted || $user_is_member)) {
-      $temp_perm["update any wiki content"] = TRUE;
-    }
+  // Only alter if we're dealing with updating wiki content.
+  if ($context['string'] != 'update any wiki content') {
+    return;
+  }
+
+  $account = $context['account'];
+  $group = $context['group'];
+  $group_type = $context['group_type'];
+
+  $wrapper = entity_metadata_wrapper($group_type, $group);
+  $entity_id = $wrapper->getIdentifier();
+
+  $group_content_restricted = (bool) !isset($wrapper->field_og_subscribe_settings) || (isset($wrapper->field_og_subscribe_settings) && $wrapper->field_og_subscribe_settings->value() != 'anyone');
+  $user_is_member = (bool) og_is_member($group_type, $entity_id, 'user', $account, array(OG_STATE_ACTIVE));
+
+  // Allow group members to be able to edit any wiki content within the group.
+  // Also grant access to non-members if both the group and content is public.
+  if (user_access('edit any wiki content', $account) && (!$group_content_restricted || $user_is_member)) {
+    $temp_perm['update any wiki content'] = TRUE;
   }
 }
 
@@ -156,13 +163,14 @@ function commons_wikis_commons_bw_group_widget() {
 }
 
 /**
- * Implements hook_commons_entity_integration.
+ * Implements hook_commons_entity_integration().
  */
 function commons_wikis_commons_entity_integration() {
   return array(
     'node' => array(
       'wiki' => array(
         'auto_title_instance' => FALSE,
+        'is_group_content' => TRUE,
       ),
     ),
   );
diff --git a/modules/commons/commons_wikis/commons_wikis.views_default.inc b/modules/commons/commons_wikis/commons_wikis.views_default.inc
index 7c69d67..3807929 100644
--- a/modules/commons/commons_wikis/commons_wikis.views_default.inc
+++ b/modules/commons/commons_wikis/commons_wikis.views_default.inc
@@ -85,6 +85,7 @@ function commons_wikis_views_default_views() {
   $handler->display->display_options['sorts']['sticky']['id'] = 'sticky';
   $handler->display->display_options['sorts']['sticky']['table'] = 'node';
   $handler->display->display_options['sorts']['sticky']['field'] = 'sticky';
+  $handler->display->display_options['sorts']['sticky']['order'] = 'DESC';
   /* Sort criterion: Content: Post date */
   $handler->display->display_options['sorts']['created']['id'] = 'created';
   $handler->display->display_options['sorts']['created']['table'] = 'node';
diff --git a/modules/commons/commons_wikis/modules/commons_wikis_pages/commons_wikis_pages.info b/modules/commons/commons_wikis/modules/commons_wikis_pages/commons_wikis_pages.info
index cbbecac..79e7c9a 100644
--- a/modules/commons/commons_wikis/modules/commons_wikis_pages/commons_wikis_pages.info
+++ b/modules/commons/commons_wikis/modules/commons_wikis_pages/commons_wikis_pages.info
@@ -2,7 +2,6 @@ name = Commons Wikis Home
 description = Provides the panelizer feature for Wikis.
 core = 7.x
 package = Commons - Landing pages
-project = commons_wikis_pages
 dependencies[] = commons_wikis
 dependencies[] = ctools
 dependencies[] = panelizer
diff --git a/modules/commons/commons_wysiwyg/commons_wysiwyg.info b/modules/commons/commons_wysiwyg/commons_wysiwyg.info
index 75018f6..a4e5358 100644
--- a/modules/commons/commons_wysiwyg/commons_wysiwyg.info
+++ b/modules/commons/commons_wysiwyg/commons_wysiwyg.info
@@ -2,12 +2,10 @@ name = Commons WYSIWYG
 description = Provides a rich text editor for content creation.
 core = 7.x
 package = Commons - Building blocks
-project = commons_wysiwyg
 dependencies[] = ckeditor
 dependencies[] = features
 dependencies[] = filter
 dependencies[] = strongarm
-datestamp = 1358798210
 features[ckeditor_profile][] = Advanced
 features[features_api][] = api:2
 features[filter][] = filtered_html
diff --git a/scripts/build_distro.sh b/scripts/build_distro.sh
index c0a9aae..193a604 100755
--- a/scripts/build_distro.sh
+++ b/scripts/build_distro.sh
@@ -1,8 +1,8 @@
 #!/bin/bash
-set -e
+#set -e
 
 #modules=(commons_activity_streams commons_featured commons_notices commons_profile_social commons_user_profile_pages commons_body commons_follow commons_notify commons_q_a commons_utility_links commons_bw commons_groups commons_pages commons_radioactivity commons_wikis commons_content_moderation commons_like commons_polls commons_search commons_wysiwyg commons_documents commons_location commons_posts commons_site_homepage commons_events commons_misc commons_profile_base commons_topics commons_social_sharing commons_trusted_contacts)
-themes=(commons_origins)
+#themes=(commons_origins)
 
 merge_repos() {
   cd $BUILD_PATH/commons_profile
@@ -42,17 +42,15 @@ pull_git() {
     git pull origin 7.x-3.x
 
     cd $BUILD_PATH/repos/modules
-    for i in "${modules[@]}"; do
+    for i in `ls | awk -F/ '{print $1}'`; do
       echo $i
       cd $i
       if [[ -n $RESET ]]; then
         git reset --hard HEAD
       fi
-      git pull origin 7.x-3.x
+      git pull origin
       cd ..
     done
-    cd $BUILD_PATH/repos/themes/commons_origins
-    git pull origin 7.x-3.x
 }
 
 release_notes() {
@@ -84,36 +82,89 @@ release_notes() {
 }
 
 build_distro() {
-    if [[ -d $BUILD_PATH ]]; then
-        cd $BUILD_PATH
-        rm -rf ./publish
-        # do we have the profile?
-        if [[ -d $BUILD_PATH/commons_profile ]]; then
-          if [[ -d $BUILD_PATH/repos ]]; then
-            rm -f /tmp/commons.tar.gz
-            drush make --no-cache --no-core --contrib-destination --tar $BUILD_PATH/commons_profile/drupal-org.make /tmp/commons
-            drush make --no-cache --prepare-install --drupal-org=core $BUILD_PATH/commons_profile/drupal-org-core.make ./publish
-          else
-            mkdir $BUILD_PATH/repos
-            mkdir $BUILD_PATH/repos/modules
-            mkdir $BUILD_PATH/repos/themes
-            build_distro $BUILD_PATH
-          fi
-          # symlink the profile to our dev copy
-          chmod -R 777 $BUILD_PATH/publish/sites/default
-          rm -rf publish/profiles/commons
-          ln -s $BUILD_PATH/commons_profile publish/profiles/commons
-          cd publish/profiles
-          tar -zxvf /tmp/commons.tar.gz
-          chmod -R 775 $BUILD_PATH/publish/profiles/commons
+  if [[ -d $BUILD_PATH ]]; then
+      cd $BUILD_PATH
+      #backup the sites directory
+      if [[ -d docroot ]]; then
+        rm -rf ./docroot
+      fi
+      # do we have the profile?
+      if [[ -d $BUILD_PATH/commons_profile ]]; then
+        if [[ -d $BUILD_PATH/repos ]]; then
+          rm -f /tmp/commons.tar.gz
+          drush make --no-cache --prepare-install --drupal-org=core $BUILD_PATH/commons_profile/drupal-org-core.make $BUILD_PATH/docroot
+          drush make --no-cache --no-core --contrib-destination --tar $BUILD_PATH/commons_profile/drupal-org.make /tmp/commons
         else
-          git clone --branch 7.x-3.x-merged ${USERNAME}@git.drupal.org:project/commons.git commons_profile
+          mkdir -p $BUILD_PATH/repos/modules/contrib
+          cd $BUILD_PATH/repos/modules/contrib
+          for i in "${modules[@]}"; do
+            echo "bringing in ${i} for $USERNAME";
+            if [[ -n $USERNAME ]]; then
+              git clone ${USERNAME}@git.drupal.org:project/${i}.git
+            else
+              git clone http://git.drupal.org/project/${i}.git
+            fi
+          done
+          cd $BUILD_PATH/repos
+          mkdir -p $BUILD_PATH/repos/themes/contrib
+          cd $BUILD_PATH/repos/themes
+          for i in "${themes[@]}"; do
+            if [[ -n $USERNAME ]]; then
+              git clone ${USERNAME}@git.drupal.org:project/${i}.git
+            else
+              git clone http://git.drupal.org/project/${i}.git
+            fi
+          done
           build_distro $BUILD_PATH
         fi
-    else
-      mkdir $BUILD_PATH
-      build_distro $BUILD_PATH $USERNAME
-    fi
+        # symlink the profile sites folder to our dev copy
+        cd docroot
+        if [[ -d $BUILD_PATH/sites ]]; then
+          rm -rf $BUILD_PATH/docroot/sites
+          ln -s ../sites $BUILD_PATH/docroot/sites
+        else
+          mv $BUILD_PATH/docroot/sites $BUILD_PATH/sites
+          ln -s ../sites $BUILD_PATH/docroot/sites
+        fi
+        chmod -R 777 $BUILD_PATH/docroot/sites/default
+
+        ## put commons profile and modules into the profile folder
+        rm -rf docroot/profiles/commons
+        if [ -a $BUILD_PATH/repos.txt ]; then
+          UNTAR="tar -zxvf /tmp/commons.tar.gz -X $BUILD_PATH/repos.txt"
+        else
+          cd $BUILD_PATH/repos
+          find * -mindepth 1 -maxdepth 2 -type d -not -path ".*" -not -path "modules/.*" -not -path "themes/.*" -not -path "modules/contrib" -not -path "themes/contrib" > /tmp/repos.txt
+          # exclude repos since we're updating already by linking it to the repos directory.
+          UNTAR="tar -zxvf /tmp/commons.tar.gz -X /tmp/repos.txt"
+        fi
+        cd $BUILD_PATH/docroot/profiles
+        eval $UNTAR
+        cd commons
+        ln -s ../../../commons_profile/* .
+        ln -s ../../../../commons_profile/modules/commons ${BUILD_PATH}/docroot/profiles/commons/modules/
+        ln -s ../../../../commons_profile/themes/commons ${BUILD_PATH}/docroot/profiles/commons/themes/
+        for line in $(cat $BUILD_PATH/repos.txt); do
+          ln -s ../../../../../repos/${line} ${BUILD_PATH}/docroot/profiles/commons/$(echo ${line} | awk -F/ '{print $1}')/contrib/
+        done
+        chmod -R 775 $BUILD_PATH/docroot/profiles/commons
+      else
+        git clone --branch 7.x-3.x ${USERNAME}@git.drupal.org:project/commons.git commons_profile
+        build_distro $BUILD_PATH
+      fi
+  else
+    mkdir $BUILD_PATH
+    build_distro $BUILD_PATH $USERNAME
+  fi
+}
+
+site_install() {
+  read -p "You're about to DESTROY all data for site ${SITE} Are you sure? " -n 1 -r
+  if [[ $REPLY =~ ^[Yy]$ ]]; then
+    cd ${BUILD_PATH}/docroot/sites/${SITE}
+    drush -y sql-drop
+    drush site-install --site-name=${SITE} --account-name=admin --account-pass=${ADMIN_PASS} --account-mail=${ADMIN_EMAIL} --site-mail=commons_site@example.com -v -y commons commons_anonymous_welcome_text_form.commons_install_example_content=${DEMO_CONTENT} commons_anonymous_welcome_text_form.commons_anonymous_welcome_title="Commons Example Site" commons_anonymous_welcome_text_form.commons_anonymous_welcome_body="Using the site-install version of commons." commons_create_first_group.commons_first_group_title="Sales Group" commons_create_first_group.commons_first_group_body="This is the sales group from site-install."
+  fi
 }
 
 # This allows you to test the make file without needing to upload it to drupal.org and run the main make file.
@@ -123,15 +174,16 @@ update() {
     # do we have the profile?
     if [[ -d $DOCROOT/profiles/commons ]]; then
       # do we have an installed commons profile?
-        rm -f /tmp/publish.tar.gz
+        rm -f /tmp/docroot.tar.gz
         rm -f /tmp/commons.tar.gz
-        drush make --tar --drupal-org=core profiles/commons/drupal-org-core.make /tmp/publish
-        drush make --tar --drupal-org profiles/commons/drupal-org.make /tmp/commons
+        drush make --no-cache --tar --drupal-org=core profiles/commons/drupal-org-core.make /tmp/docroot
+        drush make --no-core --no-cache --tar --drupal-org profiles/commons/drupal-org.make /tmp/commons
         cd ..
-        tar -zxvf /tmp/publish.tar.gz
-        cd publish/profiles
+        tar -zxvf /tmp/docroot.tar.gz
+        cd docroot/profiles/commons/modules/contrib
         # remove the symlinks in the repos before we execute
-        find . -mindepth 2 -type l | awk -F/ '{print $5}' | sed '/^$/d' > /tmp/repos.txt
+        find . -type l | awk -F/ '{print $2}' > /tmp/repos.txt
+        cd $DOCROOT/profiles
         # exclude repos since we're updating already by linking it to the repos directory.
         UNTAR="tar -zxvf /tmp/commons.tar.gz -X /tmp/repos.txt"
         eval $UNTAR
@@ -144,6 +196,34 @@ update() {
 }
 
 case $1 in
+  site-install)
+    if [[ -n $2 ]] && [[ -n $3 ]]; then
+      BUILD_PATH=$2
+    else
+      echo "Usage build_distro.sh site-install [build_path] [site] [demo-content] [admin-email] [admin-pass]"
+    fi
+    if [[ -n $3 ]]; then
+      SITE=$3
+    else
+      SITE='default'
+    fi
+    if [[ -n $4 ]]; then
+      DEMO_CONTENT='TRUE'
+    else
+      DEMO_CONTENT='FALSE'
+    fi
+    if [[ -n $5 ]]; then
+      ADMIN_EMAIL=$5
+    else
+      ADMIN_EMAIL='admin@example.com'
+    fi
+    if [[ -n $6 ]]; then
+      ADMIN_PASS=$6
+    else
+      ADMIN_PASS='admin'
+    fi
+
+    site_install $BUILD_PATH $SITE $DEMO_CONTENT $ADMIN_EMAIL $ADMIN_PASS;;
   pull)
     if [[ -n $2 ]]; then
       BUILD_PATH=$2
@@ -181,7 +261,7 @@ case $1 in
     if [[ -n $2 ]]; then
       DOCROOT=$2
     else
-      echo "Usage: build_distro.sh test_makefile [build_path]"
+      echo "Usage: build_distro.sh update [DOCROOT]"
       exit 1
     fi
     if [[ -n $3 ]]; then
diff --git a/tests/README.md b/tests/README.md
deleted file mode 100644
index acddeb2..0000000
--- a/tests/README.md
+++ /dev/null
@@ -1,140 +0,0 @@
-# The Commons Test Suite
-
-Current status:  
-[![Build Status](https://travis-ci.org/acquia/commons3.png?branch=7.x-3.x)](https://travis-ci.org/acquia/commons3)
-
-This folder is the home for the Drupal Commons integration tests.  
-To run the tests on commits, the [drupal.org project](https://drupal.org/project/commons) is mirrored 
-to [Github](https://github.com/acquia/commons3) so we're able to use [Travis CI](https://travis-ci.org/) to run the tests.
-The Travis CI project page for Commons can be found [over here](https://travis-ci.org/acquia/commons3/).
-
-
-## The build process
-
-The Travis CI build process is configured within the [.travis.yml](../.travis.yml) file present in the root directory.  
-It currently includes:
-
-- building the makefile using Drush
-- installing the resulting distribution using drush site-install
-- running the behat based tests ("features")
-
-
-## The stack
-
-### [Behat](http://behat.org/):  
-A php based Behavior Driven Development framework for testing your business expectations.  
-It drives the whole test lifecycle and allows us to formulate test cases as regular english sentences.
-### [Mink](http://mink.behat.org/):  
-Mink is an open source acceptance test framework for web applications.  
-It "remote controls" several different types of browsers (from Firefox to headless phantomjs based ones).
-### [Drupal Extension](https://drupal.org/project/drupalextension):  
-The Drupal Extension is an integration layer between Behat, Mink Extension, and Drupal. It provides step definitions for common testing scenarios specific to Drupal sites.
-The predefined drupal specific steps should save us a lot of time writing helper code for using the basic navigational elements.
-The currently (July 2013) defined steps are as follows:
-
-    $ bin/behat -dl
-    Given /^(?:that I|I) am at "(?P[^"]*)"$/
-     When /^I visit "(?P[^"]*)"$/
-     When /^I click "(?P<link>[^"]*)"$/
-    Given /^for "(?P<field>[^"]*)" I enter "(?P<value>[^"]*)"$/
-    Given /^I enter "(?P<value>[^"]*)" for "(?P<field>[^"]*)"$/
-     When /^I press the "(?P<button>[^"]*)" button$/
-     Then /^I should see the link "(?P<link>[^"]*)"$/
-     Then /^I should not see the link "(?P<link>[^"]*)"$/
-     Then /^I (?:|should )see the heading "(?P<heading>[^"]*)"$/
-     Then /^I (?:|should )not see the heading "(?P<heading>[^"]*)"$/
-     Then /^I should see the heading "(?P<heading>[^"]*)" in the "(?P<region>[^"]*)"(?:| region)$/
-     Then /^I should see the "(?P<heading>[^"]*)" heading in the "(?P<region>[^"]*)"(?:| region)$/
-     When /^I (?:follow|click) "(?P<link>[^"]*)" in the "(?P<region>[^"]*)"(?:| region)$/
-     Then /^I should see the link "(?P<link>[^"]*)" in the "(?P<region>[^"]*)"(?:| region)$/
-     Then /^I should not see the link "(?P<link>[^"]*)" in the "(?P<region>[^"]*)"(?:| region)$/
-     Then /^I should see (?:the text |)"(?P<text>[^"]*)" in the "(?P<region>[^"]*)"(?:| region)$/
-     Then /^I should not see (?:the text |)"(?P<text>[^"]*)" in the "(?P<region>[^"]*)"(?:| region)$/
-    Given /^I press "(?P<button>[^"]*)" in the "(?P<region>[^"]*)"(?:| region)$/
-    Given /^(?:|I )fill in "(?P<value>(?:[^"]|\\")*)" for "(?P<field>(?:[^"]|\\")*)" in the "(?P<region>[^"]*)"(?:| region)$/
-    Given /^(?:|I )fill in "(?P<field>(?:[^"]|\\")*)" with "(?P<value>(?:[^"]|\\")*)" in the "(?P<region>[^"]*)"(?:| region)$/
-     Then /^(?:I|I should) see the text "(?P<text>[^"]*)"$/
-     Then /^I should not see the text "(?P<text>[^"]*)"$/
-     Then /^I should get a "(?P<code>[^"]*)" HTTP response$/
-     Then /^I should not get a "(?P<code>[^"]*)" HTTP response$/
-    Given /^I check the box "(?P<checkbox>[^"]*)"$/
-    Given /^I uncheck the box "(?P<checkbox>[^"]*)"$/
-     When /^I select the radio button "(?P<label>[^"]*)" with the id "(?P<id>[^"]*)"$/
-     When /^I select the radio button "(?P<label>[^"]*)"$/
-    Given /^I am an anonymous user$/
-    Given /^I am not logged in$/
-    Given /^I am logged in as a user with the "(?P<role>[^"]*)" role$/
-    Given /^I click "(?P<link>[^"]*)" in the "(?P<row_text>[^"]*)" row$/
-    Given /^the cache has been cleared$/
-    Given /^I run cron$/
-    Given /^I am viewing (?:a|an) "(?P<type>[^"]*)" node with the title "(?P<title>[^"]*)"$/
-    Given /^(?:a|an) "(?P<type>[^"]*)" node with the title "(?P<title>[^"]*)"$/
-    Given /^I am viewing my "(?P<type>[^"]*)" node with the title "(?P<title>[^"]*)"$/
-    Given /^"(?P<type>[^"]*)" nodes:$/
-    Given /^I am viewing (?:a|an) "(?P<vocabulary>[^"]*)" term with the name "(?P<name>[^"]*)"$/
-    Given /^(?:a|an) "(?P<vocabulary>[^"]*)" term with the name "(?P<name>[^"]*)"$/
-    Given /^users:$/
-    Given /^"(?P<vocabulary>[^"]*)" terms:$/
-     Then /^I should see the error message(?:| containing) "([^"]*)"$/
-     Then /^I should see the following <error messages>$/
-    Given /^I should not see the error message(?:| containing) "([^"]*)"$/
-     Then /^I should not see the following <error messages>$/
-     Then /^I should see the success message(?:| containing) "([^"]*)"$/
-     Then /^I should see the following <success messages>$/
-    Given /^I should not see the success message(?:| containing) "([^"]*)"$/
-     Then /^I should not see the following <success messages>$/
-     Then /^I should see the message(?:| containing) "([^"]*)"$/
-     Then /^I should not see the message(?:| containing) "([^"]*)"$/
-     Then /^(?:|I )break$/
-    Given /^(?:|I )am on (?:|the )homepage$/
-     When /^(?:|I )go to (?:|the )homepage$/
-    Given /^(?:|I )am on "(?P<page>[^"]+)"$/
-     When /^(?:|I )go to "(?P<page>[^"]+)"$/
-     When /^(?:|I )reload the page$/
-     When /^(?:|I )move backward one page$/
-     When /^(?:|I )move forward one page$/
-     When /^(?:|I )press "(?P<button>(?:[^"]|\\")*)"$/
-     When /^(?:|I )follow "(?P<link>(?:[^"]|\\")*)"$/
-     When /^(?:|I )fill in "(?P<field>(?:[^"]|\\")*)" with "(?P<value>(?:[^"]|\\")*)"$/
-     When /^(?:|I )fill in "(?P<field>(?:[^"]|\\")*)" with:$/
-     When /^(?:|I )fill in "(?P<value>(?:[^"]|\\")*)" for "(?P<field>(?:[^"]|\\")*)"$/
-     When /^(?:|I )fill in the following:$/
-     When /^(?:|I )select "(?P<option>(?:[^"]|\\")*)" from "(?P<select>(?:[^"]|\\")*)"$/
-     When /^(?:|I )additionally select "(?P<option>(?:[^"]|\\")*)" from "(?P<select>(?:[^"]|\\")*)"$/
-     When /^(?:|I )check "(?P<option>(?:[^"]|\\")*)"$/
-     When /^(?:|I )uncheck "(?P<option>(?:[^"]|\\")*)"$/
-     When /^(?:|I )attach the file "(?P[^"]*)" to "(?P<field>(?:[^"]|\\")*)"$/
-     Then /^(?:|I )should be on "(?P<page>[^"]+)"$/
-     Then /^(?:|I )should be on (?:|the )homepage$/
-     Then /^the (?i)url(?-i) should match (?P<pattern>"([^"]|\\")*")$/
-     Then /^the response status code should be (?P<code>\d+)$/
-     Then /^the response status code should not be (?P<code>\d+)$/
-     Then /^(?:|I )should see "(?P<text>(?:[^"]|\\")*)"$/
-     Then /^(?:|I )should not see "(?P<text>(?:[^"]|\\")*)"$/
-     Then /^(?:|I )should see text matching (?P<pattern>"(?:[^"]|\\")*")$/
-     Then /^(?:|I )should not see text matching (?P<pattern>"(?:[^"]|\\")*")$/
-     Then /^the response should contain "(?P<text>(?:[^"]|\\")*)"$/
-     Then /^the response should not contain "(?P<text>(?:[^"]|\\")*)"$/
-     Then /^(?:|I )should see "(?P<text>(?:[^"]|\\")*)" in the "(?P<element>[^"]*)" element$/
-     Then /^(?:|I )should not see "(?P<text>(?:[^"]|\\")*)" in the "(?P<element>[^"]*)" element$/
-     Then /^the "(?P<element>[^"]*)" element should contain "(?P<value>(?:[^"]|\\")*)"$/
-     Then /^the "(?P<element>[^"]*)" element should not contain "(?P<value>(?:[^"]|\\")*)"$/
-     Then /^(?:|I )should see an? "(?P<element>[^"]*)" element$/
-     Then /^(?:|I )should not see an? "(?P<element>[^"]*)" element$/
-     Then /^the "(?P<field>(?:[^"]|\\")*)" field should contain "(?P<value>(?:[^"]|\\")*)"$/
-     Then /^the "(?P<field>(?:[^"]|\\")*)" field should not contain "(?P<value>(?:[^"]|\\")*)"$/
-     Then /^the "(?P<checkbox>(?:[^"]|\\")*)" checkbox should be checked$/
-     Then /^the checkbox "(?P<checkbox>(?:[^"]|\\")*)" (?:is|should be) checked$/
-     Then /^the "(?P<checkbox>(?:[^"]|\\")*)" checkbox should not be checked$/
-     Then /^the checkbox "(?P<checkbox>(?:[^"]|\\")*)" should (?:be unchecked|not be checked)$/
-     Then /^the checkbox "(?P<checkbox>(?:[^"]|\\")*)" is (?:unchecked|not checked)$/
-     Then /^(?:|I )should see (?P<num>\d+) "(?P<element>[^"]*)" elements?$/
-     Then /^print current URL$/
-     Then /^print last response$/
-     Then /^show last response$/
-
-## Writing new tests
-
-
-For information about how to write tests, I'd suggest looking at the official [behat documentation](http://docs.behat.org/quick_intro.html#define-your-feature).
-One small piece of information: When you tag a scenario with @javascript, it will be executed in Firefox/Selenium2 rather than using the default "headless" goute driver.
diff --git a/tests/behat.yml b/tests/behat.yml
deleted file mode 100644
index 462c643..0000000
--- a/tests/behat.yml
+++ /dev/null
@@ -1,12 +0,0 @@
-default:
-  paths:
-    features: 'features'
-  extensions:
-    Behat\MinkExtension\Extension:
-      goutte: ~
-      selenium2: ~
-      base_url: http://localhost/
-      default_session: 'goutte'
-      javascript_session: 'selenium2'
-    Drupal\DrupalExtension\Extension:
-      blackbox: ~
\ No newline at end of file
diff --git a/tests/behat/.gitignore b/tests/behat/.gitignore
new file mode 100644
index 0000000..d71a47f
--- /dev/null
+++ b/tests/behat/.gitignore
@@ -0,0 +1,5 @@
+behat.yml
+composer.lock
+composer.phar
+bin
+vendor
diff --git a/tests/behat/README.txt b/tests/behat/README.txt
new file mode 100644
index 0000000..f786af0
--- /dev/null
+++ b/tests/behat/README.txt
@@ -0,0 +1,22 @@
+Behat tests
+===========
+
+Setup
+-----
+
+ 1. Install Composer
+
+    php -r "eval('?>'.file_get_contents('https://getcomposer.org/installer'));"
+ 
+ 2. Install Behat and dependencies via Composer
+
+    php composer.phar install
+
+ 3. Copy behat.yml.example to behat.yml and modify
+
+    mv behat.template.yml behat.yml
+ 
+ 4. Run Behat and examine test results!
+ 
+    bin/behat
+
diff --git a/tests/behat/behat.template.yml b/tests/behat/behat.template.yml
new file mode 100644
index 0000000..4c8afb7
--- /dev/null
+++ b/tests/behat/behat.template.yml
@@ -0,0 +1,13 @@
+default:
+  paths:
+    features: 'features'
+  extensions:
+    Behat\MinkExtension\Extension:
+      goutte: ~
+      selenium2: ~
+      base_url: http://${drupal.uri}
+      files_path: ../../
+    Drupal\DrupalExtension\Extension:
+      blackbox: ~
+      drush:
+        root: ${drush.root}
diff --git a/tests/behat/behat.travis.yml b/tests/behat/behat.travis.yml
new file mode 100644
index 0000000..9f1c9da
--- /dev/null
+++ b/tests/behat/behat.travis.yml
@@ -0,0 +1,29 @@
+default:
+  paths:
+    features: 'features'
+  filters:
+    tags: "~@chrome"
+  extensions:
+    Behat\MinkExtension\Extension:
+      goutte: ~
+      selenium2: ~
+      base_url: http://127.0.0.1:8888
+      files_path: ../../
+    Drupal\DrupalExtension\Extension:
+      blackbox: ~
+      drush:
+        alias: self
+      # This will be setup by .travis.yml like so:
+      # export BEHAT_PARAMS="extensions[Drupal\\DrupalExtension\\Extension][drupal][drupal_root]=$DRUPAL_ROOT"
+      #drupal:
+      #  drupal_root: "/path/to/drupal/root"
+
+# Setup for Google Chrome only tests.
+chrome:
+  filters:
+    tags: "@chrome"
+  extensions:
+    Behat\MinkExtension\Extension:
+      selenium2:
+        browser: chrome
+        capabilities: {"browser": "chrome", "browserName": "chrome", "browserVersion": "ANY", "version": "ANY"}
diff --git a/tests/behat/composer.json b/tests/behat/composer.json
new file mode 100644
index 0000000..5bf9093
--- /dev/null
+++ b/tests/behat/composer.json
@@ -0,0 +1,20 @@
+{
+  "require": {
+    "drupal/drupal-extension": "*",
+
+    "symfony/css-selector": "2.4.2",
+    "symfony/finder": "2.4.2",
+    "symfony/yaml": "2.4.2",
+    "symfony/translation": "2.4.2",
+    "symfony/event-dispatcher": "2.4.2",
+    "symfony/filesystem": "2.4.2",
+    "symfony/config": "2.4.2",
+    "symfony/console": "2.4.2",
+    "symfony/process": "2.4.2",
+    "symfony/dom-crawler": "2.4.2",
+    "symfony/browser-kit": "2.4.2"
+  },
+  "config": {
+    "bin-dir": "bin/"
+  }
+}
diff --git a/tests/behat/features/bootstrap/FeatureContext.php b/tests/behat/features/bootstrap/FeatureContext.php
new file mode 100644
index 0000000..2e36560
--- /dev/null
+++ b/tests/behat/features/bootstrap/FeatureContext.php
@@ -0,0 +1,268 @@
+<?php
+
+use Behat\Behat\Context\ClosuredContextInterface,
+    Behat\Behat\Context\TranslatedContextInterface,
+    Behat\Behat\Context\BehatContext,
+    Behat\Behat\Event\StepEvent,
+    Behat\Behat\Exception\PendingException;
+use Behat\Gherkin\Node\PyStringNode,
+    Behat\Gherkin\Node\TableNode;
+use Drupal\DrupalExtension\Context\DrupalContext;
+use Drupal\Component\Utility\Random;
+
+//
+// Require 3rd-party libraries here:
+//
+//   require_once 'PHPUnit/Autoload.php';
+//   require_once 'PHPUnit/Framework/Assert/Functions.php';
+//
+
+/**
+ * Features context.
+ */
+class FeatureContext extends DrupalContext
+{
+  /**
+   * Initializes context.
+   * Every scenario gets it's own context object.
+   *
+   * @param array $parameters context parameters (set them up through behat.yml)
+   */
+  public function __construct(array $parameters) {
+    // Initialize your context here
+  }
+
+//
+// Place your definition and hook methods here:
+//
+//    /**
+//     * @Given /^I have done something with "([^"]*)"$/
+//     */
+//    public function iHaveDoneSomethingWith($argument)
+//    {
+//        doSomethingWith($argument);
+//    }
+//
+
+  /**
+   * @Given /^I switch to the frame "([^"]*)"$/
+   */
+  public function iSwitchToTheFrame($frame) {
+    $this->getSession()->switchToIFrame($frame);
+  }
+
+  /**
+   * @Given /^I switch out of all frames$/
+   */
+  public function iSwitchOutOfAllFrames() {
+    $this->getSession()->switchToIFrame();
+  }
+
+  /**
+   * @Then /^I should see the "([^"]*)" button$/
+   */
+  public function assertButton($label) {
+    $page = $this->getSession()->getPage();
+    $results = $page->findAll('css', "input[type=submit],input[type=button],button");
+    if (!empty($results)) {
+      foreach ($results as $result) {
+        if ($result->getTagName() == 'input' && $result->getAttribute('value') == $label) {
+          return;
+        }
+        elseif ($result->getText() == $label) {
+          return;
+        }
+      }
+    }
+    throw new \Exception(sprintf('The "%s" button was not found on the page %s', $label, $region, $this->getSession()->getCurrentUrl()));
+  }
+
+  /**
+   * @Then /^I should see the "([^"]*)" button in the "([^"]*)" region$/
+   */
+  public function assertRegionButton($label, $region) {
+    $regionObj = $this->getRegion($region);
+    $results = $regionObj->findAll('css', "input[type=submit],input[type=button],button");
+    if (!empty($results)) {
+      foreach ($results as $result) {
+        if ($result->getTagName() == 'input' && $result->getAttribute('value') == $label) {
+          return;
+        }
+        elseif ($result->getText() == $label) {
+          return;
+        }
+      }
+    }
+    throw new \Exception(sprintf('The "%s" button was not found in the "%s" region on the page %s', $label, $region, $this->getSession()->getCurrentUrl()));
+  }
+
+  /**
+   * @Then /^I should see the "([^"]*)" element in the "([^"]*)" region$/
+   */
+  public function assertRegionElement($tag, $region) {
+    $regionObj = $this->getRegion($region);
+    $elements = $regionObj->findAll('css', $tag);
+    if (!empty($elements)) {
+      return;
+    }
+    throw new \Exception(sprintf('The element "%s" was not found in the "%s" region on the page %s', $tag, $region, $this->getSession()->getCurrentUrl()));
+  }
+
+  /**
+   * @Then /^I should not see the "([^"]*)" element in the "([^"]*)" region$/
+   */
+  public function assertNotRegionElement($tag, $region) {
+    $regionObj = $this->getRegion($region);
+    $result = $regionObj->findAll('css', $tag);
+    if (!empty($result)) {
+      throw new \Exception(sprintf('Element "%s" was found in the "%s" region on the page %s', $tag, $region, $this->getSession()->getCurrentUrl()));
+    }
+  }
+
+  /**
+   * @Then /^I should see "([^"]*)" in the "([^"]*)" element in the "([^"]*)" region$/
+   */
+  public function assertRegionElementText($text, $tag, $region) {
+    $regionObj = $this->getRegion($region);
+    $results = $regionObj->findAll('css', $tag);
+    if (!empty($results)) {
+      foreach ($results as $result) {
+        if ($result->getText() == $text) {
+          return;
+        }
+      }
+    }
+    throw new \Exception(sprintf('The text "%s" was not found in the "%s" element in the "%s" region on the page %s', $text, $tag, $region, $this->getSession()->getCurrentUrl()));
+  }
+
+  /**
+   * @Then /^I should see "([^"]*)" in the "([^"]*)" element with the "([^"]*)" CSS property set to "([^"]*)" in the "([^"]*)" region$/
+   */
+  public function assertRegionElementTextCss($text, $tag, $property, $value, $region) {
+    $regionObj = $this->getRegion($region);
+    $elements = $regionObj->findAll('css', $tag);
+    if (empty($elements)) {
+      throw new \Exception(sprintf('The element "%s" was not found in the "%s" region on the page %s', $tag, $region, $this->getSession()->getCurrentUrl()));
+    }
+
+    $found = FALSE;
+    foreach ($elements as $element) {
+      if ($element->getText() == $text) {
+        $found = TRUE;
+        break;
+      }
+    }
+    if (!$found) {
+      throw new \Exception(sprintf('The text "%s" was not found in the "%s" element in the "%s" region on the page %s', $text, $tag, $region, $this->getSession()->getCurrentUrl()));
+    }
+
+    if (!empty($property)) {
+      $style = $element->getAttribute('style');
+      if (strpos($style, "$property: $value") === FALSE) {
+        throw new \Exception(sprintf('The "%s" property does not equal "%s" on the element "%s" in the "%s" region on the page %s', $property, $value, $tag, $region, $this->getSession()->getCurrentUrl()));
+      }
+    }
+  }
+
+  /**
+   * @Then /^I should not see "([^"]*)" in the "([^"]*)" element in the "([^"]*)" region$/
+   */
+  public function assertNotRegionElementText($text, $tag, $region) {
+    $regionObj = $this->getRegion($region);
+    $results = $regionObj->findAll('css', $tag);
+    if (!empty($results)) {
+      foreach ($results as $result) {
+        if ($result->getText() == $text) {
+          throw new \Exception(sprintf('The text "%s" was found in the "%s" element in the "%s" region on the page %s', $text, $tag, $region, $this->getSession()->getCurrentUrl()));
+        }
+      }
+    }
+  }
+
+  /**
+   * @Then /^I should see the image alt "(?P<link>[^"]*)" in the "(?P<region>[^"]*)"(?:| region)$/
+   */
+  public function assertAltRegion($alt, $region) {
+    $regionObj = $this->getRegion($region);
+    $element = $regionObj->find('css', 'img');
+    $tmp = $element->getAttribute('alt');
+    if ($alt == $tmp) {
+      $result = $alt;
+    }
+    if (empty($result)) {
+      throw new \Exception(sprintf('No alt text matching "%s" in the "%s" region on the page %s', $alt, $region, $this->getSession()->getCurrentUrl()));
+    }
+  }
+
+  /**
+   * @AfterStep @javascript
+   *
+   * After every step in a @javascript scenario, we want to wait for AJAX
+   * loading to finish.
+   */
+  public function afterStep(StepEvent $event) {
+    if ($event->getResult() === 0) {
+      $this->iWaitForAJAX();
+    }
+  }
+
+  /**
+   * @Given /^(?:|I )wait(?:| for) (\d+) seconds?$/
+   *
+   * Wait for the given number of seconds. ONLY USE FOR DEBUGGING!
+   */
+  public function iWaitForSeconds($arg1) {
+    sleep($arg1);
+  }
+
+  /**
+   * @Given /^(?:|I )wait for AJAX loading to finish$/
+   *
+   * Wait for the jQuery AJAX loading to finish. ONLY USE FOR DEBUGGING!
+   */
+  public function iWaitForAJAX() {
+    $this->getSession()->wait(5000, 'jQuery != undefined && jQuery.active === 0');
+  }
+
+  /**
+   * Override MinkContext::fixStepArgument().
+   *
+   * Make it possible to use [random].
+   * If you want to use the previous random value [random:1].
+   */
+  protected function fixStepArgument($argument) {
+    $argument = str_replace('\\"', '"', $argument);
+
+    // Token replace the argument.
+    static $random = array();
+    for ($start = 0; ($start = strpos($argument, '[', $start)) !== FALSE; ) {
+      $end = strpos($argument, ']', $start);
+      if ($end === FALSE) {
+        break;
+      }
+      $name = substr($argument, $start + 1, $end - $start - 1);
+      if ($name == 'random') {
+        $this->vars[$name] = Random::name(8);
+        $random[] = $this->vars[$name];
+      }
+      // In order to test previous random values stored in the form,
+      // suppport random:n, where n is the number or random's ago
+      // to use, i.e., random:1 is the previous random value.
+      elseif (substr($name, 0, 7) == 'random:') {
+        $num = substr($name, 7);
+        if (is_numeric($num) && $num <= count($random)) {
+          $this->vars[$name] = $random[count($random) - $num];
+        }
+      }
+      if (isset($this->vars[$name])) {
+        $argument = substr_replace($argument, $this->vars[$name], $start, $end - $start + 1);
+        $start += strlen($this->vars[$name]);
+      }
+      else {
+        $start = $end + 1;
+      }
+    }
+
+    return $argument;
+  }
+}
diff --git a/tests/behat/features/general.feature b/tests/behat/features/general.feature
new file mode 100644
index 0000000..2bfbeb1
--- /dev/null
+++ b/tests/behat/features/general.feature
@@ -0,0 +1,21 @@
+Feature: General functionality
+  Scenario: Anonymous users cannot create content
+    Given I am on "/node/add"
+    Then I should see "Access denied. You must log in to view this page."
+      And I should not see "Add content"
+
+  Scenario: Anonymous users cannot create groups
+    Given I am on "/groups"
+    Then I should not see "Create a group"
+
+  Scenario: Anonymous users cannot create events
+    Given I am on "/events"
+    Then I should not see "List an event"
+
+  Scenario: Anonymous users can view user profiles
+    Given I am on "/user/1"
+    Then I should see "admin"
+
+  Scenario: Anonymous users can see the Commons footer
+    Given I am on "/"
+    Then I should see "A Commons Community, powered by Acquia"
diff --git a/tests/behat/features/login.feature b/tests/behat/features/login.feature
new file mode 100644
index 0000000..e6b9461
--- /dev/null
+++ b/tests/behat/features/login.feature
@@ -0,0 +1,15 @@
+Feature: Anonymous user login
+  Scenario: Admin user is able to login
+    Given I am on "/user"
+    When I fill in "admin" for "edit-name"
+      And I fill in "admin" for "edit-pass"
+      And I press "Log in"
+    Then I should see "Logout"
+
+  Scenario: User can request a new password if it has been lost
+    Given I am on "/user/password"
+    Then I should see "Request new password"
+    When I fill in "admin" for "edit-name"
+      And press "E-mail new password"
+    Then I should see "Further instructions have been sent to your e-mail address."
+      And I should see "Log in"
diff --git a/tests/bin/behat b/tests/bin/behat
deleted file mode 120000
index ec35dd9..0000000
--- a/tests/bin/behat
+++ /dev/null
@@ -1 +0,0 @@
-../vendor/behat/behat/bin/behat
\ No newline at end of file
diff --git a/tests/bin/webunit b/tests/bin/webunit
deleted file mode 120000
index 8f25c7b..0000000
--- a/tests/bin/webunit
+++ /dev/null
@@ -1 +0,0 @@
-../vendor/instaclick/php-webdriver/bin/webunit
\ No newline at end of file
diff --git a/tests/composer.json b/tests/composer.json
deleted file mode 100644
index 6ec192b..0000000
--- a/tests/composer.json
+++ /dev/null
@@ -1,9 +0,0 @@
-{
-  "require": {
-    "drupal/drupal-extension": "*"
-  },
-  "minimum-stability": "dev",
-  "config": {
-    "bin-dir": "bin/"
-  }
-}
diff --git a/tests/composer.lock b/tests/composer.lock
deleted file mode 100644
index 67c237b..0000000
--- a/tests/composer.lock
+++ /dev/null
@@ -1,1399 +0,0 @@
-{
-    "_readme": [
-        "This file locks the dependencies of your project to a known state",
-        "Read more about it at http://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file"
-    ],
-    "hash": "18ee939ac7bfb3e86dbca8caf6ba65f8",
-    "packages": [
-        {
-            "name": "behat/behat",
-            "version": "v2.4.6",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/Behat/Behat.git",
-                "reference": "f1d2964667cf4b21bb6c2c1564f26829a6954155"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/Behat/Behat/zipball/f1d2964667cf4b21bb6c2c1564f26829a6954155",
-                "reference": "f1d2964667cf4b21bb6c2c1564f26829a6954155",
-                "shasum": ""
-            },
-            "require": {
-                "behat/gherkin": "~2.2.9",
-                "php": ">=5.3.1",
-                "symfony/config": "~2.0",
-                "symfony/console": "~2.0",
-                "symfony/dependency-injection": "~2.0",
-                "symfony/event-dispatcher": "~2.0",
-                "symfony/finder": "~2.0",
-                "symfony/translation": "~2.0",
-                "symfony/yaml": "~2.0"
-            },
-            "require-dev": {
-                "phpunit/phpunit": "~3.7.19"
-            },
-            "suggest": {
-                "behat/mink-extension": "for integration with Mink testing framework",
-                "behat/symfony2-extension": "for integration with Symfony2 web framework",
-                "behat/yii-extension": "for integration with Yii web framework"
-            },
-            "bin": [
-                "bin/behat"
-            ],
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-develop": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Behat\\Behat": "src/"
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Konstantin Kudryashov",
-                    "email": "ever.zet@gmail.com",
-                    "homepage": "http://everzet.com"
-                }
-            ],
-            "description": "Scenario-oriented BDD framework for PHP 5.3",
-            "homepage": "http://behat.org/",
-            "keywords": [
-                "BDD",
-                "Behat",
-                "Symfony2"
-            ],
-            "time": "2013-06-06 10:46:48"
-        },
-        {
-            "name": "behat/gherkin",
-            "version": "dev-develop",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/Behat/Gherkin.git",
-                "reference": "27e290c82dad7c508afedd39b31d5cd355a6be2d"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/Behat/Gherkin/zipball/27e290c82dad7c508afedd39b31d5cd355a6be2d",
-                "reference": "27e290c82dad7c508afedd39b31d5cd355a6be2d",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.1",
-                "symfony/finder": "~2.0"
-            },
-            "require-dev": {
-                "symfony/config": "~2.0",
-                "symfony/translation": "~2.0",
-                "symfony/yaml": "~2.0"
-            },
-            "suggest": {
-                "symfony/config": "If you want to use Config component to manage resources",
-                "symfony/translation": "If you want to use Symfony2 translations adapter",
-                "symfony/yaml": "If you want to parse features, represented in YAML files"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-develop": "2.2-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Behat\\Gherkin": "src/"
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Konstantin Kudryashov",
-                    "email": "ever.zet@gmail.com",
-                    "homepage": "http://everzet.com"
-                }
-            ],
-            "description": "Gherkin DSL parser for PHP 5.3",
-            "homepage": "http://behat.org/",
-            "keywords": [
-                "BDD",
-                "Behat",
-                "DSL",
-                "Symfony2",
-                "parser"
-            ],
-            "time": "2013-08-11 18:27:33"
-        },
-        {
-            "name": "behat/mink",
-            "version": "dev-develop",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/Behat/Mink.git",
-                "reference": "ed95d7dabc28a2f9cac45ce662be0645116212f5"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/Behat/Mink/zipball/ed95d7dabc28a2f9cac45ce662be0645116212f5",
-                "reference": "ed95d7dabc28a2f9cac45ce662be0645116212f5",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.1",
-                "symfony/css-selector": "~2.0"
-            },
-            "suggest": {
-                "behat/mink-browserkit-driver": "extremely fast headless driver for Symfony\\Kernel-based apps (Sf2, Silex)",
-                "behat/mink-goutte-driver": "fast headless driver for any app without JS emulation",
-                "behat/mink-selenium2-driver": "slow, but JS-enabled driver for any app (requires Selenium2)",
-                "behat/mink-zombie-driver": "fast and JS-enabled headless driver for any app (requires node.js)"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-develop": "1.5.x-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Behat\\Mink": "src/"
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Konstantin Kudryashov",
-                    "email": "ever.zet@gmail.com",
-                    "homepage": "http://everzet.com"
-                }
-            ],
-            "description": "Web acceptance testing framework for PHP 5.3",
-            "homepage": "http://mink.behat.org/",
-            "keywords": [
-                "browser",
-                "testing",
-                "web"
-            ],
-            "time": "2013-08-26 17:55:59"
-        },
-        {
-            "name": "behat/mink-browserkit-driver",
-            "version": "dev-master",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/Behat/MinkBrowserKitDriver.git",
-                "reference": "6580790c180a34ae4344005bb9383b83588da851"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/Behat/MinkBrowserKitDriver/zipball/6580790c180a34ae4344005bb9383b83588da851",
-                "reference": "6580790c180a34ae4344005bb9383b83588da851",
-                "shasum": ""
-            },
-            "require": {
-                "behat/mink": "~1.5.0",
-                "php": ">=5.3.1",
-                "symfony/browser-kit": "~2.0",
-                "symfony/dom-crawler": "~2.0"
-            },
-            "require-dev": {
-                "silex/silex": "@dev"
-            },
-            "type": "mink-driver",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "1.1.x-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Behat\\Mink\\Driver": "src/"
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Konstantin Kudryashov",
-                    "email": "ever.zet@gmail.com",
-                    "homepage": "http://everzet.com"
-                }
-            ],
-            "description": "Symfony2 BrowserKit driver for Mink framework",
-            "homepage": "http://mink.behat.org/",
-            "keywords": [
-                "Mink",
-                "Symfony2",
-                "browser",
-                "testing"
-            ],
-            "time": "2013-09-06 09:22:29"
-        },
-        {
-            "name": "behat/mink-extension",
-            "version": "v1.1.4",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/Behat/MinkExtension.git",
-                "reference": "b4522f19fe96d423883f2e3650615e19d3a48c05"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/Behat/MinkExtension/zipball/b4522f19fe96d423883f2e3650615e19d3a48c05",
-                "reference": "b4522f19fe96d423883f2e3650615e19d3a48c05",
-                "shasum": ""
-            },
-            "require": {
-                "behat/behat": "~2.4.5",
-                "behat/mink": ">=1.4.3,<1.6-dev",
-                "php": ">=5.3.2"
-            },
-            "require-dev": {
-                "behat/mink-goutte-driver": "~1.0"
-            },
-            "type": "behat-extension",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "1.1.x-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Behat\\MinkExtension": "src/"
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Konstantin Kudryashov",
-                    "email": "ever.zet@gmail.com",
-                    "homepage": "http://everzet.com"
-                }
-            ],
-            "description": "Mink extension for Behat",
-            "homepage": "http://mink.behat.org",
-            "keywords": [
-                "browser",
-                "gui",
-                "test",
-                "web"
-            ],
-            "time": "2013-06-04 12:18:22"
-        },
-        {
-            "name": "behat/mink-goutte-driver",
-            "version": "dev-master",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/Behat/MinkGoutteDriver.git",
-                "reference": "fa1b073b48761464feb0b05e6825da44b20118d8"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/Behat/MinkGoutteDriver/zipball/fa1b073b48761464feb0b05e6825da44b20118d8",
-                "reference": "fa1b073b48761464feb0b05e6825da44b20118d8",
-                "shasum": ""
-            },
-            "require": {
-                "behat/mink-browserkit-driver": ">=1.0.5,<1.2.0",
-                "fabpot/goutte": "~1.0.1",
-                "php": ">=5.3.1"
-            },
-            "type": "mink-driver",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "1.0.x-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Behat\\Mink\\Driver": "src/"
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Konstantin Kudryashov",
-                    "email": "ever.zet@gmail.com",
-                    "homepage": "http://everzet.com"
-                }
-            ],
-            "description": "Goutte driver for Mink framework",
-            "homepage": "http://mink.behat.org/",
-            "keywords": [
-                "browser",
-                "goutte",
-                "headless",
-                "testing"
-            ],
-            "time": "2013-07-03 18:43:54"
-        },
-        {
-            "name": "behat/mink-selenium2-driver",
-            "version": "dev-master",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/Behat/MinkSelenium2Driver.git",
-                "reference": "c2a09b6357f0f685d2fd9843f04c692465d67d80"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/Behat/MinkSelenium2Driver/zipball/c2a09b6357f0f685d2fd9843f04c692465d67d80",
-                "reference": "c2a09b6357f0f685d2fd9843f04c692465d67d80",
-                "shasum": ""
-            },
-            "require": {
-                "behat/mink": "~1.5.0",
-                "instaclick/php-webdriver": "~1.0.12",
-                "php": ">=5.3.1"
-            },
-            "type": "mink-driver",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "1.1.x-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Behat\\Mink\\Driver": "src/"
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Konstantin Kudryashov",
-                    "email": "ever.zet@gmail.com",
-                    "homepage": "http://everzet.com"
-                },
-                {
-                    "name": "Pete Otaqui",
-                    "email": "pete@otaqui.com",
-                    "homepage": "https://github.com/pete-otaqui"
-                }
-            ],
-            "description": "Selenium2 (WebDriver) driver for Mink framework",
-            "homepage": "http://mink.behat.org/",
-            "keywords": [
-                "ajax",
-                "browser",
-                "javascript",
-                "selenium",
-                "testing",
-                "webdriver"
-            ],
-            "time": "2013-09-04 06:15:55"
-        },
-        {
-            "name": "drupal/drupal-extension",
-            "version": "dev-master",
-            "source": {
-                "type": "git",
-                "url": "http://git.drupal.org/project/drupalextension.git",
-                "reference": "346bfd1b59a80679e7d25d5967db2045379c1910"
-            },
-            "require": {
-                "behat/behat": "2.4.*@stable",
-                "behat/mink": "1.5.*@stable",
-                "behat/mink-extension": "*",
-                "behat/mink-goutte-driver": "*",
-                "behat/mink-selenium2-driver": "*"
-            },
-            "require-dev": {
-                "phpunit/phpunit": "3.7.*"
-            },
-            "type": "behat-extension",
-            "autoload": {
-                "psr-0": {
-                    "Drupal\\Component": "src/",
-                    "Drupal\\Driver": "src/",
-                    "Drupal\\Drupal": "src/",
-                    "Drupal\\Exception": "src/",
-                    "Drupal\\DrupalExtension": "src/"
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "GPL-2.0+"
-            ],
-            "authors": [
-                {
-                    "name": "Jonathan Hedstrom",
-                    "email": "jhedstrom@gmail.com",
-                    "homepage": "http://professorbikeybike.com"
-                }
-            ],
-            "description": "Drupal extension for Behat",
-            "homepage": "http://drupal.org/project/drupalextension",
-            "keywords": [
-                "drupal",
-                "test",
-                "web"
-            ],
-            "time": "2013-09-03 15:48:20"
-        },
-        {
-            "name": "fabpot/goutte",
-            "version": "dev-master",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/fabpot/Goutte.git",
-                "reference": "75c9f23c4122caf4ea3e87a42a00b471366e707f"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/fabpot/Goutte/zipball/75c9f23c4122caf4ea3e87a42a00b471366e707f",
-                "reference": "75c9f23c4122caf4ea3e87a42a00b471366e707f",
-                "shasum": ""
-            },
-            "require": {
-                "ext-curl": "*",
-                "guzzle/http": ">=3.0.5,<3.8-dev",
-                "php": ">=5.3.0",
-                "symfony/browser-kit": "~2.1",
-                "symfony/css-selector": "~2.1",
-                "symfony/dom-crawler": "~2.1",
-                "symfony/finder": "~2.1",
-                "symfony/process": "~2.1"
-            },
-            "require-dev": {
-                "guzzle/plugin-history": ">=3.0.5,<3.8-dev",
-                "guzzle/plugin-mock": ">=3.0.5,<3.8-dev"
-            },
-            "type": "application",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "1.0-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Goutte": "."
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                }
-            ],
-            "description": "A simple PHP Web Scraper",
-            "homepage": "https://github.com/fabpot/Goutte",
-            "keywords": [
-                "scraper"
-            ],
-            "time": "2013-08-16 06:03:22"
-        },
-        {
-            "name": "guzzle/common",
-            "version": "dev-master",
-            "target-dir": "Guzzle/Common",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/guzzle/common.git",
-                "reference": "bf73c87375f60861f8c7ccc7b95878023ade5306"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/guzzle/common/zipball/bf73c87375f60861f8c7ccc7b95878023ade5306",
-                "reference": "bf73c87375f60861f8c7ccc7b95878023ade5306",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.2",
-                "symfony/event-dispatcher": ">=2.1"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "3.7-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Guzzle\\Common": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "description": "Common libraries used by Guzzle",
-            "homepage": "http://guzzlephp.org/",
-            "keywords": [
-                "collection",
-                "common",
-                "event",
-                "exception"
-            ],
-            "time": "2013-09-08 21:09:18"
-        },
-        {
-            "name": "guzzle/http",
-            "version": "dev-master",
-            "target-dir": "Guzzle/Http",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/guzzle/http.git",
-                "reference": "1034125dfd906b73119e535f03153a62fccb1989"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/guzzle/http/zipball/1034125dfd906b73119e535f03153a62fccb1989",
-                "reference": "1034125dfd906b73119e535f03153a62fccb1989",
-                "shasum": ""
-            },
-            "require": {
-                "guzzle/common": "self.version",
-                "guzzle/parser": "self.version",
-                "guzzle/stream": "self.version",
-                "php": ">=5.3.2"
-            },
-            "suggest": {
-                "ext-curl": "*"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "3.7-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Guzzle\\Http": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Michael Dowling",
-                    "email": "mtdowling@gmail.com",
-                    "homepage": "https://github.com/mtdowling"
-                }
-            ],
-            "description": "HTTP libraries used by Guzzle",
-            "homepage": "http://guzzlephp.org/",
-            "keywords": [
-                "Guzzle",
-                "client",
-                "curl",
-                "http",
-                "http client"
-            ],
-            "time": "2013-09-06 11:34:26"
-        },
-        {
-            "name": "guzzle/parser",
-            "version": "dev-master",
-            "target-dir": "Guzzle/Parser",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/guzzle/parser.git",
-                "reference": "a25c2ddda1c52fb69a4ee56eb530b13ddd9573c2"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/guzzle/parser/zipball/a25c2ddda1c52fb69a4ee56eb530b13ddd9573c2",
-                "reference": "a25c2ddda1c52fb69a4ee56eb530b13ddd9573c2",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.2"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "3.7-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Guzzle\\Parser": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "description": "Interchangeable parsers used by Guzzle",
-            "homepage": "http://guzzlephp.org/",
-            "keywords": [
-                "URI Template",
-                "cookie",
-                "http",
-                "message",
-                "url"
-            ],
-            "time": "2013-07-11 22:46:03"
-        },
-        {
-            "name": "guzzle/stream",
-            "version": "dev-master",
-            "target-dir": "Guzzle/Stream",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/guzzle/stream.git",
-                "reference": "a86111d9ac7db31d65a053c825869409fe8fc83f"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/guzzle/stream/zipball/a86111d9ac7db31d65a053c825869409fe8fc83f",
-                "reference": "a86111d9ac7db31d65a053c825869409fe8fc83f",
-                "shasum": ""
-            },
-            "require": {
-                "guzzle/common": "self.version",
-                "php": ">=5.3.2"
-            },
-            "suggest": {
-                "guzzle/http": "To convert Guzzle request objects to PHP streams"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "3.7-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Guzzle\\Stream": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Michael Dowling",
-                    "email": "mtdowling@gmail.com",
-                    "homepage": "https://github.com/mtdowling"
-                }
-            ],
-            "description": "Guzzle stream wrapper component",
-            "homepage": "http://guzzlephp.org/",
-            "keywords": [
-                "Guzzle",
-                "component",
-                "stream"
-            ],
-            "time": "2013-07-30 22:07:23"
-        },
-        {
-            "name": "instaclick/php-webdriver",
-            "version": "dev-master",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/instaclick/php-webdriver.git",
-                "reference": "5ff757c6daf1cfc223928e860385952abbbdb531"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/instaclick/php-webdriver/zipball/5ff757c6daf1cfc223928e860385952abbbdb531",
-                "reference": "5ff757c6daf1cfc223928e860385952abbbdb531",
-                "shasum": ""
-            },
-            "require": {
-                "ext-curl": "*",
-                "php": ">=5.3.2"
-            },
-            "bin": [
-                "bin/webunit"
-            ],
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "1.0.x-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "WebDriver": "lib/"
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "Apache-2.0"
-            ],
-            "authors": [
-                {
-                    "name": "Justin Bishop",
-                    "email": "jubishop@gmail.com",
-                    "role": "Developer"
-                },
-                {
-                    "name": "Anthon Pang",
-                    "email": "apang@softwaredevelopment.ca",
-                    "role": "Fork Maintainer"
-                }
-            ],
-            "description": "PHP WebDriver for Selenium 2",
-            "homepage": "http://instaclick.com/",
-            "keywords": [
-                "browser",
-                "selenium",
-                "webdriver",
-                "webtest"
-            ],
-            "time": "2013-08-08 14:22:54"
-        },
-        {
-            "name": "symfony/browser-kit",
-            "version": "dev-master",
-            "target-dir": "Symfony/Component/BrowserKit",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/BrowserKit.git",
-                "reference": "3cb8886c463f8c3c2004ca97b0e71c5c9806e425"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/BrowserKit/zipball/3cb8886c463f8c3c2004ca97b0e71c5c9806e425",
-                "reference": "3cb8886c463f8c3c2004ca97b0e71c5c9806e425",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3",
-                "symfony/dom-crawler": "~2.0"
-            },
-            "require-dev": {
-                "symfony/css-selector": "~2.0",
-                "symfony/process": "~2.0"
-            },
-            "suggest": {
-                "symfony/process": ""
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\BrowserKit\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                }
-            ],
-            "description": "Symfony BrowserKit Component",
-            "homepage": "http://symfony.com",
-            "time": "2013-09-06 18:21:06"
-        },
-        {
-            "name": "symfony/config",
-            "version": "dev-master",
-            "target-dir": "Symfony/Component/Config",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/Config.git",
-                "reference": "e7e4a6d70c002f714805f23d29c4ccc018e953a4"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/Config/zipball/e7e4a6d70c002f714805f23d29c4ccc018e953a4",
-                "reference": "e7e4a6d70c002f714805f23d29c4ccc018e953a4",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3",
-                "symfony/filesystem": "~2.3"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\Config\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                }
-            ],
-            "description": "Symfony Config Component",
-            "homepage": "http://symfony.com",
-            "time": "2013-08-13 13:40:07"
-        },
-        {
-            "name": "symfony/console",
-            "version": "dev-master",
-            "target-dir": "Symfony/Component/Console",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/Console.git",
-                "reference": "148bbb43845296e288744543d1ff86e54e257657"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/Console/zipball/148bbb43845296e288744543d1ff86e54e257657",
-                "reference": "148bbb43845296e288744543d1ff86e54e257657",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "require-dev": {
-                "symfony/event-dispatcher": "~2.1"
-            },
-            "suggest": {
-                "symfony/event-dispatcher": ""
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\Console\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                }
-            ],
-            "description": "Symfony Console Component",
-            "homepage": "http://symfony.com",
-            "time": "2013-09-07 16:46:00"
-        },
-        {
-            "name": "symfony/css-selector",
-            "version": "dev-master",
-            "target-dir": "Symfony/Component/CssSelector",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/CssSelector.git",
-                "reference": "92157d5b14c74a4c598d3f1327d58d61869cc710"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/CssSelector/zipball/92157d5b14c74a4c598d3f1327d58d61869cc710",
-                "reference": "92157d5b14c74a4c598d3f1327d58d61869cc710",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\CssSelector\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                },
-                {
-                    "name": "Jean-François Simon",
-                    "email": "jeanfrancois.simon@sensiolabs.com"
-                }
-            ],
-            "description": "Symfony CssSelector Component",
-            "homepage": "http://symfony.com",
-            "time": "2013-07-21 20:19:01"
-        },
-        {
-            "name": "symfony/dependency-injection",
-            "version": "dev-master",
-            "target-dir": "Symfony/Component/DependencyInjection",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/DependencyInjection.git",
-                "reference": "2cae194406678c59dea923c7e979c56f223be820"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/DependencyInjection/zipball/2cae194406678c59dea923c7e979c56f223be820",
-                "reference": "2cae194406678c59dea923c7e979c56f223be820",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "require-dev": {
-                "symfony/config": "~2.2",
-                "symfony/yaml": "~2.0"
-            },
-            "suggest": {
-                "symfony/config": "",
-                "symfony/proxy-manager-bridge": "Generate service proxies to lazy load them",
-                "symfony/yaml": ""
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\DependencyInjection\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                }
-            ],
-            "description": "Symfony DependencyInjection Component",
-            "homepage": "http://symfony.com",
-            "time": "2013-09-06 18:21:06"
-        },
-        {
-            "name": "symfony/dom-crawler",
-            "version": "dev-master",
-            "target-dir": "Symfony/Component/DomCrawler",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/DomCrawler.git",
-                "reference": "b7e5d347a5c22d170616244bd015f7446ce43341"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/DomCrawler/zipball/b7e5d347a5c22d170616244bd015f7446ce43341",
-                "reference": "b7e5d347a5c22d170616244bd015f7446ce43341",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "require-dev": {
-                "symfony/css-selector": "~2.0"
-            },
-            "suggest": {
-                "symfony/css-selector": ""
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\DomCrawler\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                }
-            ],
-            "description": "Symfony DomCrawler Component",
-            "homepage": "http://symfony.com",
-            "time": "2013-08-19 20:44:22"
-        },
-        {
-            "name": "symfony/event-dispatcher",
-            "version": "dev-master",
-            "target-dir": "Symfony/Component/EventDispatcher",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/EventDispatcher.git",
-                "reference": "d38523224d1efb10056ba375dd25efb1f2d46434"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/EventDispatcher/zipball/d38523224d1efb10056ba375dd25efb1f2d46434",
-                "reference": "d38523224d1efb10056ba375dd25efb1f2d46434",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "require-dev": {
-                "symfony/dependency-injection": "~2.0"
-            },
-            "suggest": {
-                "symfony/dependency-injection": "",
-                "symfony/http-kernel": ""
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\EventDispatcher\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                }
-            ],
-            "description": "Symfony EventDispatcher Component",
-            "homepage": "http://symfony.com",
-            "time": "2013-08-19 20:44:22"
-        },
-        {
-            "name": "symfony/filesystem",
-            "version": "dev-master",
-            "target-dir": "Symfony/Component/Filesystem",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/Filesystem.git",
-                "reference": "da0dcf60b7307f68667fecef8ccbb2b070bda7cf"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/Filesystem/zipball/da0dcf60b7307f68667fecef8ccbb2b070bda7cf",
-                "reference": "da0dcf60b7307f68667fecef8ccbb2b070bda7cf",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\Filesystem\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                }
-            ],
-            "description": "Symfony Filesystem Component",
-            "homepage": "http://symfony.com",
-            "time": "2013-08-09 07:26:54"
-        },
-        {
-            "name": "symfony/finder",
-            "version": "dev-master",
-            "target-dir": "Symfony/Component/Finder",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/Finder.git",
-                "reference": "ad276bcd7378de41257550c42c4bc0c059783ef3"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/Finder/zipball/ad276bcd7378de41257550c42c4bc0c059783ef3",
-                "reference": "ad276bcd7378de41257550c42c4bc0c059783ef3",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\Finder\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                }
-            ],
-            "description": "Symfony Finder Component",
-            "homepage": "http://symfony.com",
-            "time": "2013-08-24 06:54:37"
-        },
-        {
-            "name": "symfony/process",
-            "version": "dev-master",
-            "target-dir": "Symfony/Component/Process",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/Process.git",
-                "reference": "f1386b09571aa886e3d51691442bee5554dc11da"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/Process/zipball/f1386b09571aa886e3d51691442bee5554dc11da",
-                "reference": "f1386b09571aa886e3d51691442bee5554dc11da",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\Process\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                }
-            ],
-            "description": "Symfony Process Component",
-            "homepage": "http://symfony.com",
-            "time": "2013-09-07 16:33:27"
-        },
-        {
-            "name": "symfony/translation",
-            "version": "dev-master",
-            "target-dir": "Symfony/Component/Translation",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/Translation.git",
-                "reference": "d204e9c4836c7ed910438c407c75f7f86157d53d"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/Translation/zipball/d204e9c4836c7ed910438c407c75f7f86157d53d",
-                "reference": "d204e9c4836c7ed910438c407c75f7f86157d53d",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "require-dev": {
-                "symfony/config": "~2.0",
-                "symfony/yaml": "~2.2"
-            },
-            "suggest": {
-                "symfony/config": "",
-                "symfony/yaml": ""
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\Translation\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                }
-            ],
-            "description": "Symfony Translation Component",
-            "homepage": "http://symfony.com",
-            "time": "2013-08-29 06:54:01"
-        },
-        {
-            "name": "symfony/yaml",
-            "version": "dev-master",
-            "target-dir": "Symfony/Component/Yaml",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/Yaml.git",
-                "reference": "6286e95889e326311ff90ae4f96ddc15d6db2c39"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/Yaml/zipball/6286e95889e326311ff90ae4f96ddc15d6db2c39",
-                "reference": "6286e95889e326311ff90ae4f96ddc15d6db2c39",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.4-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\Yaml\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                }
-            ],
-            "description": "Symfony Yaml Component",
-            "homepage": "http://symfony.com",
-            "time": "2013-08-29 06:54:01"
-        }
-    ],
-    "packages-dev": [
-
-    ],
-    "aliases": [
-
-    ],
-    "minimum-stability": "dev",
-    "stability-flags": [
-
-    ],
-    "platform": [
-
-    ],
-    "platform-dev": [
-
-    ]
-}
diff --git a/tests/features/bootstrap/FeatureContext.php b/tests/features/bootstrap/FeatureContext.php
deleted file mode 100644
index 10eaa38..0000000
--- a/tests/features/bootstrap/FeatureContext.php
+++ /dev/null
@@ -1,48 +0,0 @@
-<?php
-
-use Behat\Behat\Context\ClosuredContextInterface,
-Behat\Behat\Context\TranslatedContextInterface,
-Behat\Behat\Context\BehatContext,
-Behat\Behat\Exception\PendingException;
-use Behat\Gherkin\Node\PyStringNode,
-Behat\Gherkin\Node\TableNode;
-
-//
-// Require 3rd-party libraries here:
-//
-//   require_once 'PHPUnit/Autoload.php';
-//   require_once 'PHPUnit/Framework/Assert/Functions.php';
-//
-
-/**
-* Features context.
-*/
-class FeatureContext extends Drupal\DrupalExtension\Context\DrupalContext
-{
-  /**
-  * Initializes context.
-  * Every scenario gets its own context object.
-  *
-  * @param array $parameters context parameters (set them up through behat.yml)
-  */
-  public function __construct(array $parameters)
-  {
-    // Initialize your context here
-  }
-    
-  /**
-  * Take screenshot when step fails.
-  * Works only with Selenium2Driver.
-  *
-  * @AfterStep @javascript
-  */
-  public function takeScreenshotAfterFailedStep(Behat\Behat\Event\StepEvent $event) {
-    if (Behat\Behat\Event\StepEvent::FAILED === $event->getResult()) {
-      $step = $event->getStep();
-      $id = $step->getParent()->getTitle() . '.' . $step->getType() . ' ' . $step->getText();
-      $fileName = getenv("TRAVIS_BUILD_DIR") . '/fail_'.preg_replace('/[^a-zA-Z0-9-_\.]/','_', $id) . '.png';
-      $image = $this->getSession()->getScreenshot();
-      file_put_contents($fileName, $image);
-    }
-  }
-}
diff --git a/tests/features/installation.feature b/tests/features/installation.feature
deleted file mode 100644
index 90f43de..0000000
--- a/tests/features/installation.feature
+++ /dev/null
@@ -1,9 +0,0 @@
-Feature: Site installation
-  Scenario: Installation succeeded
-    Given I am on "/"
-    Then I should see "Oh hai"
-  
-  @javascript
-  Scenario: Installation succeeded with js enabled
-    Given I am on "/"
-    Then I should see "Oh hai"
diff --git a/themes/commons/commons_origins/.gitignore b/themes/commons/commons_origins/.gitignore
index 6173eab..8b86ab2 100644
--- a/themes/commons/commons_origins/.gitignore
+++ b/themes/commons/commons_origins/.gitignore
@@ -1,2 +1,3 @@
 /.sass-cache/
+.bundle
 .DS_Store
diff --git a/themes/commons/commons_origins/Gemfile b/themes/commons/commons_origins/Gemfile
new file mode 100644
index 0000000..996b525
--- /dev/null
+++ b/themes/commons/commons_origins/Gemfile
@@ -0,0 +1,7 @@
+# A sample Gemfile
+source "https://rubygems.org"
+
+# gem "rails"
+gem 'sass'
+gem 'compass'
+gem 'oily_png'
diff --git a/themes/commons/commons_origins/Gemfile.lock b/themes/commons/commons_origins/Gemfile.lock
new file mode 100644
index 0000000..2f03b5a
--- /dev/null
+++ b/themes/commons/commons_origins/Gemfile.lock
@@ -0,0 +1,20 @@
+GEM
+  remote: https://rubygems.org/
+  specs:
+    chunky_png (1.2.9)
+    compass (0.12.2)
+      chunky_png (~> 1.2)
+      fssm (>= 0.2.7)
+      sass (~> 3.1)
+    fssm (0.2.10)
+    oily_png (1.1.0)
+      chunky_png (~> 1.2.7)
+    sass (3.2.13)
+
+PLATFORMS
+  ruby
+
+DEPENDENCIES
+  compass
+  oily_png
+  sass
diff --git a/themes/commons/commons_origins/commons_origins.info b/themes/commons/commons_origins/commons_origins.info
index 4532f7e..60b5fcd 100644
--- a/themes/commons/commons_origins/commons_origins.info
+++ b/themes/commons/commons_origins/commons_origins.info
@@ -56,6 +56,15 @@
   ; unset_css[sites/all/modules/foobar_module/foobar_module.css] = 1
 
 
+;-----------// Breakpoints
+
+  breakpoints[Commons small portrait] = only screen and (max-width:320px)
+  breakpoints[Commons small landscape] = only screen and (min-width:321px) and (max-width:480px)
+  breakpoints[Commons medium portrait] = only screen and (min-width:481px) and (max-width:768px)
+  breakpoints[Commons medium landscape] = only screen and (min-width:769px) and (max-width:934px
+  breakpoints[Commons large] = only screen and (min-width:935px)
+
+
 ;----------// Scripts
 
   scripts[] = scripts/modernizr.js
diff --git a/themes/commons/commons_origins/css/commons-media.css b/themes/commons/commons_origins/css/commons-media.css
new file mode 100644
index 0000000..07e1a8d
--- /dev/null
+++ b/themes/commons/commons_origins/css/commons-media.css
@@ -0,0 +1,172 @@
+/**
+ * @file
+ * Style overrides for the Commons Media feature.
+ */
+.field-name-field-media-form {
+  margin-bottom: 10px;
+}
+
+.field-name-field-media .field-add-more-submit, #quicktabs-container-commons_bw .quicktabs-tabpage .field-name-field-media .field-add-more-submit {
+  margin: 10px 0;
+}
+
+table[id^="field-media-values"],
+table[id^="field-media-values"] thead,
+table[id^="field-media-values"] tbody,
+table[id^="field-media-values"] tr,
+table[id^="field-media-values"] th,
+table[id^="field-media-values"] td {
+  background-color: transparent;
+  border: none;
+}
+table[id^="field-media-values"] th {
+  padding: 0;
+}
+table[id^="field-media-values"] th label {
+  margin: 0;
+}
+table[id^="field-media-values"] td.field-multiple-drag {
+  width: 20px;
+}
+table[id^="field-media-values"] a.tabledrag-handle .handle {
+  margin: 0;
+}
+table[id^="field-media-values"] .form-item {
+  padding-left: 6.875em;
+}
+table[id^="field-media-values"] .media-widget .button {
+  display: block;
+}
+@media only screen and (min-width: 769px) {
+  table[id^="field-media-values"] .media-widget .button {
+    max-width: 50%;
+  }
+}
+
+.form-type-media .preview {
+  background: url('../images/icons-sfd37165efe.png') 0 -789px no-repeat;
+  width: 26px;
+  height: 20px;
+  display: inline-block;
+  margin-right: 3px;
+  position: relative;
+  top: 1px;
+  margin-right: 10px;
+}
+@media only screen and (max-width: 480px) {
+  .form-type-media .preview {
+    display: block;
+    float: none;
+    margin: 10px auto;
+  }
+  .form-type-media .button,
+  .form-type-media input[type="submit"] {
+    display: block;
+    float: none;
+    margin: 10px auto;
+    width: 100%;
+  }
+}
+
+.media-wrapper {
+  position: absolute;
+  overflow: hidden;
+  padding: 0;
+  border: 1px solid #555555;
+  min-width: 100%;
+  max-width: 100%;
+  -webkit-box-shadow: 0 0 0 0.5625em rgba(0, 0, 0, 0.2);
+  -moz-box-shadow: 0 0 0 0.5625em rgba(0, 0, 0, 0.2);
+  box-shadow: 0 0 0 0.5625em rgba(0, 0, 0, 0.2);
+  -webkit-box-sizing: border-box;
+  -moz-box-sizing: border-box;
+  box-sizing: border-box;
+}
+.media-wrapper,
+.media-wrapper .ui-corner-all {
+  -webkit-border-radius: 0;
+  -moz-border-radius: 0;
+  -ms-border-radius: 0;
+  -o-border-radius: 0;
+  border-radius: 0;
+}
+.media-wrapper .ui-dialog-title {
+  display: block;
+  margin: 0;
+  line-height: 1.5em;
+  font-size: 2.25em;
+  font-family: "Helvetica Neue", helvetica, "Segoe UI", segoe, "Ubuntu", "Droid Sans", "Arial", sans-serif;
+  font-weight: 200;
+}
+.media-wrapper .ui-dialog-titlebar {
+  position: relative;
+  padding: 0.70711em 1em 0;
+  border: none;
+  color: #848484;
+  background: #303030;
+}
+.media-wrapper .ui-dialog-titlebar-close {
+  position: absolute;
+  float: none;
+  display: block;
+  top: 0.35355em;
+  right: 0.35355em;
+  width: 1em;
+  height: 1em;
+  overflow: hidden;
+  margin: 0;
+  padding: 0;
+  text-align: center;
+  line-height: 1em;
+  color: white;
+  background: none;
+  font-weight: normal;
+}
+.media-wrapper .ui-dialog-titlebar-close:hover {
+  text-decoration: none;
+  border: none;
+}
+.media-wrapper .ui-dialog-titlebar-close:before {
+  content: "\2715";
+}
+.media-wrapper .ui-dialog-content {
+  position: relative;
+  border: 0;
+  background: none;
+  overflow: auto;
+  zoom: 1;
+}
+.media-wrapper .ui-dialog-buttonpane {
+  text-align: left;
+  border-width: 1px 0 0 0;
+  background-image: none;
+  margin: .5em 0 0 0;
+  padding: .3em 1em .5em .4em;
+}
+.media-wrapper .ui-dialog-buttonpane .ui-dialog-buttonset {
+  float: right;
+}
+.media-wrapper .ui-dialog-buttonpane button {
+  margin: .5em .4em .5em 0;
+  cursor: pointer;
+}
+.media-wrapper .ui-resizable-se {
+  width: 14px;
+  height: 14px;
+  right: 3px;
+  bottom: 3px;
+}
+.media-wrapper .ui-draggable .ui-dialog-titlebar {
+  cursor: move;
+}
+@media (min-width: 22.85714em) {
+  .media-wrapper {
+    min-width: 0;
+  }
+}
+@media (min-width: 28.57143em) {
+  .media-wrapper .ui-dialog-titlebar {
+    padding-right: 2em;
+    padding-left: 2em;
+  }
+}
diff --git a/themes/commons/commons_origins/css/global.styles.css b/themes/commons/commons_origins/css/global.styles.css
index 9fa7ba6..1572621 100644
--- a/themes/commons/commons_origins/css/global.styles.css
+++ b/themes/commons/commons_origins/css/global.styles.css
@@ -438,7 +438,7 @@ var {
 }
 
 .node-teaser.node-promoted {
-  background-image: url('../images/node-promoted-star.png?1379947793');
+  background-image: url('../images/node-promoted-star.png?1395768501');
   background-position: top right;
   background-repeat: no-repeat;
   background-color: #f7f7f7;
@@ -498,7 +498,7 @@ var {
   position: absolute;
   right: -5px;
   top: 10px;
-  background: url('../images/user_img_arrow.png?1379947793');
+  background: url('../images/user_img_arrow.png?1395768501');
 }
 .node .user-picture img, .comment .user-picture img, .privatemsg-message .user-picture img, .node
 .views-field-picture img, .comment
@@ -747,7 +747,7 @@ html.js input.form-autocomplete {
   padding-right: 20px;
 }
 html.js input.form-autocomplete.throbbing {
-  background-image: url('../images/commons-throbber.gif?1379947793');
+  background-image: url('../images/commons-throbber.gif?1395336282');
   background-position: right center;
 }
 
@@ -875,6 +875,7 @@ html.js fieldset.collapsed .fieldset-legend, html.js fieldset.collapsible .field
  * Button styles
  */
 /* Common styles for all buttons. */
+.button,
 button,
 [type="reset"],
 [type="submit"],
@@ -908,12 +909,14 @@ button,
   outline: 0;
   cursor: pointer;
 }
+.button:focus,
 button:focus,
 [type="reset"]:focus,
 [type="submit"]:focus,
 [type="button"]:focus,
 [class*="action-item"]:focus, .pane-commons-groups-commons-groups-create-group a:focus, .pane-commons-events-commons-events-create-event-link a:focus, [class*="action-item-small"]:focus, .commons-sign-up:focus,
-.commons-login:focus, [class*="action-item-large"]:focus, button:hover,
+.commons-login:focus, [class*="action-item-large"]:focus, .button:hover,
+button:hover,
 [type="reset"]:hover,
 [type="submit"]:hover,
 [type="button"]:hover,
@@ -921,6 +924,7 @@ button:focus,
 .commons-login:hover, [class*="action-item-large"]:hover {
   text-decoration: none;
 }
+.button:active,
 button:active,
 [type="reset"]:active,
 [type="submit"]:active,
@@ -932,6 +936,7 @@ button:active,
   box-shadow: inset rgba(0, 0, 0, 0.25) 0 1px 2px 0;
   text-decoration: none;
 }
+.button::-moz-focus-inner,
 button::-moz-focus-inner,
 [type="reset"]::-moz-focus-inner,
 [type="submit"]::-moz-focus-inner,
@@ -943,6 +948,7 @@ button::-moz-focus-inner,
 }
 
 /* Dimensions for the default button type. */
+.button,
 button,
 [type="reset"],
 [type="submit"],
@@ -965,6 +971,7 @@ button,
   font-size: 1.2em;
 }
 
+.button,
 button,
 [type="reset"],
 [type="submit"],
@@ -979,21 +986,25 @@ button,
   border-color: #cbcbcb;
   text-shadow: -1px 1px 2px white, -1px -1px 2px white, 1px -1px 2px white, 1px 1px 2px white;
 }
+.button,
 button,
 [type="reset"],
 [type="submit"],
 [type="button"],
-[class*="action-item"], .commons-login, button:link,
+[class*="action-item"], .commons-login, .button:link,
+button:link,
 [type="reset"]:link,
 [type="submit"]:link,
 [type="button"]:link,
-[class*="action-item"]:link, .commons-login:link, button:visited,
+[class*="action-item"]:link, .commons-login:link, .button:visited,
+button:visited,
 [type="reset"]:visited,
 [type="submit"]:visited,
 [type="button"]:visited,
 [class*="action-item"]:visited, .commons-login:visited {
   color: #323232;
 }
+.button:hover,
 button:hover,
 [type="reset"]:hover,
 [type="submit"]:hover,
@@ -1009,11 +1020,13 @@ button:hover,
   border-color: #b2b2b2;
   text-shadow: -1px 1px 2px #fefefe, -1px -1px 2px #fefefe, 1px -1px 2px #fefefe, 1px 1px 2px #fefefe;
 }
+.button:focus,
 button:focus,
 [type="reset"]:focus,
 [type="submit"]:focus,
 [type="button"]:focus,
-[class*="action-item"]:focus, .commons-login:focus, button:active,
+[class*="action-item"]:focus, .commons-login:focus, .button:active,
+button:active,
 [type="reset"]:active,
 [type="submit"]:active,
 [type="button"]:active,
@@ -1027,6 +1040,7 @@ button:focus,
   border-color: #cbcbcb;
   text-shadow: -1px 1px 2px white, -1px -1px 2px white, 1px -1px 2px white, 1px 1px 2px white;
 }
+[disabled].button,
 button[disabled],
 [disabled][type="reset"],
 [disabled][type="submit"],
@@ -1049,7 +1063,7 @@ button[disabled],
 .action-item-large-active,
 .action-item-large-active[type="reset"],
 .action-item-large-active[type="submit"],
-.action-item-large-active[type="button"], [class*="flag-commons-follow-"] .unflag-action {
+.action-item-large-active[type="button"], [class*="flag-commons-follow-"] a.unflag-action {
   background-color: #f3f3f3;
   -webkit-box-shadow: inset 0.1em 0.1em 0.2em #a6a6a6;
   -moz-box-shadow: inset 0.1em 0.1em 0.2em #a6a6a6;
@@ -1065,16 +1079,16 @@ button[disabled],
 .action-item-large-active,
 .action-item-large-active[type="reset"],
 .action-item-large-active[type="submit"],
-.action-item-large-active[type="button"], [class*="flag-commons-follow-"] .unflag-action, .action-item-active:link,
+.action-item-large-active[type="button"], [class*="flag-commons-follow-"] a.unflag-action, .action-item-active:link,
 .action-item-small-active:link,
-.action-item-large-active:link, [class*="flag-commons-follow-"] .unflag-action:link, .action-item-active:visited,
+.action-item-large-active:link, [class*="flag-commons-follow-"] a.unflag-action:link, .action-item-active:visited,
 .action-item-small-active:visited,
-.action-item-large-active:visited, [class*="flag-commons-follow-"] .unflag-action:visited {
+.action-item-large-active:visited, [class*="flag-commons-follow-"] a.unflag-action:visited {
   color: #272727;
 }
 .action-item-active:hover,
 .action-item-small-active:hover,
-.action-item-large-active:hover, [class*="flag-commons-follow-"] .unflag-action:hover {
+.action-item-large-active:hover, [class*="flag-commons-follow-"] a.unflag-action:hover {
   color: #343434;
   background-color: #e6e6e6;
   -webkit-box-shadow: inset 0.1em 0.1em 0.2em #9a9a9a;
@@ -1085,9 +1099,9 @@ button[disabled],
 }
 .action-item-active:focus,
 .action-item-small-active:focus,
-.action-item-large-active:focus, [class*="flag-commons-follow-"] .unflag-action:focus, .action-item-active:active,
+.action-item-large-active:focus, [class*="flag-commons-follow-"] a.unflag-action:focus, .action-item-active:active,
 .action-item-small-active:active,
-.action-item-large-active:active, [class*="flag-commons-follow-"] .unflag-action:active {
+.action-item-large-active:active, [class*="flag-commons-follow-"] a.unflag-action:active {
   background: #f3f3f3;
   -webkit-box-shadow: inset 0.1em 0.1em 0.2em #a6a6a6;
   -moz-box-shadow: inset 0.1em 0.1em 0.2em #a6a6a6;
@@ -1097,7 +1111,7 @@ button[disabled],
 }
 [disabled].action-item-active,
 [disabled].action-item-small-active,
-[disabled].action-item-large-active, [class*="flag-commons-follow-"] [disabled].unflag-action {
+[disabled].action-item-large-active, [class*="flag-commons-follow-"] a[disabled].unflag-action {
   color: silver;
   background: #f3f3f3;
   border-color: silver;
@@ -1245,6 +1259,7 @@ button[disabled],
   text-shadow: none;
 }
 
+.button,
 button,
 [type="reset"],
 [type="submit"],
@@ -1253,6 +1268,7 @@ button,
   max-width: 100%;
 }
 @media only screen and (max-width: 480px) {
+  .button:not(.action-item-inline, .action-item-merge),
   button:not(.action-item-inline, .action-item-merge),
   [type="reset"]:not(.action-item-inline, .action-item-merge),
   [type="submit"]:not(.action-item-inline, .action-item-merge),
@@ -1263,7 +1279,8 @@ button,
     margin: .5em 0;
   }
 }
-#panels-ipe-control-container button, #panels-ipe-control-container
+#panels-ipe-control-container .button, #panels-ipe-control-container
+button, #panels-ipe-control-container
 [type="reset"], #panels-ipe-control-container
 [type="submit"], #panels-ipe-control-container
 [type="button"], #panels-ipe-control-container
@@ -1361,7 +1378,7 @@ button,
 }
 
 .rate-commons-like-btn:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -599px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -563px no-repeat;
   width: 10px;
   height: 14px;
   display: inline-block;
@@ -1379,7 +1396,7 @@ button,
 }
 [class*="flag-commons-follow-"] .flag-action:before {
   content: "";
-  background: url('../images/icons-s0eb3728c55.png') 0 -982px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -1050px no-repeat;
   width: 13px;
   height: 11px;
   display: inline-block;
@@ -1395,10 +1412,16 @@ button,
 }
 
 /* Report as inappropriate */
+.flag-inappropriate-node,
+.flag-inappropriate-comment {
+  display: block;
+  clear: both;
+  margin: 1em 0 0;
+}
 .flag-inappropriate-node .flag-action:before,
 .flag-inappropriate-comment .flag-action:before {
   content: "";
-  background: url('../images/icons-s0eb3728c55.png') 0 -1136px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -1081px no-repeat;
   width: 12px;
   height: 10px;
   display: inline-block;
@@ -1413,7 +1436,7 @@ button,
 }
 .sharethis-buttons:before {
   content: "";
-  background: url('../images/icons-s0eb3728c55.png') 0 -918px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -958px no-repeat;
   width: 12px;
   height: 12px;
   display: inline-block;
@@ -1495,7 +1518,7 @@ button,
 }
 .comment-comments .action-item-small:before {
   content: "";
-  background: url('../images/icons-s0eb3728c55.png') 0 -1198px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -1238px no-repeat;
   width: 13px;
   height: 12px;
   display: inline-block;
@@ -1658,7 +1681,7 @@ button,
  * Generic styles for the more link
  */
 .more-link {
-  background-image: url('../images/icons/icon-more.png?1379947793');
+  background-image: url('../images/icons/icon-more.png?1395768501');
   background-repeat: no-repeat;
   min-height: 14px;
   padding: 0 0 0 1.7em;
@@ -1894,8 +1917,13 @@ h1.node-title a:hover {
   margin-left: -20px;
 }
 
-.row-type-event:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -821px no-repeat;
+.node-content-type:before {
+  content: "";
+}
+
+.row-type-event:before,
+.node-content-type-event:before {
+  background: url('../images/icons-sfd37165efe.png') 0 -661px no-repeat;
   width: 12px;
   height: 12px;
   display: inline-block;
@@ -1904,8 +1932,11 @@ h1.node-title a:hover {
   top: 1px;
 }
 
-.row-type-page:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -1230px no-repeat;
+.row-type-page:before,
+.node-content-type-page:before,
+.row-type-document:before,
+.node-content-type-document:before {
+  background: url('../images/icons-sfd37165efe.png') 0 -1302px no-repeat;
   width: 9px;
   height: 12px;
   display: inline-block;
@@ -1914,8 +1945,9 @@ h1.node-title a:hover {
   top: 1px;
 }
 
-.row-type-poll:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -758px no-repeat;
+.row-type-poll:before,
+.node-content-type-poll:before {
+  background: url('../images/icons-sfd37165efe.png') 0 -630px no-repeat;
   width: 11px;
   height: 11px;
   display: inline-block;
@@ -1924,8 +1956,9 @@ h1.node-title a:hover {
   top: 1px;
 }
 
-.row-type-post:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -1073px no-repeat;
+.row-type-post:before,
+.node-content-type-post:before {
+  background: url('../images/icons-sfd37165efe.png') 0 -1175px no-repeat;
   width: 11px;
   height: 11px;
   display: inline-block;
@@ -1935,8 +1968,10 @@ h1.node-title a:hover {
 }
 
 .row-type-question:before,
-.row-type-answer:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -694px no-repeat;
+.row-type-answer:before,
+.node-content-type-question:before,
+.node-content-type-answer:before {
+  background: url('../images/icons-sfd37165efe.png') 0 -597px no-repeat;
   width: 13px;
   height: 13px;
   display: inline-block;
@@ -1945,8 +1980,9 @@ h1.node-title a:hover {
   top: 1px;
 }
 
-.row-type-wiki:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -534px no-repeat;
+.row-type-wiki:before,
+.node-content-type-wiki:before {
+  background: url('../images/icons-sfd37165efe.png') 0 -396px no-repeat;
   width: 13px;
   height: 13px;
   display: inline-block;
@@ -2155,7 +2191,7 @@ h1.node-title a:hover {
 }
 .page-node .field-name-field-topics .field-item:before {
   content: "";
-  background: url('../images/icons-s0eb3728c55.png') 0 -1292px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -1364px no-repeat;
   width: 8px;
   height: 8px;
   display: inline-block;
@@ -2166,7 +2202,7 @@ h1.node-title a:hover {
 }
 .page-node .field-name-og-group-ref .field-item:before {
   content: "";
-  background: url('../images/icons-s0eb3728c55.png') 0 -1013px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -990px no-repeat;
   width: 8px;
   height: 8px;
   display: inline-block;
@@ -2203,7 +2239,7 @@ h1.node-title a:hover {
 
 .comments-title:before {
   content: "";
-  background: url('../images/icons-s0eb3728c55.png') 0 -46px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -46px no-repeat;
   width: 31px;
   height: 24px;
   display: inline-block;
@@ -2256,12 +2292,19 @@ h1.node-title a:hover {
   margin-bottom: .2em;
 }
 
+ul.comment-links {
+  margin: .7em 0;
+}
+ul.comment-links li {
+  padding-left: 0;
+}
+
 .comment-reply {
   float: right;
 }
 .comment-reply:before {
   content: "";
-  background: url('../images/icons-s0eb3728c55.png') 0 -1166px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -1206px no-repeat;
   width: 13px;
   height: 12px;
   display: inline-block;
@@ -2476,7 +2519,7 @@ ul.node-action-links a {
   width: 58px;
   height: 22px;
   display: inline-block;
-  background-image: url('../images/tag-featured.png?1379947793');
+  background-image: url('../images/tag-featured.png?1395768501');
   background-repeat: no-repeat;
   margin: 6px 0 0 5px;
 }
@@ -2485,7 +2528,7 @@ ul.node-action-links a {
   width: 27px;
   height: 22px;
   display: inline-block;
-  background-image: url('../images/tag-new.png?1379947793');
+  background-image: url('../images/tag-new.png?1395768501');
   background-repeat: no-repeat;
   margin: 4px 0 0 5px;
 }
@@ -2581,7 +2624,7 @@ ul.node-action-links a {
   }
 }
 .page-user .pane-user-field-facebook-url a:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -136px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -136px no-repeat;
   width: 26px;
   height: 26px;
   display: inline-block;
@@ -2591,7 +2634,7 @@ ul.node-action-links a {
 }
 @media only screen and (max-width: 480px) {
   .page-user .pane-user-field-facebook-url a {
-    background: url('../images/icons-s0eb3728c55.png') 0 -136px no-repeat;
+    background: url('../images/icons-sfd37165efe.png') 0 -136px no-repeat;
     width: 26px;
     height: 26px;
     display: inline-block;
@@ -2601,7 +2644,7 @@ ul.node-action-links a {
   }
 }
 .page-user .pane-user-field-linkedin-url a:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 0 no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 0 no-repeat;
   width: 26px;
   height: 26px;
   display: inline-block;
@@ -2611,7 +2654,7 @@ ul.node-action-links a {
 }
 @media only screen and (max-width: 480px) {
   .page-user .pane-user-field-linkedin-url a {
-    background: url('../images/icons-s0eb3728c55.png') 0 0 no-repeat;
+    background: url('../images/icons-sfd37165efe.png') 0 0 no-repeat;
     width: 26px;
     height: 26px;
     display: inline-block;
@@ -2621,7 +2664,7 @@ ul.node-action-links a {
   }
 }
 .page-user .pane-user-field-twitter-url a:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -90px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -90px no-repeat;
   width: 26px;
   height: 26px;
   display: inline-block;
@@ -2631,7 +2674,7 @@ ul.node-action-links a {
 }
 @media only screen and (max-width: 480px) {
   .page-user .pane-user-field-twitter-url a {
-    background: url('../images/icons-s0eb3728c55.png') 0 -90px no-repeat;
+    background: url('../images/icons-sfd37165efe.png') 0 -90px no-repeat;
     width: 26px;
     height: 26px;
     display: inline-block;
@@ -2761,7 +2804,7 @@ a:hover, a:focus {
   padding: 0;
 }
 #menu-bar.nav ul.menu li:hover, #menu-bar.nav ul.menu li.active-trail {
-  background: url('../images/main-nav-hover.png?1379947793') repeat-x left top;
+  background: url('../images/main-nav-hover.png?1395768501') repeat-x left top;
 }
 #menu-bar.nav ul.menu li:hover .arrow:before, #menu-bar.nav ul.menu li.active-trail .arrow:before {
   content: "";
@@ -2842,26 +2885,26 @@ a:hover, a:focus {
 }
 
 .main-menu-home a {
-  background: url('../images/icons/icon-home.png?1379947793') no-repeat center 10px;
+  background: url('../images/icons/icon-home.png?1395768501') no-repeat center 10px;
 }
 
 .main-menu-groups a {
-  background: url('../images/icons/icon-groups.png?1379947793') no-repeat center 10px;
+  background: url('../images/icons/icon-groups.png?1395768501') no-repeat center 10px;
 }
 
 .main-menu-events a {
-  background: url('../images/icons/icon-events.png?1379947793') no-repeat center 10px;
+  background: url('../images/icons/icon-events.png?1395768501') no-repeat center 10px;
 }
 
 .main-menu-people a {
-  background: url('../images/icons/icon-people.png?1379947793') no-repeat center 10px;
+  background: url('../images/icons/icon-people.png?1395768501') no-repeat center 10px;
 }
 
 #menu-bar.nav ul.menu li.main-menu-search {
   display: none;
 }
 #menu-bar.nav ul.menu li.main-menu-search a {
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat center 10px;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat center 10px;
 }
 @media only screen and (max-width: 768px) {
   #menu-bar.nav ul.menu li.main-menu-search {
@@ -2903,7 +2946,7 @@ ul.commons-utility-links li.last a {
 }
 
 .unread-invitations a {
-  background: url('../images/icons-s0eb3728c55.png') 0 -394px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -890px no-repeat;
   width: 14px;
   height: 14px;
   display: inline-block;
@@ -2914,7 +2957,7 @@ ul.commons-utility-links li.last a {
 
 .unread-messages a,
 .no-unread-messages a {
-  background: url('../images/icons-s0eb3728c55.png') 0 -500px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -924px no-repeat;
   width: 18px;
   height: 14px;
   display: inline-block;
@@ -3366,7 +3409,7 @@ ul.action-links {
   margin: 0;
 }
 .pane-commons-groups-commons-groups-create-group a:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -257px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -324px no-repeat;
   width: 15px;
   height: 15px;
   display: inline-block;
@@ -3577,7 +3620,7 @@ ul.action-links {
   cursor: pointer;
 }
 .commons-bw-create-choose span {
-  background: url('../images/icons-s0eb3728c55.png') 0 -1262px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -1334px no-repeat;
   width: 8px;
   height: 10px;
   display: inline-block;
@@ -3639,7 +3682,7 @@ ul.action-links {
   padding: 10px 10px 10px 27px;
 }
 .commons-bw-create-all-widget-types li .commons-polls-create:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -758px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -630px no-repeat;
   width: 11px;
   height: 11px;
   display: inline-block;
@@ -3652,7 +3695,7 @@ ul.action-links {
   top: 13px;
 }
 .commons-bw-create-all-widget-types li .commons-posts-create:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -1073px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -1175px no-repeat;
   width: 11px;
   height: 11px;
   display: inline-block;
@@ -3665,7 +3708,7 @@ ul.action-links {
   top: 13px;
 }
 .commons-bw-create-all-widget-types li .commons-wikis-create:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -534px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -396px no-repeat;
   width: 13px;
   height: 13px;
   display: inline-block;
@@ -3678,7 +3721,7 @@ ul.action-links {
   top: 13px;
 }
 .commons-bw-create-all-widget-types li .commons-events-create:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -821px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -661px no-repeat;
   width: 12px;
   height: 12px;
   display: inline-block;
@@ -3691,7 +3734,7 @@ ul.action-links {
   top: 13px;
 }
 .commons-bw-create-all-widget-types li .commons-q-a-create:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -694px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -597px no-repeat;
   width: 13px;
   height: 13px;
   display: inline-block;
@@ -3762,6 +3805,9 @@ ul.action-links {
 .commons-bw-partial-node-form.compact-form .form-item {
   margin: 0;
 }
+.commons-bw-partial-node-form.compact-form textarea {
+  resize: none;
+}
 .commons-bw-partial-node-form .user-picture {
   margin-top: 2.6em;
 }
@@ -3924,7 +3970,7 @@ ul.action-links {
   text-indent: -9999em;
 }
 .block-search .form-submit, .block-search .form-submit:hover {
-  background: transparent url('../images/icons/ico_search_wht.png?1379947793') no-repeat center center;
+  background: transparent url('../images/icons/ico_search_wht.png?1395768501') no-repeat center center;
   border: none;
 }
 @media only screen and (max-width: 768px) {
@@ -4380,9 +4426,13 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
   cursor: default;
 }
 #quicktabs-commons_follow_ui .flag-email-group a span,
+#quicktabs-commons_follow_ui .flag-email-group span span,
 #quicktabs-commons_follow_ui .flag-email-node a span,
+#quicktabs-commons_follow_ui .flag-email-node span span,
 #quicktabs-commons_follow_ui .flag-email-user a span,
-#quicktabs-commons_follow_ui .flag-email-term a span {
+#quicktabs-commons_follow_ui .flag-email-user span span,
+#quicktabs-commons_follow_ui .flag-email-term a span,
+#quicktabs-commons_follow_ui .flag-email-term span span {
   display: none;
 }
 
@@ -4390,13 +4440,13 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
  *  Placeholder styles
  */
 #menu-bar.nav .menu-item-193 a {
-  background-image: url('../images/icons/icon-home.png?1379947793');
+  background-image: url('../images/icons/icon-home.png?1395768501');
 }
 #menu-bar.nav .menu-item-194 a {
-  background-image: url('../images/icons/icon-groups.png?1379947793');
+  background-image: url('../images/icons/icon-groups.png?1395768501');
 }
 #menu-bar.nav .menu-item-195 a {
-  background-image: url('../images/icons/icon-events.png?1379947793');
+  background-image: url('../images/icons/icon-events.png?1395768501');
 }
 
 /**
@@ -4467,7 +4517,7 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
   margin: 0;
 }
 .pane-commons-events-commons-events-create-event-link a:before {
-  background: url('../images/icons-s0eb3728c55.png') 0 -326px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -429px no-repeat;
   width: 15px;
   height: 15px;
   display: inline-block;
@@ -4503,12 +4553,12 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 
 .action-item-search[type="submit"] {
   min-width: 15px;
-  background: #46bb2e url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #4fcd35), color-stop(100%, #3ea729));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#4fcd35, #3ea729);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#4fcd35, #3ea729);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#4fcd35, #3ea729);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#4fcd35, #3ea729);
+  background: #46bb2e url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #4fcd35), color-stop(100%, #3ea729));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#4fcd35, #3ea729);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#4fcd35, #3ea729);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#4fcd35, #3ea729);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#4fcd35, #3ea729);
   border-color: #27691a;
   text-shadow: -1px 1px 2px #379224, -1px -1px 2px #379224, 1px -1px 2px #379224, 1px 1px 2px #379224;
 }
@@ -4517,22 +4567,22 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .action-item-search[type="submit"]:hover {
   color: white;
-  background: #3ea729 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #46bb2e), color-stop(100%, #379224));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#46bb2e, #379224);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#46bb2e, #379224);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#46bb2e, #379224);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#46bb2e, #379224);
+  background: #3ea729 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #46bb2e), color-stop(100%, #379224));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#46bb2e, #379224);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#46bb2e, #379224);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#46bb2e, #379224);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#46bb2e, #379224);
   border-color: #184010;
   text-shadow: -1px 1px 2px #379224, -1px -1px 2px #379224, 1px -1px 2px #379224, 1px 1px 2px #379224;
 }
 .action-item-search[type="submit"]:focus, .action-item-search[type="submit"]:active {
-  background: #46bb2e url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #3ea729), color-stop(100%, #4fcd35));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#3ea729, #4fcd35);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#3ea729, #4fcd35);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#3ea729, #4fcd35);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#3ea729, #4fcd35);
+  background: #46bb2e url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #3ea729), color-stop(100%, #4fcd35));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#3ea729, #4fcd35);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#3ea729, #4fcd35);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#3ea729, #4fcd35);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#3ea729, #4fcd35);
   border-color: #27691a;
   text-shadow: -1px 1px 2px #379224, -1px -1px 2px #379224, 1px -1px 2px #379224, 1px 1px 2px #379224;
 }
@@ -4911,7 +4961,7 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 
 .message-contact:before {
   content: "";
-  background: url('../images/icons-s0eb3728c55.png') 0 -633px no-repeat;
+  background: url('../images/icons-sfd37165efe.png') 0 -531px no-repeat;
   width: 11px;
   height: 12px;
   display: inline-block;
@@ -5142,12 +5192,12 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-orange-red .action-item-search[type="submit"] {
   min-width: 15px;
-  background: #ff9126 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #ff9e40), color-stop(100%, #ff840c));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#ff9e40, #ff840c);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#ff9e40, #ff840c);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#ff9e40, #ff840c);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#ff9e40, #ff840c);
+  background: #ff9126 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #ff9e40), color-stop(100%, #ff840c));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#ff9e40, #ff840c);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#ff9e40, #ff840c);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#ff9e40, #ff840c);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#ff9e40, #ff840c);
   border-color: #bf5e00;
   text-shadow: -1px 1px 2px #f27700, -1px -1px 2px #f27700, 1px -1px 2px #f27700, 1px 1px 2px #f27700;
 }
@@ -5156,22 +5206,22 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-orange-red .action-item-search[type="submit"]:hover {
   color: white;
-  background: #ff840c url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #ff9126), color-stop(100%, #f27700));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#ff9126, #f27700);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#ff9126, #f27700);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#ff9126, #f27700);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#ff9126, #f27700);
+  background: #ff840c url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #ff9126), color-stop(100%, #f27700));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#ff9126, #f27700);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#ff9126, #f27700);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#ff9126, #f27700);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#ff9126, #f27700);
   border-color: #8c4500;
   text-shadow: -1px 1px 2px #f27700, -1px -1px 2px #f27700, 1px -1px 2px #f27700, 1px 1px 2px #f27700;
 }
 .palette-orange-red .action-item-search[type="submit"]:focus, .palette-orange-red .action-item-search[type="submit"]:active {
-  background: #ff9126 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #ff840c), color-stop(100%, #ff9e40));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#ff840c, #ff9e40);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#ff840c, #ff9e40);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#ff840c, #ff9e40);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#ff840c, #ff9e40);
+  background: #ff9126 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #ff840c), color-stop(100%, #ff9e40));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#ff840c, #ff9e40);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#ff840c, #ff9e40);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#ff840c, #ff9e40);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#ff840c, #ff9e40);
   border-color: #bf5e00;
   text-shadow: -1px 1px 2px #f27700, -1px -1px 2px #f27700, 1px -1px 2px #f27700, 1px 1px 2px #f27700;
 }
@@ -5352,12 +5402,12 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-magenta-blue .action-item-search[type="submit"] {
   min-width: 15px;
-  background: #0097bf url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #00abd9), color-stop(100%, #0083a6));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#00abd9, #0083a6);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#00abd9, #0083a6);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#00abd9, #0083a6);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#00abd9, #0083a6);
+  background: #0097bf url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #00abd9), color-stop(100%, #0083a6));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#00abd9, #0083a6);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#00abd9, #0083a6);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#00abd9, #0083a6);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#00abd9, #0083a6);
   border-color: #004659;
   text-shadow: -1px 1px 2px #006f8c, -1px -1px 2px #006f8c, 1px -1px 2px #006f8c, 1px 1px 2px #006f8c;
 }
@@ -5366,22 +5416,22 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-magenta-blue .action-item-search[type="submit"]:hover {
   color: white;
-  background: #0083a6 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #0097bf), color-stop(100%, #006f8c));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#0097bf, #006f8c);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#0097bf, #006f8c);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#0097bf, #006f8c);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#0097bf, #006f8c);
+  background: #0083a6 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #0097bf), color-stop(100%, #006f8c));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#0097bf, #006f8c);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#0097bf, #006f8c);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#0097bf, #006f8c);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#0097bf, #006f8c);
   border-color: #001e26;
   text-shadow: -1px 1px 2px #006f8c, -1px -1px 2px #006f8c, 1px -1px 2px #006f8c, 1px 1px 2px #006f8c;
 }
 .palette-magenta-blue .action-item-search[type="submit"]:focus, .palette-magenta-blue .action-item-search[type="submit"]:active {
-  background: #0097bf url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #0083a6), color-stop(100%, #00abd9));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#0083a6, #00abd9);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#0083a6, #00abd9);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#0083a6, #00abd9);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#0083a6, #00abd9);
+  background: #0097bf url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #0083a6), color-stop(100%, #00abd9));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#0083a6, #00abd9);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#0083a6, #00abd9);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#0083a6, #00abd9);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#0083a6, #00abd9);
   border-color: #004659;
   text-shadow: -1px 1px 2px #006f8c, -1px -1px 2px #006f8c, 1px -1px 2px #006f8c, 1px 1px 2px #006f8c;
 }
@@ -5562,12 +5612,12 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-blue-blue .action-item-search[type="submit"] {
   min-width: 15px;
-  background: #7ebd26 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #8cd22a), color-stop(100%, #70a822));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#8cd22a, #70a822);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#8cd22a, #70a822);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#8cd22a, #70a822);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#8cd22a, #70a822);
+  background: #7ebd26 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #8cd22a), color-stop(100%, #70a822));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#8cd22a, #70a822);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#8cd22a, #70a822);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#8cd22a, #70a822);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#8cd22a, #70a822);
   border-color: #456815;
   text-shadow: -1px 1px 2px #62931d, -1px -1px 2px #62931d, 1px -1px 2px #62931d, 1px 1px 2px #62931d;
 }
@@ -5576,22 +5626,22 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-blue-blue .action-item-search[type="submit"]:hover {
   color: white;
-  background: #70a822 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #7ebd26), color-stop(100%, #62931d));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#7ebd26, #62931d);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#7ebd26, #62931d);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#7ebd26, #62931d);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#7ebd26, #62931d);
+  background: #70a822 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #7ebd26), color-stop(100%, #62931d));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#7ebd26, #62931d);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#7ebd26, #62931d);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#7ebd26, #62931d);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#7ebd26, #62931d);
   border-color: #293e0c;
   text-shadow: -1px 1px 2px #62931d, -1px -1px 2px #62931d, 1px -1px 2px #62931d, 1px 1px 2px #62931d;
 }
 .palette-blue-blue .action-item-search[type="submit"]:focus, .palette-blue-blue .action-item-search[type="submit"]:active {
-  background: #7ebd26 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #70a822), color-stop(100%, #8cd22a));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#70a822, #8cd22a);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#70a822, #8cd22a);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#70a822, #8cd22a);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#70a822, #8cd22a);
+  background: #7ebd26 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #70a822), color-stop(100%, #8cd22a));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#70a822, #8cd22a);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#70a822, #8cd22a);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#70a822, #8cd22a);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#70a822, #8cd22a);
   border-color: #456815;
   text-shadow: -1px 1px 2px #62931d, -1px -1px 2px #62931d, 1px -1px 2px #62931d, 1px 1px 2px #62931d;
 }
@@ -5772,12 +5822,12 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-black-green .action-item-search[type="submit"] {
   min-width: 15px;
-  background: #4090ba url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #519cc3), color-stop(100%, #3981a7));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#519cc3, #3981a7);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#519cc3, #3981a7);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#519cc3, #3981a7);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#519cc3, #3981a7);
+  background: #4090ba url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #519cc3), color-stop(100%, #3981a7));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#519cc3, #3981a7);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#519cc3, #3981a7);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#519cc3, #3981a7);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#519cc3, #3981a7);
   border-color: #26556e;
   text-shadow: -1px 1px 2px #337394, -1px -1px 2px #337394, 1px -1px 2px #337394, 1px 1px 2px #337394;
 }
@@ -5786,22 +5836,22 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-black-green .action-item-search[type="submit"]:hover {
   color: white;
-  background: #3981a7 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #4090ba), color-stop(100%, #337394));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#4090ba, #337394);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#4090ba, #337394);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#4090ba, #337394);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#4090ba, #337394);
+  background: #3981a7 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #4090ba), color-stop(100%, #337394));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#4090ba, #337394);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#4090ba, #337394);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#4090ba, #337394);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#4090ba, #337394);
   border-color: #193848;
   text-shadow: -1px 1px 2px #337394, -1px -1px 2px #337394, 1px -1px 2px #337394, 1px 1px 2px #337394;
 }
 .palette-black-green .action-item-search[type="submit"]:focus, .palette-black-green .action-item-search[type="submit"]:active {
-  background: #4090ba url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #3981a7), color-stop(100%, #519cc3));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#3981a7, #519cc3);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#3981a7, #519cc3);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#3981a7, #519cc3);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#3981a7, #519cc3);
+  background: #4090ba url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #3981a7), color-stop(100%, #519cc3));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#3981a7, #519cc3);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#3981a7, #519cc3);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#3981a7, #519cc3);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#3981a7, #519cc3);
   border-color: #26556e;
   text-shadow: -1px 1px 2px #337394, -1px -1px 2px #337394, 1px -1px 2px #337394, 1px 1px 2px #337394;
 }
@@ -5982,12 +6032,12 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-brown-yellow .action-item-search[type="submit"] {
   min-width: 15px;
-  background: #e3ad40 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #e6b756), color-stop(100%, #e0a32a));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#e6b756, #e0a32a);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#e6b756, #e0a32a);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#e6b756, #e0a32a);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#e6b756, #e0a32a);
+  background: #e3ad40 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #e6b756), color-stop(100%, #e0a32a));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#e6b756, #e0a32a);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#e6b756, #e0a32a);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#e6b756, #e0a32a);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#e6b756, #e0a32a);
   border-color: #a57618;
   text-shadow: -1px 1px 2px #d1961f, -1px -1px 2px #d1961f, 1px -1px 2px #d1961f, 1px 1px 2px #d1961f;
 }
@@ -5996,22 +6046,22 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-brown-yellow .action-item-search[type="submit"]:hover {
   color: white;
-  background: #e0a32a url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #e3ad40), color-stop(100%, #d1961f));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#e3ad40, #d1961f);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#e3ad40, #d1961f);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#e3ad40, #d1961f);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#e3ad40, #d1961f);
+  background: #e0a32a url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #e3ad40), color-stop(100%, #d1961f));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#e3ad40, #d1961f);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#e3ad40, #d1961f);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#e3ad40, #d1961f);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#e3ad40, #d1961f);
   border-color: #785612;
   text-shadow: -1px 1px 2px #d1961f, -1px -1px 2px #d1961f, 1px -1px 2px #d1961f, 1px 1px 2px #d1961f;
 }
 .palette-brown-yellow .action-item-search[type="submit"]:focus, .palette-brown-yellow .action-item-search[type="submit"]:active {
-  background: #e3ad40 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #e0a32a), color-stop(100%, #e6b756));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#e0a32a, #e6b756);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#e0a32a, #e6b756);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#e0a32a, #e6b756);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#e0a32a, #e6b756);
+  background: #e3ad40 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #e0a32a), color-stop(100%, #e6b756));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#e0a32a, #e6b756);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#e0a32a, #e6b756);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#e0a32a, #e6b756);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#e0a32a, #e6b756);
   border-color: #a57618;
   text-shadow: -1px 1px 2px #d1961f, -1px -1px 2px #d1961f, 1px -1px 2px #d1961f, 1px 1px 2px #d1961f;
 }
@@ -6192,12 +6242,12 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-seafoam-orange .action-item-search[type="submit"] {
   min-width: 15px;
-  background: #b68800 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #d09b00), color-stop(100%, #9d7500));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#d09b00, #9d7500);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#d09b00, #9d7500);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#d09b00, #9d7500);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#d09b00, #9d7500);
+  background: #b68800 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #d09b00), color-stop(100%, #9d7500));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#d09b00, #9d7500);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#d09b00, #9d7500);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#d09b00, #9d7500);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#d09b00, #9d7500);
   border-color: #503c00;
   text-shadow: -1px 1px 2px #836200, -1px -1px 2px #836200, 1px -1px 2px #836200, 1px 1px 2px #836200;
 }
@@ -6206,22 +6256,22 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-seafoam-orange .action-item-search[type="submit"]:hover {
   color: white;
-  background: #9d7500 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #b68800), color-stop(100%, #836200));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#b68800, #836200);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#b68800, #836200);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#b68800, #836200);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#b68800, #836200);
+  background: #9d7500 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #b68800), color-stop(100%, #836200));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#b68800, #836200);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#b68800, #836200);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#b68800, #836200);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#b68800, #836200);
   border-color: #1d1600;
   text-shadow: -1px 1px 2px #836200, -1px -1px 2px #836200, 1px -1px 2px #836200, 1px 1px 2px #836200;
 }
 .palette-seafoam-orange .action-item-search[type="submit"]:focus, .palette-seafoam-orange .action-item-search[type="submit"]:active {
-  background: #b68800 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #9d7500), color-stop(100%, #d09b00));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#9d7500, #d09b00);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#9d7500, #d09b00);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#9d7500, #d09b00);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#9d7500, #d09b00);
+  background: #b68800 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #9d7500), color-stop(100%, #d09b00));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#9d7500, #d09b00);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#9d7500, #d09b00);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#9d7500, #d09b00);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#9d7500, #d09b00);
   border-color: #503c00;
   text-shadow: -1px 1px 2px #836200, -1px -1px 2px #836200, 1px -1px 2px #836200, 1px 1px 2px #836200;
 }
@@ -6402,12 +6452,12 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-black-blue-yellow .action-item-search[type="submit"] {
   min-width: 15px;
-  background: #d0a600 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #eaba00), color-stop(100%, #b69200));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#eaba00, #b69200);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#eaba00, #b69200);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#eaba00, #b69200);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#eaba00, #b69200);
+  background: #d0a600 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #eaba00), color-stop(100%, #b69200));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#eaba00, #b69200);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#eaba00, #b69200);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#eaba00, #b69200);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#eaba00, #b69200);
   border-color: #6a5500;
   text-shadow: -1px 1px 2px #9d7d00, -1px -1px 2px #9d7d00, 1px -1px 2px #9d7d00, 1px 1px 2px #9d7d00;
 }
@@ -6416,22 +6466,22 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-black-blue-yellow .action-item-search[type="submit"]:hover {
   color: white;
-  background: #b69200 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #d0a600), color-stop(100%, #9d7d00));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#d0a600, #9d7d00);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#d0a600, #9d7d00);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#d0a600, #9d7d00);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#d0a600, #9d7d00);
+  background: #b69200 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #d0a600), color-stop(100%, #9d7d00));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#d0a600, #9d7d00);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#d0a600, #9d7d00);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#d0a600, #9d7d00);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#d0a600, #9d7d00);
   border-color: #372c00;
   text-shadow: -1px 1px 2px #9d7d00, -1px -1px 2px #9d7d00, 1px -1px 2px #9d7d00, 1px 1px 2px #9d7d00;
 }
 .palette-black-blue-yellow .action-item-search[type="submit"]:focus, .palette-black-blue-yellow .action-item-search[type="submit"]:active {
-  background: #d0a600 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #b69200), color-stop(100%, #eaba00));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#b69200, #eaba00);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#b69200, #eaba00);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#b69200, #eaba00);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#b69200, #eaba00);
+  background: #d0a600 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #b69200), color-stop(100%, #eaba00));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#b69200, #eaba00);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#b69200, #eaba00);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#b69200, #eaba00);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#b69200, #eaba00);
   border-color: #6a5500;
   text-shadow: -1px 1px 2px #9d7d00, -1px -1px 2px #9d7d00, 1px -1px 2px #9d7d00, 1px 1px 2px #9d7d00;
 }
@@ -6612,12 +6662,12 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-brick-brick .action-item-search[type="submit"] {
   min-width: 15px;
-  background: #a12e1e url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #b63422), color-stop(100%, #8c281a));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#b63422, #8c281a);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#b63422, #8c281a);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#b63422, #8c281a);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#b63422, #8c281a);
+  background: #a12e1e url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #b63422), color-stop(100%, #8c281a));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#b63422, #8c281a);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#b63422, #8c281a);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#b63422, #8c281a);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#b63422, #8c281a);
   border-color: #4b150e;
   text-shadow: -1px 1px 2px #762216, -1px -1px 2px #762216, 1px -1px 2px #762216, 1px 1px 2px #762216;
 }
@@ -6626,22 +6676,22 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-brick-brick .action-item-search[type="submit"]:hover {
   color: white;
-  background: #8c281a url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #a12e1e), color-stop(100%, #762216));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#a12e1e, #762216);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#a12e1e, #762216);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#a12e1e, #762216);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#a12e1e, #762216);
+  background: #8c281a url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #a12e1e), color-stop(100%, #762216));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#a12e1e, #762216);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#a12e1e, #762216);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#a12e1e, #762216);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#a12e1e, #762216);
   border-color: #200906;
   text-shadow: -1px 1px 2px #762216, -1px -1px 2px #762216, 1px -1px 2px #762216, 1px 1px 2px #762216;
 }
 .palette-brick-brick .action-item-search[type="submit"]:focus, .palette-brick-brick .action-item-search[type="submit"]:active {
-  background: #a12e1e url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #8c281a), color-stop(100%, #b63422));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#8c281a, #b63422);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#8c281a, #b63422);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#8c281a, #b63422);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#8c281a, #b63422);
+  background: #a12e1e url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #8c281a), color-stop(100%, #b63422));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#8c281a, #b63422);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#8c281a, #b63422);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#8c281a, #b63422);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#8c281a, #b63422);
   border-color: #4b150e;
   text-shadow: -1px 1px 2px #762216, -1px -1px 2px #762216, 1px -1px 2px #762216, 1px 1px 2px #762216;
 }
@@ -6822,12 +6872,12 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-gray-lightgray-blue .action-item-search[type="submit"] {
   min-width: 15px;
-  background: #04b6e7 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #0ac7fb), color-stop(100%, #04a2ce));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#0ac7fb, #04a2ce);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#0ac7fb, #04a2ce);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#0ac7fb, #04a2ce);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#0ac7fb, #04a2ce);
+  background: #04b6e7 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #0ac7fb), color-stop(100%, #04a2ce));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#0ac7fb, #04a2ce);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#0ac7fb, #04a2ce);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#0ac7fb, #04a2ce);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#0ac7fb, #04a2ce);
   border-color: #026783;
   text-shadow: -1px 1px 2px #038fb5, -1px -1px 2px #038fb5, 1px -1px 2px #038fb5, 1px 1px 2px #038fb5;
 }
@@ -6836,22 +6886,22 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-gray-lightgray-blue .action-item-search[type="submit"]:hover {
   color: white;
-  background: #04a2ce url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #04b6e7), color-stop(100%, #038fb5));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#04b6e7, #038fb5);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#04b6e7, #038fb5);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#04b6e7, #038fb5);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#04b6e7, #038fb5);
+  background: #04a2ce url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #04b6e7), color-stop(100%, #038fb5));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#04b6e7, #038fb5);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#04b6e7, #038fb5);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#04b6e7, #038fb5);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#04b6e7, #038fb5);
   border-color: #014051;
   text-shadow: -1px 1px 2px #038fb5, -1px -1px 2px #038fb5, 1px -1px 2px #038fb5, 1px 1px 2px #038fb5;
 }
 .palette-gray-lightgray-blue .action-item-search[type="submit"]:focus, .palette-gray-lightgray-blue .action-item-search[type="submit"]:active {
-  background: #04b6e7 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #04a2ce), color-stop(100%, #0ac7fb));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#04a2ce, #0ac7fb);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#04a2ce, #0ac7fb);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#04a2ce, #0ac7fb);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#04a2ce, #0ac7fb);
+  background: #04b6e7 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #04a2ce), color-stop(100%, #0ac7fb));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#04a2ce, #0ac7fb);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#04a2ce, #0ac7fb);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#04a2ce, #0ac7fb);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#04a2ce, #0ac7fb);
   border-color: #026783;
   text-shadow: -1px 1px 2px #038fb5, -1px -1px 2px #038fb5, 1px -1px 2px #038fb5, 1px 1px 2px #038fb5;
 }
@@ -7032,12 +7082,12 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-black-white-red .action-item-search[type="submit"] {
   min-width: 15px;
-  background: #cc0000 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #e60000), color-stop(100%, #b30000));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#e60000, #b30000);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#e60000, #b30000);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#e60000, #b30000);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#e60000, #b30000);
+  background: #cc0000 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #e60000), color-stop(100%, #b30000));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#e60000, #b30000);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#e60000, #b30000);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#e60000, #b30000);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#e60000, #b30000);
   border-color: #660000;
   text-shadow: -1px 1px 2px #990000, -1px -1px 2px #990000, 1px -1px 2px #990000, 1px 1px 2px #990000;
 }
@@ -7046,22 +7096,22 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-black-white-red .action-item-search[type="submit"]:hover {
   color: white;
-  background: #b30000 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #cc0000), color-stop(100%, #990000));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#cc0000, #990000);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#cc0000, #990000);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#cc0000, #990000);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#cc0000, #990000);
+  background: #b30000 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #cc0000), color-stop(100%, #990000));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#cc0000, #990000);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#cc0000, #990000);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#cc0000, #990000);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#cc0000, #990000);
   border-color: #330000;
   text-shadow: -1px 1px 2px #990000, -1px -1px 2px #990000, 1px -1px 2px #990000, 1px 1px 2px #990000;
 }
 .palette-black-white-red .action-item-search[type="submit"]:focus, .palette-black-white-red .action-item-search[type="submit"]:active {
-  background: #cc0000 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #b30000), color-stop(100%, #e60000));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#b30000, #e60000);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#b30000, #e60000);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#b30000, #e60000);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#b30000, #e60000);
+  background: #cc0000 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #b30000), color-stop(100%, #e60000));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#b30000, #e60000);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#b30000, #e60000);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#b30000, #e60000);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#b30000, #e60000);
   border-color: #660000;
   text-shadow: -1px 1px 2px #990000, -1px -1px 2px #990000, 1px -1px 2px #990000, 1px 1px 2px #990000;
 }
@@ -7242,12 +7292,12 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-brown-burnt-orange .action-item-search[type="submit"] {
   min-width: 15px;
-  background: #e18728 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #e4933e), color-stop(100%, #d27a1d));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#e4933e, #d27a1d);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#e4933e, #d27a1d);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#e4933e, #d27a1d);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#e4933e, #d27a1d);
+  background: #e18728 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #e4933e), color-stop(100%, #d27a1d));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#e4933e, #d27a1d);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#e4933e, #d27a1d);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#e4933e, #d27a1d);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#e4933e, #d27a1d);
   border-color: #8f5314;
   text-shadow: -1px 1px 2px #bc6d1a, -1px -1px 2px #bc6d1a, 1px -1px 2px #bc6d1a, 1px 1px 2px #bc6d1a;
 }
@@ -7256,22 +7306,22 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 }
 .palette-brown-burnt-orange .action-item-search[type="submit"]:hover {
   color: white;
-  background: #d27a1d url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #e18728), color-stop(100%, #bc6d1a));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#e18728, #bc6d1a);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#e18728, #bc6d1a);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#e18728, #bc6d1a);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#e18728, #bc6d1a);
+  background: #d27a1d url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #e18728), color-stop(100%, #bc6d1a));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#e18728, #bc6d1a);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#e18728, #bc6d1a);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#e18728, #bc6d1a);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#e18728, #bc6d1a);
   border-color: #62390e;
   text-shadow: -1px 1px 2px #bc6d1a, -1px -1px 2px #bc6d1a, 1px -1px 2px #bc6d1a, 1px 1px 2px #bc6d1a;
 }
 .palette-brown-burnt-orange .action-item-search[type="submit"]:focus, .palette-brown-burnt-orange .action-item-search[type="submit"]:active {
-  background: #e18728 url('../images/icons/icon-search.png?1379947793') no-repeat;
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #d27a1d), color-stop(100%, #e4933e));
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -webkit-linear-gradient(#d27a1d, #e4933e);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -moz-linear-gradient(#d27a1d, #e4933e);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, -o-linear-gradient(#d27a1d, #e4933e);
-  background: url('../images/icons/icon-search.png?1379947793') no-repeat, linear-gradient(#d27a1d, #e4933e);
+  background: #e18728 url('../images/icons/icon-search.png?1395768501') no-repeat;
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-gradient(linear, 50% 0%, 50% 100%, color-stop(0%, #d27a1d), color-stop(100%, #e4933e));
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -webkit-linear-gradient(#d27a1d, #e4933e);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -moz-linear-gradient(#d27a1d, #e4933e);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, -o-linear-gradient(#d27a1d, #e4933e);
+  background: url('../images/icons/icon-search.png?1395768501') no-repeat, linear-gradient(#d27a1d, #e4933e);
   border-color: #8f5314;
   text-shadow: -1px 1px 2px #bc6d1a, -1px -1px 2px #bc6d1a, 1px -1px 2px #bc6d1a, 1px 1px 2px #bc6d1a;
 }
diff --git a/themes/commons/commons_origins/css/lt-ie9.css b/themes/commons/commons_origins/css/lt-ie9.css
index 4c6511f..d53f039 100644
--- a/themes/commons/commons_origins/css/lt-ie9.css
+++ b/themes/commons/commons_origins/css/lt-ie9.css
@@ -10,7 +10,7 @@ html {
 }
 
 body.front.not-logged-in #content {
-  background: url('../images/commons-drop.png?1379947793') right top no-repeat;
+  background: url('../images/commons-drop.png?1395768501') right top no-repeat;
 }
 body.front.not-logged-in .region-three-33-top {
   margin-bottom: 24px;
diff --git a/themes/commons/commons_origins/css/responsive.custom.css b/themes/commons/commons_origins/css/responsive.custom.css
index 0ca7794..fa8baef 100644
--- a/themes/commons/commons_origins/css/responsive.custom.css
+++ b/themes/commons/commons_origins/css/responsive.custom.css
@@ -129,7 +129,7 @@
  */
 @media only screen and (min-width: 768px) {
   body.front.not-logged-in #content {
-    background: url('../images/commons-drop.png?1379947793') right top no-repeat;
+    background: url('../images/commons-drop.png?1395768501') right top no-repeat;
   }
   body.front.not-logged-in .region-three-33-top {
     margin-bottom: 24px;
diff --git a/themes/commons/commons_origins/css/responsive.desktop.css b/themes/commons/commons_origins/css/responsive.desktop.css
index 295f711..3c4eb6a 100644
--- a/themes/commons/commons_origins/css/responsive.desktop.css
+++ b/themes/commons/commons_origins/css/responsive.desktop.css
@@ -7,19 +7,3 @@
  *
  * - Read the _README file in this directory, it contains useful help and other information.
  */
-.flag-inappropriate-node {
-  position: absolute;
-  margin: 0;
-  right: 0;
-  bottom: 0;
-  filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=0);
-  opacity: 0;
-  -webkit-transition: opacity 0.5s;
-  -moz-transition: opacity 0.5s;
-  -o-transition: opacity 0.5s;
-  transition: opacity 0.5s;
-}
-.node:hover .flag-inappropriate-node {
-  filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=100);
-  opacity: 1;
-}
diff --git a/themes/commons/commons_origins/images/bkg.png b/themes/commons/commons_origins/images/bkg.png
index 11d6fab..e81d5eb 100644
Binary files a/themes/commons/commons_origins/images/bkg.png and b/themes/commons/commons_origins/images/bkg.png differ
diff --git a/themes/commons/commons_origins/images/bkg_search.png b/themes/commons/commons_origins/images/bkg_search.png
index 485b3ba..da57115 100644
Binary files a/themes/commons/commons_origins/images/bkg_search.png and b/themes/commons/commons_origins/images/bkg_search.png differ
diff --git a/themes/commons/commons_origins/images/button.png b/themes/commons/commons_origins/images/button.png
index c465162..e064884 100755
Binary files a/themes/commons/commons_origins/images/button.png and b/themes/commons/commons_origins/images/button.png differ
diff --git a/themes/commons/commons_origins/images/commons-drop.png b/themes/commons/commons_origins/images/commons-drop.png
index 9371818..8cfe679 100644
Binary files a/themes/commons/commons_origins/images/commons-drop.png and b/themes/commons/commons_origins/images/commons-drop.png differ
diff --git a/themes/commons/commons_origins/images/commons-logo.png b/themes/commons/commons_origins/images/commons-logo.png
index b512b11..0285803 100644
Binary files a/themes/commons/commons_origins/images/commons-logo.png and b/themes/commons/commons_origins/images/commons-logo.png differ
diff --git a/themes/commons/commons_origins/images/footer-logo.png b/themes/commons/commons_origins/images/footer-logo.png
index 1ed345a..20fe355 100644
Binary files a/themes/commons/commons_origins/images/footer-logo.png and b/themes/commons/commons_origins/images/footer-logo.png differ
diff --git a/themes/commons/commons_origins/images/icons-s0eb3728c55.png b/themes/commons/commons_origins/images/icons-s0eb3728c55.png
deleted file mode 100644
index ad4f346..0000000
Binary files a/themes/commons/commons_origins/images/icons-s0eb3728c55.png and /dev/null differ
diff --git a/themes/commons/commons_origins/images/icons-sfd37165efe.png b/themes/commons/commons_origins/images/icons-sfd37165efe.png
new file mode 100644
index 0000000..2c5d73f
Binary files /dev/null and b/themes/commons/commons_origins/images/icons-sfd37165efe.png differ
diff --git a/themes/commons/commons_origins/images/icons/all.png b/themes/commons/commons_origins/images/icons/all.png
index ddf0b16..250416e 100644
Binary files a/themes/commons/commons_origins/images/icons/all.png and b/themes/commons/commons_origins/images/icons/all.png differ
diff --git a/themes/commons/commons_origins/images/icons/comments-dark.png b/themes/commons/commons_origins/images/icons/comments-dark.png
index 598bcd9..5e079ed 100644
Binary files a/themes/commons/commons_origins/images/icons/comments-dark.png and b/themes/commons/commons_origins/images/icons/comments-dark.png differ
diff --git a/themes/commons/commons_origins/images/icons/comments.png b/themes/commons/commons_origins/images/icons/comments.png
index 0bf7803..f6f3d5c 100644
Binary files a/themes/commons/commons_origins/images/icons/comments.png and b/themes/commons/commons_origins/images/icons/comments.png differ
diff --git a/themes/commons/commons_origins/images/icons/docs.png b/themes/commons/commons_origins/images/icons/docs.png
index 128d00e..9cd6875 100644
Binary files a/themes/commons/commons_origins/images/icons/docs.png and b/themes/commons/commons_origins/images/icons/docs.png differ
diff --git a/themes/commons/commons_origins/images/icons/facebook.png b/themes/commons/commons_origins/images/icons/facebook.png
index 45cb2f2..c5a51b9 100644
Binary files a/themes/commons/commons_origins/images/icons/facebook.png and b/themes/commons/commons_origins/images/icons/facebook.png differ
diff --git a/themes/commons/commons_origins/images/icons/follow-large.png b/themes/commons/commons_origins/images/icons/follow-large.png
index cb49e5e..30578a1 100644
Binary files a/themes/commons/commons_origins/images/icons/follow-large.png and b/themes/commons/commons_origins/images/icons/follow-large.png differ
diff --git a/themes/commons/commons_origins/images/icons/groups.png b/themes/commons/commons_origins/images/icons/groups.png
index a2316ee..35472c9 100644
Binary files a/themes/commons/commons_origins/images/icons/groups.png and b/themes/commons/commons_origins/images/icons/groups.png differ
diff --git a/themes/commons/commons_origins/images/icons/ico_arrow_wht.png b/themes/commons/commons_origins/images/icons/ico_arrow_wht.png
index c9a77e3..abc00fc 100644
Binary files a/themes/commons/commons_origins/images/icons/ico_arrow_wht.png and b/themes/commons/commons_origins/images/icons/ico_arrow_wht.png differ
diff --git a/themes/commons/commons_origins/images/icons/ico_search_wht.png b/themes/commons/commons_origins/images/icons/ico_search_wht.png
index 769ae94..bea84f1 100644
Binary files a/themes/commons/commons_origins/images/icons/ico_search_wht.png and b/themes/commons/commons_origins/images/icons/ico_search_wht.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-envelope.png b/themes/commons/commons_origins/images/icons/icon-envelope.png
index e5c77ca..a00cab9 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-envelope.png and b/themes/commons/commons_origins/images/icons/icon-envelope.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-events.png b/themes/commons/commons_origins/images/icons/icon-events.png
index c578eee..f1751b7 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-events.png and b/themes/commons/commons_origins/images/icons/icon-events.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-gray-alert.png b/themes/commons/commons_origins/images/icons/icon-gray-alert.png
index 072702b..ad56b42 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-gray-alert.png and b/themes/commons/commons_origins/images/icons/icon-gray-alert.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-gray-docs.png b/themes/commons/commons_origins/images/icons/icon-gray-docs.png
new file mode 100644
index 0000000..e63668c
Binary files /dev/null and b/themes/commons/commons_origins/images/icons/icon-gray-docs.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-gray-follow.png b/themes/commons/commons_origins/images/icons/icon-gray-follow.png
index 3adecd1..9bfdb91 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-gray-follow.png and b/themes/commons/commons_origins/images/icons/icon-gray-follow.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-gray-idea.png b/themes/commons/commons_origins/images/icons/icon-gray-idea.png
index 236709e..c60cd27 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-gray-idea.png and b/themes/commons/commons_origins/images/icons/icon-gray-idea.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-gray-poll.png b/themes/commons/commons_origins/images/icons/icon-gray-poll.png
index 136a984..fe2a38d 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-gray-poll.png and b/themes/commons/commons_origins/images/icons/icon-gray-poll.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-gray-post.png b/themes/commons/commons_origins/images/icons/icon-gray-post.png
index a68867e..b0585a8 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-gray-post.png and b/themes/commons/commons_origins/images/icons/icon-gray-post.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-gray-question.png b/themes/commons/commons_origins/images/icons/icon-gray-question.png
index c8aa662..47a66ac 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-gray-question.png and b/themes/commons/commons_origins/images/icons/icon-gray-question.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-groups-small.png b/themes/commons/commons_origins/images/icons/icon-groups-small.png
index c411350..8138129 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-groups-small.png and b/themes/commons/commons_origins/images/icons/icon-groups-small.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-groups.png b/themes/commons/commons_origins/images/icons/icon-groups.png
index a1420d0..6b5ba7d 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-groups.png and b/themes/commons/commons_origins/images/icons/icon-groups.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-home.png b/themes/commons/commons_origins/images/icons/icon-home.png
index 6310ba6..445995b 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-home.png and b/themes/commons/commons_origins/images/icons/icon-home.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-more.png b/themes/commons/commons_origins/images/icons/icon-more.png
index 226b9ab..dd24abb 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-more.png and b/themes/commons/commons_origins/images/icons/icon-more.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-people.png b/themes/commons/commons_origins/images/icons/icon-people.png
index 57baf80..e4684dd 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-people.png and b/themes/commons/commons_origins/images/icons/icon-people.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-person.png b/themes/commons/commons_origins/images/icons/icon-person.png
index 9b7ad86..ba254a9 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-person.png and b/themes/commons/commons_origins/images/icons/icon-person.png differ
diff --git a/themes/commons/commons_origins/images/icons/icon-search.png b/themes/commons/commons_origins/images/icons/icon-search.png
index a7a43c7..1177d54 100644
Binary files a/themes/commons/commons_origins/images/icons/icon-search.png and b/themes/commons/commons_origins/images/icons/icon-search.png differ
diff --git a/themes/commons/commons_origins/images/icons/ideas.png b/themes/commons/commons_origins/images/icons/ideas.png
index 565bd0c..1f1bc10 100644
Binary files a/themes/commons/commons_origins/images/icons/ideas.png and b/themes/commons/commons_origins/images/icons/ideas.png differ
diff --git a/themes/commons/commons_origins/images/icons/like.png b/themes/commons/commons_origins/images/icons/like.png
index bbd0eff..ea015ca 100644
Binary files a/themes/commons/commons_origins/images/icons/like.png and b/themes/commons/commons_origins/images/icons/like.png differ
diff --git a/themes/commons/commons_origins/images/icons/linkedin.png b/themes/commons/commons_origins/images/icons/linkedin.png
index 317d833..1619f7d 100644
Binary files a/themes/commons/commons_origins/images/icons/linkedin.png and b/themes/commons/commons_origins/images/icons/linkedin.png differ
diff --git a/themes/commons/commons_origins/images/icons/message.png b/themes/commons/commons_origins/images/icons/message.png
index f916eda..c6625f4 100644
Binary files a/themes/commons/commons_origins/images/icons/message.png and b/themes/commons/commons_origins/images/icons/message.png differ
diff --git a/themes/commons/commons_origins/images/icons/picture.png b/themes/commons/commons_origins/images/icons/picture.png
new file mode 100644
index 0000000..b487cc3
Binary files /dev/null and b/themes/commons/commons_origins/images/icons/picture.png differ
diff --git a/themes/commons/commons_origins/images/icons/polls.png b/themes/commons/commons_origins/images/icons/polls.png
index c71cc56..30351d8 100644
Binary files a/themes/commons/commons_origins/images/icons/polls.png and b/themes/commons/commons_origins/images/icons/polls.png differ
diff --git a/themes/commons/commons_origins/images/icons/posts.png b/themes/commons/commons_origins/images/icons/posts.png
index 5831a17..c124f00 100644
Binary files a/themes/commons/commons_origins/images/icons/posts.png and b/themes/commons/commons_origins/images/icons/posts.png differ
diff --git a/themes/commons/commons_origins/images/icons/qa.png b/themes/commons/commons_origins/images/icons/qa.png
index e20e104..91d3c80 100644
Binary files a/themes/commons/commons_origins/images/icons/qa.png and b/themes/commons/commons_origins/images/icons/qa.png differ
diff --git a/themes/commons/commons_origins/images/icons/share.png b/themes/commons/commons_origins/images/icons/share.png
index c13e153..7eb7174 100644
Binary files a/themes/commons/commons_origins/images/icons/share.png and b/themes/commons/commons_origins/images/icons/share.png differ
diff --git a/themes/commons/commons_origins/images/icons/spam.png b/themes/commons/commons_origins/images/icons/spam.png
index cacc120..018bfd0 100644
Binary files a/themes/commons/commons_origins/images/icons/spam.png and b/themes/commons/commons_origins/images/icons/spam.png differ
diff --git a/themes/commons/commons_origins/images/icons/tags.png b/themes/commons/commons_origins/images/icons/tags.png
index e24aacd..869c5af 100644
Binary files a/themes/commons/commons_origins/images/icons/tags.png and b/themes/commons/commons_origins/images/icons/tags.png differ
diff --git a/themes/commons/commons_origins/images/icons/twitter.png b/themes/commons/commons_origins/images/icons/twitter.png
index f31c69d..a9852ea 100644
Binary files a/themes/commons/commons_origins/images/icons/twitter.png and b/themes/commons/commons_origins/images/icons/twitter.png differ
diff --git a/themes/commons/commons_origins/images/icons/wikis.png b/themes/commons/commons_origins/images/icons/wikis.png
index bc99e65..ba3eb30 100644
Binary files a/themes/commons/commons_origins/images/icons/wikis.png and b/themes/commons/commons_origins/images/icons/wikis.png differ
diff --git a/themes/commons/commons_origins/images/jquery.selectBox-arrow.gif b/themes/commons/commons_origins/images/jquery.selectBox-arrow.gif
index 2796795..d8b7993 100755
Binary files a/themes/commons/commons_origins/images/jquery.selectBox-arrow.gif and b/themes/commons/commons_origins/images/jquery.selectBox-arrow.gif differ
diff --git a/themes/commons/commons_origins/images/logo-general.png b/themes/commons/commons_origins/images/logo-general.png
index febf20a..aa00b0a 100644
Binary files a/themes/commons/commons_origins/images/logo-general.png and b/themes/commons/commons_origins/images/logo-general.png differ
diff --git a/themes/commons/commons_origins/images/main-nav-arrow.png b/themes/commons/commons_origins/images/main-nav-arrow.png
index 5253570..0c78233 100644
Binary files a/themes/commons/commons_origins/images/main-nav-arrow.png and b/themes/commons/commons_origins/images/main-nav-arrow.png differ
diff --git a/themes/commons/commons_origins/images/main-nav-hover.png b/themes/commons/commons_origins/images/main-nav-hover.png
index 4a257cc..347b9cc 100644
Binary files a/themes/commons/commons_origins/images/main-nav-hover.png and b/themes/commons/commons_origins/images/main-nav-hover.png differ
diff --git a/themes/commons/commons_origins/images/node-promoted-star.png b/themes/commons/commons_origins/images/node-promoted-star.png
index cac6b7f..787d5f5 100644
Binary files a/themes/commons/commons_origins/images/node-promoted-star.png and b/themes/commons/commons_origins/images/node-promoted-star.png differ
diff --git a/themes/commons/commons_origins/images/palettes/default.png b/themes/commons/commons_origins/images/palettes/default.png
index aed9660..4034a02 100644
Binary files a/themes/commons/commons_origins/images/palettes/default.png and b/themes/commons/commons_origins/images/palettes/default.png differ
diff --git a/themes/commons/commons_origins/images/palettes/palette-black-blue-yellow.png b/themes/commons/commons_origins/images/palettes/palette-black-blue-yellow.png
index 5d22ebd..a305b9f 100755
Binary files a/themes/commons/commons_origins/images/palettes/palette-black-blue-yellow.png and b/themes/commons/commons_origins/images/palettes/palette-black-blue-yellow.png differ
diff --git a/themes/commons/commons_origins/images/palettes/palette-black-green.png b/themes/commons/commons_origins/images/palettes/palette-black-green.png
index d60fddb..a09ddbb 100755
Binary files a/themes/commons/commons_origins/images/palettes/palette-black-green.png and b/themes/commons/commons_origins/images/palettes/palette-black-green.png differ
diff --git a/themes/commons/commons_origins/images/palettes/palette-black-white-red.png b/themes/commons/commons_origins/images/palettes/palette-black-white-red.png
index ba498b9..9813fc9 100755
Binary files a/themes/commons/commons_origins/images/palettes/palette-black-white-red.png and b/themes/commons/commons_origins/images/palettes/palette-black-white-red.png differ
diff --git a/themes/commons/commons_origins/images/palettes/palette-blue-blue.png b/themes/commons/commons_origins/images/palettes/palette-blue-blue.png
index 9b7d83d..dc27585 100755
Binary files a/themes/commons/commons_origins/images/palettes/palette-blue-blue.png and b/themes/commons/commons_origins/images/palettes/palette-blue-blue.png differ
diff --git a/themes/commons/commons_origins/images/palettes/palette-brick-brick.png b/themes/commons/commons_origins/images/palettes/palette-brick-brick.png
index 871c39e..a96c53b 100755
Binary files a/themes/commons/commons_origins/images/palettes/palette-brick-brick.png and b/themes/commons/commons_origins/images/palettes/palette-brick-brick.png differ
diff --git a/themes/commons/commons_origins/images/palettes/palette-brown-burnt-orange.png b/themes/commons/commons_origins/images/palettes/palette-brown-burnt-orange.png
index abba19a..56416be 100755
Binary files a/themes/commons/commons_origins/images/palettes/palette-brown-burnt-orange.png and b/themes/commons/commons_origins/images/palettes/palette-brown-burnt-orange.png differ
diff --git a/themes/commons/commons_origins/images/palettes/palette-brown-yellow.png b/themes/commons/commons_origins/images/palettes/palette-brown-yellow.png
index 6bf69d3..908b9ba 100755
Binary files a/themes/commons/commons_origins/images/palettes/palette-brown-yellow.png and b/themes/commons/commons_origins/images/palettes/palette-brown-yellow.png differ
diff --git a/themes/commons/commons_origins/images/palettes/palette-gray-lightgray-blue.png b/themes/commons/commons_origins/images/palettes/palette-gray-lightgray-blue.png
index f05301a..8100c07 100755
Binary files a/themes/commons/commons_origins/images/palettes/palette-gray-lightgray-blue.png and b/themes/commons/commons_origins/images/palettes/palette-gray-lightgray-blue.png differ
diff --git a/themes/commons/commons_origins/images/palettes/palette-magenta-blue.png b/themes/commons/commons_origins/images/palettes/palette-magenta-blue.png
index 9a77647..6ba09a3 100755
Binary files a/themes/commons/commons_origins/images/palettes/palette-magenta-blue.png and b/themes/commons/commons_origins/images/palettes/palette-magenta-blue.png differ
diff --git a/themes/commons/commons_origins/images/palettes/palette-orange-red.png b/themes/commons/commons_origins/images/palettes/palette-orange-red.png
index 6963119..d1ca678 100755
Binary files a/themes/commons/commons_origins/images/palettes/palette-orange-red.png and b/themes/commons/commons_origins/images/palettes/palette-orange-red.png differ
diff --git a/themes/commons/commons_origins/images/palettes/palette-seafoam-orange.png b/themes/commons/commons_origins/images/palettes/palette-seafoam-orange.png
index 67a31af..230ada9 100755
Binary files a/themes/commons/commons_origins/images/palettes/palette-seafoam-orange.png and b/themes/commons/commons_origins/images/palettes/palette-seafoam-orange.png differ
diff --git a/themes/commons/commons_origins/images/tag-featured.png b/themes/commons/commons_origins/images/tag-featured.png
index 3e5d44e..01f2a1f 100644
Binary files a/themes/commons/commons_origins/images/tag-featured.png and b/themes/commons/commons_origins/images/tag-featured.png differ
diff --git a/themes/commons/commons_origins/images/tag-new.png b/themes/commons/commons_origins/images/tag-new.png
index 017796b..8e389f7 100644
Binary files a/themes/commons/commons_origins/images/tag-new.png and b/themes/commons/commons_origins/images/tag-new.png differ
diff --git a/themes/commons/commons_origins/images/user_img_arrow.png b/themes/commons/commons_origins/images/user_img_arrow.png
index 8773a12..570b31d 100644
Binary files a/themes/commons/commons_origins/images/user_img_arrow.png and b/themes/commons/commons_origins/images/user_img_arrow.png differ
diff --git a/themes/commons/commons_origins/sass/_post-icons.scss b/themes/commons/commons_origins/sass/_post-icons.scss
new file mode 100644
index 0000000..589f40f
--- /dev/null
+++ b/themes/commons/commons_origins/sass/_post-icons.scss
@@ -0,0 +1,73 @@
+//
+// @file
+// Apply icons for various post types.
+//
+// Any new content types should be added to this file if it has a special icon.
+// Any new content types will have .row-type-[type] and
+// .node-content-type-[type] associated with them. New icons can be added to
+// the images/icons directory. The the name of the file sans the .png extension
+// is the name to feed to the sprite_url_height_width() mixin.
+//
+
+/* Apply icons to row row types. */
+[class*="row-type-"] {
+  @include box-sizing(border-box);
+  padding-left: 20px;
+
+  &:before {
+    content: "";
+    float: left;
+    margin-top: .1em;
+    margin-left: -20px;
+  }
+}
+
+.node-content-type:before {
+  content: "";
+}
+
+.row-type-event,
+.node-content-type-event {
+  &:before {
+    @include sprite_url_height_width($icons, events);
+  }
+}
+
+.row-type-page,
+.node-content-type-page,
+.row-type-document,
+.node-content-type-document {
+  &:before {
+    @include sprite_url_height_width($icons, icon-gray-docs);
+  }
+}
+
+.row-type-poll,
+.node-content-type-poll {
+  &:before {
+    @include sprite_url_height_width($icons, polls);
+  }
+}
+
+.row-type-post,
+.node-content-type-post {
+  &:before {
+    @include sprite_url_height_width($icons, posts);
+  }
+}
+
+.row-type-question,
+.row-type-answer,
+.node-content-type-question,
+.node-content-type-answer {
+  &:before {
+    @include sprite_url_height_width($icons, qa);
+  }
+}
+
+.row-type-wiki,
+.node-content-type-wiki {
+  &:before {
+    @include sprite_url_height_width($icons, wikis);
+  }
+}
diff --git a/themes/commons/commons_origins/sass/commons-media.scss b/themes/commons/commons_origins/sass/commons-media.scss
new file mode 100644
index 0000000..4ce99dc
--- /dev/null
+++ b/themes/commons/commons_origins/sass/commons-media.scss
@@ -0,0 +1,194 @@
+/**
+ * @file
+ * Style overrides for the Commons Media feature.
+ */
+
+@import "base";
+
+.field-name-field-media-form {
+  margin-bottom: $gutter-width;
+}
+
+.field-name-field-media .field-add-more-submit {
+  &,
+  #quicktabs-container-commons_bw .quicktabs-tabpage & {
+    margin: $gutter-width 0;
+  }
+}
+
+table[id^="field-media-values"] {
+  &,
+  thead,
+  tbody,
+  tr,
+  th,
+  td {
+    background-color: transparent;
+    border: none;
+  }
+
+  th {
+    padding: 0;
+
+    label {
+      margin: 0;
+    }
+  }
+
+  td {
+    &.field-multiple-drag {
+      width: 20px;
+    }
+  }
+
+  a.tabledrag-handle .handle {
+    margin: 0;
+  }
+
+  .form-item {
+    padding-left: px-to-em(100px + $gutter-width);
+  }
+
+  .media-widget {
+    .button {
+      display: block;
+
+      @include respond(large) {
+        max-width: 50%;
+      }
+    }
+  }
+}
+
+.form-type-media {
+  .preview {
+    @include sprite_url_height_width($icons, picture);
+    margin-right: $gutter-width;
+  }
+
+  @include respond(only-small) {
+    .preview {
+      display: block;
+      float: none;
+      margin: 10px auto;
+    }
+
+    .button,
+    input[type="submit"] {
+      display: block;
+      float: none;
+      margin: 10px auto;
+      width: 100%;
+    }
+  }
+}
+
+// Override the default jQuery Dialog to match styles of Ember admin theme.
+// Once commons has a native style built and the module is set to use Commons
+// Origins, this can be removed.
+.media-wrapper {
+  position: absolute;
+  overflow: hidden;
+  padding: 0;
+  border: 1px solid #555555;
+  min-width: 100%;
+  max-width: 100%;
+  @include box-shadow(0 0 0 0.5625em rgba(0, 0, 0, 0.2));
+  @include box-sizing(border-box);
+
+  &,
+  .ui-corner-all {
+    @include border-radius(0);
+  }
+
+  .ui-dialog-title {
+    display: block;
+    margin: 0;
+    line-height: 1.5em;
+    font-size: 2.25em;
+    font-family: "Helvetica Neue", helvetica, "Segoe UI", segoe, "Ubuntu", "Droid Sans", "Arial", sans-serif;
+    font-weight: 200;
+  }
+
+  .ui-dialog-titlebar {
+    position: relative;
+    padding: 0.70711em 1em 0;
+    border: none;
+    color: #848484;
+    background: #303030;
+  }
+
+  .ui-dialog-titlebar-close {
+    position: absolute;
+    float: none;
+    display: block;
+    top: 0.35355em;
+    right: 0.35355em;
+    width: 1em;
+    height: 1em;
+    overflow: hidden;
+    margin: 0;
+    padding: 0;
+    text-align: center;
+    line-height: 1em;
+    color: white;
+    background: none;
+    font-weight: normal;
+
+    &:hover {
+      text-decoration: none;
+      border: none;
+    }
+
+    &:before {
+      content: "\2715";
+    }
+  }
+
+  .ui-dialog-content {
+    position: relative;
+    border: 0;
+    background: none;
+    overflow: auto;
+    zoom: 1;
+  }
+
+  .ui-dialog-buttonpane {
+    text-align: left;
+    border-width: 1px 0 0 0;
+    background-image: none;
+    margin: .5em 0 0 0;
+    padding: .3em 1em .5em .4em;
+
+    .ui-dialog-buttonset {
+      float: right;
+    }
+
+    button {
+      margin: .5em .4em .5em 0;
+      cursor: pointer;
+    }
+  }
+
+  .ui-resizable-se {
+    width: 14px;
+    height: 14px;
+    right: 3px;
+    bottom: 3px;
+  }
+
+  .ui-draggable .ui-dialog-titlebar {
+    cursor: move;
+  }
+
+  @media (min-width: 22.85714em) {
+    min-width: 0;
+  }
+
+  @media (min-width: 28.57143em) {
+    .ui-dialog-titlebar {
+      padding-right: 2em;
+      padding-left: 2em;
+    }
+  }
+}
diff --git a/themes/commons/commons_origins/sass/global.styles.scss b/themes/commons/commons_origins/sass/global.styles.scss
index b904a44..946215b 100755
--- a/themes/commons/commons_origins/sass/global.styles.scss
+++ b/themes/commons/commons_origins/sass/global.styles.scss
@@ -842,6 +842,7 @@ legend {
 // Generate the invisible classes that we will extend.
 @include buttons;
 
+.button,
 button,
 [type="reset"],
 [type="submit"],
@@ -1011,7 +1012,7 @@ button,
     }
   }
 
-  .unflag-action {
+  a.unflag-action {
     @extend %button-active;
   }
 
@@ -1027,6 +1028,10 @@ button,
 /* Report as inappropriate */
 .flag-inappropriate-node,
 .flag-inappropriate-comment, {
+  display: block;
+  clear: both;
+  margin: 1em 0 0;
+
   .flag-action {
     &:before {
       content: "";
@@ -1503,54 +1508,8 @@ h1.node-title {
   }
 }
 
-/* Apply icons to row row types. */
-[class*="row-type-"] {
-  @include box-sizing(border-box);
-  padding-left: 20px;
-
-  &:before {
-    content: "";
-    float: left;
-    margin-top: .1em;
-    margin-left: -20px;
-  }
-}
-
-.row-type-event {
-  &:before {
-    @include sprite_url_height_width($icons, events);
-  }
-}
-.row-type-page {
-  &:before {
-    @include sprite_url_height_width($icons, docs);
-  }
-}
-
-.row-type-poll {
-  &:before {
-    @include sprite_url_height_width($icons, polls);
-  }
-}
-
-.row-type-post {
-  &:before {
-    @include sprite_url_height_width($icons, posts);
-  }
-}
-
-.row-type-question,
-.row-type-answer {
-  &:before {
-    @include sprite_url_height_width($icons, qa);
-  }
-}
-
-.row-type-wiki {
-  &:before {
-    @include sprite_url_height_width($icons, wikis);
-  }
-}
+// Load the post icon styles.
+@import 'post-icons';
 
 /* Titles fields */
 .views-field-title {
@@ -1745,6 +1704,14 @@ h1.node-title {
   margin-bottom: .2em;
 }
 
+ul.comment-links {
+  margin: .7em 0;
+
+  li {
+    padding-left: 0;
+  }
+}
+
 .comment-reply {
   float: right;
 
@@ -3397,6 +3364,10 @@ body.page-node .pane-views-panes {
     .form-item {
       margin: 0;
     }
+
+    textarea {
+      resize: none;
+    }
   }
 
   .user-picture {
@@ -4111,7 +4082,10 @@ body.front.logged-in .view-commons-homepage-content .article.node {
       input {
         cursor: default;
       }
+    }
 
+    a,
+    span {
       span {
         display: none;
       }
diff --git a/themes/commons/commons_origins/sass/responsive.desktop.scss b/themes/commons/commons_origins/sass/responsive.desktop.scss
index 5d4f619..75eb2e7 100755
--- a/themes/commons/commons_origins/sass/responsive.desktop.scss
+++ b/themes/commons/commons_origins/sass/responsive.desktop.scss
@@ -11,16 +11,3 @@
  *
  * - Read the _README file in this directory, it contains useful help and other information.
  */
-
-.flag-inappropriate-node {
-  position: absolute;
-  margin: 0;
-  right: 0;
-  bottom: 0;
-  @include opacity(0);
-  @include transition(opacity 0.5s);
-
-  .node:hover & {
-    @include opacity(1);
-  }
-}
diff --git a/themes/commons/commons_origins/scripts/commons_origins.js b/themes/commons/commons_origins/scripts/commons_origins.js
index 43f28eb..2e05894 100644
--- a/themes/commons/commons_origins/scripts/commons_origins.js
+++ b/themes/commons/commons_origins/scripts/commons_origins.js
@@ -20,6 +20,22 @@ jQuery(document).ready(function($){
     });
   };
 
+  var set_disabled_checkboxes = function(){
+    $('#quicktabs-commons_follow_ui .flag-email-group span, #quicktabs-commons_follow_ui .flag-email-node span, #quicktabs-commons_follow_ui .flag-email-user span, #quicktabs-commons_follow_ui .flag-email-term span').each(function(){
+      var a_target = $(this).addClass('formatted-as-checkbox').removeClass('action-item-small action-item-small-active');
+
+      if (a_target.children('span').length === 0) {
+        a_target.wrapInner('<span></span>');
+      }
+
+      if (a_target.hasClass('flag-action') && a_target.children('input').length === 0) {
+        a_target.prepend('<input type="checkbox" disabled="disabled">');
+      } else if (a_target.children('input').length === 0) {
+        a_target.prepend('<input type="checkbox" disabled="disabled" checked>');
+      }
+    });
+  };
+
   $(document).delegate('.views-exposed-widgets .form-select', 'change', function() {
     $('.views-exposed-widgets').addClass('widget-changed');
   });
@@ -28,11 +44,15 @@ jQuery(document).ready(function($){
     $('.views-exposed-widgets').addClass('widgets-active');
   });
 
-  set_follow_checkboxes();
+  if($('#quicktabs-commons_follow_ui a.flag').length > 0) {
+      set_follow_checkboxes();
 
-  $(document).ajaxComplete(function(){
-    set_follow_checkboxes();
-  });
+      $(document).ajaxComplete(function(){
+        set_follow_checkboxes();
+      });
+  } else {
+      set_disabled_checkboxes();
+  }
 });
 
 (function ($) {
@@ -78,7 +98,7 @@ jQuery(document).ready(function($){
         });
       }
     }
-  }
+  };
 
   /**
    * Define a variable height on fieldsets to accommodate multi-line layouts.
@@ -94,12 +114,12 @@ jQuery(document).ready(function($){
 
         // Adjust the height on window resize.
         $(window).resize(function () {
-          var minHeight = $fieldset.find('legend').height();
+          var minHeight = fieldset.find('legend').height();
           fieldset.css('min-height', minHeight + 'px');
         });
       });
     }
-  }
+  };
 
   /**
    * Make an item follow the page when an item is in view.
@@ -133,7 +153,7 @@ jQuery(document).ready(function($){
         var filters = $(this),
             filterTrigger = $('<a/>', {'href': '#filter-drawer', 'class': 'filter-trigger', 'id': 'filter-drawer'}).text(Drupal.t('Filter results')),
             filterOverlay = $('<div/>', {'class': 'filter-overlay'}),
-            results = $('.search-results-content, .pane-search-result');
+            results = $('.search-results-content, .pane-search-result'),
             size = $(window).width(),
             triggerWidth = '';
 
@@ -199,5 +219,5 @@ jQuery(document).ready(function($){
         }
       });
     }
-  }
+  };
 })(jQuery);
diff --git a/themes/commons/commons_origins/template.php b/themes/commons/commons_origins/template.php
index 672c0af..c6bdbe4 100755
--- a/themes/commons/commons_origins/template.php
+++ b/themes/commons/commons_origins/template.php
@@ -50,6 +50,20 @@ function commons_origins_commons_utility_links_alter(&$element) {
 }
 
 /**
+ * Implements hook_preprocess_media_oembed().
+ */
+function commons_origins_preprocess_media_oembed(&$variables) {
+  $content = $variables['content'];
+  $type = $variables['type'];
+
+  // Video and rich type must have HTML content.
+  // Wrap the HTML content in a <div> to allow it to be made responsive.
+  if (in_array($type, array('video', 'rich'))) {
+    $variables['content'] = '<div class="oembed">' . $content . '</div>';
+  }
+}
+
+/**
  * Implements hook_preprocess_search_result().
  */
 function commons_origins_preprocess_search_result(&$variables, $hook) {
@@ -123,7 +137,6 @@ function commons_origins_preprocess_html(&$variables, $hook) {
   // Browser/platform sniff - adds body classes such as ipad, webkit, chrome
   // etc.
   $variables['classes_array'][] = css_browser_selector();
-
 }
 
 /**
@@ -263,6 +276,11 @@ function commons_origins_preprocess_page(&$variables, $hook) {
 
   $cf_pos = in_array('clearfix', $variables['branding_attributes_array']['class']);
   unset($variables['branding_attributes_array']['class'][$cf_pos]);
+
+  // Only load the media styles if Commons Media is enabled.
+  if (module_exists('commons_media')) {
+    drupal_add_css(drupal_get_path('theme', 'commons_origins') . '/css/commons-media.css', array('media' => 'screen', 'group' => CSS_THEME));
+  }
 }
 
 /**
@@ -270,12 +288,6 @@ function commons_origins_preprocess_page(&$variables, $hook) {
  */
 function commons_origins_preprocess_node(&$variables, $hook) {
   $node = $variables['node'];
-  $wrapper = entity_metadata_wrapper('node', $node);
-
-  // Append a feature label to featured node teasers.
-  if ($variables['teaser'] && $variables['promote']) {
-    $variables['submitted'] .= ' <span class="featured-node-tooltip">' . t('Featured') . ' ' . $variables['type'] . '</span>';
-  }
 
   // Some content does not get a user image on the full node.
   $no_avatar = array(
@@ -367,26 +379,6 @@ function commons_origins_preprocess_node(&$variables, $hook) {
     }
   }
 
-  // Replace the submitted text on nodes with something a bit more pertinent to
-  // the content type.
-  if (variable_get('node_submitted_' . $node->type, TRUE)) {
-    $node_type_info = node_type_get_type($variables['node']);
-    $placeholders = array(
-      '!type' => '<span class="node-content-type">' . check_plain($node_type_info->name) . '</span>',
-      '!user' => $variables['name'],
-      '!date' => $variables['date'],
-      '@interval' => format_interval(REQUEST_TIME - $node->created),
-    );
-
-    if (!empty($node->{OG_AUDIENCE_FIELD}) && $wrapper->{OG_AUDIENCE_FIELD}->count() == 1) {
-      $placeholders['!group'] = l($wrapper->{OG_AUDIENCE_FIELD}->get(0)->label(), 'node/' . $wrapper->{OG_AUDIENCE_FIELD}->get(0)->getIdentifier());
-      $variables['submitted'] = t('!type created @interval ago in the !group group by !user', $placeholders);
-    }
-    else {
-      $variables['submitted'] = t('!type created @interval ago by !user', $placeholders);
-    }
-  }
-
   // Add a class to the node when there is a logo image.
   if (!empty($variables['field_logo'])) {
     $variables['classes_array'][] = 'logo-available';
@@ -461,6 +453,19 @@ function commons_origins_process_comment_wrapper(&$variables, $hook) {
 }
 
 /**
+ * Implements hook_preprocess_comment().
+ */
+function commons_origins_preprocess_comment(&$variables, $hook) {
+  $variables['content']['links']['#attributes']['class'][] = 'comment-links';
+
+  // Push the reporting link to the end.
+  if (!empty($variables['content']['links']['flag']['#links']['flag-inappropriate_comment'])) {
+    $variables['content']['report_link'] = array('#markup' => $variables['content']['links']['flag']['#links']['flag-inappropriate_comment']['title']);
+    $variables['content']['links']['flag']['#links']['flag-inappropriate_comment']['#access'] = FALSE;
+  }
+}
+
+/**
  * Implements hook_preprocess_flag().
  */
 function commons_origins_preprocess_flag(&$variables, $hook) {
@@ -1270,3 +1275,60 @@ function commons_origins_preprocess_commons_search_solr_user_results(&$variables
   // Hide the results title.
   $variables['title_attributes_array']['class'][] = 'element-invisible';
 }
+
+/**
+ * Implements hook_process_node().
+ */
+function commons_origins_process_node(&$variables, $hook) {
+  $node = $variables['node'];
+  $wrapper = entity_metadata_wrapper('node', $node);
+
+  // Use timeago module for formatting node submission date
+  // if it is enabled and also configured to be used on nodes.
+  if (module_exists('timeago') && variable_get('timeago_node', 1)) {
+    $variables['date'] = timeago_format_date($node->created, $variables['date']);
+    $use_timeago_date_format = TRUE;
+  }
+  else {
+    $use_timeago_date_format = FALSE;
+  }
+
+  // Replace the submitted text on nodes with something a bit more pertinent to
+  // the content type.
+  if (variable_get('node_submitted_' . $node->type, TRUE)) {
+    $node_type_info = node_type_get_type($variables['node']);
+    $type_attributes = array('class' => array(
+      'node-content-type',
+      drupal_html_class('node-content-type-' . $node->type),
+    ));
+    $placeholders = array(
+      '!type' => '<span' . drupal_attributes($type_attributes) . '>' . check_plain($node_type_info->name) . '</span>',
+      '!user' => $variables['name'],
+      '!date' => $variables['date'],
+      '@interval' => format_interval(REQUEST_TIME - $node->created),
+    );
+    // Show what group the content belongs to if applicable.
+    if (!empty($node->{OG_AUDIENCE_FIELD}) && $wrapper->{OG_AUDIENCE_FIELD}->count() == 1) {
+      $placeholders['!group'] = l($wrapper->{OG_AUDIENCE_FIELD}->get(0)->label(), 'node/' . $wrapper->{OG_AUDIENCE_FIELD}->get(0)->getIdentifier());
+      if ($use_timeago_date_format == TRUE) {
+        $variables['submitted'] = t('!type created !date in the !group group by !user', $placeholders);
+      }
+      else {
+        $variables['submitted'] = t('!type created @interval ago in the !group group by !user', $placeholders);
+      }
+    }
+    else {
+      if ($use_timeago_date_format == TRUE) {
+        $variables['submitted'] = t('!type created !date by !user', $placeholders);
+      }
+      else {
+        $variables['submitted'] = t('!type created @interval ago by !user', $placeholders);
+      }
+    }
+  }
+
+  // Append a feature label to featured node teasers.
+  if ($variables['teaser'] && $variables['promote']) {
+    $variables['submitted'] .= ' <span class="featured-node-tooltip">' . t('Featured') . ' ' . $variables['type'] . '</span>';
+  }
+}
diff --git a/themes/commons/commons_origins/templates/comment/comment.tpl.php b/themes/commons/commons_origins/templates/comment/comment.tpl.php
index 9aa8b26..9c4c7d8 100644
--- a/themes/commons/commons_origins/templates/comment/comment.tpl.php
+++ b/themes/commons/commons_origins/templates/comment/comment.tpl.php
@@ -58,6 +58,8 @@
  *
  * @ingroup themeable
  */
+
+hide($content['report_link']);
 ?>
 <div class="<?php print $classes; ?> clearfix"<?php print $attributes; ?>>
   <h3 class="comment-title"><?php print $title; ?></h3>
@@ -77,5 +79,5 @@
     ?>
   </div>
   <?php print render($content['links']) ?>
-
+  <?php print render($content['report_link']); ?>
 </div>
