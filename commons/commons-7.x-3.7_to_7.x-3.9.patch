diff --git a/commons.api.php b/commons.api.php
new file mode 100644
index 0000000..f137568
--- /dev/null
+++ b/commons.api.php
@@ -0,0 +1,68 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by the Commons module.
+ */
+
+/**
+ * @addtogroup hooks
+ * @{
+ */
+
+/**
+ * Define entity integrations.
+ *
+ * This hook allows modules to register entity types and/or bundles that they
+ * provide for integration with Commons functionality. For example, a webform
+ * module could use it to register a form entity type and its "Test", "Survey"
+ * and "Suggestion" bundles.
+ *
+ * @return
+ *   An associative array of entity integrations whose keys define the entity
+ *   type for each integration and whose values contain the bundles which have
+ *   been integrated. Each bundle is itself an associative array, whose keys
+ *   define the type of integration to enable and whose values contain the
+ *   status of the integration. TRUE = enabled, FALSE = disabled.
+ *
+ * For a detailed usage example, see commons_q_a.module.
+ *
+ * @see hook_commons_entity_integration_alter()
+ */
+function hook_commons_entity_integration() {
+  // Register three of the webform entity's bundles for various integrations.
+  return array(
+    'webform' => array(
+      'test' => array(
+        'exclude_rate' => TRUE,
+      ),
+      'survey' => array(
+        'exclude_topics' => TRUE,
+      ),
+      'suggestion' => array(
+        'media' => TRUE,
+      ),
+    ),
+  );
+}
+
+/**
+ * Perform alterations on entity integrations.
+ *
+ * @param $integrations
+ *   An associative array of entity integrations whose keys define the entity
+ *   type for each integration and whose values contain the bundles which have
+ *   been integrated. Each bundle is itself an associative array, whose keys
+ *   define the type of integration to enable and whose values contain the
+ *   status of the integration. TRUE = enabled, FALSE = disabled.
+ *
+ * @see hook_commons_entity_integration()
+ */
+function hook_commons_entity_integration_alter(&$integrations) {
+  // Disable Media integration for the post content type.
+  $integrations['node']['post']['media'] = FALSE;
+}
+
+/**
+ * @} End of "addtogroup hooks".
+ */
diff --git a/commons.info b/commons.info
index e6d57a0..3d8e4c3 100644
--- a/commons.info
+++ b/commons.info
@@ -28,7 +28,6 @@ dependencies[] = taxonomy
 ; commons_media module post install will enable all of the media modules.
 dependencies[] = addressfield
 dependencies[] = addressfield_tokens
-dependencies[] = advancedqueue
 dependencies[] = breakpoints
 dependencies[] = ckeditor
 dependencies[] = ctools
diff --git a/commons.install b/commons.install
index f8ab310..10d4361 100644
--- a/commons.install
+++ b/commons.install
@@ -7,7 +7,6 @@
 
 /**
  * Implements hook_requirements().
- * Set minimum 'max_execution_time' requirement
  */
 function commons_requirements($phase) {
   $requirements = array();
@@ -50,11 +49,578 @@ function commons_requirements($phase) {
 }
 
 /**
- * Implements hook_install().
+ * Implements hook_install_tasks().
+ */
+function commons_install_tasks() {
+  //make sure we have more memory than 196M. if not lets try to increase it.
+  if (ini_get('memory_limit') != '-1' && ini_get('memory_limit') <= '196M' && ini_get('memory_limit') >= '128M') {
+    ini_set('memory_limit', '196M');
+  }
+
+  $demo_content = variable_get('commons_install_example_content', FALSE);
+  $acquia_connector = variable_get('commons_install_acquia_connector', FALSE);
+
+  return array(
+    'commons_acquia_connector_enable' => array(
+      'display' => FALSE,
+      'type' => '',
+      'run' => $acquia_connector ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
+    ),
+    'commons_installer_palette' => array(
+      'display_name' => st('Choose site color palette'),
+      'display' => TRUE,
+      'type' => 'form',
+      'function' => 'commons_installer_palette',
+    ),
+    'commons_anonymous_message_homepage' => array(
+      'display_name' => st('Enter Homepage welcome text'),
+      'display' => TRUE,
+      'type' => 'form',
+      'function' => 'commons_anonymous_welcome_text_form'
+    ),
+    'commons_revert_features' => array(
+      'display' => FALSE,
+    ),
+    'commons_demo_content' => array(
+      'display' => FALSE,
+      'type' => '',
+      'run' => $demo_content ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
+    ),
+    'commons_create_first_group' => array(
+      'display_name' => st('Create the first group'),
+      'display' => TRUE,
+      'type' => 'form',
+    ),
+    'commons_admin_permissions' => array(
+      'display' => FALSE,
+    ),
+  );
+}
+
+/**
+ * Implements hook_install_tasks_alter().
+ */
+function commons_install_tasks_alter(&$tasks, $install_state) {
+  global $install_state;
+
+  // Skip profile selection step.
+  $tasks['install_select_profile']['display'] = FALSE;
+
+  // Skip language selection install step and default language to English.
+  $tasks['install_select_locale']['display'] = FALSE;
+  $tasks['install_select_locale']['run'] = INSTALL_TASK_SKIP;
+  $install_state['parameters']['locale'] = 'en';
+
+  // Override "install_finished" task to redirect people to home page.
+  $tasks['install_finished']['function'] = 'commons_install_finished';
+}
+
+/**
+ * Override of install_finished() without the useless text.
+ */
+function commons_install_finished(&$install_state) {
+  // BEGIN copy/paste from install_finished().
+  // Remove the bookmarks flag
+  $flag = flag_get_flag('bookmarks');
+  if($flag) {
+    $flag->delete();
+    $flag->disable();
+    _flag_clear_cache();
+  }
+
+  // Flush all caches to ensure that any full bootstraps during the installer
+  // do not leave stale cached data, and that any content types or other items
+  // registered by the installation profile are registered correctly.
+  drupal_flush_all_caches();
+
+  // We make custom code for the footer here because we want people to be able to freely edit it if they wish.
+  $footer_body = '<p>'. st('A Commons Community, powered by <a href="@acquia">Acquia</a>', array('@acquia' => url('https://www.acquia.com/products-services/drupal-commons-social-business-software'))) . '</p>';
+
+  $footer_block_text = array(
+    'body' => st($footer_body),
+    'info' => st('Default Footer'),
+    'format' => 'full_html',
+  );
+
+  if (drupal_write_record('block_custom', $footer_block_text)) {
+    $footer_block = array(
+      'module' => 'block',
+      'delta' => $footer_block_text['bid'],
+      'theme' => 'commons_origins',
+      'visibility' => 0,
+      'region' => 'footer',
+      'status' => 1,
+      'pages' => 0,
+      'weight' => 1,
+      'title' => variable_get('site_name', 'Drupal Commons'),
+    );
+    drupal_write_record('block', $footer_block);
+  }
+
+  // Remember the profile which was used.
+  variable_set('install_profile', drupal_get_profile());
+
+  // Installation profiles are always loaded last
+  db_update('system')
+    ->fields(array('weight' => 1000))
+    ->condition('type', 'module')
+    ->condition('name', drupal_get_profile())
+    ->execute();
+
+  // Cache a fully-built schema.
+  drupal_get_schema(NULL, TRUE);
+
+  // Run cron to populate update status tables (if available) so that users
+  // will be warned if they've installed an out of date Drupal version.
+  // Will also trigger indexing of profile-supplied content or feeds.
+  drupal_cron_run();
+  // END copy/paste from install_finished().
+
+  if (isset($messages['error'])) {
+    $output = '<p>' . (isset($messages['error']) ? st('Review the messages above before visiting <a href="@url">your new site</a>.', array('@url' => url(''))) : st('<a href="@url">Visit your new site</a>.', array('@url' => url('')))) . '</p>';
+    return $output;
+  }
+  else {
+    // Since any module can add a drupal_set_message, this can bug the user
+    // when we redirect him to the front page. For a better user experience,
+    // remove all the message that are only "notifications" message.
+    drupal_get_messages('status', TRUE);
+    drupal_get_messages('completed', TRUE);
+
+    // If we don't install drupal using Drush, redirect the user to the front
+    // page.
+    if (!drupal_is_cli()) {
+      drupal_goto('');
+    }
+  }
+}
+
+/**
+ * Enable Acquia Connector module if selected on site configuration step.
+ */
+function commons_acquia_connector_enable() {
+  $modules = variable_get('commons_install_acquia_modules', array());
+  if (!empty($modules)) {
+    module_enable($modules, TRUE);
+  }
+}
+
+/**
+ * Allow users to select from a predefined list of color palettes during the
+ * commons installation.
+ */
+function commons_installer_palette() {
+  $form = array();
+  require_once(drupal_get_path('theme', 'commons_origins') . '/commons_origins.palettes.inc');
+
+  commons_origins_palettes_form($form);
+  $form['commons_origins_palette_fieldset']['#collapsible'] = FALSE;
+  $form['commons_origins_palette_fieldset']['#collapsed'] = FALSE;
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => st('Save color palette'),
+  );
+  drupal_add_css('profiles/commons/commons_installer.css');
+
+  return $form;
+}
+
+/**
+ * Configuration form to set welcome text for the anonymous site homepage.
+ */
+function commons_anonymous_welcome_text_form() {
+  $form['commons_anonymous_welcome_explanation'] = array(
+    '#markup' => '<h2>' . st('Homepage welcome text') . '</h2>' . st("Below, enter text that will be shown on your community's homepage to help new visitors understand what your community is about and why they should join. The image below shows an example of how this text will appear. You can always change this text later."),
+    '#weight' => -1,
+  );
+  $form['commons_anonymous_welcome_example'] = array(
+    '#markup' => theme('image', array('path' => 'profiles/commons/images/commons_homepage_text_example.png', 'alt' => 'Home page example', 'alt' => 'Home page example')),
+    '#weight' => 0,
+  );
+
+  $form['commons_anonymous_welcome_title'] = array(
+    '#type' => 'textfield',
+    '#title' => st('Welcome headline'),
+    '#description' => st('A short description of the community that visitors can understand at a glance.'),
+    '#required' => TRUE,
+    '#default_value' => st('Welcome to our community'),
+  );
+
+  $form['commons_anonymous_welcome_body'] = array(
+    '#type' => 'textarea',
+    '#title' => st('Welcome body text'),
+    '#description' => st('Enter a couple of sentences elaborating about your community.'),
+    '#required' => TRUE,
+    '#default_value' => st('Share your thoughts, find answers to your questions.'),
+  );
+
+  $form['commons_install_example_content'] = array(
+    '#type' => 'checkbox',
+    '#title' => st('Install example content'),
+    '#description' => st('Install Commons with example content so that you can get a sense of what your site will look like once it becomes more active. Example content includes a group, a few users and content for that group. Example content can be modified or deleted like normal content.'),
+    '#default_value' => TRUE
+  );
+
+  $form['commons_anonymous_welcome_submit'] = array(
+    '#type'  => 'submit',
+    '#value' => st('Save and continue')
+  );
+
+  return $form;
+}
+
+/**
+ * Save the configuration form for set welcome text for anonymous users.
+ * @see commons_anonymous_welcome_text_form()
+ */
+function commons_anonymous_welcome_text_form_submit($form_id, &$form_state) {
+  variable_set('commons_anonymous_welcome_title', $form_state['values']['commons_anonymous_welcome_title']);
+  variable_set('commons_anonymous_welcome_body', $form_state['values']['commons_anonymous_welcome_body']);
+  variable_set('commons_install_example_content', $form_state['values']['commons_install_example_content']);
+}
+
+/*
+ * Revert Features after the installation.
+ */
+function commons_revert_features() {
+  // Revert Features components to ensure that they are in their default states.
+  $revert = array(
+    'commons_follow' => array('field_base'),
+    'commons_groups' => array('field_instance', 'field_base'),
+    'commons_trusted_contacts' => array('field_instance', 'field_base'),
+    'commons_wikis' => array('og_features_permission'),
+    'commons_wysiwyg' => array('user_permission', 'ckeditor_profile'),
+    'commons_events' => array('og_features_permission' , 'field_base'),
+    'commons_polls' => array('og_features_permission'),
+    'commons_q_a' => array('og_features_permission', 'field_base'),
+    'commons_posts' => array('og_features_permission'),
+  );
+
+  features_revert($revert);
+}
+
+/**
+ * This function generates demo content.
+ */
+function commons_demo_content() {
+
+  // Reset the Flag cache.
+  flag_get_flags(NULL, NULL, NULL, TRUE);
+
+  // Create demo Users
+  $demo_users = array(
+    'Jeff Noyes' => 'Jeff Noyes',
+    'Drew Robertson' => 'Drew Robertson',
+    'Lisa Rex' => 'Lisa Rex',
+    'Katelyn Fogarty' => 'Katelyn Fogarty',
+    'Dharmesh Mistry' => 'Dharmesh Mistry',
+    'Erica Ligeski' => 'Erica Ligeski',
+  );
+
+  foreach ($demo_users as $name) {
+    list($first_name, $last_name)  = explode(" ", $name);
+    $normalize_name = commons_normalize_name($name);
+    $password = user_password(8);
+
+    $fields = array(
+      'name' => $name,
+      'mail' => "{$normalize_name}@example.com",
+      'pass' => $password,
+      'status' => 1,
+      'init' => "{$normalize_name}@example.com",
+      'roles' => array(
+        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
+      ),
+    );
+
+    $fields['field_name_first'][LANGUAGE_NONE][0]['value'] = $first_name;
+    $fields['field_name_last'][LANGUAGE_NONE][0]['value'] = $last_name;
+
+    $demo_users[$name] = user_save('', $fields);
+
+    // Add avatars to demo Users.
+    commons_add_user_avatar($demo_users[$name]);
+  }
+
+  // Demo Content.
+
+  // Group: Boston
+  $boston_group = new stdClass();
+  $boston_group->type = 'group';
+  node_object_prepare($boston_group);
+
+  $boston_group->title = 'Boston';
+  $boston_group->body[LANGUAGE_NONE][0]['value'] = commons_veggie_ipsum();
+  $boston_group->uid = $demo_users['Jeff Noyes']->uid;
+  $boston_group->language = LANGUAGE_NONE;
+  $boston_group->created = time() - 604800;
+  $boston_group->status = 1;
+  node_save($boston_group);
+
+  // Group: New York City
+  $nyc_group = new stdClass();
+  $nyc_group->type = 'group';
+  node_object_prepare($nyc_group);
+
+  $nyc_group->title = 'New York City';
+  $nyc_group->body[LANGUAGE_NONE][0]['value'] = commons_veggie_ipsum();
+  $nyc_group->uid = $demo_users['Drew Robertson']->uid;
+  $nyc_group->language = LANGUAGE_NONE;
+  $nyc_group->status = 1;
+  // Make the group 1 week old:
+  $nyc_group->created = time() - 604800;
+  node_save($nyc_group);
+
+
+  // Post: Best brunch places in Cambridge
+  $post = new stdClass();
+  $post->type = 'post';
+  node_object_prepare($post);
+
+  $post->title = 'Best brunch places in Cambridge';
+  $post->uid = $demo_users['Lisa Rex']->uid;
+  $post->language = LANGUAGE_NONE;
+  // 1:30 ago.
+  $post->created = time() - 5400;
+  $post->body[LANGUAGE_NONE][0]['value'] = "My aunt and I have been trying a lot of brunch places in Cambridge. Here's our favorites: <ul><li>North Street Grille for their breads
+<li>Mixtura for the souffles
+<li>The Neighborhood Restaurant for the vast quantities of food
+<li>City Girl Cafe for the ambiance <li>Bom Cafe for granola";
+  $post->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
+
+  $post->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
+  $post->field_radioactivity[LANGUAGE_NONE][0]['radioactivity_energy'] = 8;
+
+  $terms = array(
+    'brunch',
+    'Cambridge',
+    'dining out'
+  );
+
+  foreach ($terms as $term) {
+    $post->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
+  }
+
+  node_save($post);
+
+  // Wiki: How to create a veggie burger
+  $wiki = new stdClass();
+  $wiki->type = 'wiki';
+  node_object_prepare($wiki);
+  $wiki->created = time() - 604800;
+  $wiki->title = 'How to create a veggie burger';
+  $wiki->uid = $demo_users['Dharmesh Mistry']->uid;
+  $wiki->language = LANGUAGE_NONE;
+  $wiki->body[LANGUAGE_NONE][0]['value'] = "Celtuce quandong gumbo coriander avocado yarrow broccoli rabe parsnip nori mung bean watercress taro pea sprouts cress. Bush tomato water spinach radish green bean okra spinach garlic cress. Cucumber squash tigernut swiss chard celery cabbage beet greens nori groundnut grape melon seakale. Earthnut pea kakadu plum chicory potato plantain fennel gumbo chickweed gourd cauliflower wakame green bean epazote taro quandong. Celery turnip kombu lotus root lettuce sierra leone bologi kale cauliflower gumbo parsnip taro welsh onion melon asparagus green bean beet greens black-eyed pea jícama. Kohlrabi lentil turnip greens plantain bush tomato leek arugula courgette amaranth yarrow.";
+  $wiki->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
+
+  $wiki->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
+  $wiki->field_radioactivity[LANGUAGE_NONE][0]['radioactivity_energy'] = 8;
+
+  $terms = array(
+    'vegetarian',
+    'casual',
+    'meal',
+    'recipe'
+  );
+
+  foreach ($terms as $term) {
+    $wiki->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
+  }
+
+  node_save($wiki);
+
+  // Event: Ribfest Boston 2012
+  $event = new stdClass();
+  $event->type = 'event';
+  node_object_prepare($event);
+
+  $event->title = 'Ribfest Boston 2012';
+  $event->uid = $demo_users['Katelyn Fogarty']->uid;
+  $event->language = LANGUAGE_NONE;
+  $event->body[LANGUAGE_NONE][0]['value'] = "<strong>What ignited in 1999 as a community block party has exploded into one of Boston's most anticipated street festivals.</strong> Averaging 50,000 pounds of ribs and BBQ from more than 30 restaurants, Ribfest Boston 2013 is expected to draw more than 50,000 people. As a nationally recognized music festival, we host a hot blend of Indie, pop, Indie Roots, rock and alt country for one of the most unique band lineups in the city. Families can spend the whole weekend in Kids Square to enjoy live entertainment, inflatables, games and more.";
+  $event->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
+  $event->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
+  $terms = array(
+    'bbq',
+    'music',
+    'festival'
+  );
+
+  foreach ($terms as $term) {
+    $event->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
+  }
+
+  $event->field_date[LANGUAGE_NONE][0]['value'] = '2014-01-12 10:00:00';
+  $event->field_date[LANGUAGE_NONE][0]['value2'] = '2014-01-13 13:00:00';
+
+  $event->field_address[LANGUAGE_NONE][0]['thoroughfare'] = '25 Corporate Drive';
+  $event->field_address[LANGUAGE_NONE][0]['premise'] = '4th floor';
+  $event->field_address[LANGUAGE_NONE][0]['postal_code'] = '01803';
+  $event->field_address[LANGUAGE_NONE][0]['country'] = 'US';
+  $event->field_address[LANGUAGE_NONE][0]['location'] = 'Waterfront';
+  $event->field_address[LANGUAGE_NONE][0]['administrative_area']  = 'MA';
+  $event->field_address[LANGUAGE_NONE][0]['locality'] = 'Boston';
+  $event->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
+  node_save($event);
+
+  // Don't display the 'registration settings have been saved' message.
+  drupal_get_messages('status', TRUE);
+  drupal_get_messages('completed', TRUE);
+
+  // Delete the demo content variable
+  variable_del('commons_install_example_content');
+
+  // Make sure the admin user is also a group.
+  // @todo: Move to a better place.
+  $wrapper = entity_metadata_wrapper('user', 1);
+  $wrapper->{OG_GROUP_FIELD}->set(TRUE);
+  $wrapper->save();
+}
+
+/**
+ * Let the admin user create the first group as part of the installation process.
+ */
+function commons_create_first_group() {
+  $form['commons_first_group_explanation'] = array(
+    '#markup' => '<h2>' . st('Create the first group in your new community.') . '</h2>' . st("Commons uses groups to collect community members and content related to a particular interest, working goal or geographic area."),
+    '#weight' => -1,
+  );
+
+  $form['commons_fist_group_example'] = array(
+    '#markup' => theme('image', array('path' => 'profiles/commons/images/commons_group_description_sample.png', 'alt' => 'Group description page example', 'alt' => 'Group description example')),
+    '#weight' => 0,
+  );
+
+  $form['commons_first_group_title'] = array(
+    '#type' => 'textfield',
+    '#title' => st("Group name"),
+    '#description' => st('For example: "Boston food lovers" or "Engineering team."'),
+    '#required' => TRUE,
+    '#default_value' => st('Engineering team'),
+  );
+
+  $form['commons_first_group_body'] = array(
+    '#type' => 'textarea',
+    '#title' => st('Group description'),
+    '#description' => st("This text will appear on the group's homepage and helps new contributors to become familiar with the purpose of the group. You can always change this text or add another group later."),
+    '#required' => TRUE,
+    '#default_value' => st('The online home for our Engineering team'),
+  );
+
+  $form['commons_first_group_submit'] = array(
+    '#type'  => 'submit',
+    '#value' => st('Save and continue')
+  );
+
+  return $form;
+}
+
+/**
+ * Save the first group form.
  *
- * Perform actions to set up the site for this profile.
+ * @see commons_create_first_group().
+ */
+function commons_create_first_group_submit($form_id, &$form_state) {
+  $values = $form_state['values'];
+
+  $first_group = new stdClass();
+  $first_group->type = 'group';
+  node_object_prepare($first_group);
+
+  $first_group->title = $values['commons_first_group_title'];
+  $first_group->body[LANGUAGE_NONE][0]['value'] = $values['commons_first_group_body'];
+  $first_group->uid = 1;
+  $first_group->language = LANGUAGE_NONE;
+  $first_group->status = 1;
+  node_save($first_group);
+}
+
+function commons_admin_permissions() {
+  //get the administrator role, we set this in the install file
+  $admin_role = user_role_load_by_name('administrator');
+  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
+}
+
+function commons_add_user_avatar($account) {
+  global $base_url;
+
+  if ($account->uid) {
+    $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
+    if(file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)){
+      $picture_result = drupal_http_request($base_url . '/profiles/commons/images/avatars/avatar-' . commons_normalize_name($account->name) . '.png');
+      $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-' . $account->uid . '-' . REQUEST_TIME . '.jpg');
+      $picture_file = file_save_data($picture_result->data, $picture_path, FILE_EXISTS_REPLACE);
+
+      // Check to make sure the picture isn't too large for the site settings.
+      $validators = array(
+        'file_validate_is_image' => array(),
+        'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),
+        'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),
+      );
+
+      // attach photo to user's account.
+      $errors = file_validate($picture_file, $validators);
+
+      if (empty($errors)) {
+        // Update the user record.
+        $picture_file->uid = $account->uid;
+        $picture_file = file_save($picture_file);
+        file_usage_add($picture_file, 'user', 'user', $account->uid);
+        db_update('users')
+          ->fields(array(
+            'picture' => $picture_file->fid,
+          ))
+          ->condition('uid', $account->uid)
+          ->execute();
+        $account->picture = $picture_file->fid;
+      }
+    }
+  }
+}
+
+/**
+ * Helper function to generate a machine name similar to the user's full name.
+ */
+function commons_normalize_name($name) {
+  return drupal_strtolower(str_replace(' ','_', $name));
+}
+
+/**
+ * Generate some filler content.
+ */
+function commons_veggie_ipsum() {
+  $content = "Veggies sunt bona vobis, proinde vos postulo esse magis spinach kale scallion lettuce cucumber black-eyed pea onion.
+
+Bamboo shoot green bean wattle seed okra kakadu plum peanut ricebean celtuce. Azuki bean desert raisin bush tomato turnip peanut sweet pepper courgette horseradish. Garlic kombu beet greens celery courgette carrot mung bean.";
+  return $content;
+}
+
+/**
+ * This function create a taxonomy topic, is used for create a demo content for
+ * a new installations of Drupal Commons.
  *
- * @see system_install()
+ * @see commons_demo_content().
+ */
+function commons_create_topic($topic_name = '') {
+  $term = new stdClass();
+  $term->name = $topic_name;
+  $term->vid = 1;
+  // Pathauto aliasing can cause a menu_rebuild(), causing the request to
+  // exceeed the max execution time. Specify a manual alias instead.
+  // http://drupal.org/node/1867172.
+  $term->path['pathauto'] = FALSE;
+  taxonomy_term_save($term);
+  $path = array(
+    'source' => 'taxonomy/term/' . $term->tid,
+    'alias' => 'topics/' . drupal_html_class($topic_name),
+  );
+  path_save($path);
+  return $term->tid;
+}
+
+/**
+ * Implements hook_install().
  */
 function commons_install() {
   // Enable the Origins theme and set it as the default.
@@ -119,6 +685,35 @@ function commons_install() {
 }
 
 /**
+ * Set a default user avatar as a managed file object.
+ */
+function commons_set_default_avatar() {
+  global $base_url;
+  $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
+  if(file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)){
+    $picture_result = drupal_http_request($base_url . '/profiles/commons/images/avatars/user-avatar.png');
+    $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-default.jpg');
+    $picture_file = file_save_data($picture_result->data, $picture_path, FILE_EXISTS_REPLACE);
+
+    // Check to make sure the picture isn't too large for the site settings.
+    $validators = array(
+      'file_validate_is_image' => array(),
+      'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),
+      'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),
+    );
+
+    // attach photo to user's account.
+    $errors = file_validate($picture_file, $validators);
+
+    if (empty($errors)) {
+      // Update the user record.
+      $picture_file = file_save($picture_file);
+      variable_set('user_picture_default', $picture_path);
+    }
+  }
+}
+
+/**
  * Enable the Origins theme and set it as the default. *
  */
 function commons_update_3101() {
@@ -247,3 +842,19 @@ function commons_update_3111() {
   variable_set('admin_theme', 'ember');
   return array();
 }
+
+/*
+ * Revert Message types to use the correct title field token.
+ */
+function commons_update_3112() {
+  $revert = array(
+    'commons_wikis' => array('message_type'),
+    'commons_q_a' => array('message_type'),
+    'commons_posts' => array('message_type'),
+    'commons_notify' => array('message_type'),
+    'commons_like' => array('message_type'),
+    'commons_activity_streams' => array('message_type'),
+  );
+  features_revert($revert);
+  return array();
+}
diff --git a/commons.profile b/commons.profile
index 922272c..cb67f82 100644
--- a/commons.profile
+++ b/commons.profile
@@ -1,4 +1,5 @@
 <?php
+
 /**
  * @file
  * Enables modules and site configuration for a Commons site installation.
@@ -24,21 +25,42 @@ function commons_admin_paths_alter(&$paths) {
 }
 
 /**
- * Implements hook_install_tasks_alter().
+ * Implements hook_update_projects_alter().
  */
-function commons_install_tasks_alter(&$tasks, $install_state) {
-  global $install_state;
-
-  // Skip profile selection step.
-  $tasks['install_select_profile']['display'] = FALSE;
-
-  // Skip language selection install step and default language to English.
-  $tasks['install_select_locale']['display'] = FALSE;
-  $tasks['install_select_locale']['run'] = INSTALL_TASK_SKIP;
-  $install_state['parameters']['locale'] = 'en';
+function commons_update_projects_alter(&$projects) {
+  // Enable update status for the Commons profile.
+  $modules = system_rebuild_module_data();
+  // The module object is shared in the request, so we need to clone it here.
+  $commons = clone $modules['commons'];
+  $commons->info['hidden'] = FALSE;
+  _update_process_info_list($projects, array('commons' => $commons), 'module', TRUE);
+}
 
-  // Override "install_finished" task to redirect people to home page.
-  $tasks['install_finished']['function'] = 'commons_install_finished';
+/**
+ * Get Commons entity integration information.
+ *
+ * @param $entity_type
+ *   (optional) The entity type to load, e.g. node or user.
+ *
+ * @return
+ *   An associative array of entity integrations whose keys define the entity
+ *   type for each integration and whose values contain the bundles which have
+ *   been integrated. Each bundle is itself an associative array, whose keys
+ *   define the type of integration to enable and whose values contain the
+ *   status of the integration. TRUE = enabled, FALSE = disabled.
+ */
+function commons_entity_integration_info($entity_type = NULL) {
+  $info = &drupal_static(__FUNCTION__);
+  if (!$info) {
+    $info = module_invoke_all('commons_entity_integration');
+    drupal_alter('commons_entity_integration', $info);
+  }
+  if ($entity_type) {
+    return isset($info[$entity_type]) ? $info[$entity_type] : array();
+  }
+  else {
+    return $info;
+  }
 }
 
 /**
@@ -47,8 +69,10 @@ function commons_install_tasks_alter(&$tasks, $install_state) {
  * Allows the profile to alter the site configuration form.
  */
 function commons_form_install_configure_form_alter(&$form, $form_state) {
-  // Flush all 'notification' messages, no need to show them to the user.
-  commons_clear_messages();
+  // Clear all non-error messages that might be set by enabled modules
+  drupal_get_messages('status', TRUE);
+  drupal_get_messages('completed', TRUE);
+
   // Pre-populate the site name with the server name.
   $form['site_information']['site_name']['#default_value'] = $_SERVER['SERVER_NAME'];
 
@@ -101,175 +125,6 @@ function commons_form_install_configure_form_alter(&$form, $form_state) {
   $form['#submit'][] = 'commons_check_acquia_connector';
 }
 
-
-/**
- * Implements hook_update_projects_alter().
- */
-function commons_update_projects_alter(&$projects) {
-  // Enable update status for the Commons profile.
-  $modules = system_rebuild_module_data();
-  // The module object is shared in the request, so we need to clone it here.
-  $commons = clone $modules['commons'];
-  $commons->info['hidden'] = FALSE;
-  _update_process_info_list($projects, array('commons' => $commons), 'module', TRUE);
-}
-
-/**
- * Implements hook_install_tasks().
- *
- * Allows the user to set a welcome message for anonymous users
- */
-function commons_install_tasks() {
-  // Suppress any status messages generated during batch install.
-  commons_clear_messages();
-
-  //make sure we have more memory than 196M. if not lets try to increase it.
-  if (ini_get('memory_limit') != '-1' && ini_get('memory_limit') <= '196M' && ini_get('memory_limit') >= '128M') {
-    ini_set('memory_limit', '196M');
-  }
-
-  $demo_content = variable_get('commons_install_example_content', FALSE);
-  $acquia_connector = variable_get('commons_install_acquia_connector', FALSE);
-
-  return array(
-    'commons_acquia_connector_enable' => array(
-      'display' => FALSE,
-      'type' => '',
-      'run' => $acquia_connector ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
-    ),
-    'commons_installer_palette' => array(
-      'display_name' => st('Choose site color palette'),
-      'display' => TRUE,
-      'type' => 'form',
-      'function' => 'commons_installer_palette',
-    ),
-    'commons_anonymous_message_homepage' => array(
-      'display_name' => st('Enter Homepage welcome text'),
-      'display' => TRUE,
-      'type' => 'form',
-      'function' => 'commons_anonymous_welcome_text_form'
-    ),
-    'commons_revert_features' => array(
-      'display' => FALSE,
-    ),
-    'commons_demo_content' => array(
-      'display' => FALSE,
-      'type' => '',
-      'run' => $demo_content ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
-    ),
-    'commons_create_first_group' => array(
-      'display_name' => st('Create the first group'),
-      'display' => TRUE,
-      'type' => 'form',
-    ),
-    'commons_admin_permissions' => array(
-      'display' => FALSE,
-    ),
-  );
-}
-
-/**
- * Allow users to select from a predefined list of color palettes during
- * the commons installation.
- */
-function commons_installer_palette() {
-  $form = array();
-  require_once(drupal_get_path('theme', 'commons_origins') . '/commons_origins.palettes.inc');
-
-  commons_origins_palettes_form($form);
-  $form['commons_origins_palette_fieldset']['#collapsible'] = FALSE;
-  $form['commons_origins_palette_fieldset']['#collapsed'] = FALSE;
-  $form['submit'] = array(
-    '#type' => 'submit',
-    '#value' => st('Save color palette'),
-  );
-  drupal_add_css('profiles/commons/commons_installer.css');
-
-  return $form;
-}
-/**
- * Let the admin user create the first group as part of the installation process
- */
-function commons_create_first_group() {
-  $form['commons_first_group_explanation'] = array(
-    '#markup' => '<h2>' . st('Create the first group in your new community.') . '</h2>' . st("Commons uses groups to collect community members and content related to a particular interest, working goal or geographic area."),
-    '#weight' => -1,
-  );
-
-  $form['commons_fist_group_example'] = array(
-    '#markup' => theme('image', array('path' => 'profiles/commons/images/commons_group_description_sample.png', 'alt' => 'Group description page example', 'alt' => 'Group description example')),
-    '#weight' => 0,
-  );
-
-  $form['commons_first_group_title'] = array(
-    '#type' => 'textfield',
-    '#title' => st("Group name"),
-    '#description' => st('For example: "Boston food lovers" or "Engineering team."'),
-    '#required' => TRUE,
-    '#default_value' => st('Engineering team'),
-  );
-
-  $form['commons_first_group_body'] = array(
-    '#type' => 'textarea',
-    '#title' => st('Group description'),
-    '#description' => st("This text will appear on the group's homepage and helps new contributors to become familiar with the purpose of the group. You can always change this text or add another group later."),
-    '#required' => TRUE,
-    '#default_value' => st('The online home for our Engineering team'),
-  );
-
-  $form['commons_first_group_submit'] = array(
-    '#type'  => 'submit',
-    '#value' => st('Save and continue')
-  );
-
-  return $form;
-}
-
-/**
- * Save the first group form
- *
- * @see commons_create_first_group().
- */
-function commons_create_first_group_submit($form_id, &$form_state) {
-  $values = $form_state['values'];
-
-  $first_group = new stdClass();
-  $first_group->type = 'group';
-  node_object_prepare($first_group);
-
-  $first_group->title = $values['commons_first_group_title'];
-  $first_group->body[LANGUAGE_NONE][0]['value'] = $values['commons_first_group_body'];
-  $first_group->uid = 1;
-  $first_group->language = LANGUAGE_NONE;
-  $first_group->status = 1;
-  node_save($first_group);
-}
-
-/*
- * Revert Features after the installation.
- */
-function commons_revert_features() {
-  // Revert Features components to ensure that they are in their default states.
-  $revert = array(
-    'commons_follow' => array('field_base'),
-    'commons_groups' => array('field_instance', 'field_base'),
-    'commons_trusted_contacts' => array('field_instance', 'field_base'),
-    'commons_wikis' => array('og_features_permission'),
-    'commons_wysiwyg' => array('user_permission', 'ckeditor_profile'),
-    'commons_events' => array('og_features_permission' , 'field_base'),
-    'commons_polls' => array('og_features_permission'),
-    'commons_q_a' => array('og_features_permission', 'field_base'),
-    'commons_posts' => array('og_features_permission'),
-  );
-  features_revert($revert);
-}
-
-function commons_admin_permissions() {
-  //get the administrator role, we set this in the install file
-  $admin_role = user_role_load_by_name('administrator');
-  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
-}
-
 /**
  * Save the full name of the first user.
  */
@@ -295,441 +150,3 @@ function commons_check_acquia_connector($form_id, &$form_state) {
     variable_set('commons_install_acquia_modules', array_keys($options));
   }
 }
-
-/**
- * Configuration form to set welcome text for the anonymous site homepage.
- */
-function commons_anonymous_welcome_text_form() {
-  $form['commons_anonymous_welcome_explanation'] = array(
-    '#markup' => '<h2>' . st('Homepage welcome text') . '</h2>' . st("Below, enter text that will be shown on your community's homepage to help new visitors understand what your community is about and why they should join. The image below shows an example of how this text will appear. You can always change this text later."),
-    '#weight' => -1,
-  );
-  $form['commons_anonymous_welcome_example'] = array(
-    '#markup' => theme('image', array('path' => 'profiles/commons/images/commons_homepage_text_example.png', 'alt' => 'Home page example', 'alt' => 'Home page example')),
-    '#weight' => 0,
-  );
-
-  $form['commons_anonymous_welcome_title'] = array(
-    '#type' => 'textfield',
-    '#title' => st('Welcome headline'),
-    '#description' => st('A short description of the community that visitors can understand at a glance.'),
-    '#required' => TRUE,
-    '#default_value' => st('Welcome to our community'),
-  );
-
-  $form['commons_anonymous_welcome_body'] = array(
-    '#type' => 'textarea',
-    '#title' => st('Welcome body text'),
-    '#description' => st('Enter a couple of sentences elaborating about your community.'),
-    '#required' => TRUE,
-    '#default_value' => st('Share your thoughts, find answers to your questions.'),
-  );
-
-  $form['commons_install_example_content'] = array(
-    '#type' => 'checkbox',
-    '#title' => st('Install example content'),
-    '#description' => st('Install Commons with example content so that you can get a sense of what your site will look like once it becomes more active. Example content includes a group, a few users and content for that group. Example content can be modified or deleted like normal content.'),
-    '#default_value' => TRUE
-  );
-
-  $form['commons_anonymous_welcome_submit'] = array(
-    '#type'  => 'submit',
-    '#value' => st('Save and continue')
-  );
-
-  return $form;
-}
-
-/**
- * Save the configuration form for set welcome text for anonymous users
- * @see commons_anonymous_welcome_text_form()
- */
-function commons_anonymous_welcome_text_form_submit($form_id, &$form_state) {
-  variable_set('commons_anonymous_welcome_title', $form_state['values']['commons_anonymous_welcome_title']);
-  variable_set('commons_anonymous_welcome_body', $form_state['values']['commons_anonymous_welcome_body']);
-  variable_set('commons_install_example_content', $form_state['values']['commons_install_example_content']);
-}
-
-/**
- * Helper function to generate a machine name similar to the user's full name.
- */
-function commons_normalize_name($name) {
-  return drupal_strtolower(str_replace(' ','_', $name));
-}
-/**
- * This function generate a demo content
- */
-function commons_demo_content() {
-
-  // Reset the Flag cache.
-  flag_get_flags(NULL, NULL, NULL, TRUE);
-
-  // Create demo Users
-  $demo_users = array(
-    'Jeff Noyes' => 'Jeff Noyes',
-    'Drew Robertson' => 'Drew Robertson',
-    'Lisa Rex' => 'Lisa Rex',
-    'Katelyn Fogarty' => 'Katelyn Fogarty',
-    'Dharmesh Mistry' => 'Dharmesh Mistry',
-    'Erica Ligeski' => 'Erica Ligeski',
-  );
-
-
-  foreach ($demo_users as $name) {
-    list($first_name, $last_name)  = explode(" ", $name);
-    $normalize_name = commons_normalize_name($name);
-    $password = user_password(8);
-
-
-    $fields = array(
-      'name' => $name,
-      'mail' => "{$normalize_name}@example.com",
-      'pass' => $password,
-      'status' => 1,
-      'init' => "{$normalize_name}@example.com",
-      'roles' => array(
-        DRUPAL_AUTHENTICATED_RID => 'authenticated user'
-      ),
-    );
-
-    $fields['field_name_first'][LANGUAGE_NONE][0]['value'] = $first_name;
-    $fields['field_name_last'][LANGUAGE_NONE][0]['value'] = $last_name;
-
-    $demo_users[$name] = user_save('', $fields);
-
-    // Add avatars to demo Users.
-    commons_add_user_avatar($demo_users[$name]);
-  }
-
-  // Demo Content.
-
-  // Group: Boston
-  $boston_group = new stdClass();
-  $boston_group->type = 'group';
-  node_object_prepare($boston_group);
-
-  $boston_group->title = 'Boston';
-  $boston_group->body[LANGUAGE_NONE][0]['value'] = commons_veggie_ipsum();
-  $boston_group->uid = $demo_users['Jeff Noyes']->uid;
-  $boston_group->language = LANGUAGE_NONE;
-  $boston_group->created = time() - 604800;
-  $boston_group->status = 1;
-  node_save($boston_group);
-
-  // Group: New York City
-  $nyc_group = new stdClass();
-  $nyc_group->type = 'group';
-  node_object_prepare($nyc_group);
-
-  $nyc_group->title = 'New York City';
-  $nyc_group->body[LANGUAGE_NONE][0]['value'] = commons_veggie_ipsum();
-  $nyc_group->uid = $demo_users['Drew Robertson']->uid;
-  $nyc_group->language = LANGUAGE_NONE;
-  $nyc_group->status = 1;
-  // Make the group 1 week old:
-  $nyc_group->created = time() - 604800;
-  node_save($nyc_group);
-
-
-  // Post: Best brunch places in Cambridge
-  $post = new stdClass();
-  $post->type = 'post';
-  node_object_prepare($post);
-
-  $post->title = 'Best brunch places in Cambridge';
-  $post->uid = $demo_users['Lisa Rex']->uid;
-  $post->language = LANGUAGE_NONE;
-  // 1:30 ago.
-  $post->created = time() - 5400;
-  $post->body[LANGUAGE_NONE][0]['value'] = "My aunt and I have been trying a lot of brunch places in Cambridge. Here's our favorites: <ul><li>North Street Grille for their breads
-<li>Mixtura for the souffles
-<li>The Neighborhood Restaurant for the vast quantities of food
-<li>City Girl Cafe for the ambiance <li>Bom Cafe for granola";
-  $post->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
-
-  $post->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
-  $post->field_radioactivity[LANGUAGE_NONE][0]['radioactivity_energy'] = 8;
-
-  $terms = array(
-    'brunch',
-    'Cambridge',
-    'dining out'
-  );
-
-  foreach ($terms as $term) {
-    $post->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
-  }
-
-  node_save($post);
-
-
-  // Wiki: How to create a veggie burger
-  $wiki = new stdClass();
-  $wiki->type = 'wiki';
-  node_object_prepare($wiki);
-  $wiki->created = time() - 604800;
-  $wiki->title = 'How to create a veggie burger';
-  $wiki->uid = $demo_users['Dharmesh Mistry']->uid;
-  $wiki->language = LANGUAGE_NONE;
-  $wiki->body[LANGUAGE_NONE][0]['value'] = "Celtuce quandong gumbo coriander avocado yarrow broccoli rabe parsnip nori mung bean watercress taro pea sprouts cress. Bush tomato water spinach radish green bean okra spinach garlic cress. Cucumber squash tigernut swiss chard celery cabbage beet greens nori groundnut grape melon seakale. Earthnut pea kakadu plum chicory potato plantain fennel gumbo chickweed gourd cauliflower wakame green bean epazote taro quandong. Celery turnip kombu lotus root lettuce sierra leone bologi kale cauliflower gumbo parsnip taro welsh onion melon asparagus green bean beet greens black-eyed pea jícama. Kohlrabi lentil turnip greens plantain bush tomato leek arugula courgette amaranth yarrow.";
-  $wiki->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
-
-  $wiki->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
-  $wiki->field_radioactivity[LANGUAGE_NONE][0]['radioactivity_energy'] = 8;
-
-  $terms = array(
-    'vegetarian',
-    'casual',
-    'meal',
-    'recipe'
-  );
-
-  foreach ($terms as $term) {
-    $wiki->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
-  }
-
-  node_save($wiki);
-
-  // Event: Ribfest Boston 2012
-  $event = new stdClass();
-  $event->type = 'event';
-  node_object_prepare($event);
-
-  $event->title = 'Ribfest Boston 2012';
-  $event->uid = $demo_users['Katelyn Fogarty']->uid;
-  $event->language = LANGUAGE_NONE;
-  $event->body[LANGUAGE_NONE][0]['value'] = "<strong>What ignited in 1999 as a community block party has exploded into one of Boston's most anticipated street festivals.</strong> Averaging 50,000 pounds of ribs and BBQ from more than 30 restaurants, Ribfest Boston 2013 is expected to draw more than 50,000 people. As a nationally recognized music festival, we host a hot blend of Indie, pop, Indie Roots, rock and alt country for one of the most unique band lineups in the city. Families can spend the whole weekend in Kids Square to enjoy live entertainment, inflatables, games and more.";
-  $event->body[LANGUAGE_NONE][0]['format'] = filter_default_format();
-  $event->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
-  $terms = array(
-    'bbq',
-    'music',
-    'festival'
-  );
-
-  foreach ($terms as $term) {
-    $event->field_topics[LANGUAGE_NONE][]['tid'] = commons_create_topic($term);
-  }
-
-  $event->field_date[LANGUAGE_NONE][0]['value'] = '2014-01-12 10:00:00';
-  $event->field_date[LANGUAGE_NONE][0]['value2'] = '2014-01-13 13:00:00';
-
-  $event->field_address[LANGUAGE_NONE][0]['thoroughfare'] = '25 Corporate Drive';
-  $event->field_address[LANGUAGE_NONE][0]['premise'] = '4th floor';
-  $event->field_address[LANGUAGE_NONE][0]['postal_code'] = '01803';
-  $event->field_address[LANGUAGE_NONE][0]['country'] = 'US';
-  $event->field_address[LANGUAGE_NONE][0]['location'] = 'Waterfront';
-  $event->field_address[LANGUAGE_NONE][0]['administrative_area']  = 'MA';
-  $event->field_address[LANGUAGE_NONE][0]['locality'] = 'Boston';
-  $event->og_group_ref[LANGUAGE_NONE][0]['target_id'] = $boston_group->nid;
-  node_save($event);
-  // Don't display the 'registration settings have been saved' message.
-  commons_clear_messages();
-
-  // Delete the demo content variable
-  variable_del('commons_install_example_content');
-
-  // Make sure the admin user is also a group.
-  // @todo: Move to a better place.
-  $wrapper = entity_metadata_wrapper('user', 1);
-  $wrapper->{OG_GROUP_FIELD}->set(TRUE);
-  $wrapper->save();
-}
-
-function commons_add_user_avatar($account) {
-  global $base_url;
-
-  if ($account->uid) {
-    $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
-    if(file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)){
-      $picture_result = drupal_http_request($base_url . '/profiles/commons/images/avatars/avatar-' . commons_normalize_name($account->name) . '.png');
-      $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-' . $account->uid . '-' . REQUEST_TIME . '.jpg');
-      $picture_file = file_save_data($picture_result->data, $picture_path, FILE_EXISTS_REPLACE);
-
-      // Check to make sure the picture isn't too large for the site settings.
-      $validators = array(
-        'file_validate_is_image' => array(),
-        'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),
-        'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),
-      );
-
-      // attach photo to user's account.
-      $errors = file_validate($picture_file, $validators);
-
-      if (empty($errors)) {
-        // Update the user record.
-        $picture_file->uid = $account->uid;
-        $picture_file = file_save($picture_file);
-        file_usage_add($picture_file, 'user', 'user', $account->uid);
-        db_update('users')
-          ->fields(array(
-          'picture' => $picture_file->fid,
-          ))
-          ->condition('uid', $account->uid)
-          ->execute();
-        $account->picture = $picture_file->fid;
-      }
-    }
-  }
-}
-
-/**
-  * Generate some filler content.
- */
-function commons_veggie_ipsum() {
-  $content = "Veggies sunt bona vobis, proinde vos postulo esse magis spinach kale scallion lettuce cucumber black-eyed pea onion.
-
-Bamboo shoot green bean wattle seed okra kakadu plum peanut ricebean celtuce. Azuki bean desert raisin bush tomato turnip peanut sweet pepper courgette horseradish. Garlic kombu beet greens celery courgette carrot mung bean.";
-  return $content;
-}
-
-/**
- * This function create a taxonomy topic, is used for create a demo content
- * for a new instalations of Drupal Commons
- *
- * @see commons_demo_content().
- */
-function commons_create_topic($topic_name = '') {
-  $term = new stdClass();
-  $term->name = $topic_name;
-  $term->vid = 1;
-  // Pathauto aliasing can cause a menu_rebuild(), causing the request to
-  // exceeed the max execution time. Specify a manual alias instead.
-  // http://drupal.org/node/1867172.
-  $term->path['pathauto'] = FALSE;
-  taxonomy_term_save($term);
-  $path = array(
-    'source' => 'taxonomy/term/' . $term->tid,
-    'alias' => 'topics/' . drupal_html_class($topic_name),
-  );
-  path_save($path);
-  return $term->tid;
-}
-
-/**
- * Enable Acquia Connector module if selected on site configuration step.
- */
-function commons_acquia_connector_enable() {
-  $modules = variable_get('commons_install_acquia_modules', array());
-  if (!empty($modules)) {
-    module_enable($modules, TRUE);
-    commons_clear_messages();
-  }
-}
-
-/**
- * Override of install_finished() without the useless text.
- */
-function commons_install_finished(&$install_state) {
-  // BEGIN copy/paste from install_finished().
-  // Remove the bookmarks flag
-  $flag = flag_get_flag('bookmarks');
-  if($flag) {
-    $flag->delete();
-    $flag->disable();
-    _flag_clear_cache();
-  }
-
-  // Flush all caches to ensure that any full bootstraps during the installer
-  // do not leave stale cached data, and that any content types or other items
-  // registered by the installation profile are registered correctly.
-  drupal_flush_all_caches();
-
-  // We make custom code for the footer here because we want people to be able to freely edit it if they wish.
-  $footer_body = '<p>'. st('A Commons Community, powered by <a href="@acquia">Acquia</a>', array('@acquia' => url('https://www.acquia.com/products-services/drupal-commons-social-business-software'))) . '</p>';
-
-  $footer_block_text = array(
-    'body' => st($footer_body),
-    'info' => st('Default Footer'),
-    'format' => 'full_html',
-  );
-
-  if (drupal_write_record('block_custom', $footer_block_text)) {
-    $footer_block = array(
-      'module' => 'block',
-      'delta' => $footer_block_text['bid'],
-      'theme' => 'commons_origins',
-      'visibility' => 0,
-      'region' => 'footer',
-      'status' => 1,
-      'pages' => 0,
-      'weight' => 1,
-      'title' => variable_get('site_name', 'Drupal Commons'),
-    );
-    drupal_write_record('block', $footer_block);
-  }
-
-  // Remember the profile which was used.
-  variable_set('install_profile', drupal_get_profile());
-
-  // Installation profiles are always loaded last
-  db_update('system')
-    ->fields(array('weight' => 1000))
-    ->condition('type', 'module')
-    ->condition('name', drupal_get_profile())
-    ->execute();
-
-  // Cache a fully-built schema.
-  drupal_get_schema(NULL, TRUE);
-
-  // Run cron to populate update status tables (if available) so that users
-  // will be warned if they've installed an out of date Drupal version.
-  // Will also trigger indexing of profile-supplied content or feeds.
-  drupal_cron_run();
-  // END copy/paste from install_finished().
-
-  if (isset($messages['error'])) {
-    $output = '<p>' . (isset($messages['error']) ? st('Review the messages above before visiting <a href="@url">your new site</a>.', array('@url' => url(''))) : st('<a href="@url">Visit your new site</a>.', array('@url' => url('')))) . '</p>';
-    return $output;
-  }
-  else {
-    // Since any module can add a drupal_set_message, this can bug the user
-    // when we redirect him to the front page. For a better user experience,
-    // remove all the message that are only "notifications" message.
-    commons_clear_messages();
-    // If we don't install drupal using Drush, redirect the user to the front
-    // page.
-    if (!drupal_is_cli()) {
-      drupal_goto('');
-    }
-  }
-}
-
-/**
- * Clear all 'notification' type messages that may have been set.
- */
-function commons_clear_messages() {
-  drupal_get_messages('status', TRUE);
-  drupal_get_messages('completed', TRUE);
-  // Migrate adds its messages under the wrong type, see #1659150.
-  drupal_get_messages('ok', TRUE);
-}
-
-/**
- * Set a default user avatar as a managed file object.
- */
-function commons_set_default_avatar() {
-  global $base_url;
-  $picture_directory =  file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
-  if(file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)){
-    $picture_result = drupal_http_request($base_url . '/profiles/commons/images/avatars/user-avatar.png');
-    $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-default.jpg');
-    $picture_file = file_save_data($picture_result->data, $picture_path, FILE_EXISTS_REPLACE);
-
-    // Check to make sure the picture isn't too large for the site settings.
-    $validators = array(
-      'file_validate_is_image' => array(),
-      'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),
-      'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),
-    );
-
-    // attach photo to user's account.
-    $errors = file_validate($picture_file, $validators);
-
-    if (empty($errors)) {
-      // Update the user record.
-      $picture_file = file_save($picture_file);
-      variable_set('user_picture_default', $picture_path);
-    }
-  }
-}
diff --git a/drupal-org-core.make b/drupal-org-core.make
index 64fb14e..806c8ff 100644
--- a/drupal-org-core.make
+++ b/drupal-org-core.make
@@ -3,7 +3,7 @@ core = 7.x
 
 ; Download Drupal core and apply core patches if needed.
 projects[drupal][type] = "core"
-projects[drupal][version] = 7.25
+projects[drupal][version] = 7.26
 
 ; This patch allows install profile to list requirements on the install page
 ; http://drupal.org/node/1971072
diff --git a/drupal-org.make b/drupal-org.make
index 11b4407..bf2b829 100644
--- a/drupal-org.make
+++ b/drupal-org.make
@@ -5,7 +5,7 @@ core = 7.x
 
 projects[acquia_connector][type] = "module"
 projects[acquia_connector][subdir] = "contrib"
-projects[acquia_connector][version] = "2.12"
+projects[acquia_connector][version] = "2.13"
 
 projects[addressfield][type] = "module"
 projects[addressfield][subdir] = "contrib"
@@ -22,13 +22,6 @@ projects[admin_icons][download][url] = "http://git.drupal.org/project/admin_icon
 projects[admin_icons][download][branch] = "7.x-1.x"
 projects[admin_icons][download][revision] = "60d9f28801533fecc92216a60d444d89d80e7611"
 
-projects[advancedqueue][type] = "module"
-projects[advancedqueue][subdir] = "contrib"
-projects[advancedqueue][version] = "1.0-alpha2"
-; Cleanup of the advancedqueue table:
-; https://drupal.org/comment/7817905#comment-7817905
-projects[advancedqueue][patch][] = "https://drupal.org/files/purging_table-2054555.patch"
-
 projects[apachesolr][type] = "module"
 projects[apachesolr][subdir] = "contrib"
 projects[apachesolr][version] = "1.6"
@@ -57,7 +50,10 @@ projects[apachesolr_user][patch][] = "http://drupal.org/files/2077281-apache-sol
 
 projects[breakpoints][type] = "module"
 projects[breakpoints][subdir] = "contrib"
-projects[breakpoints][version] = "1.1"
+projects[breakpoints][download][type] = "git"
+projects[breakpoints][download][url] = "http://git.drupal.org/project/breakpoints.git"
+projects[breakpoints][download][branch] = "7.x-1.x"
+projects[breakpoints][download][revision] = "c4f3665"
 
 projects[connector][type] = "module"
 projects[connector][subdir] = "contrib"
@@ -70,6 +66,10 @@ projects[ckeditor][download][url] = "http://git.drupal.org/project/ckeditor.git"
 projects[ckeditor][download][branch] = "7.x-1.x"
 projects[ckeditor][download][revision] = "b69a9ac"
 
+; Only load CSS when necessary.
+; https://drupal.org/node/1370894
+projects[ckeditor][patch][] = "https://drupal.org/files/issues/attach-ckeditor-css-1370894-7.patch"
+
 ; Accomodate latest Media changes.
 ; https://drupal.org/node/2159403
 projects[ckeditor][patch][] = "https://drupal.org/files/issues/ckeditor-accomodate-latest-media-changes-0.patch"
@@ -80,14 +80,7 @@ projects[ckeditor][patch][] = "https://drupal.org/files/issues/ckeditor-remove-e
 
 projects[ctools][type] = "module"
 projects[ctools][subdir] = "contrib"
-projects[ctools][download][type] = "git"
-projects[ctools][download][url] = "http://git.drupal.org/project/ctools.git"
-projects[ctools][download][branch] = "7.x-1.x"
-projects[ctools][download][revision] = "e81da7a57f63ca95d2c713afcec65a5659aada9e"
-
-; Introduce UUIDs onto panes & displays.
-; http://drupal.org/node/1277908#comment-7216356
-projects[ctools][patch][] = "http://drupal.org/files/ctools-uuids_for_exported_objects-1277908-118.patch"
+projects[ctools][version] = "1.4"
 
 projects[custom_search][type] = "module"
 projects[custom_search][subdir] = "contrib"
@@ -207,11 +200,11 @@ projects[l10n_update][version] = "1.0-beta3"
 
 projects[libraries][type] = "module"
 projects[libraries][subdir] = "contrib"
-projects[libraries][version] = "2.1"
+projects[libraries][version] = "2.2"
 
 projects[lingotek][type] = "module"
 projects[lingotek][subdir] = "contrib"
-projects[lingotek][version] = "4.10"
+projects[lingotek][version] = "5.02"
 
 projects[link][type] = "module"
 projects[link][subdir] = "contrib"
@@ -222,7 +215,7 @@ projects[media][subdir] = "contrib"
 projects[media][download][type] = "git"
 projects[media][download][url] = "http://git.drupal.org/project/media.git"
 projects[media][download][branch] = "7.x-2.x"
-projects[media][download][revision] = "1f46a9a"
+projects[media][download][revision] = "6e9c99b"
 
 projects[memcache][type] = "module"
 projects[memcache][subdir] = "contrib"
@@ -254,7 +247,7 @@ projects[message_subscribe][version] = "1.0-rc1"
 
 projects[metatag][type] = "module"
 projects[metatag][subdir] = "contrib"
-projects[metatag][version] = "1.0-beta7"
+projects[metatag][version] = "1.0-beta9"
 
 projects[module_filter][type] = "module"
 projects[module_filter][subdir] = "contrib"
@@ -266,11 +259,15 @@ projects[mollom][version] = "2.8"
 
 projects[navbar][type] = "module"
 projects[navbar][subdir] = "contrib"
-projects[navbar][version] = "1.2"
+projects[navbar][version] = "1.4"
+
+; Change I-beam cursors in the navbar to be a pointer instead.
+; https://drupal.org/node/2173041
+projects[navbar][patch][] = "https://drupal.org/files/issues/2173041-3-i-beam-menu-hover.patch"
 
 projects[oauth][type] = "module"
 projects[oauth][subdir] = "contrib"
-projects[oauth][version] = "3.1"
+projects[oauth][version] = "3.2"
 
 projects[oauthconnector][type] = "module"
 projects[oauthconnector][subdir] = "contrib"
@@ -284,31 +281,11 @@ projects[oembed][subdir] = "contrib"
 projects[oembed][download][type] = "git"
 projects[oembed][download][url] = "http://git.drupal.org/project/oembed.git"
 projects[oembed][download][branch] = "7.x-1.x"
-projects[oembed][download][revision] = "63898e1"
-
-; Add oEmbed plugins to list of supported media providers
-; https://drupal.org/comment/8287243#comment-8287243
-projects[oembed][patch][] = "https://drupal.org/files/issues/list-enabled-plugins-2159335-1.patch"
-
-; Remove WYSIWYG special casing
-; https://drupal.org/comment/8287861#comment-8287861
-projects[oembed][patch][] = "https://drupal.org/files/issues/remove-wysiwyg-special-casing-2159303-2.patch"
-
-; Provided a default display configuration
-; https://drupal.org/comment/8286995#comment-8286995
-projects[oembed][patch][] = "https://drupal.org/files/issues/provide-default-display-configuration-2128389-3.patch"
-
-; Add supported file and MIME type information to file formatters
-; https://drupal.org/comment/8286935#comment-8286935
-projects[oembed][patch][] = "https://drupal.org/files/issues/add-file-and-mime-type-information-to-formatters-2159275-1.patch"
-
-; Themed images ignore width, height, alt and title attributes
-; https://drupal.org/comment/8286915#comment-8286915
-projects[oembed][patch][] = "https://drupal.org/files/issues/prefer-element-attributes-2159269-1.patch"
+projects[oembed][download][revision] = "9aa5303"
 
 projects[og][type] = "module"
 projects[og][subdir] = "contrib"
-projects[og][version] = "2.4"
+projects[og][version] = "2.5"
 
 ; Auto-assign role to group manager broken on groups with overridden roles.
 ; https://drupal.org/node/2005800#comment-7684873
@@ -324,10 +301,7 @@ projects[panelizer][version] = "3.1"
 
 projects[panels][type] = "module"
 projects[panels][subdir] = "contrib"
-projects[panels][download][type] = "git"
-projects[panels][download][url] = "http://git.drupal.org/project/panels.git"
-projects[panels][download][branch] = "7.x-3.x-i18n"
-projects[panels][download][revision] = "43a3810e8b0d2ef435ef2bb190039391c8e1712f"
+projects[panels][version] = "3.4"
 
 projects[paranoia][type] = "module"
 projects[paranoia][subdir] = "contrib"
@@ -337,6 +311,33 @@ projects[pathauto][type] = "module"
 projects[pathauto][subdir] = "contrib"
 projects[pathauto][version] = "1.2"
 
+projects[picture][type] = "module"
+projects[picture][subdir] = "contrib"
+projects[picture][download][type] = "git"
+projects[picture][download][url] = "http://git.drupal.org/project/picture.git"
+projects[picture][download][branch] = "7.x-1.x"
+projects[picture][download][revision] = "18b94b9"
+
+; Add ctools as a dependency
+; https://drupal.org/node/2173043
+projects[picture][patch][] = "https://drupal.org/files/issues/add-ctools-dependency-2173043-1.patch"
+
+; Allow filter tips to be translated
+; https://drupal.org/node/2139459
+projects[picture][patch][] = "https://drupal.org/files/issues/translate-filter-tips-2139459-1.patch"
+
+; Move hook_uninstall() to picture.install to fix issues on uninstall.
+; https://drupal.org/node/2173015
+projects[picture][patch][] = "https://drupal.org/files/issues/move-uninstall-hook-implementation-2173015-1.patch"
+
+; Remove implementation of hook_file_formatter_info() to remove duplicate file formatter.
+; https://drupal.org/node/2172841
+projects[picture][patch][] = "https://drupal.org/files/issues/remove-file-formatter-hook-implementation-2172831-1.patch"
+
+; Remove implementation of hook_ctools_plugin_api() to fix issues with features.
+; https://drupal.org/node/2172831
+projects[picture][patch][] = "https://drupal.org/files/issues/remove-ctools-hook-implementation-2172831-1.patch"
+
 projects[pm_existing_pages][type] = "module"
 projects[pm_existing_pages][subdir] = "contrib"
 projects[pm_existing_pages][version] = "1.4"
@@ -379,12 +380,16 @@ projects[radioactivity][patch][] = "http://drupal.org/files/radioactivity-memcac
 
 projects[rate][type] = "module"
 projects[rate][subdir] = "contrib"
-projects[rate][version] = "1.6"
+projects[rate][version] = "1.7"
 
 ; Add widget to node/comment $links.
 ; http://drupal.org/node/947516#comment-6979780
 projects[rate][patch][] = "http://drupal.org/files/947516-rate-node-links-15.patch"
 
+; Only load CSS when necessary.
+; https://drupal.org/node/2180853
+projects[rate][patch][] = "https://drupal.org/files/issues/attach-rate-css-2180853-3.patch"
+
 projects[realname][type] = "module"
 projects[realname][subdir] = "contrib"
 projects[realname][version] = "1.1"
@@ -395,7 +400,7 @@ projects[redirect][version] = "1.0-rc1"
 
 projects[registration][subdir] = "contrib"
 projects[registration][type] = "module"
-projects[registration][version] = "1.2"
+projects[registration][version] = "1.3"
 
 projects[rich_snippets][type] = "module"
 projects[rich_snippets][subdir] = "contrib"
@@ -417,6 +422,10 @@ projects[sharethis][type] = "module"
 projects[sharethis][subdir] = "contrib"
 projects[sharethis][version] = "2.5"
 
+projects[smartcrop][type] = "module"
+projects[smartcrop][subdir] = "contrib"
+projects[smartcrop][version] = "1.0-beta2"
+
 projects[strongarm][type] = "module"
 projects[strongarm][subdir] = "contrib"
 projects[strongarm][download][type] = "git"
@@ -446,7 +455,7 @@ projects[translation_helpers][version] = "1.0"
 
 projects[variable][type] = "module"
 projects[variable][subdir] = "contrib"
-projects[variable][version] = "2.3"
+projects[variable][version] = "2.4"
 
 projects[views][type] = "module"
 projects[views][subdir] = "contrib"
@@ -495,10 +504,7 @@ projects[adaptivetheme][patch][] = "https://drupal.org/files/issues/add-link-but
 
 projects[ember][type] = "theme"
 projects[ember][subdir] = "contrib"
-projects[ember][download][type] = "git"
-projects[ember][download][url] = "http://git.drupal.org/project/ember.git"
-projects[ember][download][branch] = "7.x-2.x"
-projects[ember][download][revision] = "5b8b0f6"
+projects[ember][version] = "2.0-alpha2"
 
 projects[sky][type] = "theme"
 projects[sky][subdir] = "contrib"
@@ -511,13 +517,13 @@ libraries[backbone][download][type] = "get"
 libraries[backbone][type] = "libraries"
 libraries[backbone][download][url] = "https://github.com/jashkenas/backbone/archive/1.1.0.tar.gz"
 
-libraries[ckeditor][download][type] = "get"
-libraries[ckeditor][download][url] = "http://download.cksource.com/CKEditor/CKEditor/CKEditor%204.3.1/ckeditor_4.3.1_full.zip"
+libraries[ckeditor][download][type] = get
 libraries[ckeditor][type] = "libraries"
+libraries[ckeditor][download][url] = "http://download.cksource.com/CKEditor%20for%20Drupal/edit/ckeditor_4.3.2_edit.zip"
 
 libraries[modernizr][download][type] = "get"
 libraries[modernizr][type] = "libraries"
-libraries[modernizr][download][url] = "https://github.com/Modernizr/Modernizr/archive/v2.7.0.tar.gz"
+libraries[modernizr][download][url] = "https://github.com/Modernizr/Modernizr/archive/v2.7.1.tar.gz"
 
 libraries[timeago][download][type] = "get"
 libraries[timeago][type] = "libraries"
@@ -525,4 +531,4 @@ libraries[timeago][download][url] = "https://raw.github.com/rmm5t/jquery-timeago
 
 libraries[underscore][download][type] = "get"
 libraries[underscore][type] = "libraries"
-libraries[underscore][download][url] = "https://github.com/jashkenas/underscore/archive/1.4.4.zip"
+libraries[underscore][download][url] = "https://github.com/jashkenas/underscore/archive/1.5.2.zip"
diff --git a/modules/commons/commons_activity_streams/commons_activity_streams.features.inc b/modules/commons/commons_activity_streams/commons_activity_streams.features.inc
index e0006bb..23366ab 100644
--- a/modules/commons/commons_activity_streams/commons_activity_streams.features.inc
+++ b/modules/commons/commons_activity_streams/commons_activity_streams.features.inc
@@ -41,9 +41,9 @@ function commons_activity_streams_default_message_type() {
           "safe_value" : "[message:user:picture:35x35]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E commented on \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E commented on \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E commented on \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E commented on \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E"
         },
         {
           "value" : "[commons-groups:in-groups-text]",
@@ -70,9 +70,9 @@ function commons_activity_streams_default_message_type() {
           "safe_value" : "[message:user:picture:35x35]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E created \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E created \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E created \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E created \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E"
         },
         {
           "value" : "[commons-groups:in-groups-text]",
diff --git a/modules/commons/commons_documents/commons_documents.module b/modules/commons/commons_documents/commons_documents.module
index b65e298..de94e87 100644
--- a/modules/commons/commons_documents/commons_documents.module
+++ b/modules/commons/commons_documents/commons_documents.module
@@ -85,7 +85,7 @@ function commons_documents_views_pre_render(&$view) {
 }
 
 /**
- * Implements hook_commons_entity_integration.
+ * Implements hook_commons_entity_integration().
  */
 function commons_documents_commons_entity_integration() {
   return array(
diff --git a/modules/commons/commons_follow/commons_follow.module b/modules/commons/commons_follow/commons_follow.module
index f6c6c62..e301be2 100644
--- a/modules/commons/commons_follow/commons_follow.module
+++ b/modules/commons/commons_follow/commons_follow.module
@@ -119,7 +119,7 @@ function commons_follow_flag_export_alter(&$flag) {
  * Implements hook_flag_alter().
  */
 function commons_follow_flag_alter(&$flag) {
-  $commons_entity_integrations = module_invoke_all('commons_entity_integration');
+  $commons_entity_integrations = commons_entity_integration_info();
   // Find Commons node types that should have follow integration and alter
   // the commons_follow_node flag to allow following these node types.
   // This is currently hard-coded to node entities and the
diff --git a/modules/commons/commons_follow/commons_follow_group/commons_follow_group.module b/modules/commons/commons_follow/commons_follow_group/commons_follow_group.module
index bff49f2..f203a47 100644
--- a/modules/commons/commons_follow/commons_follow_group/commons_follow_group.module
+++ b/modules/commons/commons_follow/commons_follow_group/commons_follow_group.module
@@ -104,3 +104,50 @@ function commons_follow_group_node_insert($node) {
   $flag = flag_get_flag('commons_follow_group');
   $flag->flag('flag', $node->nid, $account);
 }
+
+
+/**
+ * Implements hook_og_membership_insert().
+ * Invoked from hook_entity_insert().
+ */
+function commons_follow_group_og_membership_insert(OgMembership $og_membership) {
+  commons_follow_group_sync_flag_to_group_membership($og_membership);
+}
+
+/**
+ * Implements hook_og_membership_update().
+ * Invoked from hook_entity_update().
+ */
+function commons_follow_group_og_membership_update(OgMembership $og_membership) {
+  commons_follow_group_sync_flag_to_group_membership($og_membership);
+}
+
+/**
+ * Implements hook_og_membership_delete().
+ * Invoked from hook_entity_delete().
+ */
+function commons_follow_group_og_membership_delete(OgMembership $og_membership) {
+  // The user should unfollow the group when her membership is deleted.
+  if ($og_membership->entity_type == 'user' && $og_membership->field_name == 'og_user_node') {
+    $account = user_load($og_membership->etid);
+    flag('unflag', 'commons_follow_group', $og_membership->gid, $account);    
+  }
+}
+
+// function flag($action, $flag_name, $content_id, $account = NULL) {
+
+function commons_follow_group_sync_flag_to_group_membership($og_membership) {
+  if ($og_membership->entity_type == 'user' && $og_membership->field_name == 'og_user_node') {
+    $account = user_load($og_membership->etid);
+    // The membership is approved. The user should follow the group.
+    if ($og_membership->state == 1) {
+      flag('flag', 'commons_follow_group', $og_membership->gid, $account);    
+    }
+    // The membership is not approved. The user should not follow the group.
+    else {
+      flag('unflag', 'commons_follow_group', $og_membership->gid, $account);    
+    }
+  }
+}
+  
+
diff --git a/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.commons_utility_links.inc b/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.commons_utility_links.inc
new file mode 100644
index 0000000..172c3cb
--- /dev/null
+++ b/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.commons_utility_links.inc
@@ -0,0 +1,25 @@
+<?php
+
+/**
+ * @file
+ * Commons Utility Links hooks implemented by the Commons Follow UI module.
+ */
+
+/**
+ * Implements hook_commons_utility_links().
+ */
+function commons_follow_ui_commons_utility_links() {
+  $links = array();
+
+  if (user_is_logged_in()) {
+    global $user;
+    $account = $user;
+    $links['settings']= array(
+      'href' => 'user/' . $account->uid . '/notification-settings',
+      'title' => t('Settings'),
+      'weight' => 10,
+    );
+  }
+
+  return $links;
+}
diff --git a/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.module b/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.module
index 65ef59c..18c46c5 100644
--- a/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.module
+++ b/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.module
@@ -48,20 +48,6 @@ function commons_follow_ui_form_alter(&$form, &$form_state, $form_id) {
   }
 }
 
-/**
- * Implements hook_commons_utility_links().
- */
-function commons_follow_ui_commons_utility_links_alter(&$links) {
-  global $user;
-  $account = $user;
-  if ($account->uid > 0) {
-    $links['settings']= array(
-      'href' => 'user/' . $account->uid . '/notification-settings',
-      'title' => t('Settings'),
-    );
-  }
-}
-
 function commons_follow_ui_notification_settings_form($form, &$form_state, $account) {
   global $user;
   if (empty($account)) {
diff --git a/modules/commons/commons_groups/commons_groups.module b/modules/commons/commons_groups/commons_groups.module
index d28beb2..c122918 100644
--- a/modules/commons/commons_groups/commons_groups.module
+++ b/modules/commons/commons_groups/commons_groups.module
@@ -811,7 +811,7 @@ function commons_groups_set_group_permissions($node) {
  */
 function commons_groups_get_group_content_entity_types() {
   // Find all Commons Entity integrations.
-  $commons_entity_integrations = module_invoke_all('commons_entity_integration');
+  $commons_entity_integrations = commons_entity_integration_info();
   if (empty($commons_entity_integrations)) {
     return array();
   }
diff --git a/modules/commons/commons_images/commons_images.default_breakpoint_group.inc b/modules/commons/commons_images/commons_images.default_breakpoint_group.inc
new file mode 100644
index 0000000..a5492eb
--- /dev/null
+++ b/modules/commons/commons_images/commons_images.default_breakpoint_group.inc
@@ -0,0 +1,90 @@
+<?php
+/**
+ * @file
+ * commons_images.default_breakpoint_group.inc
+ */
+
+/**
+ * Implements hook_default_breakpoint_group().
+ */
+function commons_images_default_breakpoint_group() {
+  $export = array();
+
+  // Breakpoints.
+  $breakpoints = array();
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons large';
+
+  // Breakpoint group.
+  $breakpoint_group = new stdClass();
+  $breakpoint_group->disabled = FALSE; /* Edit this to true to make a default breakpoint_group disabled initially */
+  $breakpoint_group->api_version = 1;
+  $breakpoint_group->machine_name = 'commons_default';
+  $breakpoint_group->name = 'Commons default';
+  $breakpoint_group->breakpoints = $breakpoints;
+  $breakpoint_group->type = 'module';
+  $breakpoint_group->overridden = 0;
+  $export['commons_default'] = $breakpoint_group;
+
+  // Breakpoints.
+  $breakpoints = array();
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons large';
+
+  // Breakpoint group.
+  $breakpoint_group = new stdClass();
+  $breakpoint_group->disabled = FALSE; /* Edit this to true to make a default breakpoint_group disabled initially */
+  $breakpoint_group->api_version = 1;
+  $breakpoint_group->machine_name = 'commons_full';
+  $breakpoint_group->name = 'Commons full';
+  $breakpoint_group->breakpoints = $breakpoints;
+  $breakpoint_group->type = 'module';
+  $breakpoint_group->overridden = 0;
+  $export['commons_full'] = $breakpoint_group;
+
+  // Breakpoints.
+  $breakpoints = array();
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons large';
+
+  // Breakpoint group.
+  $breakpoint_group = new stdClass();
+  $breakpoint_group->disabled = FALSE; /* Edit this to true to make a default breakpoint_group disabled initially */
+  $breakpoint_group->api_version = 1;
+  $breakpoint_group->machine_name = 'commons_origins';
+  $breakpoint_group->name = 'Commons Origins';
+  $breakpoint_group->breakpoints = $breakpoints;
+  $breakpoint_group->type = 'theme';
+  $breakpoint_group->overridden = 0;
+  $export['commons_origins'] = $breakpoint_group;
+
+  // Breakpoints.
+  $breakpoints = array();
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons small landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium portrait';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons medium landscape';
+  $breakpoints[] = 'breakpoints.theme.commons_origins.commons large';
+
+  // Breakpoint group.
+  $breakpoint_group = new stdClass();
+  $breakpoint_group->disabled = FALSE; /* Edit this to true to make a default breakpoint_group disabled initially */
+  $breakpoint_group->api_version = 1;
+  $breakpoint_group->machine_name = 'commons_teaser';
+  $breakpoint_group->name = 'Commons teaser';
+  $breakpoint_group->breakpoints = $breakpoints;
+  $breakpoint_group->type = 'module';
+  $breakpoint_group->overridden = 0;
+  $export['commons_teaser'] = $breakpoint_group;
+
+  return $export;
+}
diff --git a/modules/commons/commons_images/commons_images.default_breakpoints.inc b/modules/commons/commons_images/commons_images.default_breakpoints.inc
new file mode 100644
index 0000000..fbda730
--- /dev/null
+++ b/modules/commons/commons_images/commons_images.default_breakpoints.inc
@@ -0,0 +1,89 @@
+<?php
+/**
+ * @file
+ * commons_images.default_breakpoints.inc
+ */
+
+/**
+ * Implements hook_default_breakpoints().
+ */
+function commons_images_default_breakpoints() {
+  $export = array();
+
+  $breakpoint = new stdClass();
+  $breakpoint->disabled = FALSE; /* Edit this to true to make a default breakpoint disabled initially */
+  $breakpoint->api_version = 1;
+  $breakpoint->machine_name = 'breakpoints.theme.commons_origins.commons large';
+  $breakpoint->name = 'Commons large';
+  $breakpoint->breakpoint = 'only screen and (min-width:935px)';
+  $breakpoint->source = 'commons_origins';
+  $breakpoint->source_type = 'theme';
+  $breakpoint->status = 1;
+  $breakpoint->weight = 4;
+  $breakpoint->multipliers = array(
+    '1x' => '1x',
+  );
+  $export['breakpoints.theme.commons_origins.commons large'] = $breakpoint;
+
+  $breakpoint = new stdClass();
+  $breakpoint->disabled = FALSE; /* Edit this to true to make a default breakpoint disabled initially */
+  $breakpoint->api_version = 1;
+  $breakpoint->machine_name = 'breakpoints.theme.commons_origins.commons medium landscape';
+  $breakpoint->name = 'Commons medium landscape';
+  $breakpoint->breakpoint = 'only screen and (min-width:769px) and (max-width:934px';
+  $breakpoint->source = 'commons_origins';
+  $breakpoint->source_type = 'theme';
+  $breakpoint->status = 1;
+  $breakpoint->weight = 3;
+  $breakpoint->multipliers = array(
+    '1x' => '1x',
+  );
+  $export['breakpoints.theme.commons_origins.commons medium landscape'] = $breakpoint;
+
+  $breakpoint = new stdClass();
+  $breakpoint->disabled = FALSE; /* Edit this to true to make a default breakpoint disabled initially */
+  $breakpoint->api_version = 1;
+  $breakpoint->machine_name = 'breakpoints.theme.commons_origins.commons medium portrait';
+  $breakpoint->name = 'Commons medium portrait';
+  $breakpoint->breakpoint = 'only screen and (min-width:481px) and (max-width:768px)';
+  $breakpoint->source = 'commons_origins';
+  $breakpoint->source_type = 'theme';
+  $breakpoint->status = 1;
+  $breakpoint->weight = 2;
+  $breakpoint->multipliers = array(
+    '1x' => '1x',
+  );
+  $export['breakpoints.theme.commons_origins.commons medium portrait'] = $breakpoint;
+
+  $breakpoint = new stdClass();
+  $breakpoint->disabled = FALSE; /* Edit this to true to make a default breakpoint disabled initially */
+  $breakpoint->api_version = 1;
+  $breakpoint->machine_name = 'breakpoints.theme.commons_origins.commons small landscape';
+  $breakpoint->name = 'Commons small landscape';
+  $breakpoint->breakpoint = 'only screen and (min-width:321px) and (max-width:480px)';
+  $breakpoint->source = 'commons_origins';
+  $breakpoint->source_type = 'theme';
+  $breakpoint->status = 1;
+  $breakpoint->weight = 1;
+  $breakpoint->multipliers = array(
+    '1x' => '1x',
+  );
+  $export['breakpoints.theme.commons_origins.commons small landscape'] = $breakpoint;
+
+  $breakpoint = new stdClass();
+  $breakpoint->disabled = FALSE; /* Edit this to true to make a default breakpoint disabled initially */
+  $breakpoint->api_version = 1;
+  $breakpoint->machine_name = 'breakpoints.theme.commons_origins.commons small portrait';
+  $breakpoint->name = 'Commons small portrait';
+  $breakpoint->breakpoint = 'only screen and (max-width:320px)';
+  $breakpoint->source = 'commons_origins';
+  $breakpoint->source_type = 'theme';
+  $breakpoint->status = 1;
+  $breakpoint->weight = 0;
+  $breakpoint->multipliers = array(
+    '1x' => '1x',
+  );
+  $export['breakpoints.theme.commons_origins.commons small portrait'] = $breakpoint;
+
+  return $export;
+}
diff --git a/modules/commons/commons_images/commons_images.default_picture_mapping.inc b/modules/commons/commons_images/commons_images.default_picture_mapping.inc
new file mode 100644
index 0000000..e91e30f
--- /dev/null
+++ b/modules/commons/commons_images/commons_images.default_picture_mapping.inc
@@ -0,0 +1,101 @@
+<?php
+/**
+ * @file
+ * commons_images.default_picture_mapping.inc
+ */
+
+/**
+ * Implements hook_default_picture_mapping().
+ */
+function commons_images_default_picture_mapping() {
+  $export = array();
+
+  $picture_mapping = new stdClass();
+  $picture_mapping->disabled = FALSE; /* Edit this to true to make a default picture_mapping disabled initially */
+  $picture_mapping->api_version = 1;
+  $picture_mapping->machine_name = 'commons_default';
+  $picture_mapping->breakpoint_group = 'commons_default';
+  $picture_mapping->mapping = array(
+    'breakpoints.theme.commons_origins.commons small portrait' => array(
+      '1x' => 'commons-default-small',
+      '1.5x' => 'commons-default-small-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons small landscape' => array(
+      '1x' => 'commons-default-small',
+      '1.5x' => 'commons-default-small-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons medium portrait' => array(
+      '1x' => 'commons-default-medium',
+      '1.5x' => 'commons-default-medium-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons medium landscape' => array(
+      '1x' => 'commons-default-medium',
+      '1.5x' => 'commons-default-medium-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons large' => array(
+      '1x' => 'commons-default-large',
+      '1.5x' => 'commons-default-large-1_5x',
+    ),
+  );
+  $export['commons_default'] = $picture_mapping;
+
+  $picture_mapping = new stdClass();
+  $picture_mapping->disabled = FALSE; /* Edit this to true to make a default picture_mapping disabled initially */
+  $picture_mapping->api_version = 1;
+  $picture_mapping->machine_name = 'commons_full';
+  $picture_mapping->breakpoint_group = 'commons_full';
+  $picture_mapping->mapping = array(
+    'breakpoints.theme.commons_origins.commons small portrait' => array(
+      '1x' => 'commons-full-small',
+      '1.5x' => 'commons-full-small-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons small landscape' => array(
+      '1x' => 'commons-full-small',
+      '1.5x' => 'commons-full-small-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons medium portrait' => array(
+      '1x' => 'commons-full-medium',
+      '1.5x' => 'commons-full-medium-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons medium landscape' => array(
+      '1x' => 'commons-full-medium',
+      '1.5x' => 'commons-full-medium-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons large' => array(
+      '1x' => 'commons-full-large',
+      '1.5x' => 'commons-full-large-1_5x',
+    ),
+  );
+  $export['commons_full'] = $picture_mapping;
+
+  $picture_mapping = new stdClass();
+  $picture_mapping->disabled = FALSE; /* Edit this to true to make a default picture_mapping disabled initially */
+  $picture_mapping->api_version = 1;
+  $picture_mapping->machine_name = 'commons_teaser';
+  $picture_mapping->breakpoint_group = 'commons_teaser';
+  $picture_mapping->mapping = array(
+    'breakpoints.theme.commons_origins.commons small portrait' => array(
+      '1x' => 'commons-teaser-small',
+      '1.5x' => 'commons-teaser-small-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons small landscape' => array(
+      '1x' => 'commons-teaser-small',
+      '1.5x' => 'commons-teaser-small-1_5x',
+    ),
+    'breakpoints.theme.commons_origins.commons medium portrait' => array(
+      '1x' => 'commons-teaser-medium',
+      '1.5x' => 'commons-teaser-medium-1_5',
+    ),
+    'breakpoints.theme.commons_origins.commons medium landscape' => array(
+      '1x' => 'commons-teaser-medium',
+      '1.5x' => 'commons-teaser-medium-1_5',
+    ),
+    'breakpoints.theme.commons_origins.commons large' => array(
+      '1x' => 'commons-teaser-large',
+      '1.5x' => 'commons-teaser-large-1_5x',
+    ),
+  );
+  $export['commons_teaser'] = $picture_mapping;
+
+  return $export;
+}
diff --git a/modules/commons/commons_images/commons_images.features.inc b/modules/commons/commons_images/commons_images.features.inc
new file mode 100644
index 0000000..48d70d2
--- /dev/null
+++ b/modules/commons/commons_images/commons_images.features.inc
@@ -0,0 +1,455 @@
+<?php
+/**
+ * @file
+ * commons_images.features.inc
+ */
+
+/**
+ * Implements hook_ctools_plugin_api().
+ */
+function commons_images_ctools_plugin_api($module = NULL, $api = NULL) {
+  if ($module == "breakpoints" && $api == "default_breakpoint_group") {
+    return array("version" => "1");
+  }
+  if ($module == "breakpoints" && $api == "default_breakpoints") {
+    return array("version" => "1");
+  }
+  if ($module == "picture" && $api == "default_picture_mapping") {
+    return array("version" => "1");
+  }
+}
+
+/**
+ * Implements hook_image_default_styles().
+ */
+function commons_images_image_default_styles() {
+  $styles = array();
+
+  // Exported image style: commons-default-large.
+  $styles['commons-default-large'] = array(
+    'name' => 'commons-default-large',
+    'label' => 'Commons default large',
+    'effects' => array(
+      18 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 536,
+          'height' => 600,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-default-large-1_5x.
+  $styles['commons-default-large-1_5x'] = array(
+    'name' => 'commons-default-large-1_5x',
+    'label' => 'Commons default large 1.5x',
+    'effects' => array(
+      19 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 804,
+          'height' => 900,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-default-medium.
+  $styles['commons-default-medium'] = array(
+    'name' => 'commons-default-medium',
+    'label' => 'Commons default medium',
+    'effects' => array(
+      18 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 536,
+          'height' => 600,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-default-medium-1_5x.
+  $styles['commons-default-medium-1_5x'] = array(
+    'name' => 'commons-default-medium-1_5x',
+    'label' => 'Commons default medium 1.5x',
+    'effects' => array(
+      19 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 804,
+          'height' => 900,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-default-small.
+  $styles['commons-default-small'] = array(
+    'name' => 'commons-default-small',
+    'label' => 'Commons default small',
+    'effects' => array(
+      20 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 456,
+          'height' => 500,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-default-small-1_5x.
+  $styles['commons-default-small-1_5x'] = array(
+    'name' => 'commons-default-small-1_5x',
+    'label' => 'Commons default small 1.5x',
+    'effects' => array(
+      21 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 684,
+          'height' => 750,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-full-large.
+  $styles['commons-full-large'] = array(
+    'name' => 'commons-full-large',
+    'label' => 'Commons full large',
+    'effects' => array(
+      22 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 916,
+          'height' => '',
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-full-large-1_5x.
+  $styles['commons-full-large-1_5x'] = array(
+    'name' => 'commons-full-large-1_5x',
+    'label' => 'Commons full large 1.5x',
+    'effects' => array(
+      23 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 1374,
+          'height' => '',
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-full-medium.
+  $styles['commons-full-medium'] = array(
+    'name' => 'commons-full-medium',
+    'label' => 'Commons full medium',
+    'effects' => array(
+      24 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 768,
+          'height' => '',
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-full-medium-1_5.
+  $styles['commons-full-medium-1_5'] = array(
+    'name' => 'commons-full-medium-1_5',
+    'label' => 'Commons full medium 1.5',
+    'effects' => array(
+      25 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 1152,
+          'height' => '',
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-full-small.
+  $styles['commons-full-small'] = array(
+    'name' => 'commons-full-small',
+    'label' => 'Commons full small',
+    'effects' => array(
+      20 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 456,
+          'height' => 500,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-full-small-1_5x.
+  $styles['commons-full-small-1_5x'] = array(
+    'name' => 'commons-full-small-1_5x',
+    'label' => 'Commons full small 1.5x',
+    'effects' => array(
+      21 => array(
+        'label' => 'Scale',
+        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
+        'effect callback' => 'image_scale_effect',
+        'dimensions callback' => 'image_scale_dimensions',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'image',
+        'name' => 'image_scale',
+        'data' => array(
+          'width' => 684,
+          'height' => 750,
+          'upscale' => 0,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-teaser-large.
+  $styles['commons-teaser-large'] = array(
+    'name' => 'commons-teaser-large',
+    'label' => 'Commons teaser large',
+    'effects' => array(
+      16 => array(
+        'label' => 'Scale and Smart Crop',
+        'help' => 'Similar to "Scale And Crop", but preserves the portion of the image with the most entropy.',
+        'effect callback' => 'smartcrop_scale_effect',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'smartcrop',
+        'name' => 'smartcrop_scale_and_crop',
+        'data' => array(
+          'width' => 124,
+          'height' => 124,
+          'upscale' => 1,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-teaser-large-1_5x.
+  $styles['commons-teaser-large-1_5x'] = array(
+    'name' => 'commons-teaser-large-1_5x',
+    'label' => 'Commons teaser large 1.5x',
+    'effects' => array(
+      17 => array(
+        'label' => 'Scale and Smart Crop',
+        'help' => 'Similar to "Scale And Crop", but preserves the portion of the image with the most entropy.',
+        'effect callback' => 'smartcrop_scale_effect',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'smartcrop',
+        'name' => 'smartcrop_scale_and_crop',
+        'data' => array(
+          'width' => 186,
+          'height' => 186,
+          'upscale' => 1,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-teaser-medium.
+  $styles['commons-teaser-medium'] = array(
+    'name' => 'commons-teaser-medium',
+    'label' => 'Commons teaser medium',
+    'effects' => array(
+      14 => array(
+        'label' => 'Scale and Smart Crop',
+        'help' => 'Similar to "Scale And Crop", but preserves the portion of the image with the most entropy.',
+        'effect callback' => 'smartcrop_scale_effect',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'smartcrop',
+        'name' => 'smartcrop_scale_and_crop',
+        'data' => array(
+          'width' => 72,
+          'height' => 72,
+          'upscale' => 1,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-teaser-medium-1_5x.
+  $styles['commons-teaser-medium-1_5x'] = array(
+    'name' => 'commons-teaser-medium-1_5x',
+    'label' => 'Commons teaser medium 1.5x',
+    'effects' => array(
+      15 => array(
+        'label' => 'Scale and Smart Crop',
+        'help' => 'Similar to "Scale And Crop", but preserves the portion of the image with the most entropy.',
+        'effect callback' => 'smartcrop_scale_effect',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'smartcrop',
+        'name' => 'smartcrop_scale_and_crop',
+        'data' => array(
+          'width' => 108,
+          'height' => 108,
+          'upscale' => 1,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-teaser-small.
+  $styles['commons-teaser-small'] = array(
+    'name' => 'commons-teaser-small',
+    'label' => 'Commons teaser small',
+    'effects' => array(
+      12 => array(
+        'label' => 'Scale and Smart Crop',
+        'help' => 'Similar to "Scale And Crop", but preserves the portion of the image with the most entropy.',
+        'effect callback' => 'smartcrop_scale_effect',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'smartcrop',
+        'name' => 'smartcrop_scale_and_crop',
+        'data' => array(
+          'width' => 54,
+          'height' => 54,
+          'upscale' => 1,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  // Exported image style: commons-teaser-small-1_5x.
+  $styles['commons-teaser-small-1_5x'] = array(
+    'name' => 'commons-teaser-small-1_5x',
+    'label' => 'Commons teaser small 1.5x',
+    'effects' => array(
+      13 => array(
+        'label' => 'Scale and Smart Crop',
+        'help' => 'Similar to "Scale And Crop", but preserves the portion of the image with the most entropy.',
+        'effect callback' => 'smartcrop_scale_effect',
+        'form callback' => 'image_scale_form',
+        'summary theme' => 'image_scale_summary',
+        'module' => 'smartcrop',
+        'name' => 'smartcrop_scale_and_crop',
+        'data' => array(
+          'width' => 81,
+          'height' => 81,
+          'upscale' => 1,
+        ),
+        'weight' => 1,
+      ),
+    ),
+  );
+
+  return $styles;
+}
diff --git a/modules/commons/commons_images/commons_images.info b/modules/commons/commons_images/commons_images.info
new file mode 100644
index 0000000..6afb9f2
--- /dev/null
+++ b/modules/commons/commons_images/commons_images.info
@@ -0,0 +1,45 @@
+name = Commons Images
+description = Image styles used in the Commons distribution
+core = 7.x
+package = Commons - Building blocks
+project = commons_images
+dependencies[] = breakpoints
+dependencies[] = ctools
+dependencies[] = file_entity
+dependencies[] = image
+dependencies[] = picture
+dependencies[] = smartcrop
+features[breakpoint_group][] = commons_default
+features[breakpoint_group][] = commons_full
+features[breakpoint_group][] = commons_origins
+features[breakpoint_group][] = commons_teaser
+features[breakpoints][] = breakpoints.theme.commons_origins.commons large
+features[breakpoints][] = breakpoints.theme.commons_origins.commons medium landscape
+features[breakpoints][] = breakpoints.theme.commons_origins.commons medium portrait
+features[breakpoints][] = breakpoints.theme.commons_origins.commons small landscape
+features[breakpoints][] = breakpoints.theme.commons_origins.commons small portrait
+features[ctools][] = breakpoints:default_breakpoint_group:1
+features[ctools][] = breakpoints:default_breakpoints:1
+features[ctools][] = picture:default_picture_mapping:1
+features[features_api][] = api:2
+features[image][] = commons-default-large
+features[image][] = commons-default-large-1_5x
+features[image][] = commons-default-medium
+features[image][] = commons-default-medium-1_5x
+features[image][] = commons-default-small
+features[image][] = commons-default-small-1_5x
+features[image][] = commons-full-large
+features[image][] = commons-full-large-1_5x
+features[image][] = commons-full-medium
+features[image][] = commons-full-medium-1_5
+features[image][] = commons-full-small
+features[image][] = commons-full-small-1_5x
+features[image][] = commons-teaser-large
+features[image][] = commons-teaser-large-1_5x
+features[image][] = commons-teaser-medium
+features[image][] = commons-teaser-medium-1_5x
+features[image][] = commons-teaser-small
+features[image][] = commons-teaser-small-1_5x
+features[picture_mapping][] = commons_default
+features[picture_mapping][] = commons_full
+features[picture_mapping][] = commons_teaser
diff --git a/modules/commons/commons_images/commons_images.module b/modules/commons/commons_images/commons_images.module
new file mode 100644
index 0000000..f3ec52e
--- /dev/null
+++ b/modules/commons/commons_images/commons_images.module
@@ -0,0 +1,76 @@
+<?php
+/**
+ * @file
+ * Code for the Commons Images feature.
+ */
+
+include_once 'commons_images.features.inc';
+
+/**
+ * Implements hook_file_default_displays_alter().
+ */
+function commons_images_file_default_displays_alter(&$file_displays) {
+  // Copy all default image formatters to full image formatters.
+  foreach ($file_displays as $file_display) {
+    if (strpos($file_display->name, 'image__default__') !== false) {
+      $display = clone $file_display;
+      $name = str_replace('image__default__', 'image__full__', $display->name);
+      $display->name = $name;
+      $file_displays[$name] = $display;
+    }
+  }
+
+  // Default images should be displayed using the 'default' picture group.
+  if (isset($file_displays['image__default__file_field_image'])) {
+    $file_displays['image__default__file_field_image']->status = FALSE;
+  }
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__default__file_field_picture';
+  $file_display->weight = 1;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'picture_group' => 'commons_default',
+    'fallback_image_style' => 'commons-default-small',
+    'image_link' => 'content',
+    'colorbox' => 'commons_default',
+  );
+  $file_displays['image__default__file_field_picture'] = $file_display;
+
+  // Full images should be displayed using the 'full' picture group.
+  if (isset($file_displays['image__full__file_field_image'])) {
+    $file_displays['image__full__file_field_image']->status = FALSE;
+  }
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__full__file_field_picture';
+  $file_display->weight = 1;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'picture_group' => 'commons_full',
+    'fallback_image_style' => 'commons-full-small',
+    'image_link' => '',
+    'colorbox' => 'commons_full',
+  );
+  $file_displays['image__full__file_field_picture'] = $file_display;
+
+  // Teaser images should be displayed using the 'teaser' picture group.
+  if (isset($file_displays['image__teaser__file_field_image'])) {
+    $file_displays['image__teaser__file_field_image']->status = FALSE;
+  }
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__teaser__file_field_picture';
+  $file_display->weight = -1;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'picture_group' => 'commons_teaser',
+    'fallback_image_style' => 'commons-teaser-small',
+    'image_link' => '',
+    'colorbox' => 'commons_teaser',
+  );
+  $file_displays['image__teaser__file_field_picture'] = $file_display;
+}
diff --git a/modules/commons/commons_like/commons_like.features.inc b/modules/commons/commons_like/commons_like.features.inc
index d5ecfdb..16f1761 100644
--- a/modules/commons/commons_like/commons_like.features.inc
+++ b/modules/commons/commons_like/commons_like.features.inc
@@ -34,9 +34,9 @@ function commons_like_default_message_type() {
           "safe_value" : "[message:user:picture]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E liked the [message:field-target-nodes:0:type] \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E liked the [message:field-target-nodes:0:type] \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E liked the [message:field-target-nodes:0:type] \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E liked the [message:field-target-nodes:0:type] \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E"
         }
       ]
     },
diff --git a/modules/commons/commons_like/commons_like.module b/modules/commons/commons_like/commons_like.module
index 5ed5021..49f6f2e 100644
--- a/modules/commons/commons_like/commons_like.module
+++ b/modules/commons/commons_like/commons_like.module
@@ -25,7 +25,7 @@ function commons_like_features_export_alter(&$export, $module_name) {
   if (!empty($items['rate_widgets']->value)) {
     foreach($items['rate_widgets']->value as $key => $widget) {
       if ($widget->name == 'commons_like') {
-        $commons_entity_integrations = module_invoke_all('commons_entity_integration');
+        $commons_entity_integrations = commons_entity_integration_info();
         if (!empty($commons_entity_integrations['node'])) {
           foreach ($commons_entity_integrations['node'] as $bundle => $options) {
             if (!isset($options['exclude_rate']) || $options['exclude_rate'] != TRUE) {
diff --git a/modules/commons/commons_media/commons_media.features.field_instance.inc b/modules/commons/commons_media/commons_media.features.field_instance.inc
index b8afdfa..91e86d0 100644
--- a/modules/commons/commons_media/commons_media.features.field_instance.inc
+++ b/modules/commons/commons_media/commons_media.features.field_instance.inc
@@ -13,8 +13,10 @@ function commons_media_field_default_field_instances() {
   $commons_groups_entity_types = commons_groups_get_group_content_entity_types();
   if (!empty($commons_groups_entity_types)) {
     foreach ($commons_groups_entity_types as $entity_type => $bundles) {
-      foreach(array_keys($bundles) as $bundle) {
-        commons_media_field_definition($field_instances, $entity_type, $bundle);
+      foreach ($bundles as $bundle => $integrations) {
+        if (!empty($integrations['media'])) {
+          commons_media_field_definition($field_instances, $entity_type, $bundle);
+        }
       }
     }
   }
@@ -33,7 +35,7 @@ function commons_media_field_definition(&$field_instances, $entity_type, $bundle
         'label' => 'hidden',
         'module' => 'file_entity',
         'settings' => array(
-          'file_view_mode' => 'full',
+          'file_view_mode' => 'default',
         ),
         'type' => 'file_rendered',
         'weight' => 0,
diff --git a/modules/commons/commons_media/commons_media.module b/modules/commons/commons_media/commons_media.module
index 0a6d434..6179ba2 100644
--- a/modules/commons/commons_media/commons_media.module
+++ b/modules/commons/commons_media/commons_media.module
@@ -11,12 +11,14 @@ include_once 'commons_media.features.inc';
  */
 function commons_media_system_info_alter(&$info, $file, $type) {
   if ($file->name == 'commons_media') {
-    $entity_integrations = module_invoke_all('commons_entity_integration');
+    $entity_integrations = commons_entity_integration_info();
 
     if (!empty($entity_integrations)) {
       foreach ($entity_integrations as $entity_type => $bundles) {
-        foreach (array_keys($bundles) as $bundle) {
-          $info['features']['field_instance'][] = "$entity_type-$bundle-field_media";
+        foreach ($bundles as $bundle => $integrations) {
+          if (!empty($integrations['media'])) {
+            $info['features']['field_instance'][] = "$entity_type-$bundle-field_media";
+          }
         }
       }
     }
@@ -24,6 +26,87 @@ function commons_media_system_info_alter(&$info, $file, $type) {
 }
 
 /**
+ * Implements hook_menu_alter().
+ */
+function commons_media_menu_alter(&$items) {
+  // Use a tweaked AJAX page callback for managed_file and media elements in
+  // order to bypass a core issue that occurs when more than one browsing widget
+  // tab contains a managed_file or media file field widget.
+  if (isset($items['file/ajax'])) {
+    $items['file/ajax']['page callback'] = 'commons_ajax_upload';
+  }
+  if (isset($items['media/ajax'])) {
+    $items['media/ajax']['page callback'] = 'commons_ajax_upload';
+  }
+}
+
+/**
+ * Menu callback; Shared Ajax callback for managed_file and media elements.
+ *
+ * Identical to the Ajax callback used by file.module and media.module except
+ * with the $form_build_id != $_POST['form_build_id'] check removed in order to
+ * prevent errors when more than one browsing widget tab contains a managed_file
+ * or media file field widget.
+ *
+ * @see file_ajax_upload()
+ * @see media_ajax_upload()
+ */
+function commons_ajax_upload() {
+  $form_parents = func_get_args();
+  $form_build_id = (string) array_pop($form_parents);
+
+  if (empty($_POST['form_build_id'])) {
+    // Invalid request.
+    drupal_set_message(t('An unrecoverable error occurred. The uploaded file likely exceeded the maximum file size (@size) that this server supports.', array('@size' => format_size(file_upload_max_size()))), 'error');
+    $commands = array();
+    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
+    return array('#type' => 'ajax', '#commands' => $commands);
+  }
+
+  list($form, $form_state) = ajax_get_form();
+
+  if (!$form) {
+    // Invalid form_build_id.
+    drupal_set_message(t('An unrecoverable error occurred. Use of this form has expired. Try reloading the page and submitting again.'), 'error');
+    $commands = array();
+    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
+    return array('#type' => 'ajax', '#commands' => $commands);
+  }
+
+  // Get the current element and count the number of files.
+  $current_element = $form;
+  foreach ($form_parents as $parent) {
+    $current_element = $current_element[$parent];
+  }
+  $current_file_count = isset($current_element['#file_upload_delta']) ? $current_element['#file_upload_delta'] : 0;
+
+  // Process user input. $form and $form_state are modified in the process.
+  drupal_process_form($form['#form_id'], $form, $form_state);
+
+  // Retrieve the element to be rendered.
+  foreach ($form_parents as $parent) {
+    $form = $form[$parent];
+  }
+
+  // Add the special Ajax class if a new file was added.
+  if (isset($form['#file_upload_delta']) && $current_file_count < $form['#file_upload_delta']) {
+    $form[$current_file_count]['#attributes']['class'][] = 'ajax-new-content';
+  }
+  // Otherwise just add the new content class on a placeholder.
+  else {
+    $form['#suffix'] .= '<span class="ajax-new-content"></span>';
+  }
+
+  $output = theme('status_messages') . drupal_render($form);
+  $js = drupal_add_js();
+  $settings = call_user_func_array('array_merge_recursive', $js['settings']['data']);
+
+  $commands = array();
+  $commands[] = ajax_command_replace(NULL, $output, $settings);
+  return array('#type' => 'ajax', '#commands' => $commands);
+}
+
+/**
  * Implements hook_file_view_alter().
  */
 function commons_media_file_view_alter(&$build) {
diff --git a/modules/commons/commons_notify/commons_notify.features.inc b/modules/commons/commons_notify/commons_notify.features.inc
index 166d80d..529cbef 100644
--- a/modules/commons/commons_notify/commons_notify.features.inc
+++ b/modules/commons/commons_notify/commons_notify.features.inc
@@ -29,14 +29,14 @@ function commons_notify_default_message_type() {
     "arguments" : null,
     "message_text" : { "und" : [
         {
-          "value" : "New comment on [message:field-target-nodes:0:title] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title]",
+          "value" : "New comment on [message:field-target-nodes:0:title_field] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title_field]",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003ENew comment on [message:field-target-nodes:0:title] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title]\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003ENew comment on [message:field-target-nodes:0:title_field] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title_field]\\u003C\\/p\\u003E\\n"
         },
         {
-          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title] [commons-groups:in-groups-text]:\\r\\n\\r\\n[message:field-target-comments:0:body]\\r\\n\\r\\nRead \\u0026 respond: [message:field-target-comments:0:url]\\r\\nUpdate your notification settings: [site:url]\\/user\\/[message:user:uid]\\/notification-settings",
+          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title_field] [commons-groups:in-groups-text]:\\r\\n\\r\\n[message:field-target-comments:0:body]\\r\\n\\r\\nRead \\u0026 respond: [message:field-target-comments:0:url]\\r\\nUpdate your notification settings: [site:url]\\/user\\/[message:user:uid]\\/notification-settings",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title] [commons-groups:in-groups-text]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003ERead \\u0026amp; respond: [message:field-target-comments:0:url]\\u003Cbr \\/\\u003E\\nUpdate your notification settings: [site:url]\\/user\\/[message:user:uid]\\/notification-settings\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title_field] [commons-groups:in-groups-text]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003ERead \\u0026amp; respond: [message:field-target-comments:0:url]\\u003Cbr \\/\\u003E\\nUpdate your notification settings: [site:url]\\/user\\/[message:user:uid]\\/notification-settings\\u003C\\/p\\u003E\\n"
         }
       ]
     },
@@ -56,14 +56,14 @@ function commons_notify_default_message_type() {
     "arguments" : null,
     "message_text" : { "und" : [
         {
-          "value" : "New comment on [message:field-target-nodes:0:title] ",
+          "value" : "New comment on [message:field-target-nodes:0:title_field] ",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003ENew comment on [message:field-target-nodes:0:title]\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003ENew comment on [message:field-target-nodes:0:title_field]\\u003C\\/p\\u003E\\n"
         },
         {
-          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title]:\\r\\n\\r\\n[message:field-target-comments:0:body]\\r\\n\\r\\nRead \\u0026 respond: [message:field-target-comments:0:url]\\r\\nUpdate your notification settings: [site:url]\\/notification-settings",
+          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title_field]:\\r\\n\\r\\n[message:field-target-comments:0:body]\\r\\n\\r\\nRead \\u0026 respond: [message:field-target-comments:0:url]\\r\\nUpdate your notification settings: [site:url]\\/notification-settings",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003ERead \\u0026amp; respond: [message:field-target-comments:0:url]\\u003Cbr \\/\\u003E\\nUpdate your notification settings: [site:url]\\/notification-settings\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:author] commented on [message:field-target-nodes:0:title_field]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-comments:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003ERead \\u0026amp; respond: [message:field-target-comments:0:url]\\u003Cbr \\/\\u003E\\nUpdate your notification settings: [site:url]\\/notification-settings\\u003C\\/p\\u003E\\n"
         }
       ]
     },
@@ -80,14 +80,14 @@ function commons_notify_default_message_type() {
     "arguments" : null,
     "message_text" : { "und" : [
         {
-          "value" : "New [message:field-target-nodes:0:content-type] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title]",
+          "value" : "New [message:field-target-nodes:0:content-type] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title_field]",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003ENew [message:field-target-nodes:0:content-type] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title]\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003ENew [message:field-target-nodes:0:content-type] in [message:field-target-nodes:0:og-group-ref:0:title]: [message:field-target-nodes:0:title_field]\\u003C\\/p\\u003E\\n"
         },
         {
-          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\r\\n\\r\\n[message:field-target-nodes:0:body]\\r\\n\\r\\n\\r\\nPermalink: [message:field-target-nodes:0:url]\\r\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\r\\n\\r\\nChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings",
+          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title_field]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\r\\n\\r\\n[message:field-target-nodes:0:body]\\r\\n\\r\\n\\r\\nPermalink: [message:field-target-nodes:0:url]\\r\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\r\\n\\r\\nChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003EPermalink: [message:field-target-nodes:0:url]\\u003Cbr \\/\\u003E\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\u003C\\/p\\u003E\\n\\u003Cp\\u003EChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title_field]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003EPermalink: [message:field-target-nodes:0:url]\\u003Cbr \\/\\u003E\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\u003C\\/p\\u003E\\n\\u003Cp\\u003EChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings\\u003C\\/p\\u003E\\n"
         }
       ]
     },
@@ -104,14 +104,14 @@ function commons_notify_default_message_type() {
     "arguments" : null,
     "message_text" : { "und" : [
         {
-          "value" : "New [message:field-target-nodes:0:content-type] on [site:name]: [message:field-target-nodes:0:title]",
+          "value" : "New [message:field-target-nodes:0:content-type] on [site:name]: [message:field-target-nodes:0:title_field]",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003ENew [message:field-target-nodes:0:content-type] on [site:name]: [message:field-target-nodes:0:title]\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003ENew [message:field-target-nodes:0:content-type] on [site:name]: [message:field-target-nodes:0:title_field]\\u003C\\/p\\u003E\\n"
         },
         {
-          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\r\\n\\r\\n[message:field-target-nodes:0:body]\\r\\n\\r\\n\\r\\nPermalink: [message:field-target-nodes:0:url]\\r\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\r\\n\\r\\nChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings",
+          "value" : "Hi [message:user:name],\\r\\n\\r\\n[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title_field]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\r\\n\\r\\n[message:field-target-nodes:0:body]\\r\\n\\r\\n\\r\\nPermalink: [message:field-target-nodes:0:url]\\r\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\r\\n\\r\\nChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings",
           "format" : "plain_text",
-          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003EPermalink: [message:field-target-nodes:0:url]\\u003Cbr \\/\\u003E\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\u003C\\/p\\u003E\\n\\u003Cp\\u003EChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings\\u003C\\/p\\u003E\\n"
+          "safe_value" : "\\u003Cp\\u003EHi [message:user:name],\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:author] created the [message:field-target-nodes:0:content-type] \\u201c[message:field-target-nodes:0:title_field]\\u201d on [site:name] [commons-groups:in-groups-text] on [message:field-target-nodes:0:created]:\\u003C\\/p\\u003E\\n\\u003Cp\\u003E[message:field-target-nodes:0:body]\\u003C\\/p\\u003E\\n\\u003Cp\\u003EPermalink: [message:field-target-nodes:0:url]\\u003Cbr \\/\\u003E\\nAdd a comment at [message:field-target-nodes:0:url]#comment-form\\u003C\\/p\\u003E\\n\\u003Cp\\u003EChange email notifications at [site:url]user\\/[message:user:uid]\\/notification-settings\\u003C\\/p\\u003E\\n"
         }
       ]
     },
diff --git a/modules/commons/commons_notify/commons_notify.module b/modules/commons/commons_notify/commons_notify.module
index 410a920..2cfcc7d 100644
--- a/modules/commons/commons_notify/commons_notify.module
+++ b/modules/commons/commons_notify/commons_notify.module
@@ -101,65 +101,3 @@ function commons_notify_comment_insert($comment) {
   );
   message_subscribe_send_message('comment', $comment, $message, array('email' => $options));
 }
-
-/**
- * Implements hook_commons_utility_links().
- *
- * Add unread-invitations and unread-messages notifications to utility links.
- */
-function commons_notify_commons_utility_links_alter(&$links) {
-  global $user;
-
-  if (user_is_anonymous()) {
-    // Anonymous user.
-    return;
-  }
-
-  $new_links = array(
-    'name' => $links['name'],
-  );
-
-  $account = $user;
-
-  $unread_invitations = 0;
-  if (module_exists('commons_trusted_contacts')) {
-    $unread_invitations = count(commons_trusted_contacts_get_pending_invitations($account->uid));
-  }
-
-  $unread_messages = 0;
-  if (module_exists('privatemsg')) {
-    $unread_messages = privatemsg_unread_count($account);
-  }
-
-
-  if (empty($unread_invitations) && empty($unread_messages)) {
-    // Provide a default mailbox icon pointing to the private messages UI
-    // when there are no unread messages or invitations.
-    $new_links['no-unread-messages'] = array(
-      'href' => 'user/' . $user->uid . '/contacts',
-      'query' => array('qt-commons_trusted_contacts' => 'messages'),
-      'title' => t('No unread messages'),
-    );
-  }
-
-  if ($unread_invitations) {
-    $new_links['unread-invitations']= array(
-      'href' => 'user/' . $user->uid . '/contacts',
-      'query' => array('qt-commons_trusted_contacts' => 'invitations'),
-      'title' => format_plural($unread_invitations, '1 invitation', '@count invitations'),
-    );
-  }
-
-  if ($unread_messages) {
-    $new_links['unread-messages']= array(
-      'href' => 'user/' . $user->uid . '/contacts',
-      'query' => array('qt-commons_trusted_contacts' => 'messages'),
-      'title' => format_plural($unread_messages, '1 message', '@count messages'),
-    );
-  }
-
-  $new_links['logout'] = $links['logout'];
-  $new_links['settings'] = $links['settings'];
-
-  $links = $new_links;
-}
diff --git a/modules/commons/commons_polls/commons_polls.module b/modules/commons/commons_polls/commons_polls.module
index 98b89fd..bf5f98a 100644
--- a/modules/commons/commons_polls/commons_polls.module
+++ b/modules/commons/commons_polls/commons_polls.module
@@ -23,7 +23,7 @@ function commons_polls_commons_bw_group_widget() {
 }
 
 /**
- * Implements hook_commons_entity_integration.
+ * Implements hook_commons_entity_integration().
  */
 function commons_polls_commons_entity_integration() {
   return array(
@@ -90,7 +90,7 @@ function commons_polls_form_commons_bw_partial_node_form_alter(&$form, &$form_st
 
   // Prepare the form for collapsing.
   $form['body']['#attributes']['class'][] = 'trigger-field';
-  foreach (array('field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
+  foreach (array('field_media', 'field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
     if (isset($form[$field])) {
       $form[$field]['#attributes']['class'][] = 'hideable-field';
     }
diff --git a/modules/commons/commons_posts/commons_posts.features.inc b/modules/commons/commons_posts/commons_posts.features.inc
index bf03f79..46180d3 100644
--- a/modules/commons/commons_posts/commons_posts.features.inc
+++ b/modules/commons/commons_posts/commons_posts.features.inc
@@ -41,13 +41,13 @@ function commons_posts_default_message_type() {
           "safe_value" : "[message:user:picture:35x35]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E posted \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E posted \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E posted \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E posted \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E"
         },
         {
           "value" : "[commons-groups:in-groups-text]",
-          "format" : "full_html",
+          "format" : "filtered_html",
           "safe_value" : "[commons-groups:in-groups-text]"
         }
       ]
diff --git a/modules/commons/commons_posts/commons_posts.module b/modules/commons/commons_posts/commons_posts.module
index ab59e3f..1d34611 100644
--- a/modules/commons/commons_posts/commons_posts.module
+++ b/modules/commons/commons_posts/commons_posts.module
@@ -57,7 +57,7 @@ function commons_posts_form_commons_bw_partial_node_form_alter(&$form, &$form_st
 
   // Set fields as hideable so the forms can be compacted.
   $form['body']['#attributes']['class'][] = 'trigger-field';
-  foreach (array('field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
+  foreach (array('field_media', 'field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
     if (isset($form[$field])) {
       $form[$field]['#attributes']['class'][] = 'hideable-field';
     }
@@ -92,7 +92,7 @@ function commons_posts_commons_activity_streams_message_selection_alter(&$messag
 }
 
 /**
- * Implements hook_commons_entity_integration.
+ * Implements hook_commons_entity_integration().
  */
 function commons_posts_commons_entity_integration() {
   return array(
diff --git a/modules/commons/commons_q_a/commons_q_a.features.inc b/modules/commons/commons_q_a/commons_q_a.features.inc
index 994358d..f230f42 100644
--- a/modules/commons/commons_q_a/commons_q_a.features.inc
+++ b/modules/commons/commons_q_a/commons_q_a.features.inc
@@ -44,9 +44,9 @@ function commons_q_a_default_message_type() {
           "safe_value" : "[message:user:picture:35x35]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E answered the question \\u003Cem\\u003E[message:field-target-nodes:0:field-related-question:title]\\u003C\\/em\\u003E with \\u0022\\u003Ca href=\\u0022[message:field-target-nodes:0:field-related-question:url]#node-[message:field-target-nodes:0:nid]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E\\u0022",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E answered the question \\u003Cem\\u003E[message:field-target-nodes:0:field-related-question:title]\\u003C\\/em\\u003E with \\u0022\\u003Ca href=\\u0022[message:field-target-nodes:0:field-related-question:url]#node-[message:field-target-nodes:0:nid]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E\\u0022",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E answered the question \\u003Cem\\u003E[message:field-target-nodes:0:field-related-question:title]\\u003C\\/em\\u003E with \\u0022\\u003Ca href=\\u0022[message:field-target-nodes:0:field-related-question:url]#node-[message:field-target-nodes:0:nid]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E\\u0022"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E answered the question \\u003Cem\\u003E[message:field-target-nodes:0:field-related-question:title]\\u003C\\/em\\u003E with \\u0022\\u003Ca href=\\u0022[message:field-target-nodes:0:field-related-question:url]#node-[message:field-target-nodes:0:nid]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E\\u0022"
         },
         {
           "value" : "[commons-groups:in-groups-text]",
@@ -73,9 +73,9 @@ function commons_q_a_default_message_type() {
           "safe_value" : "[message:user:picture:35x35]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E asked the question \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E asked the question \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E asked the question \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E asked the question \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E"
         },
         {
           "value" : "[commons-groups:in-groups-text]",
diff --git a/modules/commons/commons_q_a/commons_q_a.module b/modules/commons/commons_q_a/commons_q_a.module
index f27edbe..d9a3783 100644
--- a/modules/commons/commons_q_a/commons_q_a.module
+++ b/modules/commons/commons_q_a/commons_q_a.module
@@ -75,7 +75,7 @@ function commons_q_a_form_commons_bw_partial_node_form_alter(&$form, &$form_stat
 
   // Set fields as hideable so the forms can be compacted.
   $form['body']['#attributes']['class'][] = 'trigger-field';
-  foreach (array('field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
+  foreach (array('field_media', 'field_image', 'og_group_ref', 'choice_wrapper', 'actions') as $field) {
     if (isset($form[$field])) {
       $form[$field]['#attributes']['class'][] = 'hideable-field';
     }
@@ -245,7 +245,7 @@ function commons_q_a_commons_bw_create_all_widget($group) {
 }
 
 /**
- * Implements hook_commons_entity_integration.
+ * Implements hook_commons_entity_integration().
  */
 function commons_q_a_commons_entity_integration() {
   return array(
diff --git a/modules/commons/commons_radioactivity/commons_radioactivity.module b/modules/commons/commons_radioactivity/commons_radioactivity.module
index e367a96..7a5cfe4 100644
--- a/modules/commons/commons_radioactivity/commons_radioactivity.module
+++ b/modules/commons/commons_radioactivity/commons_radioactivity.module
@@ -98,7 +98,7 @@ function commons_radioactivity_features_pipe_alter(&$pipe, $data, $export) {
 */
 function commons_radioactivity_get_radioactive_entity_types() {
   // Find all Commons Entity integrations.
-  $commons_entity_integrations = module_invoke_all('commons_entity_integration');
+  $commons_entity_integrations = commons_entity_integration_info();
   if (empty($commons_entity_integrations)) {
     return array();
   }
diff --git a/modules/commons/commons_social_sharing/commons_social_sharing.module b/modules/commons/commons_social_sharing/commons_social_sharing.module
index db2ac2f..2a0bc9e 100644
--- a/modules/commons/commons_social_sharing/commons_social_sharing.module
+++ b/modules/commons/commons_social_sharing/commons_social_sharing.module
@@ -26,7 +26,7 @@ function commons_social_sharing_features_export_alter(&$export, $module_name) {
   if (!empty($items['rate_widgets']->value)) {
     foreach($items['rate_widgets']->value as $key => $widget) {
       if ($widget->name == 'commons_social_sharing') {
-        $commons_entity_integrations = module_invoke_all('commons_entity_integration');
+        $commons_entity_integrations = commons_entity_integration_info();
         if (!empty($commons_entity_integrations['node'])) {
           foreach ($commons_entity_integrations['node'] as $bundle => $options) {
             if (!isset($options['exclude_rate']) || $options['exclude_rate'] != TRUE) {
diff --git a/modules/commons/commons_topics/commons_topics.module b/modules/commons/commons_topics/commons_topics.module
index 0b43123..b4dc6dd 100644
--- a/modules/commons/commons_topics/commons_topics.module
+++ b/modules/commons/commons_topics/commons_topics.module
@@ -51,7 +51,7 @@ function commons_topics_form_node_form_alter(&$form, &$form_state) {
  */
 function commons_topics_get_entity_types_with_topics() {
   // Find all Commons Entity integrations.
-  $commons_entity_integrations = module_invoke_all('commons_entity_integration');
+  $commons_entity_integrations = commons_entity_integration_info();
   if (empty($commons_entity_integrations)) {
     return array();
   }
diff --git a/modules/commons/commons_trusted_contacts/commons_trusted_contacts.commons_utility_links.inc b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.commons_utility_links.inc
new file mode 100644
index 0000000..3ffe7ea
--- /dev/null
+++ b/modules/commons/commons_trusted_contacts/commons_trusted_contacts.commons_utility_links.inc
@@ -0,0 +1,57 @@
+<?php
+
+/**
+ * @file
+ * Commons Utility Links hooks implemented by the Commons Trusted Contacts module.
+ */
+
+/**
+ * Implements hook_commons_utility_links().
+ */
+function commons_trusted_contacts_commons_utility_links() {
+  $links = array();
+
+  if (user_is_logged_in()) {
+    global $user;
+    $account = $user;
+
+    // Check for unread invitations.
+    $unread_invitations = count(commons_trusted_contacts_get_pending_invitations($account->uid));
+
+    // Check for unread messages.
+    $unread_messages = privatemsg_unread_count($account);
+
+    // Provide a default mailbox icon pointing to the private messages UI when
+    // there are no unread messages or invitations.
+    if (empty($unread_invitations) && empty($unread_messages)) {
+      $links['no-unread-messages'] = array(
+        'href' => 'user/' . $user->uid . '/contacts',
+        'query' => array('qt-commons_trusted_contacts' => 'messages'),
+        'title' => t('No unread messages'),
+        'weight' => -9,
+      );
+    }
+
+    // Add a link to the user's invitations.
+    if ($unread_invitations) {
+      $links['unread-invitations']= array(
+        'href' => 'user/' . $user->uid . '/contacts',
+        'query' => array('qt-commons_trusted_contacts' => 'invitations'),
+        'title' => format_plural($unread_invitations, '1 invitation', '@count invitations'),
+        'weight' => -8,
+      );
+    }
+
+    // Add a link to the user's unread messages.
+    if ($unread_messages) {
+      $links['unread-messages']= array(
+        'href' => 'user/' . $user->uid . '/contacts',
+        'query' => array('qt-commons_trusted_contacts' => 'messages'),
+        'title' => format_plural($unread_messages, '1 message', '@count messages'),
+        'weight' => -7,
+      );
+    }
+  }
+
+  return $links;
+}
diff --git a/modules/commons/commons_utility_links/commons_utility_links.api.php b/modules/commons/commons_utility_links/commons_utility_links.api.php
new file mode 100644
index 0000000..ac904e8
--- /dev/null
+++ b/modules/commons/commons_utility_links/commons_utility_links.api.php
@@ -0,0 +1,68 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by the Commons Utility Links module.
+ */
+
+/**
+ * @addtogroup hooks
+ * @{
+ */
+
+/**
+ * Define utility links.
+ *
+ * This hook allows modules to register utility links for the functionality that
+ * they provide. For example, a social integration module could use it to
+ * register a "Find Friends" utility link which points to a page where the
+ * current user can search for other site users that they have connected with on
+ * social networks such as Twitter or Facebook.
+ *
+ * @return
+ *   An associative array of utility links whose keys are used as its CSS class.
+ *   Each link should be itself an array, with the same elements used in
+ *   theme_links(), except for the addition of a 'weight' element that is used
+ *   for ordering the links.
+ *
+ * For a detailed usage example, see commons_utility_links.module.
+ *
+ * @see theme_links()
+ * @see hook_commons_utility_links_alter()
+ */
+function hook_commons_utility_links() {
+  $links = array();
+
+  if (user_is_logged_in()) {
+    global $user;
+    $account = $user;
+    $links['find_fiends']= array(
+      'href' => 'user/' . $account->uid . '/find_friends',
+      'title' => t('Find friends'),
+    );
+  }
+
+  return $links;
+}
+
+/**
+ * Perform alterations on utility links.
+ *
+ * @param $links
+ *   An associative array of utility links whose keys are used as its CSS class.
+ *   Each link should be itself an array, with the same elements used in
+ *   theme_links(), except for the addition of a 'weight' element that is used
+ *   for ordering the links.
+ *
+ * @see theme_links()
+ * @see hook_commons_utility_links()
+ */
+function hook_commons_utility_links_alter(&$links) {
+  // Change the title of the user account link from the user's name to
+  // 'Account'.
+  $links['name']['title'] = t('Account');
+}
+
+/**
+ * @} End of "addtogroup hooks".
+ */
diff --git a/modules/commons/commons_utility_links/commons_utility_links.commons_utility_links.inc b/modules/commons/commons_utility_links/commons_utility_links.commons_utility_links.inc
new file mode 100644
index 0000000..abe465c
--- /dev/null
+++ b/modules/commons/commons_utility_links/commons_utility_links.commons_utility_links.inc
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * @file
+ * Commons Utility Links hooks implemented by the Commons Utility Links module.
+ */
+
+/**
+ * Implements hook_commons_utility_links().
+ */
+function commons_utility_links_commons_utility_links() {
+  if (user_is_logged_in()) {
+    global $user;
+    $account = $user;
+    $links['name'] = array(
+      'href' => 'user',
+      'title' => format_username($account),
+      'weight' => -10,
+    );
+    $links['logout'] = array(
+      'href' => 'user/logout',
+      'title' => t('Logout'),
+      'weight' => 9,
+    );
+  }
+  else {
+    if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
+      $links['signup'] = array(
+        'href' => 'user/register',
+        'title' => t('Signup'),
+        'weight' => -10,
+      );
+    }
+    $links['login'] = array(
+      'href' => 'user/login',
+      'title' => t('Login'),
+      'weight' => -9,
+    );
+  }
+
+  return $links;
+}
diff --git a/modules/commons/commons_utility_links/commons_utility_links.module b/modules/commons/commons_utility_links/commons_utility_links.module
index f647c97..e8c2f5c 100644
--- a/modules/commons/commons_utility_links/commons_utility_links.module
+++ b/modules/commons/commons_utility_links/commons_utility_links.module
@@ -1,6 +1,18 @@
 <?php
 
 /**
+ * Implements hook_hook_info().
+ */
+function commons_utility_links_hook_info() {
+  $hooks = array(
+    'commons_utility_links',
+    'commons_utility_links_alter',
+  );
+
+  return array_fill_keys($hooks, array('group' => 'commons_utility_links'));
+}
+
+/**
  * Implements hook_block_info().
  */
 function commons_utility_links_block_info() {
@@ -12,48 +24,33 @@ function commons_utility_links_block_info() {
     'pages' => 0,
     'weight' => 1,
   );
+
   return $blocks;
 }
 
 /**
  * Implements hook_block_view().
  */
-function commons_utility_links_block_view() {
-  $block['subject'] = '';
-  $block['content'] = '';
-  $links = array();
-
-  if (user_is_logged_in()) {
-    global $user;
-    $account = $user;
-    $links['name'] = array(
-      'href' => 'user',
-      'title' => format_username($account),
-    );
-    $links['logout'] = array(
-      'href' => 'user/logout',
-      'title' => t('Logout'),
-    );
-  }
-  else {
-    if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
-      $links['signup'] = array(
-        'href' => 'user/register',
-        'title' => t('Signup'),
-      );
-    }
-    $links['login'] = array(
-      'href' => 'user/login',
-      'title' => t('Login'),
+function commons_utility_links_block_view($delta = '') {
+  $block = array();
+
+  // Gather all of the available utility links.
+  $links = module_invoke_all('commons_utility_links');
+  drupal_alter('commons_utility_links', $links);
+
+  if (!empty($links)) {
+    // Sort the links by weight before rendering them.
+    uasort($links, 'drupal_sort_weight');
+
+    $block['subject'] = NULL;
+    $block['content'] = array(
+      '#theme' => 'links__commons_utility_links',
+      '#links' => $links,
+      '#attributes' => array(
+        'class' => array('commons-utility-links'),
+      ),
     );
   }
-  drupal_alter('commons_utility_links', $links);
-  $block['content'] = array(
-    '#theme' => 'links__commons_utility_links',
-    '#links' => $links,
-    '#attributes' => array(
-      'class' => array('commons-utility-links'),
-    ),
-  );
+
   return $block;
 }
diff --git a/modules/commons/commons_wikis/commons_wikis.features.inc b/modules/commons/commons_wikis/commons_wikis.features.inc
index 66b1e34..13fd5b9 100644
--- a/modules/commons/commons_wikis/commons_wikis.features.inc
+++ b/modules/commons/commons_wikis/commons_wikis.features.inc
@@ -44,9 +44,9 @@ function commons_wikis_default_message_type() {
           "safe_value" : "[message:user:picture:35x35]"
         },
         {
-          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E has updated the \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E wiki page",
+          "value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E has updated the \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E wiki page",
           "format" : "full_html",
-          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E has updated the \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title]\\u003C\\/a\\u003E wiki page"
+          "safe_value" : "\\u003Ca href=\\u0022[message:user:url:absolute]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E has updated the \\u003Ca href=\\u0022[message:field-target-nodes:0:url]\\u0022\\u003E[message:field-target-nodes:0:title_field]\\u003C\\/a\\u003E wiki page"
         },
         {
           "value" : "[commons-groups:in-groups-text]",
diff --git a/modules/commons/commons_wikis/commons_wikis.module b/modules/commons/commons_wikis/commons_wikis.module
index 9c571a8..356bdf7 100644
--- a/modules/commons/commons_wikis/commons_wikis.module
+++ b/modules/commons/commons_wikis/commons_wikis.module
@@ -156,14 +156,13 @@ function commons_wikis_commons_bw_group_widget() {
 }
 
 /**
- * Implements hook_commons_entity_integration.
+ * Implements hook_commons_entity_integration().
  */
 function commons_wikis_commons_entity_integration() {
   return array(
     'node' => array(
       'wiki' => array(
         'auto_title_instance' => FALSE,
-        'media' => TRUE,
       ),
     ),
   );
diff --git a/scripts/build_distro.sh b/scripts/build_distro.sh
index 913acf0..193a604 100755
--- a/scripts/build_distro.sh
+++ b/scripts/build_distro.sh
@@ -200,7 +200,7 @@ case $1 in
     if [[ -n $2 ]] && [[ -n $3 ]]; then
       BUILD_PATH=$2
     else
-      echo "Usage build_distro.sh site-install [build_path] [site] [admin-email] [admin-pass]"
+      echo "Usage build_distro.sh site-install [build_path] [site] [demo-content] [admin-email] [admin-pass]"
     fi
     if [[ -n $3 ]]; then
       SITE=$3
@@ -213,12 +213,12 @@ case $1 in
       DEMO_CONTENT='FALSE'
     fi
     if [[ -n $5 ]]; then
-      ADMIN_EMAIL=$4
+      ADMIN_EMAIL=$5
     else
       ADMIN_EMAIL='admin@example.com'
     fi
     if [[ -n $6 ]]; then
-      ADMIN_PASS=$4
+      ADMIN_PASS=$6
     else
       ADMIN_PASS='admin'
     fi
diff --git a/themes/commons/commons_origins/.gitignore b/themes/commons/commons_origins/.gitignore
index 6173eab..8b86ab2 100644
--- a/themes/commons/commons_origins/.gitignore
+++ b/themes/commons/commons_origins/.gitignore
@@ -1,2 +1,3 @@
 /.sass-cache/
+.bundle
 .DS_Store
diff --git a/themes/commons/commons_origins/Gemfile b/themes/commons/commons_origins/Gemfile
new file mode 100644
index 0000000..996b525
--- /dev/null
+++ b/themes/commons/commons_origins/Gemfile
@@ -0,0 +1,7 @@
+# A sample Gemfile
+source "https://rubygems.org"
+
+# gem "rails"
+gem 'sass'
+gem 'compass'
+gem 'oily_png'
diff --git a/themes/commons/commons_origins/Gemfile.lock b/themes/commons/commons_origins/Gemfile.lock
new file mode 100644
index 0000000..2f03b5a
--- /dev/null
+++ b/themes/commons/commons_origins/Gemfile.lock
@@ -0,0 +1,20 @@
+GEM
+  remote: https://rubygems.org/
+  specs:
+    chunky_png (1.2.9)
+    compass (0.12.2)
+      chunky_png (~> 1.2)
+      fssm (>= 0.2.7)
+      sass (~> 3.1)
+    fssm (0.2.10)
+    oily_png (1.1.0)
+      chunky_png (~> 1.2.7)
+    sass (3.2.13)
+
+PLATFORMS
+  ruby
+
+DEPENDENCIES
+  compass
+  oily_png
+  sass
diff --git a/themes/commons/commons_origins/commons_origins.info b/themes/commons/commons_origins/commons_origins.info
index 4532f7e..60b5fcd 100644
--- a/themes/commons/commons_origins/commons_origins.info
+++ b/themes/commons/commons_origins/commons_origins.info
@@ -56,6 +56,15 @@
   ; unset_css[sites/all/modules/foobar_module/foobar_module.css] = 1
 
 
+;-----------// Breakpoints
+
+  breakpoints[Commons small portrait] = only screen and (max-width:320px)
+  breakpoints[Commons small landscape] = only screen and (min-width:321px) and (max-width:480px)
+  breakpoints[Commons medium portrait] = only screen and (min-width:481px) and (max-width:768px)
+  breakpoints[Commons medium landscape] = only screen and (min-width:769px) and (max-width:934px
+  breakpoints[Commons large] = only screen and (min-width:935px)
+
+
 ;----------// Scripts
 
   scripts[] = scripts/modernizr.js
diff --git a/themes/commons/commons_origins/css/commons-media.css b/themes/commons/commons_origins/css/commons-media.css
new file mode 100644
index 0000000..5323fb5
--- /dev/null
+++ b/themes/commons/commons_origins/css/commons-media.css
@@ -0,0 +1,84 @@
+/**
+ * @file
+ * Style overrides for the Commons Media feature.
+ */
+.field-name-field-media-form {
+  margin-bottom: 10px;
+}
+
+.field-name-field-media .field-add-more-submit, #quicktabs-container-commons_bw .quicktabs-tabpage .field-name-field-media .field-add-more-submit {
+  margin: 10px 0;
+}
+
+table[id^="field-media-values"],
+table[id^="field-media-values"] thead,
+table[id^="field-media-values"] tbody,
+table[id^="field-media-values"] tr,
+table[id^="field-media-values"] th,
+table[id^="field-media-values"] td {
+  background-color: transparent;
+  border: none;
+}
+table[id^="field-media-values"] th {
+  padding: 0;
+}
+table[id^="field-media-values"] th label {
+  margin: 0;
+}
+table[id^="field-media-values"] td.field-multiple-drag {
+  width: 20px;
+}
+table[id^="field-media-values"] a.tabledrag-handle .handle {
+  margin: 0;
+}
+table[id^="field-media-values"] .form-item {
+  padding-left: 6.875em;
+}
+table[id^="field-media-values"] .preview {
+  float: left;
+  font-size: 1em;
+  margin-left: -6.875em;
+  width: 6.25em;
+  min-height: 6.25em;
+  background: #858585;
+  cursor: pointer;
+}
+@media only screen and (max-width: 480px) {
+  table[id^="field-media-values"] .form-item {
+    padding-left: 0;
+  }
+  table[id^="field-media-values"] .preview {
+    display: block;
+    float: none;
+    margin: 10px auto;
+  }
+}
+table[id^="field-media-values"] .media-item {
+  padding: 0;
+  background-color: transparent;
+  border: none;
+}
+table[id^="field-media-values"] .media-item img {
+  display: block;
+  margin: 0;
+}
+table[id^="field-media-values"] .media-item .label-wrapper {
+  position: static;
+}
+table[id^="field-media-values"] .media-item .label-wrapper label {
+  margin: 0;
+}
+table[id^="field-media-values"] .media-widget .preview .media-item {
+  margin: 0;
+}
+table[id^="field-media-values"] .media-widget .preview .media-item .label-wrapper label {
+  color: white;
+}
+table[id^="field-media-values"] .media-widget .button {
+  display: block;
+}
+@media only screen and (min-width: 769px) {
+  table[id^="field-media-values"] .media-widget .button {
+    max-width: 50%;
+  }
+}
diff --git a/themes/commons/commons_origins/sass/commons-media.scss b/themes/commons/commons_origins/sass/commons-media.scss
new file mode 100644
index 0000000..3742746
--- /dev/null
+++ b/themes/commons/commons_origins/sass/commons-media.scss
@@ -0,0 +1,114 @@
+/**
+ * @file
+ * Style overrides for the Commons Media feature.
+ */
+
+@import "base";
+
+.field-name-field-media-form {
+  margin-bottom: $gutter-width;
+}
+
+.field-name-field-media .field-add-more-submit {
+  &,
+  #quicktabs-container-commons_bw .quicktabs-tabpage & {
+    margin: $gutter-width 0;
+  }
+}
+
+table[id^="field-media-values"] {
+  &,
+  thead,
+  tbody,
+  tr,
+  th,
+  td {
+    background-color: transparent;
+    border: none;
+  }
+
+  th {
+    padding: 0;
+
+    label {
+      margin: 0;
+    }
+  }
+
+  td {
+    &.field-multiple-drag {
+      width: 20px;
+    }
+  }
+
+  a.tabledrag-handle .handle {
+    margin: 0;
+  }
+
+  .form-item {
+    padding-left: px-to-em(100px + $gutter-width);
+  }
+
+  .preview {
+    float: left;
+    font-size: 1em;
+    margin-left: -(px-to-em(100px + $gutter-width));
+    width: px-to-em(100px);
+    min-height: px-to-em(100px);
+    background: $light_gray;
+    cursor: pointer;
+  }
+
+  @include respond(only-small) {
+    .form-item {
+      padding-left: 0;
+    }
+
+    .preview {
+      display: block;
+      float: none;
+      margin: $gutter-width auto;
+    }
+  }
+
+  .media-item {
+    padding: 0;
+    background-color: transparent;
+    border: none;
+
+    img {
+      display: block;
+      margin: 0;
+    }
+
+    .label-wrapper {
+      position: static;
+
+      label {
+        margin: 0;
+      }
+    }
+  }
+
+  .media-widget {
+    .preview {
+      .media-item {
+        margin: 0;
+
+        .label-wrapper {
+          label {
+            color: $white;
+          }
+        }
+      }
+    }
+
+    .button {
+      display: block;
+
+      @include respond(large) {
+        max-width: 50%;
+      }
+    }
+  }
+}
diff --git a/themes/commons/commons_origins/scripts/commons_origins.js b/themes/commons/commons_origins/scripts/commons_origins.js
index 0949fe5..2e05894 100644
--- a/themes/commons/commons_origins/scripts/commons_origins.js
+++ b/themes/commons/commons_origins/scripts/commons_origins.js
@@ -43,7 +43,7 @@ jQuery(document).ready(function($){
   $(document).delegate('.views-exposed-widgets .form-select', 'click', function() {
     $('.views-exposed-widgets').addClass('widgets-active');
   });
-  console.log($('#quicktabs-commons_follow_ui a.flag').length);
+
   if($('#quicktabs-commons_follow_ui a.flag').length > 0) {
       set_follow_checkboxes();
 
diff --git a/themes/commons/commons_origins/template.php b/themes/commons/commons_origins/template.php
index 1f408a5..ce26a21 100755
--- a/themes/commons/commons_origins/template.php
+++ b/themes/commons/commons_origins/template.php
@@ -123,7 +123,6 @@ function commons_origins_preprocess_html(&$variables, $hook) {
   // Browser/platform sniff - adds body classes such as ipad, webkit, chrome
   // etc.
   $variables['classes_array'][] = css_browser_selector();
-
 }
 
 /**
@@ -263,6 +262,11 @@ function commons_origins_preprocess_page(&$variables, $hook) {
 
   $cf_pos = in_array('clearfix', $variables['branding_attributes_array']['class']);
   unset($variables['branding_attributes_array']['class'][$cf_pos]);
+
+  // Only load the media styles if Commons Media is enabled.
+  if (module_exists('commons_media')) {
+    drupal_add_css(drupal_get_path('theme', 'commons_origins') . '/css/commons-media.css', array('media' => 'screen', 'group' => CSS_THEME));
+  }
 }
 
 /**
