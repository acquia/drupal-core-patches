diff --git a/profiles/commons/.travis.yml b/profiles/commons/.travis.yml
index 230ccfb..fb946e7 100644
--- a/profiles/commons/.travis.yml
+++ b/profiles/commons/.travis.yml
@@ -8,7 +8,7 @@ php:
 
 notifications:
   email:
-    - marc.seeger@acquia.com
+    - commons-bulk@acquia.com
 
 branches:
   only:
@@ -35,7 +35,7 @@ before_install:
   - curl http://localhost:4444/wd/hub
   # For uploading error screenshots
   - "wget http://imgur.com/tools/imgurbash.sh -O $TRAVIS_BUILD_DIR/imgurbash.sh && chmod +x $TRAVIS_BUILD_DIR/imgurbash.sh"
-  
+
 before_script:
   # Grab drush
   - pear channel-discover pear.drush.org
@@ -49,7 +49,7 @@ before_script:
   - sudo a2enmod actions
   - sudo service apache2 restart
   # Install the composer packages for behat / ...
-  - composer --working-dir=tests/ install  
+  - composer --working-dir=tests/ install
 script:
   # Build distro from makefile
   - drush make build-commons.make --no-cache -y packaged
@@ -64,7 +64,7 @@ script:
   # Start running the tests
   - cd tests
   - bin/behat
-  
+
 after_failure:
   - ls -lash $TRAVIS_BUILD_DIR/fail*.png
   - $TRAVIS_BUILD_DIR/imgurbash.sh $TRAVIS_BUILD_DIR/fail*.png
diff --git a/profiles/commons/LICENSE.txt b/profiles/commons/LICENSE.txt
new file mode 100755
index 0000000..d159169
--- /dev/null
+++ b/profiles/commons/LICENSE.txt
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/profiles/commons/commons.info b/profiles/commons/commons.info
index d87b05a..513ae18 100644
--- a/profiles/commons/commons.info
+++ b/profiles/commons/commons.info
@@ -23,6 +23,9 @@ dependencies[] = shortcut
 dependencies[] = taxonomy
 
 ; Install required contributed modules.
+; For Commons 3.6, media is included, but left disabled by default.
+; Uncomment if you wish to enable on install. Alternatively, enabling the
+; commons_media module post install will enable all of the media modules.
 dependencies[] = addressfield
 dependencies[] = addressfield_tokens
 dependencies[] = breakpoints
@@ -35,8 +38,11 @@ dependencies[] = entityreference
 dependencies[] = entitycache
 dependencies[] = edit_profile
 dependencies[] = features
+;dependencies[] = file_entity
 dependencies[] = flag
 dependencies[] = http_client
+;dependencies[] = media
+;dependencies[] = media_internet
 dependencies[] = menu_attributes
 dependencies[] = message
 dependencies[] = message_notify
@@ -44,11 +50,12 @@ dependencies[] = message_subscribe
 dependencies[] = metatag
 dependencies[] = module_filter
 dependencies[] = navbar
+;dependencies[] = oembed
 dependencies[] = og
 dependencies[] = panels
 dependencies[] = paranoia
 dependencies[] = pathauto
-dependencies[] = placeholder
+dependencies[] = elements
 dependencies[] = privatemsg
 dependencies[] = privatemsg_realname
 dependencies[] = quicktabs
@@ -82,6 +89,7 @@ dependencies[] = commons_follow_term
 dependencies[] = commons_follow_user
 dependencies[] = commons_follow_ui
 dependencies[] = commons_like
+;dependencies[] = commons_media
 dependencies[] = commons_search
 dependencies[] = commons_search_core
 dependencies[] = commons_groups
@@ -110,3 +118,10 @@ dependencies[] = commons_trusted_contacts
 
 ; System Requirements.
 php_memory_limit = 128M
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/commons.install b/profiles/commons/commons.install
index d9e3efe..bdcbf57 100644
--- a/profiles/commons/commons.install
+++ b/profiles/commons/commons.install
@@ -14,6 +14,7 @@ function commons_requirements($phase) {
   // Ensure translations don't break during installation.
   $t = get_t();
   if($phase == 'install') {
+
     // Test PHP minimum execution time
     $requirements['php_max_execution_time'] = array(
       'title' => $t('PHP Max Execution Time'),
@@ -25,6 +26,25 @@ function commons_requirements($phase) {
       $requirements['php_max_execution_time']['description'] = $t('Your PHP execution time is too low, please set it greater than or equal to %time seconds.', array('%time' => DRUPAL_MINIMUM_MAX_EXECUTION_TIME));
       $requirements['php_max_execution_time']['severity'] = REQUIREMENT_ERROR;
     }
+
+    if(ini_get('apc.shm_size') != NULL) {
+      // Check for apc.shm_size = 96mb
+      $requirements['apc_shm_size'] = array(
+        'title' => $t('APC shim size'),
+        'value' => ini_get('apc.shm_size'),
+      );
+
+      $shm_size = preg_split('/[a-zA-Z]/', ini_get('apc.shm_size'));
+      $shm_size = $shm_size[0];
+
+      // only check if APC var is being set somewhere (usually apc.ini).
+      // throw error if there is less than 96MB available
+      if ($shm_size && $shm_size < COMMONS_MINIMUM_APC_CACHE) {
+        $requirements['apc_shm_size']['description'] = $t('APC is installed but %shm_size is not enough APC cache to successfully install Drupal Commons.
+           Find your <em>apc.ini</em> file and change the <em>apc.shm_size</em> value to at least <em>96M</em>.', array('%shm_size' => COMMONS_MINIMUM_APC_CACHE . 'M'));
+        $requirements['apc_shm_size']['severity'] = REQUIREMENT_ERROR;
+      }
+    }
   }
   return $requirements;
 }
@@ -220,4 +240,24 @@ function commons_update_3108() {
   );
   features_revert($revert);
   return array();
-}
\ No newline at end of file
+}
+
+/**
+ * Replace the Placeholder module with the Elements module.
+ */
+function commons_update_3109() {
+  if (module_exists('placeholder')) {
+    module_disable(array('placeholder'));
+  }
+  module_enable(array('elements'));
+  return array();
+}
+
+/**
+ * Enable the File Entity, Media, Media Internet, oEmbed and Commons: Media modules.
+ */
+function commons_update_3110() {
+  $module_list = array('file_entity', 'media', 'media_internet', 'oembed', 'commons_media');
+  module_enable($module_list);
+  return array();
+}
diff --git a/profiles/commons/commons.profile b/profiles/commons/commons.profile
index 4e3f4cf..922272c 100644
--- a/profiles/commons/commons.profile
+++ b/profiles/commons/commons.profile
@@ -9,6 +9,11 @@
  */
 define('DRUPAL_MINIMUM_MAX_EXECUTION_TIME', 120);
 
+/*
+ * Define commons minimum APC cache required to operate.
+ */
+define('COMMONS_MINIMUM_APC_CACHE', 96);
+
 /**
  * Implements hook_admin_paths_alter().
  */
diff --git a/profiles/commons/drupal-org.make b/profiles/commons/drupal-org.make
index 6b86224..450332e 100644
--- a/profiles/commons/drupal-org.make
+++ b/profiles/commons/drupal-org.make
@@ -144,6 +144,10 @@ projects[features][type] = "module"
 projects[features][subdir] = "contrib"
 projects[features][version] = "2.0"
 
+projects[file_entity][type] = "module"
+projects[file_entity][subdir] = "contrib"
+projects[file_entity][version] = "2.0-alpha3"
+
 projects[flag][type] = "module"
 projects[flag][subdir] = "contrib"
 projects[flag][version] = "2.1"
@@ -189,11 +193,18 @@ projects[libraries][version] = "2.1"
 
 projects[lingotek][type] = "module"
 projects[lingotek][subdir] = "contrib"
-projects[lingotek][version] = "4.09"
+projects[lingotek][version] = "4.10"
 
 projects[link][type] = "module"
 projects[link][subdir] = "contrib"
-projects[link][version] = "1.1"
+projects[link][version] = "1.2"
+
+projects[media][type] = "module"
+projects[media][subdir] = "contrib"
+projects[media][download][type] = "git"
+projects[media][download][url] = "http://git.drupal.org/project/media.git"
+projects[media][download][branch] = "7.x-2.x"
+projects[media][download][revision] = "7d12b8b"
 
 projects[memcache][type] = "module"
 projects[memcache][subdir] = "contrib"
@@ -227,10 +238,6 @@ projects[metatag][type] = "module"
 projects[metatag][subdir] = "contrib"
 projects[metatag][version] = "1.0-beta7"
 
-; Support for rel=author link in head.
-; http://drupal.org/node/1865228#comment-6839604
-projects[metatag][patch][] = "http://drupal.org/files/metatag-n1865228-3.patch"
-
 projects[module_filter][type] = "module"
 projects[module_filter][subdir] = "contrib"
 projects[module_filter][version] = "1.8"
@@ -257,13 +264,40 @@ projects[oauthconnector][download][url] = "http://git.drupal.org/project/oauthco
 projects[oauthconnector][download][branch] = "7.x-1.x"
 projects[oauthconnector][download][revision] = "0ce7ac9614710c0f68d0a58cb4ae4667f8bd6fa7"
 
+projects[oembed][type] = "module"
+projects[oembed][subdir] = "contrib"
+projects[oembed][download][type] = "git"
+projects[oembed][download][url] = "http://git.drupal.org/project/oembed.git"
+projects[oembed][download][branch] = "7.x-1.x"
+projects[oembed][download][revision] = "63898e1"
+
+; Add oEmbed plugins to list of supported media providers
+; https://drupal.org/comment/8287243#comment-8287243
+projects[oembed][patch][] = "https://drupal.org/files/issues/list-enabled-plugins-2159335-1.patch"
+
+; Remove WYSIWYG special casing
+; https://drupal.org/comment/8287861#comment-8287861
+projects[oembed][patch][] = "https://drupal.org/files/issues/remove-wysiwyg-special-casing-2159303-2.patch"
+
+; Provided a default display configuration
+; https://drupal.org/comment/8286995#comment-8286995
+projects[oembed][patch][] = "https://drupal.org/files/issues/provide-default-display-configuration-2128389-3.patch"
+
+; Add supported file and MIME type information to file formatters
+; https://drupal.org/comment/8286935#comment-8286935
+projects[oembed][patch][] = "https://drupal.org/files/issues/add-file-and-mime-type-information-to-formatters-2159275-1.patch"
+
+; Themed images ignore width, height, alt and title attributes
+; https://drupal.org/comment/8286915#comment-8286915
+projects[oembed][patch][] = "https://drupal.org/files/issues/prefer-element-attributes-2159269-1.patch"
+
 projects[og][type] = "module"
 projects[og][subdir] = "contrib"
 projects[og][version] = "2.4"
 
 ; Auto-assign role to group manager broken on groups with overridden roles.
 ; https://drupal.org/node/2005800#comment-7684873
-projects[og][patch][] = "http://drupal.org/files/og-default-role-member-2005800-21.patch"
+projects[og][patch][] = "http://drupal.org/files/issues/og-default-role-member-2005800-25.patch"
 
 ; og_ui should give users the theme, not admin ui when creating groups.
 ; http://drupal.org/node/1800208
@@ -275,19 +309,10 @@ projects[panelizer][version] = "3.1"
 
 projects[panels][type] = "module"
 projects[panels][subdir] = "contrib"
-projects[panels][version] = "3.3"
-
-; Fatal error: Call to undefined function panels_get_layouts().
-; http://drupal.org/node/1828684#comment-6694732
-projects[panels][patch][] = "http://drupal.org/files/1828684-layout-fix-6.patch"
-
-; PHP 5.3.9 Strict Warning on Panels Empty Value.
-; http://drupal.org/node/1632898#comment-6412840
-projects[panels][patch][] = "http://drupal.org/files/panels-n1632898-15.patch"
-
-; Add internationalization support.
-; http://drupal.org/node/1179034#comment-7216342
-projects[panels][patch][] = "http://drupal.org/files/panels-1179034-41_____panels-uuids-127790-100__-80.patch"
+projects[panels][download][type] = "git"
+projects[panels][download][url] = "http://git.drupal.org/project/panels.git"
+projects[panels][download][branch] = "7.x-3.x-i18n"
+projects[panels][download][revision] = "43a3810e8b0d2ef435ef2bb190039391c8e1712f"
 
 projects[paranoia][type] = "module"
 projects[paranoia][subdir] = "contrib"
@@ -297,9 +322,9 @@ projects[pathauto][type] = "module"
 projects[pathauto][subdir] = "contrib"
 projects[pathauto][version] = "1.2"
 
-projects[placeholder][type] = "module"
-projects[placeholder][subdir] = "contrib"
-projects[placeholder][version] = "1.0"
+projects[elements][type] = "module"
+projects[elements][subdir] = "contrib"
+projects[elements][version] = "1.4"
 
 projects[pm_existing_pages][type] = "module"
 projects[pm_existing_pages][subdir] = "contrib"
@@ -365,10 +390,6 @@ projects[rich_snippets][type] = "module"
 projects[rich_snippets][subdir] = "contrib"
 projects[rich_snippets][version] = "1.0-beta3"
 
-; Remove snippets from non-node type searches.
-; http://drupal.org/node/1923904#comment-7094488
-projects[rich_snippets][patch][] = "http://drupal.org/files/1923904-search-nodes-only.patch"
-
 projects[rules][type] = "module"
 projects[rules][subdir] = "contrib"
 projects[rules][version] = "2.6"
@@ -434,7 +455,7 @@ projects[views_litepager][version] = "3.0"
 
 projects[views_load_more][type] = "module"
 projects[views_load_more][subdir] = "contrib"
-projects[views_load_more][version] = "1.1"
+projects[views_load_more][version] = "1.2"
 
 projects[votingapi][type] = "module"
 projects[votingapi][subdir] = "contrib"
@@ -457,6 +478,10 @@ projects[adaptivetheme][download][revision] = "b4b38c3c01d066e733c2942020c51962c
 ; http://drupal.org/node/1427226#comment-6638836
 projects[adaptivetheme][patch][] = "http://drupal.org/files/remove-comment-creation-link-2018081-1.patch"
 
+; Add styling for link buttons.
+; https://drupal.org/comment/8289329#comment-8289329
+projects[adaptivetheme][patch][] = "https://drupal.org/files/issues/add-link-button-styling-2159783-1.patch"
+
 projects[sky][type] = "theme"
 projects[sky][subdir] = "contrib"
 projects[sky][version] = "3.0-rc1"
@@ -476,10 +501,6 @@ libraries[modernizr][download][type] = "get"
 libraries[modernizr][type] = "libraries"
 libraries[modernizr][download][url] = "https://github.com/Modernizr/Modernizr/archive/v2.7.0.tar.gz"
 
-libraries[placeholder][download][type] = "get"
-libraries[placeholder][type] = "libraries"
-libraries[placeholder][download][url] = "https://github.com/mathiasbynens/jquery-placeholder/archive/v2.0.7.tar.gz"
-
 libraries[timeago][download][type] = "get"
 libraries[timeago][type] = "libraries"
 libraries[timeago][download][url] = "https://raw.github.com/rmm5t/jquery-timeago/v1.3.0/jquery.timeago.js"
diff --git a/profiles/commons/modules/commons/commons_activity_streams/commons_activity_page/commons_activity_page.info b/profiles/commons/modules/commons/commons_activity_streams/commons_activity_page/commons_activity_page.info
index 4bab3fb..efa2121 100644
--- a/profiles/commons/modules/commons/commons_activity_streams/commons_activity_page/commons_activity_page.info
+++ b/profiles/commons/modules/commons/commons_activity_streams/commons_activity_page/commons_activity_page.info
@@ -11,3 +11,10 @@ dependencies[] = panels_ipe
 features[ctools][] = page_manager:pages_default:1
 features[features_api][] = api:2
 features[page_manager_pages][] = commons_activity_streams_activity
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_activity_streams/commons_activity_streams.info b/profiles/commons/modules/commons/commons_activity_streams/commons_activity_streams.info
index 665ad02..397e98e 100644
--- a/profiles/commons/modules/commons/commons_activity_streams/commons_activity_streams.info
+++ b/profiles/commons/modules/commons/commons_activity_streams/commons_activity_streams.info
@@ -37,3 +37,10 @@ features_exclude[field][message-commons_activity_streams_user_profile_updated-fi
 features_exclude[field_base][field_target_nodes] = field_target_nodes
 features_exclude[field_base][field_target_comments] = field_target_comments
 features_exclude[views_view][commons_bw_all] = commons_bw_all
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_activity_streams/commons_activity_streams.module b/profiles/commons/modules/commons/commons_activity_streams/commons_activity_streams.module
index d0bc8df..eb73f1c 100644
--- a/profiles/commons/modules/commons/commons_activity_streams/commons_activity_streams.module
+++ b/profiles/commons/modules/commons/commons_activity_streams/commons_activity_streams.module
@@ -54,8 +54,12 @@ function commons_activity_streams_node_insert($node) {
 function commons_activity_streams_comment_insert($comment) {
   $account = user_load($comment->uid);
   $node = node_load($comment->nid);
-
-  $message = message_create('commons_activity_streams_comment_created', array('uid' => $account->uid, 'timestamp' => $comment->created));
+  // Allow other modules to change the message type used for this event.
+  $hook = 'comment_insert';
+  $message_type = 'commons_activity_streams_comment_created';
+  drupal_alter('commons_activity_streams_message_selection', $message_type, $hook, $node);
+  $message = message_create($message_type, array('uid' => $account->uid, 'timestamp' => $comment->created));
+  
   // Save reference to the node in the node reference field, and the
   // "publish" state (i.e. if the node is published or unpublished).
   $wrapper = entity_metadata_wrapper('message', $message);
diff --git a/profiles/commons/modules/commons/commons_activity_streams/commons_activity_streams_groups/commons_activity_streams_groups.info b/profiles/commons/modules/commons/commons_activity_streams/commons_activity_streams_groups/commons_activity_streams_groups.info
index b6b2ea0..1401309 100644
--- a/profiles/commons/modules/commons/commons_activity_streams/commons_activity_streams_groups/commons_activity_streams_groups.info
+++ b/profiles/commons/modules/commons/commons_activity_streams/commons_activity_streams_groups/commons_activity_streams_groups.info
@@ -9,3 +9,10 @@ dependencies[] = views_content
 features[ctools][] = views:views_default:3.0
 features[features_api][] = api:2
 features[views_view][] = activity_group
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_body/commons_body.info b/profiles/commons/modules/commons/commons_body/commons_body.info
index 03c3d20..41baefc 100644
--- a/profiles/commons/modules/commons/commons_body/commons_body.info
+++ b/profiles/commons/modules/commons/commons_body/commons_body.info
@@ -7,3 +7,10 @@ dependencies[] = field_sql_storage
 dependencies[] = text
 features[features_api][] = api:2
 features[field_base][] = body
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_bw/commons_bw.info b/profiles/commons/modules/commons/commons_bw/commons_bw.info
index ac6af8c..111cfeb 100644
--- a/profiles/commons/modules/commons/commons_bw/commons_bw.info
+++ b/profiles/commons/modules/commons/commons_bw/commons_bw.info
@@ -10,3 +10,10 @@ features[features_api][] = api:2
 features[field_base][] = title_field
 files[] = includes/views/handlers/commons_bw_handler_node_partial_form.inc
 ; Views handlers
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_bw/commons_bw.module b/profiles/commons/modules/commons/commons_bw/commons_bw.module
index f060b05..0c32197 100644
--- a/profiles/commons/modules/commons/commons_bw/commons_bw.module
+++ b/profiles/commons/modules/commons/commons_bw/commons_bw.module
@@ -186,7 +186,7 @@ function commons_bw_partial_node_form($form, &$form_state, $bundle, $group_id =
   // Add the commons_bw after build first, in case other pre-renders needs need
   // to address fields by there CSS ID.
   array_unshift($form['#pre_render'], 'commons_bw_partial_node_form_after_build');
-
+  $form['#validate'][] = 'commons_bw_partial_node_form_validate';
   return $form;
 }
 
@@ -232,6 +232,10 @@ function commons_bw_partial_node_form_validate($form, $form_state) {
   $node = $form['#entity'];
   field_attach_validate('node', $node);
   node_validate($node, $form, $form_state);
+  if ((!module_exists('commons_trusted_contacts') || (module_exists('commons_trusted_contacts') && !module_exists('og_access'))) && empty($form_state['group_id']) && empty($form_state['values'][OG_AUDIENCE_FIELD][LANGUAGE_NONE][0])) {
+    form_set_error(OG_AUDIENCE_FIELD, t('Please enter one or more groups where this content will be posted.'));
+    return FALSE;
+  }
 }
 
 /**
diff --git a/profiles/commons/modules/commons/commons_bw/js/partial_node_form.js b/profiles/commons/modules/commons/commons_bw/js/partial_node_form.js
index 972b3e3..2c4d1a8 100644
--- a/profiles/commons/modules/commons/commons_bw/js/partial_node_form.js
+++ b/profiles/commons/modules/commons/commons_bw/js/partial_node_form.js
@@ -40,13 +40,23 @@ Drupal.behaviors.commonsBwExpandableForm = {
           }).append(toggleText),
           triggerField = form.find('.trigger-field'),
           fullFormLink = form.find('a.full-form'),
-          hideables = form.find('.hideable-field');
+          hideables = form.find('.hideable-field'),
+          errors = form.find('.error');
 
-      // Add the toggle link to the top of the form.
-      form.prepend(toggle).addClass('expandable-form compact-form');
+      // Determine if the form has any errors.
+      if (!errors.length) {
+        // Forms with errors are shown expanded, so only add the toggle link to
+        // the top of forms which are error free.
+        form.prepend(toggle).addClass('expandable-form compact-form');
 
-      // Hide the hidden fields on load.
-      hideables.addClass('element-invisible');
+        // Hide the hidden fields on load.
+        hideables.addClass('element-invisible');
+      }
+      else {
+        // The full form link is only shown on collapsed forms so it is hidden
+        // for consistency.
+        fullFormLink.addClass('element-hidden');
+      }
 
       // Make all hidden fields visible when the trigger field comes into
       // focus.
diff --git a/profiles/commons/modules/commons/commons_content_moderation/commons_content_moderation.info b/profiles/commons/modules/commons/commons_content_moderation/commons_content_moderation.info
index 3dd7cef..b281b93 100644
--- a/profiles/commons/modules/commons/commons_content_moderation/commons_content_moderation.info
+++ b/profiles/commons/modules/commons/commons_content_moderation/commons_content_moderation.info
@@ -17,3 +17,10 @@ features[variable][] = flag_abuse_flags
 features[views_view][] = commons_content_moderation_reported_comments
 features[views_view][] = commons_content_moderation_reported_nodes
 features_exclude[dependencies][features] = features
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_documents/commons_documents.info b/profiles/commons/modules/commons/commons_documents/commons_documents.info
index 4ab55b1..be09f3a 100644
--- a/profiles/commons/modules/commons/commons_documents/commons_documents.info
+++ b/profiles/commons/modules/commons/commons_documents/commons_documents.info
@@ -44,3 +44,10 @@ features[variable][] = node_options_document
 features[variable][] = node_preview_document
 features[variable][] = node_submitted_document
 features[views_view][] = commons_bw_documents
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_events/commons_events.info b/profiles/commons/modules/commons/commons_events/commons_events.info
index cb67595..36ea84e 100644
--- a/profiles/commons/modules/commons/commons_events/commons_events.info
+++ b/profiles/commons/modules/commons/commons_events/commons_events.info
@@ -99,3 +99,10 @@ files[] = commons_events.features.field_instance.inc
 files[] = commons_events.strongarm.inc
 files[] = includes/commons_events.forms.inc
 files[] = includes/commons_events.theme.inc
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_events/modules/commons_events_pages/commons_events_pages.info b/profiles/commons/modules/commons/commons_events/modules/commons_events_pages/commons_events_pages.info
index d2db9b5..0e354bd 100644
--- a/profiles/commons/modules/commons/commons_events/modules/commons_events_pages/commons_events_pages.info
+++ b/profiles/commons/modules/commons/commons_events/modules/commons_events_pages/commons_events_pages.info
@@ -12,3 +12,10 @@ features[panelizer_defaults][] = node:event:default
 features[variable][] = panelizer_defaults_node_event
 files[] = commons_events_pages.features.inc
 files[] = commons_events_pages.strongarm.inc
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_events/modules/commons_events_solr/commons_events_solr.info b/profiles/commons/modules/commons/commons_events/modules/commons_events_solr/commons_events_solr.info
index 4cc30fb..b609b64 100644
--- a/profiles/commons/modules/commons/commons_events/modules/commons_events_solr/commons_events_solr.info
+++ b/profiles/commons/modules/commons/commons_events/modules/commons_events_solr/commons_events_solr.info
@@ -19,3 +19,10 @@ features[features_api][] = api:2
 features[page_manager_existing_pages][] = solr_events_search
 features[page_manager_handlers][] = pm_existing_pages_solr_events_search_panel_context
 features[variable][] = pm_existing_pages_disabled_solr_events_search
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_featured/commons_featured.info b/profiles/commons/modules/commons/commons_featured/commons_featured.info
index 5edbd0e..d3b7879 100644
--- a/profiles/commons/modules/commons/commons_featured/commons_featured.info
+++ b/profiles/commons/modules/commons/commons_featured/commons_featured.info
@@ -7,3 +7,10 @@ dependencies[] = views_content
 features[ctools][] = views:views_default:3.0
 features[features_api][] = api:2
 features[views_view][] = commons_featured
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_follow/commons-follow-otheruser-flag.tpl.php b/profiles/commons/modules/commons/commons_follow/commons-follow-otheruser-flag.tpl.php
new file mode 100644
index 0000000..7a028bd
--- /dev/null
+++ b/profiles/commons/modules/commons/commons_follow/commons-follow-otheruser-flag.tpl.php
@@ -0,0 +1,3 @@
+<span class="<?php print $flag_wrapper_classes; ?>">
+   <span class="<?php print $flag_classes ?>"><?php print $link_text; ?></span>
+</span>
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow.info b/profiles/commons/modules/commons/commons_follow/commons_follow.info
index b6d733c..0d4e87e 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow.info
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow.info
@@ -22,3 +22,10 @@ files[] = includes/views/handlers/commons_follow_plugin_argument_default_node.in
 files[] = includes/views/handlers/commons_follow_plugin_argument_default_message.inc
 files[] = includes/views/handlers/commons_follow_user_follow_filter.inc
 files[] = includes/views/handlers/commons_follow_user_follow_filter_message.inc
+files[] = includes/views/handlers/commons_follow_handler_field_ops.inc
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow.module b/profiles/commons/modules/commons/commons_follow/commons_follow.module
index ed60c9a..f6c6c62 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow.module
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow.module
@@ -2,7 +2,22 @@
 
 include_once 'commons_follow.features.inc';
 
-
+/**
+ * Implements hook_theme().
+ */
+function commons_follow_theme() {
+  return array(
+    'commons_follow_otheruser_flag' => array(
+      'variables' => array(
+        'is_flagged' => NULL,
+        'link_text' => NULL,
+        'flag_wrapper_classes' => NULL,
+        'flag_classes' => NULL,
+      ),
+      'template' => 'commons-follow-otheruser-flag',
+    ),
+  );
+}
 
 /**
  * Implements hook_features_pipe_alter().
@@ -198,10 +213,8 @@ function commons_follow_get_subscription_flags_ids($content_type = NULL, $conten
   return $flag_ids;
 }
 
-///////////////////
-
 /**
- * Implementation of hook_views_api().
+ * Implements hook_views_api().
  */
 function commons_follow_views_api() {
   return array(
@@ -283,3 +296,27 @@ function commons_follow_get_followed_message_ids($account = NULL) {
   }
   return $followed_mids;
 }
+
+function commons_follow_views_data_alter(&$data) {
+  $data['flag_content']['ops']['field']['handler'] = 'commons_follow_handler_field_ops';
+}
+
+function commons_follow_views_query_alter(&$view, &$query) {
+  global $user;
+  $prefix = variable_get('message_subscribe_flag_prefix', 'subscribe') . '_';
+  if(strpos($view->name, $prefix) === 0 && isset($view->args[0]) && $user->uid != $view->args[0]) {
+    $flag_content_keys = array_keys($query->table_queue);
+    foreach($flag_content_keys AS $key) {
+      if(strpos($key, 'flag_content') === 0) {
+        //Convert the Send Email Query
+        $join = $query->table_queue[$key]['join'];
+        $join->extra[1] = array(
+          'field' => 'uid',
+          'value' => $view->args[0],
+          'numeric' => TRUE,
+        );
+        $query->table_queue[$key]['join'] = $join;
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow_group/commons_follow_group.info b/profiles/commons/modules/commons/commons_follow/commons_follow_group/commons_follow_group.info
index aacc282..ba022fa 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow_group/commons_follow_group.info
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow_group/commons_follow_group.info
@@ -11,3 +11,10 @@ features[features_api][] = api:2
 features[flag][] = commons_follow_group
 features[flag][] = email_group
 features[variable][] = message_subscribe_og
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow_node/commons_follow_node.info b/profiles/commons/modules/commons/commons_follow/commons_follow_node/commons_follow_node.info
index 91d481d..71623e6 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow_node/commons_follow_node.info
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow_node/commons_follow_node.info
@@ -11,3 +11,10 @@ features[flag][] = commons_follow_node
 features[flag][] = email_node
 features[views_view][] = commons_follow_node
 features_exclude[dependencies][views] = views
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow_node/commons_follow_node.install b/profiles/commons/modules/commons/commons_follow/commons_follow_node/commons_follow_node.install
index fbbcb99..6d08f0c 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow_node/commons_follow_node.install
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow_node/commons_follow_node.install
@@ -6,4 +6,16 @@
 function commons_follow_node_update_3101() {
   features_revert(array('commons_follow_node' => array('flag')));
   return array();
+}
+
+/**
+ * Update profile notification page to show an account's following views
+ * Not the current users following view.
+ */
+function commons_follow_node_update_3501() {
+  $revert = array(
+    'commons_follow_node' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
 }
\ No newline at end of file
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow_node/commons_follow_node.views_default.inc b/profiles/commons/modules/commons/commons_follow/commons_follow_node/commons_follow_node.views_default.inc
index 4598cfc..8db8038 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow_node/commons_follow_node.views_default.inc
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow_node/commons_follow_node.views_default.inc
@@ -27,6 +27,7 @@ function commons_follow_node_views_default_views() {
   $handler->display->display_options['access']['type'] = 'perm';
   $handler->display->display_options['cache']['type'] = 'none';
   $handler->display->display_options['query']['type'] = 'views_query';
+  $handler->display->display_options['query']['options']['distinct'] = TRUE;
   $handler->display->display_options['exposed_form']['type'] = 'basic';
   $handler->display->display_options['pager']['type'] = 'lite';
   $handler->display->display_options['pager']['options']['items_per_page'] = '20';
@@ -72,6 +73,7 @@ function commons_follow_node_views_default_views() {
   $handler->display->display_options['relationships']['flag_content_rel']['table'] = 'node';
   $handler->display->display_options['relationships']['flag_content_rel']['field'] = 'flag_content_rel';
   $handler->display->display_options['relationships']['flag_content_rel']['flag'] = 'commons_follow_node';
+  $handler->display->display_options['relationships']['flag_content_rel']['user_scope'] = 'any';
   /* Relationship: Flags: email_node */
   $handler->display->display_options['relationships']['flag_content_rel_1']['id'] = 'flag_content_rel_1';
   $handler->display->display_options['relationships']['flag_content_rel_1']['table'] = 'node';
@@ -79,6 +81,12 @@ function commons_follow_node_views_default_views() {
   $handler->display->display_options['relationships']['flag_content_rel_1']['label'] = 'email_flag';
   $handler->display->display_options['relationships']['flag_content_rel_1']['required'] = 0;
   $handler->display->display_options['relationships']['flag_content_rel_1']['flag'] = 'email_node';
+  $handler->display->display_options['relationships']['flag_content_rel_1']['user_scope'] = 'any';
+  /* Relationship: Flags: User */
+  $handler->display->display_options['relationships']['uid']['id'] = 'uid';
+  $handler->display->display_options['relationships']['uid']['table'] = 'flag_content';
+  $handler->display->display_options['relationships']['uid']['field'] = 'uid';
+  $handler->display->display_options['relationships']['uid']['relationship'] = 'flag_content_rel';
   /* Field: Content: Title */
   $handler->display->display_options['fields']['title']['id'] = 'title';
   $handler->display->display_options['fields']['title']['table'] = 'node';
@@ -106,6 +114,19 @@ function commons_follow_node_views_default_views() {
   $handler->display->display_options['sorts']['timestamp']['field'] = 'timestamp';
   $handler->display->display_options['sorts']['timestamp']['relationship'] = 'flag_content_rel';
   $handler->display->display_options['sorts']['timestamp']['order'] = 'DESC';
+  /* Contextual filter: User: Uid */
+  $handler->display->display_options['arguments']['uid']['id'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['table'] = 'users';
+  $handler->display->display_options['arguments']['uid']['field'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['relationship'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['default_action'] = 'default';
+  $handler->display->display_options['arguments']['uid']['default_argument_type'] = 'user';
+  $handler->display->display_options['arguments']['uid']['default_argument_options']['user'] = FALSE;
+  $handler->display->display_options['arguments']['uid']['summary']['number_of_records'] = '0';
+  $handler->display->display_options['arguments']['uid']['summary']['format'] = 'default_summary';
+  $handler->display->display_options['arguments']['uid']['summary_options']['items_per_page'] = '25';
+  $handler->display->display_options['arguments']['uid']['specify_validation'] = TRUE;
+  $handler->display->display_options['arguments']['uid']['validate']['type'] = 'user';
   /* Filter criterion: Content: Published */
   $handler->display->display_options['filters']['status']['id'] = 'status';
   $handler->display->display_options['filters']['status']['table'] = 'node';
@@ -113,6 +134,12 @@ function commons_follow_node_views_default_views() {
   $handler->display->display_options['filters']['status']['value'] = 1;
   $handler->display->display_options['filters']['status']['group'] = 1;
   $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
+  /* Filter criterion: Content: Type */
+  $handler->display->display_options['filters']['type']['id'] = 'type';
+  $handler->display->display_options['filters']['type']['table'] = 'node';
+  $handler->display->display_options['filters']['type']['field'] = 'type';
+  $handler->display->display_options['filters']['type']['operator'] = 'not empty';
+  $handler->display->display_options['filters']['type']['value'] = array();
   $translatables['commons_follow_node'] = array(
     t('Master'),
     t('more'),
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow_term/commons_follow_term.info b/profiles/commons/modules/commons/commons_follow/commons_follow_term/commons_follow_term.info
index cc99417..b5e1739 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow_term/commons_follow_term.info
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow_term/commons_follow_term.info
@@ -11,3 +11,10 @@ features[flag][] = commons_follow_term
 features[flag][] = email_term
 features[views_view][] = commons_follow_taxonomy_term
 features_exclude[dependencies][ctools] = ctools
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow_term/commons_follow_term.install b/profiles/commons/modules/commons/commons_follow/commons_follow_term/commons_follow_term.install
index 31bda83..77c4c76 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow_term/commons_follow_term.install
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow_term/commons_follow_term.install
@@ -15,3 +15,15 @@ function commons_follow_term_update_3102() {
   features_revert(array('commons_follow_term' => array('flag')));
   return array();
 }
+
+/**
+ * Update profile notification page to show an account's following views
+ * Not the current users following view.
+ */
+function commons_follow_term_update_3501() {
+  $revert = array(
+    'commons_follow_term' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
\ No newline at end of file
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow_term/commons_follow_term.views_default.inc b/profiles/commons/modules/commons/commons_follow/commons_follow_term/commons_follow_term.views_default.inc
index be1fa62..21e785a 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow_term/commons_follow_term.views_default.inc
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow_term/commons_follow_term.views_default.inc
@@ -72,6 +72,7 @@ function commons_follow_term_views_default_views() {
   $handler->display->display_options['relationships']['flag_content_rel']['table'] = 'taxonomy_term_data';
   $handler->display->display_options['relationships']['flag_content_rel']['field'] = 'flag_content_rel';
   $handler->display->display_options['relationships']['flag_content_rel']['flag'] = 'commons_follow_term';
+  $handler->display->display_options['relationships']['flag_content_rel']['user_scope'] = 'any';
   /* Relationship: Flags: email_term */
   $handler->display->display_options['relationships']['flag_content_rel_1']['id'] = 'flag_content_rel_1';
   $handler->display->display_options['relationships']['flag_content_rel_1']['table'] = 'taxonomy_term_data';
@@ -79,6 +80,12 @@ function commons_follow_term_views_default_views() {
   $handler->display->display_options['relationships']['flag_content_rel_1']['label'] = 'email_flag';
   $handler->display->display_options['relationships']['flag_content_rel_1']['required'] = 0;
   $handler->display->display_options['relationships']['flag_content_rel_1']['flag'] = 'email_term';
+  $handler->display->display_options['relationships']['flag_content_rel_1']['user_scope'] = 'any';
+  /* Relationship: Flags: User */
+  $handler->display->display_options['relationships']['uid']['id'] = 'uid';
+  $handler->display->display_options['relationships']['uid']['table'] = 'flag_content';
+  $handler->display->display_options['relationships']['uid']['field'] = 'uid';
+  $handler->display->display_options['relationships']['uid']['relationship'] = 'flag_content_rel';
   /* Field: Taxonomy term: Name */
   $handler->display->display_options['fields']['name']['id'] = 'name';
   $handler->display->display_options['fields']['name']['table'] = 'taxonomy_term_data';
@@ -107,6 +114,7 @@ function commons_follow_term_views_default_views() {
   $handler->display->display_options['sorts']['timestamp']['relationship'] = 'flag_content_rel';
   $handler->display->display_options['sorts']['timestamp']['order'] = 'DESC';
   $translatables['commons_follow_taxonomy_term'] = array(
+  /* Contextual filter: User: Uid */
     t('Master'),
     t('more'),
     t('Apply'),
@@ -127,6 +135,19 @@ function commons_follow_term_views_default_views() {
     t('Topic'),
     t('Send email?'),
   );
+  $handler->display->display_options['arguments']['uid']['id'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['table'] = 'users';
+  $handler->display->display_options['arguments']['uid']['field'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['relationship'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['default_action'] = 'default';
+  $handler->display->display_options['arguments']['uid']['default_argument_type'] = 'user';
+  $handler->display->display_options['arguments']['uid']['default_argument_options']['user'] = FALSE;
+  $handler->display->display_options['arguments']['uid']['summary']['number_of_records'] = '0';
+  $handler->display->display_options['arguments']['uid']['summary']['format'] = 'default_summary';
+  $handler->display->display_options['arguments']['uid']['summary_options']['items_per_page'] = '25';
+  $handler->display->display_options['arguments']['uid']['specify_validation'] = TRUE;
+  $handler->display->display_options['arguments']['uid']['validate']['type'] = 'user';
+  $handler->display->display_options['arguments']['uid']['validate_options']['type'] = 'either';
   $export['commons_follow_taxonomy_term'] = $view;
 
   return $export;
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.info b/profiles/commons/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.info
index 12d6a77..c799b35 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.info
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.info
@@ -5,3 +5,10 @@ package = Commons - Building blocks
 dependencies[] = commons_follow
 dependencies[] = message_subscribe_ui
 dependencies[] = quicktabs
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.module b/profiles/commons/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.module
index f8ebd9b..65ef59c 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.module
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow_ui/commons_follow_ui.module
@@ -63,8 +63,8 @@ function commons_follow_ui_commons_utility_links_alter(&$links) {
 }
 
 function commons_follow_ui_notification_settings_form($form, &$form_state, $account) {
+  global $user;
   if (empty($account)) {
-    global $user;
     $account = $user;
   }
   drupal_set_title(t('Notification settings'));
@@ -88,6 +88,9 @@ function commons_follow_ui_notification_settings_form($form, &$form_state, $acco
     '#default_value' => isset($account->message_subscribe_email[LANGUAGE_NONE][0]['value']) ? $account->message_subscribe_email[LANGUAGE_NONE][0]['value'] : FALSE,
     '#weight' => 1,
   );
+  if($account != $user) {
+    $form['message_subscribe_email']['#disabled'] = TRUE;
+  }
 
   $form['submit'] = array(
     '#type' => 'submit',
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow_user/commons_follow_user.info b/profiles/commons/modules/commons/commons_follow/commons_follow_user/commons_follow_user.info
index 947d59d..5297d19 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow_user/commons_follow_user.info
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow_user/commons_follow_user.info
@@ -19,3 +19,10 @@ features[message_type][] = commons_follow_user_user_followed
 features[views_view][] = commons_follow_user
 features[views_view][] = commons_follow_user_followers
 features[views_view][] = commons_follow_user_following
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow_user/commons_follow_user.install b/profiles/commons/modules/commons/commons_follow/commons_follow_user/commons_follow_user.install
index a19e303..e5e35a5 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow_user/commons_follow_user.install
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow_user/commons_follow_user.install
@@ -15,3 +15,15 @@ function commons_follow_user_update_3102() {
   features_revert(array('commons_follow_user' => array('views_view')));
   return array();
 }
+
+/**
+ * Update profile notification page to show an account's following views
+ * Not the current users following view.
+ */
+function commons_follow_user_update_3501() {
+  $revert = array(
+    'commons_follow_user' => array('views_view'),
+  );
+  features_revert($revert);
+  return array();
+}
\ No newline at end of file
diff --git a/profiles/commons/modules/commons/commons_follow/commons_follow_user/commons_follow_user.views_default.inc b/profiles/commons/modules/commons/commons_follow/commons_follow_user/commons_follow_user.views_default.inc
index 77a3376..fa18e54 100644
--- a/profiles/commons/modules/commons/commons_follow/commons_follow_user/commons_follow_user.views_default.inc
+++ b/profiles/commons/modules/commons/commons_follow/commons_follow_user/commons_follow_user.views_default.inc
@@ -73,6 +73,7 @@ function commons_follow_user_views_default_views() {
   $handler->display->display_options['relationships']['flag_content_rel']['table'] = 'users';
   $handler->display->display_options['relationships']['flag_content_rel']['field'] = 'flag_content_rel';
   $handler->display->display_options['relationships']['flag_content_rel']['flag'] = 'commons_follow_user';
+  $handler->display->display_options['relationships']['flag_content_rel']['user_scope'] = 'any';
   /* Relationship: Flags: email_user */
   $handler->display->display_options['relationships']['flag_content_rel_1']['id'] = 'flag_content_rel_1';
   $handler->display->display_options['relationships']['flag_content_rel_1']['table'] = 'users';
@@ -80,6 +81,12 @@ function commons_follow_user_views_default_views() {
   $handler->display->display_options['relationships']['flag_content_rel_1']['label'] = 'flag_user';
   $handler->display->display_options['relationships']['flag_content_rel_1']['required'] = 0;
   $handler->display->display_options['relationships']['flag_content_rel_1']['flag'] = 'email_user';
+  $handler->display->display_options['relationships']['flag_content_rel_1']['user_scope'] = 'any';
+  /* Relationship: Flags: User */
+  $handler->display->display_options['relationships']['uid']['id'] = 'uid';
+  $handler->display->display_options['relationships']['uid']['table'] = 'flag_content';
+  $handler->display->display_options['relationships']['uid']['field'] = 'uid';
+  $handler->display->display_options['relationships']['uid']['relationship'] = 'flag_content_rel';
   /* Field: User: Name */
   $handler->display->display_options['fields']['name']['id'] = 'name';
   $handler->display->display_options['fields']['name']['table'] = 'users';
@@ -106,6 +113,20 @@ function commons_follow_user_views_default_views() {
   $handler->display->display_options['sorts']['timestamp']['field'] = 'timestamp';
   $handler->display->display_options['sorts']['timestamp']['relationship'] = 'flag_content_rel';
   $handler->display->display_options['sorts']['timestamp']['order'] = 'DESC';
+  /* Contextual filter: User: Uid */
+  $handler->display->display_options['arguments']['uid']['id'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['table'] = 'users';
+  $handler->display->display_options['arguments']['uid']['field'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['relationship'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['default_action'] = 'default';
+  $handler->display->display_options['arguments']['uid']['default_argument_type'] = 'user';
+  $handler->display->display_options['arguments']['uid']['default_argument_options']['user'] = FALSE;
+  $handler->display->display_options['arguments']['uid']['summary']['number_of_records'] = '0';
+  $handler->display->display_options['arguments']['uid']['summary']['format'] = 'default_summary';
+  $handler->display->display_options['arguments']['uid']['summary_options']['items_per_page'] = '25';
+  $handler->display->display_options['arguments']['uid']['specify_validation'] = TRUE;
+  $handler->display->display_options['arguments']['uid']['validate']['type'] = 'user';
+  $handler->display->display_options['arguments']['uid']['validate_options']['type'] = 'either';
   /* Filter criterion: User: Active */
   $handler->display->display_options['filters']['status']['id'] = 'status';
   $handler->display->display_options['filters']['status']['table'] = 'users';
diff --git a/profiles/commons/modules/commons/commons_follow/includes/views/handlers/commons_follow_handler_field_ops.inc b/profiles/commons/modules/commons/commons_follow/includes/views/handlers/commons_follow_handler_field_ops.inc
new file mode 100644
index 0000000..3770782
--- /dev/null
+++ b/profiles/commons/modules/commons/commons_follow/includes/views/handlers/commons_follow_handler_field_ops.inc
@@ -0,0 +1,62 @@
+<?php
+
+/**
+ * @file
+ * Contains the flag Ops field handler.
+ */
+
+/**
+ * Views field handler for the Flag operations links (flag/unflag).
+ *
+ * @ingroup views
+ */
+class commons_follow_handler_field_ops extends flag_handler_field_ops {
+
+  function render($values) {
+    global $user;
+    //If the passed in user doesn't match the current user
+    if(isset($this->view->args[0]) && $user->uid != $this->view->args[0]) {
+
+      if (!($flag = $this->get_flag())) {
+        // get_flag() itself will print a more detailed message.
+        return t('Missing flag');
+      }
+      $content_id = $values->{$this->aliases['content_id']};
+      $is_flagged = $values->{$this->aliases['is_flagged']};
+
+      if (empty($this->flag_applies[$content_id])) {
+        // Flag does not apply to this content.
+        return;
+      }
+
+      if (!empty($this->options['link_type'])) {
+        $flag->link_type = $this->options['link_type'];
+      }
+
+      $variables = array();
+      $action = $is_flagged ? 'unflag' : 'flag';
+      $variables['flag_css_name'] = str_replace('_', '-', $flag->name);
+
+      $flag_wrapper_classes_array = array();
+      $flag_wrapper_classes_array[] = 'flag-wrapper';
+      $flag_wrapper_classes_array[] = 'flag-' . $variables['flag_css_name'];
+      $flag_wrapper_classes_array[] = 'flag-' . $variables['flag_css_name'] . '-' . $content_id;
+      $variables['flag_wrapper_classes'] = implode(' ',$flag_wrapper_classes_array);
+
+      $flag_classes_array = array();
+      $flag_classes_array[] = 'flag';
+      $flag_classes_array[] = $action . '-action';
+      $flag_classes_array[] = 'flag-link-' . $flag->link_type;
+      $variables['flag_classes'] = implode(' ', $flag_classes_array);
+      $variables['is_flagged'] = $action;
+      $variables['link_text'] = $flag->get_label($action . '_short', $content_id);
+
+      return theme('commons_follow_otheruser_flag', $variables);
+    }
+    else {
+      return parent::render($values);
+    }
+
+//    return $flag->theme($is_flagged ? 'unflag' : 'flag', $content_id);
+  }
+}
diff --git a/profiles/commons/modules/commons/commons_groups/commons_groups.info b/profiles/commons/modules/commons/commons_groups/commons_groups.info
index 59a4f2a..3574b2e 100644
--- a/profiles/commons/modules/commons/commons_groups/commons_groups.info
+++ b/profiles/commons/modules/commons/commons_groups/commons_groups.info
@@ -72,3 +72,10 @@ features[views_view][] = commons_groups_recent_content
 features[views_view][] = commons_groups_user_groups
 features_exclude[field][node-group-group_group] = node-group-group_group
 features_exclude[field][node-group-group_access] = node-group-group_access
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_groups/commons_groups.module b/profiles/commons/modules/commons/commons_groups/commons_groups.module
index 460d216..d28beb2 100644
--- a/profiles/commons/modules/commons/commons_groups/commons_groups.module
+++ b/profiles/commons/modules/commons/commons_groups/commons_groups.module
@@ -62,7 +62,7 @@ function commons_groups_help($path, $arg) {
       }
     }
     if (user_access('edit any group content')) {
-      $message = t("Group privacy settings !updated.", array('!updated' => l('need to be updated', 'admin/content/groups/update'),));
+      $message = t("Group privacy settings !updated.", array('!updated' => l('need to be updated', 'admin/content/groups/update')));
       drupal_set_message($message, 'warning', FALSE);
     }
   }
@@ -97,7 +97,7 @@ function commons_groups_form_group_node_form_alter(&$form, &$form_state) {
   $form['field_og_subscribe_settings'][LANGUAGE_NONE]['#required'] = FALSE;
 
   if (module_exists('og_access')) {
-    // Display the private content checkbox only when "Joining requires approval"
+    // Display private content checkbox only when "Joining requires approval"
     // is selected.
     $form['field_og_access_default_value']['#states'] = array(
       'visible' => array(
@@ -297,7 +297,7 @@ function commons_groups_group_contributors_count_topics($group) {
     $contributors_count = $view->total_rows;
     $output .= l(t('@contributors_count @contributors', array(
       '@contributors_count' => $contributors_count,
-      '@contributors' => format_plural($contributors_count, 'contributor', 'contributors')
+      '@contributors' => format_plural($contributors_count, 'contributor', 'contributors'),
     )), 'node/' . $group->nid . '/contributors');
   }
   // Format the list of topics:
@@ -378,6 +378,22 @@ function commons_groups_form_alter(&$form, &$form_state, $form_id) {
       drupal_set_message(t($message), 'warning');
     }
   }
+  // Hide internal fields that the user should not be able to edit directly.
+  if ($form_id == 'edit_profile_user_profile_form' || substr($form_id, -10) === '_node_form') {
+    $internal_fields = array('field_unread_invitations', 'field_unread_messages', 'user_trusted_contacts', 'og_user_group_ref', 'group_access');
+    foreach ($internal_fields as $field_name) {
+      if(isset($form[$field_name])) {
+        $form[$field_name]['#access'] = FALSE;
+      }
+    }
+  }
+  // Disable Trusted Contacts field if commons_trusted_contacts is disabled.
+  $group_content_entity_types = commons_groups_get_group_content_entity_types();
+  if (isset($form['#node']->type) && isset($group_content_entity_types['node'][$form['#node']->type])) {
+    if (isset($form['og_user_group_ref']) && !module_exists('commons_trusted_contacts')) {
+      $form['og_user_group_ref']['#access'] = FALSE;
+    }
+  }
 }
 
 /**
@@ -583,14 +599,14 @@ function commons_groups_message_partial_default() {
 function commons_groups_related_groups_text($related_groups) {
   // In 1 group: "in the x group"
   if (count($related_groups) == 1) {
-    return t(' in the !group group', array('!group' => l($related_groups[0]->title, 'node/' . $related_groups[0]->nid)));
+    return ' ' . t('in the !group group', array('!group' => l($related_groups[0]->title, 'node/' . $related_groups[0]->nid)));
   }
 
   // In 2 groups: "in the x and y groups"
   if (count($related_groups) == 2) {
-    return t(' in the !group-0 and !group-1 groups', array(
+    return ' ' . t('in the !group-0 and !group-1 groups', array(
       '!group-0' => l($related_groups[0]->title, 'node/' . $related_groups[0]->nid),
-      '!group-1' => l($related_groups[1]->title, 'node/' . $related_groups[1]->nid)
+      '!group-1' => l($related_groups[1]->title, 'node/' . $related_groups[1]->nid),
     ));
   }
 
@@ -674,20 +690,6 @@ function commons_groups_default_rules_configuration_alter(&$configs) {
 }
 
 /**
- * Implements hook_node_validate().
- */
-function commons_groups_node_validate($node, $form, &$form_state) {
-  // Ensure that group content is always posted to one or more groups.
-  // When the Commons Trusted Contacts module is enabled, we defer to its
-  // own form validation which ensures that group content nodes are posted
-  // either to a node group via the og_group_ref field or to a user group
-  // via the og_user_group_ref field.
-  if (!module_exists('commons_trusted_contacts') && og_is_group_content_type('node', $node->type) && empty($form_state['values']['og_group_ref'][LANGUAGE_NONE][0]['target_id'])) {
-    form_set_error('og_group_ref', t('Please enter one more groups where this content will be posted.'));
-  }
-}
-
-/**
  * Implements hook_node_presave().
  *
  * When the node's group is private, force the group content to be private.
diff --git a/profiles/commons/modules/commons/commons_groups/modules/commons_groups_directory/commons_groups_directory.info b/profiles/commons/modules/commons/commons_groups/modules/commons_groups_directory/commons_groups_directory.info
index 437fb04..cbf4a1e 100644
--- a/profiles/commons/modules/commons/commons_groups/modules/commons_groups_directory/commons_groups_directory.info
+++ b/profiles/commons/modules/commons/commons_groups/modules/commons_groups_directory/commons_groups_directory.info
@@ -14,3 +14,10 @@ features[ctools][] = panelizer:panelizer:1
 features[ctools][] = views:views_default:3.0
 features[features_api][] = api:2
 features[page_manager_pages][] = groups_directory
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.info b/profiles/commons/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.info
index fdcc25f..d28d17c 100644
--- a/profiles/commons/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.info
+++ b/profiles/commons/modules/commons/commons_groups/modules/commons_groups_pages/commons_groups_pages.info
@@ -15,3 +15,10 @@ features[features_api][] = api:2
 features[panelizer_defaults][] = node:group:default
 features[panelizer_defaults][] = node:group:default:teaser
 features[variable][] = panelizer_defaults_node_group
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_kissmetrics/commons_kissmetrics.info b/profiles/commons/modules/commons/commons_kissmetrics/commons_kissmetrics.info
index db4f71f..2d9fc6f 100644
--- a/profiles/commons/modules/commons/commons_kissmetrics/commons_kissmetrics.info
+++ b/profiles/commons/modules/commons/commons_kissmetrics/commons_kissmetrics.info
@@ -29,3 +29,10 @@ features[rules_config][] = rules_commons_kissmetrics_user_posts_comment
 features[rules_config][] = rules_commons_kissmetrics_user_registers
 features[rules_config][] = rules_commons_kissmetrics_user_replies_to_private_message_thread
 features[rules_config][] = rules_commons_kissmetrics_user_starts_new_private_message_thread
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_like/commons_like.info b/profiles/commons/modules/commons/commons_like/commons_like.info
index a40f432..bf39558 100644
--- a/profiles/commons/modules/commons/commons_like/commons_like.info
+++ b/profiles/commons/modules/commons/commons_like/commons_like.info
@@ -12,4 +12,10 @@ features[ctools][] = strongarm:strongarm:1
 features[features_api][] = api:2
 features[field_instance][] = message-commons_like_user_likes_node-field_target_nodes
 features[message_type][] = commons_like_user_likes_node
-features[variable][] = rate_widgets
\ No newline at end of file
+features[variable][] = rate_widgets
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_location/commons_location.info b/profiles/commons/modules/commons/commons_location/commons_location.info
index c9a9974..9144afd 100644
--- a/profiles/commons/modules/commons/commons_location/commons_location.info
+++ b/profiles/commons/modules/commons/commons_location/commons_location.info
@@ -7,3 +7,10 @@ dependencies[] = features
 dependencies[] = field_sql_storage
 features[features_api][] = api:2
 features[field_base][] = field_address
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_media/commons_media.css b/profiles/commons/modules/commons/commons_media/commons_media.css
new file mode 100644
index 0000000..e8e96ab
--- /dev/null
+++ b/profiles/commons/modules/commons/commons_media/commons_media.css
@@ -0,0 +1,22 @@
+video {
+  height: auto;
+  max-width: 100%;
+}
+
+.oembed {
+  height: 0;
+  overflow: hidden;
+  padding-bottom: 56.25%;
+  padding-top: 30px;
+  position: relative;
+}
+
+.oembed iframe,
+.oembed object,
+.oembed embed {
+  height: 100%;
+  left: 0;
+  position: absolute;
+  top: 0;
+  width: 100%;
+}
diff --git a/profiles/commons/modules/commons/commons_media/commons_media.features.field_base.inc b/profiles/commons/modules/commons/commons_media/commons_media.features.field_base.inc
new file mode 100644
index 0000000..3a93532
--- /dev/null
+++ b/profiles/commons/modules/commons/commons_media/commons_media.features.field_base.inc
@@ -0,0 +1,45 @@
+<?php
+/**
+ * @file
+ * commons_media.features.field_base.inc
+ */
+
+/**
+ * Implements hook_field_default_field_bases().
+ */
+function commons_media_field_default_field_bases() {
+  $field_bases = array();
+
+  // Exported field_base: 'field_media'
+  $field_bases['field_media'] = array(
+    'active' => 1,
+    'cardinality' => -1,
+    'deleted' => 0,
+    'entity_types' => array(),
+    'field_name' => 'field_media',
+    'foreign keys' => array(
+      'fid' => array(
+        'columns' => array(
+          'fid' => 'fid',
+        ),
+        'table' => 'file_managed',
+      ),
+    ),
+    'indexes' => array(
+      'fid' => array(
+        0 => 'fid',
+      ),
+    ),
+    'locked' => 0,
+    'module' => 'file',
+    'settings' => array(
+      'display_default' => 0,
+      'display_field' => 0,
+      'uri_scheme' => 'public',
+    ),
+    'translatable' => 0,
+    'type' => 'file',
+  );
+
+  return $field_bases;
+}
diff --git a/profiles/commons/modules/commons/commons_media/commons_media.features.field_instance.inc b/profiles/commons/modules/commons/commons_media/commons_media.features.field_instance.inc
new file mode 100644
index 0000000..b8afdfa
--- /dev/null
+++ b/profiles/commons/modules/commons/commons_media/commons_media.features.field_instance.inc
@@ -0,0 +1,96 @@
+<?php
+/**
+ * @file
+ * commons_media.features.field_instance.inc
+ */
+
+/**
+ * Implements hook_field_default_field_instances().
+ */
+function commons_media_field_default_field_instances() {
+  $field_instances = array();
+
+  $commons_groups_entity_types = commons_groups_get_group_content_entity_types();
+  if (!empty($commons_groups_entity_types)) {
+    foreach ($commons_groups_entity_types as $entity_type => $bundles) {
+      foreach(array_keys($bundles) as $bundle) {
+        commons_media_field_definition($field_instances, $entity_type, $bundle);
+      }
+    }
+  }
+
+  return $field_instances;
+}
+
+function commons_media_field_definition(&$field_instances, $entity_type, $bundle) {
+  // Exported field_instance: 'entity-bundle-field_media'
+  $field_instances["$entity_type-$bundle-field_media"] = array(
+    'bundle' => $bundle,
+    'deleted' => 0,
+    'description' => 'Attach an image or video.',
+    'display' => array(
+      'default' => array(
+        'label' => 'hidden',
+        'module' => 'file_entity',
+        'settings' => array(
+          'file_view_mode' => 'full',
+        ),
+        'type' => 'file_rendered',
+        'weight' => 0,
+      ),
+      'teaser' => array(
+        'label' => 'hidden',
+        'module' => 'file_entity',
+        'settings' => array(
+          'file_view_mode' => 'teaser',
+        ),
+        'type' => 'file_rendered',
+        'weight' => 0,
+      ),
+    ),
+    'display_in_partial_form' => 1,
+    'entity_type' => 'node',
+    'field_name' => 'field_media',
+    'label' => 'Media',
+    'required' => 0,
+    'settings' => array(
+      'description_field' => 0,
+      'file_directory' => 'media',
+      'file_extensions' => 'jpg jpeg gif png oembed mov mp4 m4v mpeg avi ogv webp webm',
+      'max_filesize' => '',
+      'user_register_form' => FALSE,
+    ),
+    'widget' => array(
+      'active' => 1,
+      'module' => 'media',
+      'settings' => array(
+        'allowed_schemes' => array(
+          'oembed' => 'oembed',
+          'public' => 'public',
+        ),
+        'allowed_types' => array(
+          'audio' => 0,
+          'document' => 0,
+          'image' => 'image',
+          'video' => 'video',
+        ),
+        'browser_plugins' => array(
+          'media_default--media_browser_1' => 0,
+          'media_default--media_browser_my_files' => 0,
+          'media_internet' => 'media_internet',
+          'upload' => 'upload',
+        ),
+        'progress_indicator' => 'throbber',
+      ),
+      'type' => 'media_generic',
+      'weight' => 2,
+    ),
+  );
+
+  // Translatables
+  // Included for use with string extractors like potx.
+  t('Attach an image or video.');
+  t('Media');
+
+  return $field_instances;
+}
diff --git a/profiles/commons/modules/commons/commons_media/commons_media.features.inc b/profiles/commons/modules/commons/commons_media/commons_media.features.inc
new file mode 100644
index 0000000..b77b46f
--- /dev/null
+++ b/profiles/commons/modules/commons/commons_media/commons_media.features.inc
@@ -0,0 +1,14 @@
+<?php
+/**
+ * @file
+ * commons_media.features.inc
+ */
+
+/**
+ * Implements hook_ctools_plugin_api().
+ */
+function commons_media_ctools_plugin_api($module = NULL, $api = NULL) {
+  if ($module == "strongarm" && $api == "strongarm") {
+    return array("version" => "1");
+  }
+}
diff --git a/profiles/commons/modules/commons/commons_media/commons_media.features.user_permission.inc b/profiles/commons/modules/commons/commons_media/commons_media.features.user_permission.inc
new file mode 100644
index 0000000..84af5ff
--- /dev/null
+++ b/profiles/commons/modules/commons/commons_media/commons_media.features.user_permission.inc
@@ -0,0 +1,34 @@
+<?php
+/**
+ * @file
+ * commons_media.features.user_permission.inc
+ */
+
+/**
+ * Implements hook_user_default_permissions().
+ */
+function commons_media_user_default_permissions() {
+  $permissions = array();
+
+  // Exported permission: 'add media from remote sources'.
+  $permissions['add media from remote sources'] = array(
+    'name' => 'add media from remote sources',
+    'roles' => array(
+      'administrator' => 'administrator',
+      'authenticated user' => 'authenticated user',
+    ),
+    'module' => 'media_internet',
+  );
+
+  // Exported permission: 'create files'.
+  $permissions['create files'] = array(
+    'name' => 'create files',
+    'roles' => array(
+      'administrator' => 'administrator',
+      'authenticated user' => 'authenticated user',
+    ),
+    'module' => 'file_entity',
+  );
+
+  return $permissions;
+}
diff --git a/profiles/commons/modules/commons/commons_media/commons_media.info b/profiles/commons/modules/commons/commons_media/commons_media.info
new file mode 100644
index 0000000..8d44440
--- /dev/null
+++ b/profiles/commons/modules/commons/commons_media/commons_media.info
@@ -0,0 +1,25 @@
+name = Commons Media
+description = Provides media handling capabilities.
+core = 7.x
+package = Commons - Building blocks
+dependencies[] = ctools
+dependencies[] = features
+dependencies[] = file
+dependencies[] = file_entity
+dependencies[] = media
+dependencies[] = media_internet
+dependencies[] = oembed
+dependencies[] = strongarm
+features[ctools][] = strongarm:strongarm:1
+features[features_api][] = api:2
+features[field_base][] = field_media
+features[user_permission][] = add media from remote sources
+features[user_permission][] = create files
+features[variable][] = media__dialog_theme
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_media/commons_media.module b/profiles/commons/modules/commons/commons_media/commons_media.module
new file mode 100644
index 0000000..0a6d434
--- /dev/null
+++ b/profiles/commons/modules/commons/commons_media/commons_media.module
@@ -0,0 +1,91 @@
+<?php
+/**
+ * @file
+ * Code for the Commons Media feature.
+ */
+
+include_once 'commons_media.features.inc';
+
+/**
+ * Implements hook_system_info_alter().
+ */
+function commons_media_system_info_alter(&$info, $file, $type) {
+  if ($file->name == 'commons_media') {
+    $entity_integrations = module_invoke_all('commons_entity_integration');
+
+    if (!empty($entity_integrations)) {
+      foreach ($entity_integrations as $entity_type => $bundles) {
+        foreach (array_keys($bundles) as $bundle) {
+          $info['features']['field_instance'][] = "$entity_type-$bundle-field_media";
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_file_view_alter().
+ */
+function commons_media_file_view_alter(&$build) {
+  $file_type = $build['#bundle'];
+
+  // Add responsive CSS to image and video files.
+  if ($file_type == 'image' || $file_type == 'video') {
+    $build['#attached']['css'][] = drupal_get_path('module', 'commons_media') . '/commons_media.css';
+  }
+}
+
+/**
+ * Implements hook_preprocess_oembed().
+ */
+function commons_media_preprocess_oembed(&$variables) {
+  $embed = $variables['embed'];
+
+  // Video and rich type must have HTML content.
+  // Wrap the HTML content in a <div> to allow it to be made responsive.
+  if (in_array($embed['type'], array('video', 'rich'))) {
+    $embed['html'] = '<div class="oembed">' . $embed['html'] . '</div>';
+  }
+
+  $variables['embed'] = $embed;
+}
+
+/**
+ * Implements hook_filter_default_formats_alter().
+ */
+function commons_media_filter_default_formats_alter(&$formats) {
+  if (module_exists('media_wysiwyg')) {
+    // Enable the media filter.
+    $formats['filtered_html']['filters'] += array(
+      'media_filter' => array(
+        'status' => 1,
+        'weight' => 2,
+      ),
+    );
+  }
+}
+
+/**
+ * Implements hook_ckeditor_profile_defaults().
+ */
+function commons_media_ckeditor_profile_defaults_alter(&$profiles) {
+  if (module_exists('media_wysiwyg')) {
+    // Add the media button.
+    $profiles['Advanced']['settings']['toolbar'] = '[
+    [\'Format\'],
+    [\'Bold\',\'Italic\',\'Strike\'],
+    [\'NumberedList\',\'BulletedList\',\'Indent\',\'Outdent\',\'Blockquote\'],
+    [\'Link\',\'Unlink\',\'Media\']
+    ]';
+
+    // Load the media plugin.
+    $profiles['Advanced']['settings']['loadPlugins'] += array(
+      'media' => array(
+        'default' => 'f',
+        'desc' => 'Plugin for inserting images from Drupal media module',
+        'name' => 'media',
+        'path' => '%plugin_dir%media/',
+      ),
+    );
+  }
+}
diff --git a/profiles/commons/modules/commons/commons_media/commons_media.strongarm.inc b/profiles/commons/modules/commons/commons_media/commons_media.strongarm.inc
new file mode 100644
index 0000000..166e05d
--- /dev/null
+++ b/profiles/commons/modules/commons/commons_media/commons_media.strongarm.inc
@@ -0,0 +1,21 @@
+<?php
+/**
+ * @file
+ * commons_media.strongarm.inc
+ */
+
+/**
+ * Implements hook_strongarm().
+ */
+function commons_media_strongarm() {
+  $export = array();
+
+  $strongarm = new stdClass();
+  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
+  $strongarm->api_version = 1;
+  $strongarm->name = 'media__dialog_theme';
+  $strongarm->value = 'commons_origins';
+  $export['media__dialog_theme'] = $strongarm;
+
+  return $export;
+}
diff --git a/profiles/commons/modules/commons/commons_misc/commons_misc.info b/profiles/commons/modules/commons/commons_misc/commons_misc.info
index 86be60f..cd2250e 100644
--- a/profiles/commons/modules/commons/commons_misc/commons_misc.info
+++ b/profiles/commons/modules/commons/commons_misc/commons_misc.info
@@ -22,3 +22,10 @@ features[variable][] = theme_adaptivetheme_settings
 features[variable][] = theme_commons_origins_settings
 features[variable][] = user_register
 features_exclude[dependencies][page_manager] = page_manager
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_misc/commons_misc.module b/profiles/commons/modules/commons/commons_misc/commons_misc.module
index 32fbc63..5027494 100644
--- a/profiles/commons/modules/commons/commons_misc/commons_misc.module
+++ b/profiles/commons/modules/commons/commons_misc/commons_misc.module
@@ -44,4 +44,31 @@ function commons_misc_form_system_theme_settings_alter(&$form, &$form_state, $fo
     require_once(drupal_get_path('theme', 'commons_origins') . '/commons_origins.palettes.inc');
     commons_origins_palettes_form($form);
   }
+}
+
+/*
+ * Render a link to the official commons documentation located at
+ * https://docs.acquia.com/commons
+ */
+function commons_misc_navbar() {
+  $items = array();
+
+  $items['documentation'] = array(
+    '#type' => 'navbar_item',
+    'tab' => array(
+      '#type' => 'link',
+      '#title' => t('Documentation'),
+      '#href' => 'https://docs.acquia.com/commons',
+      '#options' => array(
+        'attributes' => array(
+          'title' => t('Commons Documentation'),
+          'class' => array('icon', 'icon-help'),
+          'target' => '_blank',
+        ),
+      ),
+    ),
+    '#weight' => 20,
+  );
+
+  return $items;
 }
\ No newline at end of file
diff --git a/profiles/commons/modules/commons/commons_notices/commons_notices.info b/profiles/commons/modules/commons/commons_notices/commons_notices.info
index db2c418..8d44626 100644
--- a/profiles/commons/modules/commons/commons_notices/commons_notices.info
+++ b/profiles/commons/modules/commons/commons_notices/commons_notices.info
@@ -27,3 +27,10 @@ features[variable][] = node_options_notice
 features[variable][] = node_preview_notice
 features[variable][] = node_submitted_notice
 features[views_view][] = commons_notices_latest_notices
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_notify/commons_notify.features.field_instance.inc b/profiles/commons/modules/commons/commons_notify/commons_notify.features.field_instance.inc
index 08cfe6b..d03df1f 100644
--- a/profiles/commons/modules/commons/commons_notify/commons_notify.features.field_instance.inc
+++ b/profiles/commons/modules/commons/commons_notify/commons_notify.features.field_instance.inc
@@ -646,61 +646,6 @@ function commons_notify_field_default_field_instances() {
     ),
   );
 
-  // Exported field_instance: 'message-commons_notify_node_created_no_groups-field_target_comments'
-  $field_instances['message-commons_notify_node_created_no_groups-field_target_comments'] = array(
-    'bundle' => 'commons_notify_node_created_no_groups',
-    'default_value' => NULL,
-    'default_value_function' => '',
-    'deleted' => 0,
-    'description' => '',
-    'display' => array(
-      'default' => array(
-        'label' => 'above',
-        'module' => 'entityreference',
-        'settings' => array(
-          'link' => FALSE,
-        ),
-        'type' => 'entityreference_label',
-        'weight' => 3,
-      ),
-      'message_notify_email_body' => array(
-        'label' => 'above',
-        'settings' => array(),
-        'type' => 'hidden',
-        'weight' => 0,
-      ),
-      'message_notify_email_subject' => array(
-        'label' => 'above',
-        'settings' => array(),
-        'type' => 'hidden',
-        'weight' => 0,
-      ),
-    ),
-    'entity_type' => 'message',
-    'field_name' => 'field_target_comments',
-    'label' => 'Target comment',
-    'required' => 0,
-    'settings' => array(
-      'behaviors' => array(
-        'prepopulate' => array(
-          'status' => 0,
-        ),
-      ),
-      'user_register_form' => FALSE,
-    ),
-    'widget' => array(
-      'active' => 1,
-      'module' => 'entityreference',
-      'settings' => array(
-        'match_operator' => 'CONTAINS',
-        'path' => '',
-        'size' => 60,
-      ),
-      'type' => 'entityreference_autocomplete',
-      'weight' => 1,
-    ),
-  );
-
   // Exported field_instance: 'message-commons_notify_node_created_no_groups-field_target_nodes'
   $field_instances['message-commons_notify_node_created_no_groups-field_target_nodes'] = array(
     'bundle' => 'commons_notify_node_created_no_groups',
diff --git a/profiles/commons/modules/commons/commons_notify/commons_notify.info b/profiles/commons/modules/commons/commons_notify/commons_notify.info
index 179413f..1264b7e 100644
--- a/profiles/commons/modules/commons/commons_notify/commons_notify.info
+++ b/profiles/commons/modules/commons/commons_notify/commons_notify.info
@@ -32,18 +32,26 @@ features[field_instance][] = message-commons_notify_node_created-field_message_r
 features[field_instance][] = message-commons_notify_node_created-field_target_nodes
 features[field_instance][] = message-commons_notify_node_created_no_groups-field_message_rendered_body
 features[field_instance][] = message-commons_notify_node_created_no_groups-field_message_rendered_subject
-features[field_instance][] = message-commons_notify_node_created_no_groups-field_target_comments
 features[field_instance][] = message-commons_notify_node_created_no_groups-field_target_nodes
 features[field_instance][] = message_type-commons_notify-message_text
 features[field_instance][] = user-user-message_subscribe_email
 features[message_type][] = commons_notify_comment_created
+features[message_type][] = commons_notify_comment_created_no_groups
 features[message_type][] = commons_notify_node_created
 features[message_type][] = commons_notify_node_created_no_groups
 features[message_type_category][] = commons_notify
 features[variable][] = field_bundle_settings_message__commons_notify_comment_created
+features[variable][] = field_bundle_settings_message__commons_notify_comment_created_no_groups
 features[variable][] = field_bundle_settings_message__commons_notify_node_created
 features[variable][] = field_bundle_settings_message__commons_notify_node_created_no_groups
 features[variable][] = message_subscribe_default_notifiers
 features_exclude[field_base][message_text] = message_text
 features_exclude[field_base][field_target_nodes] = field_target_nodes
 features_exclude[field_base][field_target_comments] = field_target_comments
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_pages/commons_pages.info b/profiles/commons/modules/commons/commons_pages/commons_pages.info
index 432107d..fceb2ec 100644
--- a/profiles/commons/modules/commons/commons_pages/commons_pages.info
+++ b/profiles/commons/modules/commons/commons_pages/commons_pages.info
@@ -25,3 +25,10 @@ features[variable][] = node_options_page
 features[variable][] = node_preview_page
 features[variable][] = node_submitted_page
 features[variable][] = pathauto_node_page_pattern
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_polls/commons_polls.info b/profiles/commons/modules/commons/commons_polls/commons_polls.info
index c049736..7452a54 100644
--- a/profiles/commons/modules/commons/commons_polls/commons_polls.info
+++ b/profiles/commons/modules/commons/commons_polls/commons_polls.info
@@ -44,3 +44,10 @@ features[variable][] = node_options_poll
 features[variable][] = node_preview_poll
 features[variable][] = node_submitted_poll
 features[views_view][] = commons_bw_polls
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_polls/commons_polls.module b/profiles/commons/modules/commons/commons_polls/commons_polls.module
index 115fd00..98b89fd 100644
--- a/profiles/commons/modules/commons/commons_polls/commons_polls.module
+++ b/profiles/commons/modules/commons/commons_polls/commons_polls.module
@@ -29,6 +29,7 @@ function commons_polls_commons_entity_integration() {
   return array(
     'node' => array(
       'poll' => array(
+        'media' => TRUE,
       ),
     ),
   );
diff --git a/profiles/commons/modules/commons/commons_posts/commons_posts.info b/profiles/commons/modules/commons/commons_posts/commons_posts.info
index 2b84e7c..e7cbf4a 100644
--- a/profiles/commons/modules/commons/commons_posts/commons_posts.info
+++ b/profiles/commons/modules/commons/commons_posts/commons_posts.info
@@ -50,3 +50,10 @@ features[variable][] = node_options_post
 features[variable][] = node_preview_post
 features[variable][] = node_submitted_post
 features[views_view][] = commons_bw_posts
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_posts/commons_posts.module b/profiles/commons/modules/commons/commons_posts/commons_posts.module
index b51edde..ab59e3f 100644
--- a/profiles/commons/modules/commons/commons_posts/commons_posts.module
+++ b/profiles/commons/modules/commons/commons_posts/commons_posts.module
@@ -98,6 +98,7 @@ function commons_posts_commons_entity_integration() {
   return array(
     'node' => array(
       'post' => array(
+        'media' => TRUE,
       ),
     ),
   );
diff --git a/profiles/commons/modules/commons/commons_profile_base/commons_profile_base.info b/profiles/commons/modules/commons/commons_profile_base/commons_profile_base.info
index 2d42a37..f68556b 100644
--- a/profiles/commons/modules/commons/commons_profile_base/commons_profile_base.info
+++ b/profiles/commons/modules/commons/commons_profile_base/commons_profile_base.info
@@ -17,3 +17,10 @@ features[variable][] = user_picture_dimensions
 features[variable][] = user_picture_file_size
 features[variable][] = user_picture_style
 features[variable][] = user_pictures
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_profile_base/commons_profile_base.install b/profiles/commons/modules/commons/commons_profile_base/commons_profile_base.install
new file mode 100644
index 0000000..fa0e2c8
--- /dev/null
+++ b/profiles/commons/modules/commons/commons_profile_base/commons_profile_base.install
@@ -0,0 +1,12 @@
+<?php
+
+/**
+ * Revert strongarm varibles related to realname recursion error.
+ */
+function commons_profile_base_update_7000() {
+    $revert = array(
+      'commons_profile_base' => array('variable'),
+  );
+  features_revert($revert);
+  return array();
+}
\ No newline at end of file
diff --git a/profiles/commons/modules/commons/commons_profile_base/commons_profile_base.strongarm.inc b/profiles/commons/modules/commons/commons_profile_base/commons_profile_base.strongarm.inc
index 8475a47..5c24493 100644
--- a/profiles/commons/modules/commons/commons_profile_base/commons_profile_base.strongarm.inc
+++ b/profiles/commons/modules/commons/commons_profile_base/commons_profile_base.strongarm.inc
@@ -14,7 +14,7 @@ function commons_profile_base_strongarm() {
   $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
   $strongarm->api_version = 1;
   $strongarm->name = 'realname_pattern';
-  $strongarm->value = '[user:field_name_first] [user:field_name_last]';
+  $strongarm->value = '[user:field-name-first] [user:field-name-last]';
   $export['realname_pattern'] = $strongarm;
 
   $strongarm = new stdClass();
diff --git a/profiles/commons/modules/commons/commons_profile_social/commons_profile_social.info b/profiles/commons/modules/commons/commons_profile_social/commons_profile_social.info
index 484a492..5e15d60 100644
--- a/profiles/commons/modules/commons/commons_profile_social/commons_profile_social.info
+++ b/profiles/commons/modules/commons/commons_profile_social/commons_profile_social.info
@@ -11,4 +11,10 @@ features[field_base][] = field_linkedin_url
 features[field_base][] = field_twitter_url
 features[field_instance][] = user-user-field_facebook_url
 features[field_instance][] = user-user-field_linkedin_url
-features[field_instance][] = user-user-field_twitter_url
\ No newline at end of file
+features[field_instance][] = user-user-field_twitter_url
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_q_a/commons_q_a.info b/profiles/commons/modules/commons/commons_q_a/commons_q_a.info
index 6ffb85c..9828ac5 100644
--- a/profiles/commons/modules/commons/commons_q_a/commons_q_a.info
+++ b/profiles/commons/modules/commons/commons_q_a/commons_q_a.info
@@ -93,3 +93,10 @@ features_exclude[field_instance][node-question-og_group_ref_other_groups] = node
 features_exclude[field_instance][og_group_ref] = og_group_ref
 features_exclude[field_instance][node-answer-og_group_ref] = node-answer-og_group_ref
 features_exclude[field_instance][node-question-og_group_ref] = node-question-og_group_ref
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_q_a/commons_q_a.module b/profiles/commons/modules/commons/commons_q_a/commons_q_a.module
index 39067fa..f27edbe 100644
--- a/profiles/commons/modules/commons/commons_q_a/commons_q_a.module
+++ b/profiles/commons/modules/commons/commons_q_a/commons_q_a.module
@@ -250,7 +250,9 @@ function commons_q_a_commons_bw_create_all_widget($group) {
 function commons_q_a_commons_entity_integration() {
   return array(
     'node' => array(
-      'question' => array(),
+      'question' => array(
+        'media' => TRUE,
+      ),
       'answer' => array(
         'exclude_topics' => TRUE,
         'exclude_rate' => TRUE,
diff --git a/profiles/commons/modules/commons/commons_q_a/modules/commons_q_a_pages/commons_q_a_pages.info b/profiles/commons/modules/commons/commons_q_a/modules/commons_q_a_pages/commons_q_a_pages.info
index deb6d34..5b67e27 100644
--- a/profiles/commons/modules/commons/commons_q_a/modules/commons_q_a_pages/commons_q_a_pages.info
+++ b/profiles/commons/modules/commons/commons_q_a/modules/commons_q_a_pages/commons_q_a_pages.info
@@ -11,3 +11,10 @@ features[features_api][] = api:2
 features[panelizer_defaults][] = node:question:default
 features[variable][] = panelizer_defaults_node_answer
 features[variable][] = panelizer_defaults_node_question
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_radioactivity/commons_radioactivity.info b/profiles/commons/modules/commons/commons_radioactivity/commons_radioactivity.info
index e3f4551..389cd6c 100644
--- a/profiles/commons/modules/commons/commons_radioactivity/commons_radioactivity.info
+++ b/profiles/commons/modules/commons/commons_radioactivity/commons_radioactivity.info
@@ -16,3 +16,10 @@ features[field_base][] = field_radioactivity
 features[radioactivity_decay_profile][] = commons_ra_node
 features[variable][] = commons_radioactivity_entity_types
 features[views_view][] = commons_radioactivity_admin
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_radioactivity/commons_radioactivity_groups/commons_radioactivity_groups.info b/profiles/commons/modules/commons/commons_radioactivity/commons_radioactivity_groups/commons_radioactivity_groups.info
index 54e8dd2..b9fe404 100644
--- a/profiles/commons/modules/commons/commons_radioactivity/commons_radioactivity_groups/commons_radioactivity_groups.info
+++ b/profiles/commons/modules/commons/commons_radioactivity/commons_radioactivity_groups/commons_radioactivity_groups.info
@@ -10,3 +10,10 @@ features[ctools][] = views:views_default:3.0
 features[features_api][] = api:2
 features[views_view][] = commons_radioactivity_groups_active_in_group
 features[views_view][] = commons_radioactivity_groups_most_active
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_search/commons_search.info b/profiles/commons/modules/commons/commons_search/commons_search.info
index a1789c7..2311608 100644
--- a/profiles/commons/modules/commons/commons_search/commons_search.info
+++ b/profiles/commons/modules/commons/commons_search/commons_search.info
@@ -60,4 +60,10 @@ features[variable][] = custom_search_type_selector
 features[variable][] = custom_search_type_selector_all
 features[variable][] = custom_search_type_selector_label
 features[variable][] = custom_search_type_selector_label_visibility
-features[views_view][] = group_search
\ No newline at end of file
+features[views_view][] = group_search
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_search/modules/commons_search_core/commons_search_core.info b/profiles/commons/modules/commons/commons_search/modules/commons_search_core/commons_search_core.info
index e0fc12f..d7f2f64 100644
--- a/profiles/commons/modules/commons/commons_search/modules/commons_search_core/commons_search_core.info
+++ b/profiles/commons/modules/commons/commons_search/modules/commons_search_core/commons_search_core.info
@@ -29,3 +29,10 @@ features[variable][] = custom_search_other
 features[variable][] = search_active_modules
 features[variable][] = search_default_module
 features_exclude[dependencies][ctools] = ctools
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_search/modules/commons_search_solr/commons_search_solr.info b/profiles/commons/modules/commons/commons_search/modules/commons_search_solr/commons_search_solr.info
index 0be45c0..ac6a790 100644
--- a/profiles/commons/modules/commons/commons_search/modules/commons_search_solr/commons_search_solr.info
+++ b/profiles/commons/modules/commons/commons_search/modules/commons_search_solr/commons_search_solr.info
@@ -27,3 +27,10 @@ features[variable][] = page_manager_search_disabled_apachesolr_search
 features[variable][] = pm_existing_pages_disabled_solr_search
 features[variable][] = search_active_modules
 features[variable][] = search_default_module
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_search/modules/commons_search_solr_user/commons_search_solr_user.info b/profiles/commons/modules/commons/commons_search/modules/commons_search_solr_user/commons_search_solr_user.info
index b5c8055..f971cf0 100644
--- a/profiles/commons/modules/commons/commons_search/modules/commons_search_solr_user/commons_search_solr_user.info
+++ b/profiles/commons/modules/commons/commons_search/modules/commons_search_solr_user/commons_search_solr_user.info
@@ -11,4 +11,10 @@ dependencies[] = menu
 features[apachesolr_search_page][] = user_search
 features[ctools][] = apachesolr_search:apachesolr_search_defaults:3
 features[features_api][] = api:1
-features[menu_links][] = main-menu:people
\ No newline at end of file
+features[menu_links][] = main-menu:people
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_site_homepage/commons_site_homepage.info b/profiles/commons/modules/commons/commons_site_homepage/commons_site_homepage.info
index dc9c981..19fc718 100644
--- a/profiles/commons/modules/commons/commons_site_homepage/commons_site_homepage.info
+++ b/profiles/commons/modules/commons/commons_site_homepage/commons_site_homepage.info
@@ -20,3 +20,10 @@ features[page_manager_pages][] = commons_home
 features[variable][] = site_frontpage
 features[views_view][] = commons_homepage_content
 features_exclude[dependencies][views_content] = views_content
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_social_sharing/commons_social_sharing.info b/profiles/commons/modules/commons/commons_social_sharing/commons_social_sharing.info
index a16a207..101ba03 100644
--- a/profiles/commons/modules/commons/commons_social_sharing/commons_social_sharing.info
+++ b/profiles/commons/modules/commons/commons_social_sharing/commons_social_sharing.info
@@ -16,3 +16,10 @@ features[variable][] = sharethis_option_extras
 features[variable][] = sharethis_teaser_option
 features[variable][] = sharethis_weight
 features[variable][] = sharethis_widget_option
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_topics/commons_topics.info b/profiles/commons/modules/commons/commons_topics/commons_topics.info
index 7546f1a..0b7444b 100644
--- a/profiles/commons/modules/commons/commons_topics/commons_topics.info
+++ b/profiles/commons/modules/commons/commons_topics/commons_topics.info
@@ -6,3 +6,10 @@ dependencies[] = taxonomy
 features[features_api][] = api:2
 features[field_base][] = field_topics
 features[taxonomy][] = topics
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_base.inc b/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_base.inc
index 559e7bd..3edeb77 100644
--- a/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_base.inc
+++ b/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_base.inc
@@ -319,6 +319,9 @@ function commons_trusted_contacts_field_default_field_bases() {
           ),
         ),
         'membership_type' => 'trusted_contacts',
+        'sort' => array(
+          'type' => 'none',
+        ),
         'target_bundles' => array(),
       ),
       'handler_submit' => 'Change handler',
diff --git a/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_instance.inc b/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_instance.inc
index 25a7342..f5be65e 100644
--- a/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_instance.inc
+++ b/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.features.field_instance.inc
@@ -350,7 +350,7 @@ function commons_trusted_contacts_field_default_field_instances() {
             'widget_type' => 'entityreference_autocomplete',
           ),
           'default' => array(
-            'widget_type' => 'options_select',
+            'widget_type' => 'entityreference_autocomplete',
           ),
           'status' => TRUE,
         ),
diff --git a/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.info b/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.info
index 4c658b6..4ce6dae 100644
--- a/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.info
+++ b/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.info
@@ -52,3 +52,10 @@ features[views_view][] = trusted_contacts_invitations
 features_exclude[field][message-trusted_contact_request_approved-field_approving_user] = message-trusted_contact_request_approved-field_approving_user
 features_exclude[field][message-trusted_contact_request_pending-field_requesting_user] = message-trusted_contact_request_pending-field_requesting_user
 files[] = views/handlers/commons_groups_handler_send_message.inc
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.install b/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.install
index da23dfd..e20ab9e 100644
--- a/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.install
+++ b/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.install
@@ -49,3 +49,15 @@ function commons_trusted_contacts_update_3100() {
   features_revert($revert);
   return array();
 }
+
+/**
+ * Change the background options widget to use autocomplete instead
+ * See https://drupal.org/node/2151637 for more info
+ */
+function commons_trusted_contacts_update_3101() {
+  $revert = array(
+    'commons_trusted_contacts' => array('field_instance', 'field_base'),
+  );
+  features_revert($revert);
+  return array();
+}
\ No newline at end of file
diff --git a/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.module b/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.module
index 2cbf24e..c9ea858 100644
--- a/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.module
+++ b/profiles/commons/modules/commons/commons_trusted_contacts/commons_trusted_contacts.module
@@ -187,6 +187,11 @@ function commons_trusted_contacts_module_implements_alter(&$implementations, $ho
     unset($implementations['commons_trusted_contacts']);
     $implementations['commons_trusted_contacts'] = $group;
   }
+  if ($hook == 'node_presave') {
+    $group = $implementations['commons_trusted_contacts'];
+    unset($implementations['commons_trusted_contacts']);
+    $implementations['commons_trusted_contacts'] = $group;
+  }
 }
 
 /**
@@ -213,13 +218,6 @@ function commons_trusted_contacts_form_alter(&$form, &$form_state, $form_id) {
       $form['select']['#access'] = FALSE;
     }
   }
-  // Hide internal fields that the user should not be able to edit directly.
-  if ($form_id == 'edit_profile_user_profile_form' || substr($form_id, -10) === '_node_form') {
-    $internal_fields = array('field_unread_invitations', 'field_unread_messages', 'user_trusted_contacts', 'og_user_group_ref');
-    foreach ($internal_fields as $field_name) {
-      $form[$field_name]['#access'] = FALSE;
-    }
-  }
   if ($form_id == 'privatemsg_list') {
     // Load privatemsg.pages.inc and ensure it is automatically reloaded if
     // this form is rebuilt via AJAX or other means.
@@ -702,9 +700,9 @@ function commons_trusted_contacts_approve_trust(OgMembership $og_membership) {
   // Notify.
 
   // Get approving user.
-  $account = user_load($og_membership->etid);
+  $account = user_load($og_membership->gid);
 
-  $message = message_create('trusted_contact_request_approved', array('uid' => $account->uid));
+  $message = message_create('trusted_contact_request_approved', array('uid' => $og_membership->etid));
 
   $wrapper = entity_metadata_wrapper('message', $message);
   $wrapper->field_approving_user->set($account);
@@ -886,6 +884,7 @@ function commons_trusted_contacts_form_commons_bw_partial_node_form_alter(&$form
     return;
   }
   commons_trusted_contacts_form_add_privacy_toggle($form, $form_state);
+  $form['#validate'][] = 'commons_trusted_contacts_partial_node_form_validate';
 }
 
 /**
@@ -896,10 +895,10 @@ function commons_trusted_contacts_form_add_privacy_toggle(&$form, &$form_state)
     '#type' => 'radios',
     '#title' => t('Post to'),
     '#title_display' => 'invisible',
-    '#default_value' => empty($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE][0]['default']['#default_value']) && empty($form['nid']['#value']) ? 'private' : 'custom',
+    '#default_value' => empty($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE][0]['default']['#default_value']) ? 'private' : 'custom',
     '#options' => array(
       'custom' => t('Post to specific groups'),
-      'private' => t('Post to contacts (private)'),
+      'private' => t('Post privately to all trusted contacts'),
     ),
     '#weight' => 70,
     '#attributes' => array(
@@ -947,6 +946,17 @@ function commons_trusted_contacts_form_node_form_alter(&$form, &$form_state) {
 }
 
 /**
+ * Validation handler; Make sure that a group is selected in case the
+ * group_audience_type is set to "Specific groups".
+ */
+function commons_trusted_contacts_partial_node_form_validate($form, $form_state) {
+  if ($form_state['values']['group_audience_type'] == 'custom' && empty($form_state['values'][OG_AUDIENCE_FIELD][LANGUAGE_NONE][0])) {
+    form_set_error(OG_AUDIENCE_FIELD, t('Please enter one more groups where this content will be posted.'));
+    return FALSE;
+  }
+}
+
+/**
  * Implements hook_node_presave().
  *
  * Override the group fields.
@@ -960,8 +970,6 @@ function commons_trusted_contacts_node_presave($node) {
   if (!isset($group_content_entity_types['node'][$node->type])) {
     return;
   }
-  $group_audience_type = '';
-
   // We're posting from the short form on the site-wide homepage.
   if (isset($node->form_state['values']['group_audience_type'])) {
     $group_audience_type = $node->form_state['values']['group_audience_type'];
@@ -971,12 +979,6 @@ function commons_trusted_contacts_node_presave($node) {
     $group_audience_type = $node->group_audience_type;
   }
 
-  // If the group audience type isn't set, its either content created within a
-  // group or not group content at all. Either way, we should return.
-  if (!$group_audience_type) {
-    return;
-  }
-
   $wrapper = entity_metadata_wrapper('node', $node);
   // The content is submitted to the author's trusted contacts group, rather
   // than to specific groups.
@@ -988,7 +990,7 @@ function commons_trusted_contacts_node_presave($node) {
     $wrapper->{OG_AUDIENCE_FIELD}->set(array());
   }
   // The content is submitted to specific groups.
-  else if ($group_audience_type == 'custom' && !empty($node->{OG_AUDIENCE_FIELD})) {
+  else if (!empty($node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE])) {
     // Extract group IDs from selection.
     $group_ids = array();
     foreach ($node->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE] as $group) {
@@ -997,9 +999,6 @@ function commons_trusted_contacts_node_presave($node) {
     $wrapper->{OG_AUDIENCE_FIELD}->set($group_ids);
     $wrapper->og_user_group_ref->set(array());
   }
-  else {
-    return;
-  }
 }
 
 /**
diff --git a/profiles/commons/modules/commons/commons_user_profile_pages/commons_user_profile_pages.info b/profiles/commons/modules/commons/commons_user_profile_pages/commons_user_profile_pages.info
index 57c72e7..918d953 100644
--- a/profiles/commons/modules/commons/commons_user_profile_pages/commons_user_profile_pages.info
+++ b/profiles/commons/modules/commons/commons_user_profile_pages/commons_user_profile_pages.info
@@ -12,3 +12,10 @@ dependencies[] = page_manager
 features[ctools][] = page_manager:pages_default:1
 features[features_api][] = api:2
 features[page_manager_handlers][] = user_view_panel_context
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_utility_links/commons_utility_links.info b/profiles/commons/modules/commons/commons_utility_links/commons_utility_links.info
index bf991bf..64fee6d 100644
--- a/profiles/commons/modules/commons/commons_utility_links/commons_utility_links.info
+++ b/profiles/commons/modules/commons/commons_utility_links/commons_utility_links.info
@@ -1,3 +1,9 @@
 core = 7.x
 name = Commons Utility links block
-package = "Commons - Building blocks"
\ No newline at end of file
+package = "Commons - Building blocks"
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_wikis/commons_wikis.info b/profiles/commons/modules/commons/commons_wikis/commons_wikis.info
index f478856..b126e6b 100644
--- a/profiles/commons/modules/commons/commons_wikis/commons_wikis.info
+++ b/profiles/commons/modules/commons/commons_wikis/commons_wikis.info
@@ -61,3 +61,10 @@ features[variable][] = show_preview_changes_wiki
 features[views_view][] = commons_bw_wikis
 features[views_view][] = commons_wikis_contributor_list
 features_exclude[dependencies][commons_trusted_contacts] = commons_trusted_contacts
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_wikis/commons_wikis.module b/profiles/commons/modules/commons/commons_wikis/commons_wikis.module
index 20cf44b..9c571a8 100644
--- a/profiles/commons/modules/commons/commons_wikis/commons_wikis.module
+++ b/profiles/commons/modules/commons/commons_wikis/commons_wikis.module
@@ -163,6 +163,7 @@ function commons_wikis_commons_entity_integration() {
     'node' => array(
       'wiki' => array(
         'auto_title_instance' => FALSE,
+        'media' => TRUE,
       ),
     ),
   );
diff --git a/profiles/commons/modules/commons/commons_wikis/modules/commons_wikis_pages/commons_wikis_pages.info b/profiles/commons/modules/commons/commons_wikis/modules/commons_wikis_pages/commons_wikis_pages.info
index 79e7c9a..96626ca 100644
--- a/profiles/commons/modules/commons/commons_wikis/modules/commons_wikis_pages/commons_wikis_pages.info
+++ b/profiles/commons/modules/commons/commons_wikis/modules/commons_wikis_pages/commons_wikis_pages.info
@@ -11,3 +11,10 @@ features[ctools][] = strongarm:strongarm:1
 features[features_api][] = api:2
 features[panelizer_defaults][] = node:wiki:default
 features[variable][] = panelizer_defaults_node_wiki
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/commons/commons_wysiwyg/commons_wysiwyg.info b/profiles/commons/modules/commons/commons_wysiwyg/commons_wysiwyg.info
index a4e5358..4342429 100644
--- a/profiles/commons/modules/commons/commons_wysiwyg/commons_wysiwyg.info
+++ b/profiles/commons/modules/commons/commons_wysiwyg/commons_wysiwyg.info
@@ -11,3 +11,10 @@ features[features_api][] = api:2
 features[filter][] = filtered_html
 features[filter][] = full_html
 features[user_permission][] = use text format filtered_html
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/modules/contrib/admin_icons/admin_icons.info b/profiles/commons/modules/contrib/admin_icons/admin_icons.info
index e7d6015..470aef2 100644
--- a/profiles/commons/modules/contrib/admin_icons/admin_icons.info
+++ b/profiles/commons/modules/contrib/admin_icons/admin_icons.info
@@ -4,9 +4,8 @@ core = 7.x
 
 
 
-; Information added by drush on 2013-11-22
-version = "7.x-1.x-dev"
-core = "7.x"
+; Information added by drush on 2013-12-20
+version = ""
 project = "admin_icons"
-datestamp = "1385094619"
+datestamp = "1387568925"
 
diff --git a/profiles/commons/modules/contrib/apachesolr_og/apachesolr_og.info b/profiles/commons/modules/contrib/apachesolr_og/apachesolr_og.info
index 958ee34..1ce128a 100644
--- a/profiles/commons/modules/contrib/apachesolr_og/apachesolr_og.info
+++ b/profiles/commons/modules/contrib/apachesolr_og/apachesolr_og.info
@@ -7,9 +7,9 @@ dependencies[] = apachesolr
 dependencies[] = og
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.0+2-dev"
 core = "7.x"
 project = "apachesolr_og"
-datestamp = "1385094625"
+datestamp = "1387568923"
 
diff --git a/profiles/commons/modules/contrib/apachesolr_user/apachesolr_user.info b/profiles/commons/modules/contrib/apachesolr_user/apachesolr_user.info
index f4182d6..20ea65c 100644
--- a/profiles/commons/modules/contrib/apachesolr_user/apachesolr_user.info
+++ b/profiles/commons/modules/contrib/apachesolr_user/apachesolr_user.info
@@ -6,9 +6,8 @@ package = Search Toolkit
 core = 7.x
 
 
-; Information added by drush on 2013-11-22
-version = "7.x-1.x-dev"
-core = "7.x"
+; Information added by drush on 2013-12-20
+version = ""
 project = "apachesolr_user"
-datestamp = "1385094628"
+datestamp = "1387568923"
 
diff --git a/profiles/commons/modules/contrib/ctools/bulk_export/bulk_export.info b/profiles/commons/modules/contrib/ctools/bulk_export/bulk_export.info
index f36e920..b9ca129 100644
--- a/profiles/commons/modules/contrib/ctools/bulk_export/bulk_export.info
+++ b/profiles/commons/modules/contrib/ctools/bulk_export/bulk_export.info
@@ -5,9 +5,9 @@ dependencies[] = ctools
 package = Chaos tool suite
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.3+4-dev"
 core = "7.x"
 project = "ctools"
-datestamp = "1385094677"
+datestamp = "1387568944"
 
diff --git a/profiles/commons/modules/contrib/ctools/ctools.info b/profiles/commons/modules/contrib/ctools/ctools.info
index b3609fc..4348cbe 100644
--- a/profiles/commons/modules/contrib/ctools/ctools.info
+++ b/profiles/commons/modules/contrib/ctools/ctools.info
@@ -7,9 +7,9 @@ files[] = includes/math-expr.inc
 files[] = includes/stylizer.inc
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.3+4-dev"
 core = "7.x"
 project = "ctools"
-datestamp = "1385094677"
+datestamp = "1387568944"
 
diff --git a/profiles/commons/modules/contrib/ctools/ctools_access_ruleset/ctools_access_ruleset.info b/profiles/commons/modules/contrib/ctools/ctools_access_ruleset/ctools_access_ruleset.info
index 7787c1d..60085c2 100644
--- a/profiles/commons/modules/contrib/ctools/ctools_access_ruleset/ctools_access_ruleset.info
+++ b/profiles/commons/modules/contrib/ctools/ctools_access_ruleset/ctools_access_ruleset.info
@@ -5,9 +5,9 @@ package = Chaos tool suite
 dependencies[] = ctools
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.3+4-dev"
 core = "7.x"
 project = "ctools"
-datestamp = "1385094677"
+datestamp = "1387568944"
 
diff --git a/profiles/commons/modules/contrib/ctools/ctools_ajax_sample/ctools_ajax_sample.info b/profiles/commons/modules/contrib/ctools/ctools_ajax_sample/ctools_ajax_sample.info
index 1edf156..8789a21 100644
--- a/profiles/commons/modules/contrib/ctools/ctools_ajax_sample/ctools_ajax_sample.info
+++ b/profiles/commons/modules/contrib/ctools/ctools_ajax_sample/ctools_ajax_sample.info
@@ -5,9 +5,9 @@ dependencies[] = ctools
 core = 7.x
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.3+4-dev"
 core = "7.x"
 project = "ctools"
-datestamp = "1385094677"
+datestamp = "1387568944"
 
diff --git a/profiles/commons/modules/contrib/ctools/ctools_custom_content/ctools_custom_content.info b/profiles/commons/modules/contrib/ctools/ctools_custom_content/ctools_custom_content.info
index 6087e25..6fb8216 100644
--- a/profiles/commons/modules/contrib/ctools/ctools_custom_content/ctools_custom_content.info
+++ b/profiles/commons/modules/contrib/ctools/ctools_custom_content/ctools_custom_content.info
@@ -5,9 +5,9 @@ package = Chaos tool suite
 dependencies[] = ctools
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.3+4-dev"
 core = "7.x"
 project = "ctools"
-datestamp = "1385094677"
+datestamp = "1387568944"
 
diff --git a/profiles/commons/modules/contrib/ctools/ctools_plugin_example/ctools_plugin_example.info b/profiles/commons/modules/contrib/ctools/ctools_plugin_example/ctools_plugin_example.info
index 889bf48..006aa35 100644
--- a/profiles/commons/modules/contrib/ctools/ctools_plugin_example/ctools_plugin_example.info
+++ b/profiles/commons/modules/contrib/ctools/ctools_plugin_example/ctools_plugin_example.info
@@ -8,9 +8,9 @@ dependencies[] = advanced_help
 core = 7.x
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.3+4-dev"
 core = "7.x"
 project = "ctools"
-datestamp = "1385094677"
+datestamp = "1387568944"
 
diff --git a/profiles/commons/modules/contrib/ctools/page_manager/page_manager.info b/profiles/commons/modules/contrib/ctools/page_manager/page_manager.info
index ae25d8d..d82ffcf 100644
--- a/profiles/commons/modules/contrib/ctools/page_manager/page_manager.info
+++ b/profiles/commons/modules/contrib/ctools/page_manager/page_manager.info
@@ -5,9 +5,9 @@ dependencies[] = ctools
 package = Chaos tool suite
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.3+4-dev"
 core = "7.x"
 project = "ctools"
-datestamp = "1385094677"
+datestamp = "1387568944"
 
diff --git a/profiles/commons/modules/contrib/ctools/stylizer/stylizer.info b/profiles/commons/modules/contrib/ctools/stylizer/stylizer.info
index d392964..19dd7ae 100644
--- a/profiles/commons/modules/contrib/ctools/stylizer/stylizer.info
+++ b/profiles/commons/modules/contrib/ctools/stylizer/stylizer.info
@@ -6,9 +6,9 @@ dependencies[] = ctools
 dependencies[] = color
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.3+4-dev"
 core = "7.x"
 project = "ctools"
-datestamp = "1385094677"
+datestamp = "1387568944"
 
diff --git a/profiles/commons/modules/contrib/ctools/tests/ctools_export_test/ctools_export_test.info b/profiles/commons/modules/contrib/ctools/tests/ctools_export_test/ctools_export_test.info
index 3ca2d78..7e5bc55 100644
--- a/profiles/commons/modules/contrib/ctools/tests/ctools_export_test/ctools_export_test.info
+++ b/profiles/commons/modules/contrib/ctools/tests/ctools_export_test/ctools_export_test.info
@@ -8,9 +8,9 @@ hidden = TRUE
 files[] = ctools_export.test
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.3+4-dev"
 core = "7.x"
 project = "ctools"
-datestamp = "1385094677"
+datestamp = "1387568944"
 
diff --git a/profiles/commons/modules/contrib/ctools/tests/ctools_plugin_test.info b/profiles/commons/modules/contrib/ctools/tests/ctools_plugin_test.info
index 5d0d921..c20ee27 100644
--- a/profiles/commons/modules/contrib/ctools/tests/ctools_plugin_test.info
+++ b/profiles/commons/modules/contrib/ctools/tests/ctools_plugin_test.info
@@ -12,9 +12,9 @@ files[] = math_expression_stack.test
 hidden = TRUE
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.3+4-dev"
 core = "7.x"
 project = "ctools"
-datestamp = "1385094677"
+datestamp = "1387568944"
 
diff --git a/profiles/commons/modules/contrib/ctools/views_content/views_content.info b/profiles/commons/modules/contrib/ctools/views_content/views_content.info
index 818a7b3..17750e7 100644
--- a/profiles/commons/modules/contrib/ctools/views_content/views_content.info
+++ b/profiles/commons/modules/contrib/ctools/views_content/views_content.info
@@ -10,9 +10,9 @@ files[] = plugins/views/views_content_plugin_display_panel_pane.inc
 files[] = plugins/views/views_content_plugin_style_ctools_context.inc
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.3+4-dev"
 core = "7.x"
 project = "ctools"
-datestamp = "1385094677"
+datestamp = "1387568944"
 
diff --git a/profiles/commons/modules/contrib/custom_search/custom_search.info b/profiles/commons/modules/contrib/custom_search/custom_search.info
index 22c45cf..37cc02f 100644
--- a/profiles/commons/modules/contrib/custom_search/custom_search.info
+++ b/profiles/commons/modules/contrib/custom_search/custom_search.info
@@ -7,9 +7,9 @@ dependencies[] = search
 
 configure = admin/config/search/custom_search
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.12+1-dev"
 core = "7.x"
 project = "custom_search"
-datestamp = "1385094692"
+datestamp = "1387568932"
 
diff --git a/profiles/commons/modules/contrib/custom_search/modules/custom_search_blocks/custom_search_blocks.info b/profiles/commons/modules/contrib/custom_search/modules/custom_search_blocks/custom_search_blocks.info
index 66d25d0..e630217 100644
--- a/profiles/commons/modules/contrib/custom_search/modules/custom_search_blocks/custom_search_blocks.info
+++ b/profiles/commons/modules/contrib/custom_search/modules/custom_search_blocks/custom_search_blocks.info
@@ -8,9 +8,9 @@ dependencies[] = custom_search
 
 configure = admin/config/search/custom_search/blocks
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.12+1-dev"
 core = "7.x"
 project = "custom_search"
-datestamp = "1385094692"
+datestamp = "1387568932"
 
diff --git a/profiles/commons/modules/contrib/custom_search/modules/custom_search_i18n/custom_search_i18n.info b/profiles/commons/modules/contrib/custom_search/modules/custom_search_i18n/custom_search_i18n.info
index 1602933..ffc4e11 100644
--- a/profiles/commons/modules/contrib/custom_search/modules/custom_search_i18n/custom_search_i18n.info
+++ b/profiles/commons/modules/contrib/custom_search/modules/custom_search_i18n/custom_search_i18n.info
@@ -6,9 +6,9 @@ package = Search
 dependencies[] = custom_search
 dependencies[] = i18n_string
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.12+1-dev"
 core = "7.x"
 project = "custom_search"
-datestamp = "1385094692"
+datestamp = "1387568932"
 
diff --git a/profiles/commons/modules/contrib/custom_search/modules/custom_search_taxonomy/custom_search_taxonomy.info b/profiles/commons/modules/contrib/custom_search/modules/custom_search_taxonomy/custom_search_taxonomy.info
index c73c426..886d24d 100644
--- a/profiles/commons/modules/contrib/custom_search/modules/custom_search_taxonomy/custom_search_taxonomy.info
+++ b/profiles/commons/modules/contrib/custom_search/modules/custom_search_taxonomy/custom_search_taxonomy.info
@@ -8,9 +8,9 @@ dependencies[] = taxonomy
 
 configure = admin/config/search/custom_search/taxonomy
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.12+1-dev"
 core = "7.x"
 project = "custom_search"
-datestamp = "1385094692"
+datestamp = "1387568932"
 
diff --git a/profiles/commons/modules/contrib/devel/LICENSE.txt b/profiles/commons/modules/contrib/devel/LICENSE.txt
old mode 100644
new mode 100755
diff --git a/profiles/commons/modules/contrib/devel/devel.info b/profiles/commons/modules/contrib/devel/devel.info
index 62a1d42..952aeb3 100644
--- a/profiles/commons/modules/contrib/devel/devel.info
+++ b/profiles/commons/modules/contrib/devel/devel.info
@@ -7,9 +7,9 @@ tags[] = developer
 files[] = devel.test
 files[] = devel.mail.inc
 
-; Information added by drupal.org packaging script on 2013-09-30
-version = "7.x-1.3+54-dev"
+; Information added by Drupal.org packaging script on 2013-12-12
+version = "7.x-1.3+59-dev"
 core = "7.x"
 project = "devel"
-datestamp = "1380569319"
+datestamp = "1386892405"
 
diff --git a/profiles/commons/modules/contrib/devel/devel.js b/profiles/commons/modules/contrib/devel/devel.js
index bbf4942..c23cc94 100644
--- a/profiles/commons/modules/contrib/devel/devel.js
+++ b/profiles/commons/modules/contrib/devel/devel.js
@@ -2,11 +2,11 @@
 
 // Explain link in query log
 Drupal.behaviors.devel_explain = {
-  attach: function() {
+  attach: function(context, settings) {
     $('a.dev-explain').click(function () {
       qid = $(this).attr("qid");
       cell = $('#devel-query-' + qid);
-      $('.dev-explain', cell).load(Drupal.settings.basePath + '?q=devel/explain/' + Drupal.settings.devel.request_id + '/' + qid).show();
+      $('.dev-explain', cell).load(settings.basePath + '?q=devel/explain/' + settings.devel.request_id + '/' + qid).show();
       $('.dev-placeholders', cell).hide();
       $('.dev-arguments', cell).hide();
       return false;
@@ -16,11 +16,11 @@ Drupal.behaviors.devel_explain = {
 
 // Arguments link in query log
 Drupal.behaviors.devel_arguments = {
-  attach: function() {
+  attach: function(context, settings) {
     $('a.dev-arguments').click(function () {
       qid = $(this).attr("qid");
       cell = $('#devel-query-' + qid);
-      $('.dev-arguments', cell).load(Drupal.settings.basePath + '?q=devel/arguments/' + Drupal.settings.devel.request_id + '/' + qid).show();
+      $('.dev-arguments', cell).load(settings.basePath + '?q=devel/arguments/' + settings.devel.request_id + '/' + qid).show();
       $('.dev-placeholders', cell).hide();
       $('.dev-explain', cell).hide();
       return false;
@@ -30,7 +30,7 @@ Drupal.behaviors.devel_arguments = {
 
 // Placeholders link in query log
 Drupal.behaviors.devel_placeholders = {
-  attach: function() {
+  attach: function(context, settings) {
     $('a.dev-placeholders').click(function () {
       qid = $(this).attr("qid");
       cell = $('#devel-query-' + qid);
diff --git a/profiles/commons/modules/contrib/devel/devel.module b/profiles/commons/modules/contrib/devel/devel.module
index 98575df..e0f67ea 100644
--- a/profiles/commons/modules/contrib/devel/devel.module
+++ b/profiles/commons/modules/contrib/devel/devel.module
@@ -1774,7 +1774,7 @@ function dd($data, $label = NULL) {
 /**
  * Logs a variable to a drupal_debug.txt in the site's temp directory.
  *
- * @param string $data
+ * @param mixed $data
  *   The variable to log to the drupal_debug.txt log file.
  * @param string $label
  *   (optional) If set, a label to output before $data in the log file.
diff --git a/profiles/commons/modules/contrib/devel/devel_generate/devel_generate.info b/profiles/commons/modules/contrib/devel/devel_generate/devel_generate.info
index 7ef3ad8..7634757 100644
--- a/profiles/commons/modules/contrib/devel/devel_generate/devel_generate.info
+++ b/profiles/commons/modules/contrib/devel/devel_generate/devel_generate.info
@@ -6,9 +6,9 @@ tags[] = developer
 configure = admin/config/development/generate
 files[] = devel_generate.test
 
-; Information added by drupal.org packaging script on 2013-09-30
-version = "7.x-1.3+54-dev"
+; Information added by Drupal.org packaging script on 2013-12-12
+version = "7.x-1.3+59-dev"
 core = "7.x"
 project = "devel"
-datestamp = "1380569319"
+datestamp = "1386892405"
 
diff --git a/profiles/commons/modules/contrib/devel/devel_krumo_path.js b/profiles/commons/modules/contrib/devel/devel_krumo_path.js
index cb17cff..d4a578d 100644
--- a/profiles/commons/modules/contrib/devel/devel_krumo_path.js
+++ b/profiles/commons/modules/contrib/devel/devel_krumo_path.js
@@ -7,7 +7,7 @@ Drupal.behaviors.devel = {
   attach: function (context, settings) {
 
     // Add hint to footnote
-    $('.krumo-footnote .krumo-call').once().before('<img style="vertical-align: middle;" title="Click to expand. Double-click to show path." src="' + Drupal.settings.basePath + 'misc/help.png"/>');
+    $('.krumo-footnote .krumo-call').once().before('<img style="vertical-align: middle;" title="Click to expand. Double-click to show path." src="' + settings.basePath + 'misc/help.png"/>');
 
     var krumo_name = [];
     var krumo_type = [];
diff --git a/profiles/commons/modules/contrib/devel/devel_node_access.info b/profiles/commons/modules/contrib/devel/devel_node_access.info
index 4cf9db0..05970dc 100644
--- a/profiles/commons/modules/contrib/devel/devel_node_access.info
+++ b/profiles/commons/modules/contrib/devel/devel_node_access.info
@@ -6,9 +6,9 @@ core = 7.x
 configure = admin/config/development/devel
 tags[] = developer
 
-; Information added by drupal.org packaging script on 2013-09-30
-version = "7.x-1.3+54-dev"
+; Information added by Drupal.org packaging script on 2013-12-12
+version = "7.x-1.3+59-dev"
 core = "7.x"
 project = "devel"
-datestamp = "1380569319"
+datestamp = "1386892405"
 
diff --git a/profiles/commons/modules/contrib/devel/devel_node_access.js b/profiles/commons/modules/contrib/devel/devel_node_access.js
index 60f782c..b790942 100644
--- a/profiles/commons/modules/contrib/devel/devel_node_access.js
+++ b/profiles/commons/modules/contrib/devel/devel_node_access.js
@@ -7,7 +7,7 @@
   /**
    * Perform the access by user ajax request.
    */
-  function devel_node_access_user_ajax(context) {
+  function devel_node_access_user_ajax(context, settings) {
     // Get the cell ID for the first .dna-permission that isn't processed.
     var cell = $('td.dna-permission', context)
                .not('.ajax-processed', context)
@@ -15,7 +15,7 @@
     if (cell !== undefined) {
       // Generate the URI from the basePath, path, data type, cell ID, and a
       // random token to bypass caching.
-      var url = Drupal.settings.basePath
+      var url = settings.basePath
               + "?q="
               + 'devel/node_access/by_user/json/'
               + cell
@@ -25,7 +25,7 @@
       $.getJSON(url, function(data) {
         $('#' + cell, context).html(data).addClass('ajax-processed');
         // Call this function again.
-        devel_node_access_user_ajax(context);
+        devel_node_access_user_ajax(context, settings);
       });
       // Ajax fails silently on error, mark bad requests with an error message.
       // If the request is just slow this will update when the request succeeds.
@@ -42,7 +42,7 @@
               )
               .addClass('ajax-processed');
             // Call this function again.
-            devel_node_access_user_ajax(context);
+            devel_node_access_user_ajax(context, settings);
           }
         },
         3000
@@ -55,10 +55,10 @@
    * Attach the access by user behavior which initiates ajax.
    */
   Drupal.behaviors.develNodeAccessUserAjax = {
-    attach: function(context) {
+    attach: function(context, settings) {
       // Start the ajax.
-      devel_node_access_user_ajax(context);
+      devel_node_access_user_ajax(context, settings);
     }
   };
 
-})(jQuery);
\ No newline at end of file
+})(jQuery);
diff --git a/profiles/commons/modules/contrib/devel/devel_node_access.module b/profiles/commons/modules/contrib/devel/devel_node_access.module
index 0eb5fe0..74e927e 100644
--- a/profiles/commons/modules/contrib/devel/devel_node_access.module
+++ b/profiles/commons/modules/contrib/devel/devel_node_access.module
@@ -1005,7 +1005,12 @@ function devel_node_access_block_view($delta) {
       if (isset($node)) {
         $nid = $node->nid;
         $node_type = node_type_get_type($node);
-        $headers = array(t('username'), '<span title="' . t("Create nodes of the '@Node_type' type.", array('@Node_type' => $node_type->name)) . '">' . t('create') . '</span>', t('view'), t('update'), t('delete'));
+        $variables = array('@Node_type' => ($node_type ? $node_type->name : $node->type));
+        $create_header = '<span title="' . t("Create nodes of the '@Node_type' type.", $variables) . '">' . t('create') . '</span>';
+        if (!$node_type) {
+          $create_header .= '<br /><span class="error">' . t("(missing type: '@Node_type')", $variables) . '</span>';
+        }
+        $headers = array(t('username'), $create_header, t('view'), t('update'), t('delete'));
         $rows = array();
         // Determine whether to use Ajax or prepopulate the tables.
         if ($ajax = variable_get('devel_node_access_user_ajax', FALSE)) {
diff --git a/profiles/commons/modules/contrib/devel/krumo/class.krumo.php b/profiles/commons/modules/contrib/devel/krumo/class.krumo.php
index 70da0b9..fde9e4c 100755
--- a/profiles/commons/modules/contrib/devel/krumo/class.krumo.php
+++ b/profiles/commons/modules/contrib/devel/krumo/class.krumo.php
@@ -604,7 +604,9 @@ This is a list of all the values from the <code><b><?php echo realpath($ini_file
     $_recursion_marker = krumo::_marker();
     if ($hive =& krumo::_hive($dummy)) {
       foreach($hive as $i=>$bee){
-        if (is_object($bee)) {
+        // skip closures set as properties
+        $closure_prototype = function(){};
+        if (is_object($bee) && !($bee instanceof $closure_prototype)) {
           unset($hive[$i]->$_recursion_marker);
           // DEVEL: changed 'else' to 'elseif' below
           } elseif (is_array($bee)) {
diff --git a/profiles/commons/modules/contrib/elements/LICENSE.txt b/profiles/commons/modules/contrib/elements/LICENSE.txt
new file mode 100644
index 0000000..d159169
--- /dev/null
+++ b/profiles/commons/modules/contrib/elements/LICENSE.txt
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/profiles/commons/modules/contrib/elements/README.txt b/profiles/commons/modules/contrib/elements/README.txt
new file mode 100644
index 0000000..6ac97ec
--- /dev/null
+++ b/profiles/commons/modules/contrib/elements/README.txt
@@ -0,0 +1,14 @@
+Description
+===========
+Elements intends to become a library that provides complex form elements for developers to use in their modules.
+
+
+Elements provided
+=================
+
+1. emailfield
+2. searchfield
+3. telfield
+4. urlfield
+5. numberfield
+6. rangefield
diff --git a/profiles/commons/modules/contrib/elements/elements.info b/profiles/commons/modules/contrib/elements/elements.info
new file mode 100644
index 0000000..2a73b0c
--- /dev/null
+++ b/profiles/commons/modules/contrib/elements/elements.info
@@ -0,0 +1,12 @@
+name = Elements
+description = Provides a library of Form API elements.
+core = 7.x
+files[] = elements.module
+files[] = elements.theme.inc
+
+; Information added by drupal.org packaging script on 2013-06-08
+version = "7.x-1.4"
+core = "7.x"
+project = "elements"
+datestamp = "1370667652"
+
diff --git a/profiles/commons/modules/contrib/elements/elements.module b/profiles/commons/modules/contrib/elements/elements.module
new file mode 100644
index 0000000..37afef3
--- /dev/null
+++ b/profiles/commons/modules/contrib/elements/elements.module
@@ -0,0 +1,596 @@
+<?php
+
+/**
+ * Implements hook_element_info().
+ */
+function elements_element_info() {
+  $types['emailfield'] = array(
+    '#input' => TRUE,
+    '#size' => 60,
+    '#maxlength' => 128,
+    '#autocomplete_path' => FALSE,
+    '#process' => array('ajax_process_form', 'elements_process_pattern'),
+    '#element_validate' => array('elements_validate_email'),
+    '#theme' => 'emailfield',
+    '#theme_wrappers' => array('form_element'),
+  );
+  $types['searchfield'] = array(
+    '#input' => TRUE,
+    '#size' => 60,
+    '#maxlength' => 128,
+    '#autocomplete_path' => FALSE,
+    '#process' => array('ajax_process_form'),
+    '#theme' => 'searchfield',
+    '#theme_wrappers' => array('form_element'),
+  );
+  $types['telfield'] = array(
+    '#input' => TRUE,
+    '#size' => 20,
+    '#maxlength' => 64,
+    '#process' => array('ajax_process_form', 'elements_process_pattern'),
+    '#theme' => 'telfield',
+    '#theme_wrappers' => array('form_element'),
+  );
+  $types['urlfield'] = array(
+    '#input' => TRUE,
+    '#size' => 80,
+    '#maxlength' => 128,
+    '#autocomplete_path' => FALSE,
+    '#process' => array('ajax_process_form', 'elements_process_pattern'),
+    '#element_validate' => array('elements_validate_url'),
+    '#theme' => 'urlfield',
+    '#theme_wrappers' => array('form_element'),
+  );
+  $types['numberfield'] = array(
+    '#input' => TRUE,
+    '#step' => 1,
+    '#process' => array('ajax_process_form'),
+    '#element_validate' => array('elements_validate_number'),
+    '#theme' => 'numberfield',
+    '#theme_wrappers' => array('form_element'),
+  );
+  $types['rangefield'] = array(
+    '#input' => TRUE,
+    '#step' => 1,
+    '#min' => 0,
+    '#max' => 100,
+    '#process' => array('ajax_process_form'),
+    '#element_validate' => array('elements_validate_number'),
+    '#theme' => 'rangefield',
+    '#theme_wrappers' => array('form_element'),
+  );
+
+  // Backported table element from https://drupal.org/node/80855
+  $types['table'] = array(
+    '#header' => array(),
+    '#rows' => array(),
+    '#empty' => '',
+    // Properties for tableselect support.
+    '#input' => TRUE,
+    '#tree' => TRUE,
+    '#tableselect' => FALSE,
+    '#multiple' => TRUE,
+    '#js_select' => TRUE,
+    '#value_callback' => 'elements_table_value',
+    '#process' => array('elements_table_process'),
+    '#element_validate' => array('elements_table_validate'),
+    // Properties for tabledrag support.
+    // The value is a list of arrays that are passed to drupal_add_tabledrag().
+    // elements_pre_render_table() prepends the HTML ID of the table to each set
+    // of arguments.
+    // @see drupal_add_tabledrag()
+    '#tabledrag' => array(),
+    // Render properties.
+    '#pre_render' => array('elements_pre_render_table'),
+    '#theme' => 'table',
+  );
+
+  return $types;
+}
+
+/**
+ * Implements hook_element_info_alter().
+ */
+function elements_element_info_alter(&$types) {
+  // Add placeholder and pattern support to core form elements.
+  foreach (array_keys($types) as $type) {
+    switch ($type) {
+      case 'textfield':
+      case 'textarea':
+      case 'password':
+        $types[$type]['#process'][] = 'elements_process_placeholder';
+        $types[$type]['#process'][] = 'elements_process_pattern';
+        break;
+    }
+  }
+}
+
+/**
+ * Implements hook_theme().
+ */
+function elements_theme() {
+  return array(
+    'emailfield' => array(
+      'arguments' => array('element' => NULL),
+      'render element' => 'element',
+      'file' => 'elements.theme.inc',
+    ),
+    'searchfield' => array(
+      'arguments' => array('element' => NULL),
+      'render element' => 'element',
+      'file' => 'elements.theme.inc',
+    ),
+    'telfield' => array(
+      'arguments' => array('element' => NULL),
+      'render element' => 'element',
+      'file' => 'elements.theme.inc',
+    ),
+    'urlfield' => array(
+      'arguments' => array('element' => NULL),
+      'render element' => 'element',
+      'file' => 'elements.theme.inc',
+    ),
+    'numberfield' => array(
+      'arguments' => array('element' => NULL),
+      'render element' => 'element',
+      'file' => 'elements.theme.inc',
+    ),
+    'rangefield' => array(
+      'arguments' => array('element' => NULL),
+      'render element' => 'element',
+      'file' => 'elements.theme.inc',
+    ),
+  );
+}
+
+/**
+ * Return the autocompletion HTML for a form element.
+ *
+ * @param $element
+ *   The renderable element to process for autocompletion.
+ *
+ * @return
+ *   The rendered autocompletion element HTML, or an empty string if the field
+ *   has no autocompletion enabled.
+ */
+function elements_add_autocomplete(&$element) {
+  $extra = '';
+
+  if (!empty($element['#autocomplete_path']) && drupal_valid_path($element['#autocomplete_path'])) {
+    drupal_add_library('system', 'drupal.autocomplete');
+    $element['#attributes']['class'][] = 'form-autocomplete';
+
+    $attributes = array();
+    $attributes['type'] = 'hidden';
+    $attributes['id'] = $element['#attributes']['id'] . '-autocomplete';
+    $attributes['value'] = url($element['#autocomplete_path'], array('absolute' => TRUE));
+    $attributes['disabled'] = 'disabled';
+    $attributes['class'][] = 'autocomplete';
+    $extra = '<input' . drupal_attributes($attributes) . ' />';
+  }
+
+  return $extra;
+}
+
+/**
+ * #process callback for #placeholder form element property.
+ *
+ * @param $element
+ *   An associative array containing the properties and children of the
+ *   generic input element.
+ *
+ * @return
+ *   The processed element.
+ */
+function elements_process_placeholder($element) {
+  if (isset($element['#placeholder']) && !isset($element['#attributes']['placeholder'])) {
+    $element['#attributes']['placeholder'] = $element['#placeholder'];
+  }
+
+  return $element;
+}
+
+/**
+ * #process callback for #pattern form element property.
+ *
+ * @param $element
+ *   An associative array containing the properties and children of the
+ *   generic input element.
+ *
+ * @return
+ *   The processed element.
+ *
+ * @see elements_validate_pattern()
+ */
+function elements_process_pattern($element) {
+  if (isset($element['#pattern']) && !isset($element['#attributes']['pattern'])) {
+    $element['#attributes']['pattern'] = $element['#pattern'];
+    $element['#element_validate'][] = 'form_validate_pattern';
+  }
+
+  return $element;
+}
+
+/**
+ * #element_validate callback for #pattern form element property.
+ *
+ * @param $element
+ *   An associative array containing the properties and children of the
+ *   generic form element.
+ * @param $form_state
+ *   The $form_state array for the form this element belongs to.
+ *
+ * @see element_process_pattern()
+ */
+function elements_validate_pattern($element, &$form_state) {
+  if ($element['#value'] !== '') {
+    // The pattern must match the entire string and should have the same
+    // behavior as the RegExp object in ECMA 262.
+    // - Use bracket-style delimiters to avoid introducing a special delimiter
+    //   character like '/' that would have to be escaped.
+    // - Put in brackets so that the pattern can't interfere with what's
+    //   prepended and appended.
+    $pattern = '{^(?:' . $element['#pattern'] . ')$}';
+
+    if (!preg_match($pattern, $element['#value'])) {
+      form_error($element, t('%name field is not in the right format.', array('%name' => $element['#title'])));
+    }
+  }
+}
+
+/**
+ * Form element validation handler for #type 'email'.
+ *
+ * Note that #maxlength and #required is validated by _form_validate() already.
+ */
+function elements_validate_email(&$element, &$form_state) {
+  if ($element['#value'] && !valid_email_address($element['#value'])) {
+    form_error($element, t('The e-mail address %mail is not valid.', array('%mail' => $element['#value'])));
+  }
+}
+
+/**
+ * Form element validation handler for #type 'url'.
+ *
+ * Note that #maxlength and #required is validated by _form_validate() already.
+ */
+function elements_validate_url(&$element, &$form_state) {
+  if ($element['#value'] && !valid_url($element['#value'], TRUE)) {
+    form_error($element, t('The URL %url is not valid.', array('%url' => $element['#value'])));
+  }
+}
+
+/**
+ * Form element validation handler for #type 'number'.
+ *
+ * Note that #required is validated by _form_validate() already.
+ */
+function elements_validate_number(&$element, &$form_state) {
+  $value = $element['#value'];
+  if ($value === '') {
+    return;
+  }
+
+  $name = empty($element['#title']) ? $element['#parents'][0] : $element['#title'];
+
+  // Ensure the input is numeric.
+  if (!is_numeric($value)) {
+    form_error($element, t('%name must be a number.', array('%name' => $name)));
+    return;
+  }
+
+  // Ensure that the input is greater than the #min property, if set.
+  if (isset($element['#min']) && $value < $element['#min']) {
+    form_error($element, t('%name must be higher or equal to %min.', array('%name' => $name, '%min' => $element['#min'])));
+  }
+
+  // Ensure that the input is less than the #max property, if set.
+  if (isset($element['#max']) && $value > $element['#max']) {
+    form_error($element, t('%name must be below or equal to %max.', array('%name' => $name, '%max' => $element['#max'])));
+  }
+
+  if (isset($element['#step']) && strtolower($element['#step']) != 'any') {
+    // Check that the input is an allowed multiple of #step (offset by #min if
+    // #min is set).
+    $offset = isset($element['#min']) ? $element['#min'] : 0.0;
+
+    if (!elements_valid_number_step($value, $element['#step'], $offset)) {
+      form_error($element, t('%name is not a valid number.', array('%name' => $name)));
+    }
+  }
+}
+
+/**
+ * Verifies that a number is a multiple of a given step.
+ *
+ * The implementation assumes it is dealing with IEEE 754 double precision
+ * floating point numbers that are used by PHP on most systems.
+ *
+ * This is based on the number/range verification methods of webkit.
+ *
+ * @param $value
+ *   The value that needs to be checked.
+ * @param $step
+ *   The step scale factor. Must be positive.
+ * @param $offset
+ *   (optional) An offset, to which the difference must be a multiple of the
+ *   given step.
+ *
+ * @return bool
+ *   TRUE if no step mismatch has occured, or FALSE otherwise.
+ *
+ * @see http://opensource.apple.com/source/WebCore/WebCore-1298/html/NumberInputType.cpp
+ */
+function elements_valid_number_step($value, $step, $offset = 0.0) {
+  $double_value = (double) abs($value - $offset);
+
+  // The fractional part of a double has 53 bits. The greatest number that could
+  // be represented with that is 2^53. If the given value is even bigger than
+  // $step * 2^53, then dividing by $step will result in a very small remainder.
+  // Since that remainder can't even be represented with a single precision
+  // float the following computation of the remainder makes no sense and we can
+  // safely ignore it instead.
+  if ($double_value / pow(2.0, 53) > $step) {
+    return TRUE;
+  }
+
+  // Now compute that remainder of a division by $step.
+  $remainder = (double) abs($double_value - $step * round($double_value / $step));
+
+  // $remainder is a double precision floating point number. Remainders that
+  // can't be represented with single precision floats are acceptable. The
+  // fractional part of a float has 24 bits. That means remainders smaller than
+  // $step * 2^-24 are acceptable.
+  $computed_acceptable_error = (double) ($step / pow(2.0, 24));
+
+  return $computed_acceptable_error >= $remainder || $remainder >= ($step - $computed_acceptable_error);
+}
+
+/**
+ * Determines the value of a table form element.
+ *
+ * @param array $element
+ *   The form element whose value is being populated.
+ * @param array|false $input
+ *   The incoming input to populate the form element. If this is FALSE,
+ *   the element's default value should be returned.
+ *
+ * @return array
+ *   The data that will appear in the $form_state['values'] collection
+ *   for this element. Return nothing to use the default.
+ */
+function elements_table_value(array $element, $input = FALSE) {
+  // If #multiple is FALSE, the regular default value of radio buttons is used.
+  if (!empty($element['#tableselect']) && !empty($element['#multiple'])) {
+    // Contrary to #type 'checkboxes', the default value of checkboxes in a
+    // table is built from the array keys (instead of array values) of the
+    // #default_value property.
+    // @todo D8: Remove this inconsistency.
+    if ($input === FALSE) {
+      $element += array('#default_value' => array());
+      return drupal_map_assoc(array_keys(array_filter($element['#default_value'])));
+    }
+    else {
+      return is_array($input) ? drupal_map_assoc($input) : array();
+    }
+  }
+}
+
+/**
+ * Creates checkbox or radio elements to populate a tableselect table.
+ *
+ * @param $element
+ *   An associative array containing the properties and children of the
+ *   tableselect element.
+ *
+ * @return
+ *   The processed element.
+ */
+function elements_table_process($element, &$form_state) {
+  if ($element['#tableselect']) {
+    if ($element['#multiple']) {
+      $value = is_array($element['#value']) ? $element['#value'] : array();
+    }
+    // Advanced selection behaviour makes no sense for radios.
+    else {
+      $element['#js_select'] = FALSE;
+    }
+    // Add a "Select all" checkbox column to the header.
+    // @todo D8: Rename into #select_all?
+    if ($element['#js_select']) {
+      $element['#attached']['js'][] = 'misc/tableselect.js';
+      array_unshift($element['#header'], array('class' => array('select-all')));
+    }
+    // Add an empty header column for radio buttons or when a "Select all"
+    // checkbox is not desired.
+    else {
+      array_unshift($element['#header'], '');
+    }
+
+    if (!isset($element['#default_value']) || $element['#default_value'] === 0) {
+      $element['#default_value'] = array();
+    }
+    // Create a checkbox or radio for each row in a way that the value of the
+    // tableselect element behaves as if it had been of #type checkboxes or
+    // radios.
+    foreach (element_children($element) as $key) {
+      // Do not overwrite manually created children.
+      if (!isset($element[$key]['select'])) {
+        // Determine option label; either an assumed 'title' column, or the
+        // first available column containing a #title or #markup.
+        // @todo Consider to add an optional $element[$key]['#title_key']
+        //   defaulting to 'title'?
+        $title = '';
+        if (!empty($element[$key]['title']['#title'])) {
+          $title = $element[$key]['title']['#title'];
+        }
+        else {
+          foreach (element_children($element[$key]) as $column) {
+            if (isset($element[$key][$column]['#title'])) {
+              $title = $element[$key][$column]['#title'];
+              break;
+            }
+            if (isset($element[$key][$column]['#markup'])) {
+              $title = $element[$key][$column]['#markup'];
+              break;
+            }
+          }
+        }
+        if ($title !== '') {
+          $title = t('Update !title', array('!title' => $title));
+        }
+
+        // Prepend the select column to existing columns.
+        $element[$key] = array('select' => array()) + $element[$key];
+        $element[$key]['select'] += array(
+          '#type' => $element['#multiple'] ? 'checkbox' : 'radio',
+          '#title' => $title,
+          '#title_display' => 'invisible',
+
+          // @todo If rows happen to use numeric indexes instead of string keys,
+          //   this results in a first row with $key === 0, which is always FALSE.
+          '#return_value' => $key,
+          '#attributes' => $element['#attributes'],
+        );
+        $element_parents = array_merge($element['#parents'], array($key));
+        if ($element['#multiple']) {
+          $element[$key]['select']['#default_value'] = isset($value[$key]) ? $key : NULL;
+          $element[$key]['select']['#parents'] = $element_parents;
+        }
+        else {
+          $element[$key]['select']['#default_value'] = ($element['#default_value'] == $key ? $key : NULL);
+          $element[$key]['select']['#parents'] = $element['#parents'];
+          $element[$key]['select']['#id'] = drupal_html_id('edit-' . implode('-', $element_parents));
+        }
+      }
+    }
+  }
+
+  return $element;
+}
+
+/**
+ * #element_validate callback for #type 'table'.
+ *
+ * @param array $element
+ *   An associative array containing the properties and children of the
+ *   table element.
+ * @param array $form_state
+ *   The current state of the form.
+ */
+function elements_table_validate($element, &$form_state) {
+  // Skip this validation if the button to submit the form does not require
+  // selected table row data.
+  if (empty($form_state['triggering_element']['#tableselect'])) {
+    return;
+  }
+  if ($element['#multiple']) {
+    if (!is_array($element['#value']) || !count(array_filter($element['#value']))) {
+      form_error($element, t('No items selected.'));
+    }
+  }
+  elseif (!isset($element['#value']) || $element['#value'] === '') {
+    form_error($element, t('No item selected.'));
+  }
+}
+
+/**
+ * #pre_render callback to transform children of an element into #rows suitable for theme_table().
+ *
+ * This function converts sub-elements of an element of #type 'table' to be
+ * suitable for theme_table():
+ * - The first level of sub-elements are table rows. Only the #attributes
+ *   property is taken into account.
+ * - The second level of sub-elements is converted into columns for the
+ *   corresponding first-level table row.
+ *
+ * Simple example usage:
+ * @code
+ * $form['table'] = array(
+ *   '#type' => 'table',
+ *   '#header' => array(t('Title'), array('data' => t('Operations'), 'colspan' => '1')),
+ *   // Optionally, to add tableDrag support:
+ *   '#tabledrag' => array(
+ *     array('order', 'sibling', 'thing-weight'),
+ *   ),
+ * );
+ * foreach ($things as $row => $thing) {
+ *   $form['table'][$row]['#weight'] = $thing['weight'];
+ *
+ *   $form['table'][$row]['title'] = array(
+ *     '#type' => 'textfield',
+ *     '#default_value' => $thing['title'],
+ *   );
+ *
+ *   // Optionally, to add tableDrag support:
+ *   $form['table'][$row]['#attributes']['class'][] = 'draggable';
+ *   $form['table'][$row]['weight'] = array(
+ *     '#type' => 'textfield',
+ *     '#title' => t('Weight for @title', array('@title' => $thing['title'])),
+ *     '#title_display' => 'invisible',
+ *     '#size' => 4,
+ *     '#default_value' => $thing['weight'],
+ *     '#attributes' => array('class' => array('thing-weight')),
+ *   );
+ *
+ *   // The amount of link columns should be identical to the 'colspan'
+ *   // attribute in #header above.
+ *   $form['table'][$row]['edit'] = array(
+ *     '#type' => 'link',
+ *     '#title' => t('Edit'),
+ *     '#href' => 'thing/' . $row . '/edit',
+ *   );
+ * }
+ * @endcode
+ *
+ * @param array $element
+ *   A structured array containing two sub-levels of elements. Properties used:
+ *   - #tabledrag: The value is a list of arrays that are passed to
+ *     drupal_add_tabledrag(). The HTML ID of the table is prepended to each set
+ *     of arguments.
+ *
+ * @see elements_element_info()
+ * @see theme_table()
+ * @see drupal_process_attached()
+ * @see drupal_add_tabledrag()
+ */
+function elements_pre_render_table(array $element) {
+  foreach (element_children($element) as $first) {
+    $row = array('data' => array());
+    // Apply attributes of first-level elements as table row attributes.
+    if (isset($element[$first]['#attributes'])) {
+      $row += $element[$first]['#attributes'];
+    }
+    // Turn second-level elements into table row columns.
+    // @todo Do not render a cell for children of #type 'value'.
+    // @see http://drupal.org/node/1248940
+    foreach (element_children($element[$first]) as $second) {
+      // Assign the element by reference, so any potential changes to the
+      // original element are taken over.
+      $column = array('data' => &$element[$first][$second]);
+
+      // Apply wrapper attributes of second-level elements as table cell
+      // attributes.
+      //if (isset($element[$first][$second]['#wrapper_attributes'])) {
+      //  $column += $element[$first][$second]['#wrapper_attributes'];
+      //}
+
+      $row['data'][] = $column;
+    }
+    $element['#rows'][] = $row;
+  }
+
+  // Take over $element['#id'] as HTML ID attribute, if not already set.
+  element_set_attributes($element, array('id'));
+
+  // If the custom #tabledrag is set and there is a HTML ID, inject the table's
+  // HTML ID as first callback argument and attach the behavior.
+  if (!empty($element['#tabledrag']) && isset($element['#attributes']['id'])) {
+    foreach ($element['#tabledrag'] as &$args) {
+      array_unshift($args, $element['#attributes']['id']);
+    }
+    $element['#attached']['drupal_add_tabledrag'] = $element['#tabledrag'];
+  }
+
+  return $element;
+}
diff --git a/profiles/commons/modules/contrib/elements/elements.theme.inc b/profiles/commons/modules/contrib/elements/elements.theme.inc
new file mode 100644
index 0000000..fb45aee
--- /dev/null
+++ b/profiles/commons/modules/contrib/elements/elements.theme.inc
@@ -0,0 +1,144 @@
+<?php
+
+/**
+ * @file
+ * The theme include file for the elements module.
+ *
+ * Contains the theme functions for all the elements module elements.
+ */
+
+/**
+ * Returns HTML for an emailfield form element.
+ *
+ * @param $variables
+ *   An associative array containing:
+ *   - element: An associative array containing the properties of the element.
+ *     Properties used: #title, #value, #description, #size, #maxlength,
+ *     #placeholder, #required, #attributes, #autocomplete_path.
+ *
+ * @ingroup themeable
+ */
+function theme_emailfield($variables) {
+  $element = $variables['element'];
+  $element['#attributes']['type'] = 'email';
+  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength', 'placeholder'));
+  _form_set_class($element, array('form-text', 'form-email'));
+
+  $extra = elements_add_autocomplete($element);
+  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';
+
+  return $output . $extra;
+}
+
+/**
+ * Returns HTML for a searchfield form element.
+ *
+ * @param $variables
+ *   An associative array containing:
+ *   - element: An associative array containing the properties of the element.
+ *     Properties used: #title, #value, #description, #size, #maxlength,
+ *     #placeholder, #required, #attributes, #autocomplete_path.
+ *
+ * @ingroup themeable
+ */
+function theme_searchfield($variables) {
+  $element = $variables['element'];
+  $element['#attributes']['type'] = 'search';
+  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength', 'placeholder'));
+  _form_set_class($element, array('form-text', 'form-search'));
+
+  $extra = elements_add_autocomplete($element);
+  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';
+
+  return $output . $extra;
+}
+
+/**
+ * Returns HTML for a telfield form element.
+ *
+ * @param $variables
+ *   An associative array containing:
+ *   - element: An associative array containing the properties of the element.
+ *     Properties used: #title, #value, #description, #size, #maxlength,
+ *     #placeholder, #required, #attributes.
+ *
+ * @ingroup themeable
+ */
+function theme_telfield($variables) {
+  $element = $variables['element'];
+  $element['#attributes']['type'] = 'tel';
+  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength', 'placeholder'));
+  _form_set_class($element, array('form-text', 'form-tel'));
+
+  $extra = elements_add_autocomplete($element);
+  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';
+
+  return $output . $extra;
+}
+
+/**
+ * Returns HTML for an urlfield form element.
+ *
+ * @param $variables
+ *   An associative array containing:
+ *   - element: An associative array containing the properties of the element.
+ *     Properties used: #title, #value, #description, #size, #maxlength,
+ *     #placeholder, #required, #attributes, #autocomplete_path.
+ *
+ * @ingroup themeable
+ */
+function theme_urlfield($variables) {
+  $element = $variables['element'];
+  $element['#attributes']['type'] = 'url';
+  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength', 'placeholder'));
+  _form_set_class($element, array('form-text', 'form-url'));
+
+  $extra = elements_add_autocomplete($element);
+  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';
+
+  return $output . $extra;
+}
+
+/**
+ * Returns HTML for a numberfield form element.
+ *
+ * @param $variables
+ *   An associative array containing:
+ *   - element: An associative array containing the properties of the element.
+ *     Properties used: #title, #value, #description, #min, #max, #placeholder,
+ *     #required, #attributes, #step.
+ *
+ * @ingroup themeable
+ */
+function theme_numberfield($variables) {
+  $element = $variables['element'];
+  $element['#attributes']['type'] = 'number';
+  element_set_attributes($element, array('id', 'name', 'value', 'step', 'min', 'max', 'placeholder'));
+  _form_set_class($element, array('form-text', 'form-number'));
+
+  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';
+
+  return $output;
+}
+
+/**
+ * Returns HTML for a rangefield form element.
+ *
+ * @param $variables
+ *   An associative array containing:
+ *   - element: An associative array containing the properties of the element.
+ *     Properties used: #title, #value, #description, #min, #max, #attributes,
+ *     #step.
+ *
+ * @ingroup themeable
+ */
+function theme_rangefield($variables) {
+  $element = $variables['element'];
+  $element['#attributes']['type'] = 'range';
+  element_set_attributes($element, array('id', 'name', 'value', 'step', 'min', 'max'));
+  _form_set_class($element, array('form-text', 'form-range'));
+
+  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';
+
+  return $output;
+}
diff --git a/profiles/commons/modules/contrib/file_entity/LICENSE.txt b/profiles/commons/modules/contrib/file_entity/LICENSE.txt
new file mode 100644
index 0000000..d159169
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/LICENSE.txt
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/profiles/commons/modules/contrib/file_entity/admin_views_default/file.admin-content-file.inc b/profiles/commons/modules/contrib/file_entity/admin_views_default/file.admin-content-file.inc
new file mode 100644
index 0000000..e0c8a74
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/admin_views_default/file.admin-content-file.inc
@@ -0,0 +1,313 @@
+<?php
+
+/**
+ * @file
+ * Default view for user administration.
+ */
+
+$view = new view();
+$view->name = 'admin_views_file';
+$view->description = 'Find and manage files.';
+$view->tag = 'admin';
+$view->base_table = 'file_managed';
+$view->human_name = 'Administration: Files';
+$view->core = 7;
+$view->api_version = '3.0';
+$view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
+
+/* Display: Master */
+$handler = $view->new_display('default', 'Master', 'default');
+$handler->display->display_options['title'] = 'Files';
+$handler->display->display_options['css_class'] = 'admin-views-view';
+$handler->display->display_options['use_ajax'] = TRUE;
+$handler->display->display_options['use_more_always'] = FALSE;
+$handler->display->display_options['access']['type'] = 'menu';
+$handler->display->display_options['cache']['type'] = 'none';
+$handler->display->display_options['query']['type'] = 'views_query';
+$handler->display->display_options['exposed_form']['type'] = 'basic';
+$handler->display->display_options['exposed_form']['options']['reset_button'] = TRUE;
+$handler->display->display_options['pager']['type'] = 'full';
+$handler->display->display_options['pager']['options']['items_per_page'] = '50';
+$handler->display->display_options['pager']['options']['offset'] = '0';
+$handler->display->display_options['pager']['options']['id'] = '0';
+$handler->display->display_options['pager']['options']['quantity'] = '9';
+$handler->display->display_options['style_plugin'] = 'table';
+$handler->display->display_options['style_options']['columns'] = array(
+  'views_bulk_operations' => 'views_bulk_operations',
+  'filename' => 'filename',
+  'type' => 'type',
+  'name' => 'name',
+  'filesize' => 'filesize',
+  'timestamp' => 'timestamp',
+  'edit' => 'edit',
+  'delete' => 'delete',
+);
+$handler->display->display_options['style_options']['default'] = 'timestamp';
+$handler->display->display_options['style_options']['info'] = array(
+  'views_bulk_operations' => array(
+    'align' => '',
+    'separator' => '',
+    'empty_column' => 0,
+  ),
+  'filename' => array(
+    'sortable' => 1,
+    'default_sort_order' => 'asc',
+    'align' => '',
+    'separator' => '',
+    'empty_column' => 0,
+  ),
+  'type' => array(
+    'sortable' => 1,
+    'default_sort_order' => 'asc',
+    'align' => '',
+    'separator' => '',
+    'empty_column' => 0,
+  ),
+  'name' => array(
+    'sortable' => 1,
+    'default_sort_order' => 'asc',
+    'align' => '',
+    'separator' => '',
+    'empty_column' => 0,
+  ),
+  'filesize' => array(
+    'sortable' => 1,
+    'default_sort_order' => 'asc',
+    'align' => '',
+    'separator' => '',
+    'empty_column' => 0,
+  ),
+  'timestamp' => array(
+    'sortable' => 1,
+    'default_sort_order' => 'desc',
+    'align' => '',
+    'separator' => '',
+    'empty_column' => 0,
+  ),
+  'edit' => array(
+    'sortable' => 0,
+    'default_sort_order' => 'asc',
+    'align' => '',
+    'separator' => '',
+    'empty_column' => 0,
+  ),
+  'delete' => array(
+    'sortable' => 0,
+    'default_sort_order' => 'asc',
+    'align' => '',
+    'separator' => '',
+    'empty_column' => 0,
+  ),
+);
+$handler->display->display_options['style_options']['sticky'] = TRUE;
+$handler->display->display_options['style_options']['empty_table'] = TRUE;
+/* No results behavior: Global: Unfiltered text */
+$handler->display->display_options['empty']['area_text_custom']['id'] = 'area_text_custom';
+$handler->display->display_options['empty']['area_text_custom']['table'] = 'views';
+$handler->display->display_options['empty']['area_text_custom']['field'] = 'area_text_custom';
+$handler->display->display_options['empty']['area_text_custom']['empty'] = TRUE;
+$handler->display->display_options['empty']['area_text_custom']['content'] = 'No files available.';
+/* Relationship: File: User who uploaded */
+$handler->display->display_options['relationships']['uid']['id'] = 'uid';
+$handler->display->display_options['relationships']['uid']['table'] = 'file_managed';
+$handler->display->display_options['relationships']['uid']['field'] = 'uid';
+$handler->display->display_options['relationships']['uid']['label'] = 'user';
+/* Field: Bulk operations: File */
+$handler->display->display_options['fields']['views_bulk_operations']['id'] = 'views_bulk_operations';
+$handler->display->display_options['fields']['views_bulk_operations']['table'] = 'file_managed';
+$handler->display->display_options['fields']['views_bulk_operations']['field'] = 'views_bulk_operations';
+$handler->display->display_options['fields']['views_bulk_operations']['label'] = '';
+$handler->display->display_options['fields']['views_bulk_operations']['element_label_colon'] = FALSE;
+$handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['display_type'] = '0';
+$handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['enable_select_all_pages'] = 1;
+$handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['force_single'] = 0;
+$handler->display->display_options['fields']['views_bulk_operations']['vbo_settings']['entity_load_capacity'] = '10';
+$handler->display->display_options['fields']['views_bulk_operations']['vbo_operations'] = array(
+  'action::views_bulk_operations_archive_action' => array(
+    'selected' => 1,
+    'postpone_processing' => 0,
+    'skip_confirmation' => 0,
+    'override_label' => 1,
+    'label' => 'Archive',
+    'settings' => array(
+      'scheme' => 'public',
+      'temporary' => 1,
+    ),
+  ),
+  'action::views_bulk_operations_delete_item' => array(
+    'selected' => 1,
+    'postpone_processing' => 0,
+    'skip_confirmation' => 0,
+    'override_label' => 1,
+    'label' => 'Delete',
+  ),
+  'action::views_bulk_operations_script_action' => array(
+    'selected' => 0,
+    'postpone_processing' => 0,
+    'skip_confirmation' => 0,
+    'override_label' => 0,
+    'label' => '',
+  ),
+  'action::views_bulk_operations_modify_action' => array(
+    'selected' => 1,
+    'postpone_processing' => 0,
+    'skip_confirmation' => 1,
+    'override_label' => 1,
+    'label' => 'Change value',
+    'settings' => array(
+      'show_all_tokens' => 1,
+      'display_values' => array(
+        '_all_' => '_all_',
+      ),
+    ),
+  ),
+  'action::views_bulk_operations_argument_selector_action' => array(
+    'selected' => 0,
+    'skip_confirmation' => 0,
+    'override_label' => 0,
+    'label' => '',
+    'settings' => array(
+      'url' => '',
+    ),
+  ),
+  'action::system_send_email_action' => array(
+    'selected' => 0,
+    'postpone_processing' => 0,
+    'skip_confirmation' => 0,
+    'override_label' => 0,
+    'label' => '',
+  ),
+  'action::panelizer_set_status_action' => array(
+    'selected' => 0,
+    'postpone_processing' => 0,
+    'skip_confirmation' => 0,
+    'override_label' => 0,
+    'label' => '',
+  ),
+);
+/* Field: File: Name */
+$handler->display->display_options['fields']['filename']['id'] = 'filename';
+$handler->display->display_options['fields']['filename']['table'] = 'file_managed';
+$handler->display->display_options['fields']['filename']['field'] = 'filename';
+/* Field: File: Type */
+$handler->display->display_options['fields']['type']['id'] = 'type';
+$handler->display->display_options['fields']['type']['table'] = 'file_managed';
+$handler->display->display_options['fields']['type']['field'] = 'type';
+$handler->display->display_options['fields']['type']['machine_name'] = 0;
+/* Field: User: Name */
+$handler->display->display_options['fields']['name']['id'] = 'name';
+$handler->display->display_options['fields']['name']['table'] = 'users';
+$handler->display->display_options['fields']['name']['field'] = 'name';
+$handler->display->display_options['fields']['name']['relationship'] = 'uid';
+$handler->display->display_options['fields']['name']['label'] = 'User';
+/* Field: File: Size */
+$handler->display->display_options['fields']['filesize']['id'] = 'filesize';
+$handler->display->display_options['fields']['filesize']['table'] = 'file_managed';
+$handler->display->display_options['fields']['filesize']['field'] = 'filesize';
+/* Field: File: Upload date */
+$handler->display->display_options['fields']['timestamp']['id'] = 'timestamp';
+$handler->display->display_options['fields']['timestamp']['table'] = 'file_managed';
+$handler->display->display_options['fields']['timestamp']['field'] = 'timestamp';
+$handler->display->display_options['fields']['timestamp']['label'] = 'Uploaded';
+$handler->display->display_options['fields']['timestamp']['date_format'] = 'short';
+/* Field: File: Edit link */
+$handler->display->display_options['fields']['edit']['id'] = 'edit';
+$handler->display->display_options['fields']['edit']['table'] = 'file_managed';
+$handler->display->display_options['fields']['edit']['field'] = 'edit';
+$handler->display->display_options['fields']['edit']['label'] = '';
+$handler->display->display_options['fields']['edit']['element_label_colon'] = FALSE;
+/* Field: File: Usage link */
+$handler->display->display_options['fields']['usage']['id'] = 'usage';
+$handler->display->display_options['fields']['usage']['table'] = 'file_managed';
+$handler->display->display_options['fields']['usage']['field'] = 'usage';
+$handler->display->display_options['fields']['usage']['label'] = '';
+$handler->display->display_options['fields']['usage']['element_label_colon'] = FALSE;
+/* Field: File: Delete link */
+$handler->display->display_options['fields']['delete']['id'] = 'delete';
+$handler->display->display_options['fields']['delete']['table'] = 'file_managed';
+$handler->display->display_options['fields']['delete']['field'] = 'delete';
+$handler->display->display_options['fields']['delete']['label'] = '';
+$handler->display->display_options['fields']['delete']['element_label_colon'] = FALSE;
+/* Filter criterion: File: Name */
+$handler->display->display_options['filters']['filename']['id'] = 'filename';
+$handler->display->display_options['filters']['filename']['table'] = 'file_managed';
+$handler->display->display_options['filters']['filename']['field'] = 'filename';
+$handler->display->display_options['filters']['filename']['operator'] = 'contains';
+$handler->display->display_options['filters']['filename']['group'] = 1;
+$handler->display->display_options['filters']['filename']['exposed'] = TRUE;
+$handler->display->display_options['filters']['filename']['expose']['operator_id'] = 'filename_op';
+$handler->display->display_options['filters']['filename']['expose']['label'] = 'Name';
+$handler->display->display_options['filters']['filename']['expose']['operator'] = 'filename_op';
+$handler->display->display_options['filters']['filename']['expose']['identifier'] = 'filename';
+$handler->display->display_options['filters']['filename']['expose']['remember'] = TRUE;
+$handler->display->display_options['filters']['filename']['expose']['remember_roles'] = array(
+  2 => '2',
+  1 => 0,
+  3 => 0,
+);
+/* Filter criterion: File: Type */
+$handler->display->display_options['filters']['type']['id'] = 'type';
+$handler->display->display_options['filters']['type']['table'] = 'file_managed';
+$handler->display->display_options['filters']['type']['field'] = 'type';
+$handler->display->display_options['filters']['type']['group'] = 1;
+$handler->display->display_options['filters']['type']['exposed'] = TRUE;
+$handler->display->display_options['filters']['type']['expose']['operator_id'] = 'type_op';
+$handler->display->display_options['filters']['type']['expose']['label'] = 'Type';
+$handler->display->display_options['filters']['type']['expose']['operator'] = 'type_op';
+$handler->display->display_options['filters']['type']['expose']['identifier'] = 'type';
+$handler->display->display_options['filters']['type']['expose']['remember'] = TRUE;
+$handler->display->display_options['filters']['type']['expose']['remember_roles'] = array(
+  2 => '2',
+  1 => 0,
+  3 => 0,
+);
+/* Filter criterion: User: Name */
+$handler->display->display_options['filters']['uid']['id'] = 'uid';
+$handler->display->display_options['filters']['uid']['table'] = 'users';
+$handler->display->display_options['filters']['uid']['field'] = 'uid';
+$handler->display->display_options['filters']['uid']['relationship'] = 'uid';
+$handler->display->display_options['filters']['uid']['value'] = '';
+$handler->display->display_options['filters']['uid']['group'] = 1;
+$handler->display->display_options['filters']['uid']['exposed'] = TRUE;
+$handler->display->display_options['filters']['uid']['expose']['operator_id'] = 'uid_op';
+$handler->display->display_options['filters']['uid']['expose']['label'] = 'User';
+$handler->display->display_options['filters']['uid']['expose']['operator'] = 'uid_op';
+$handler->display->display_options['filters']['uid']['expose']['identifier'] = 'uid';
+$handler->display->display_options['filters']['uid']['expose']['remember'] = TRUE;
+$handler->display->display_options['filters']['uid']['expose']['remember_roles'] = array(
+  2 => '2',
+  1 => 0,
+  3 => 0,
+);
+
+/* Display: System */
+$handler = $view->new_display('system', 'System', 'system_1');
+$handler->display->display_options['defaults']['hide_admin_links'] = FALSE;
+$handler->display->display_options['hide_admin_links'] = TRUE;
+$handler->display->display_options['defaults']['access'] = FALSE;
+$handler->display->display_options['path'] = 'admin/content/file';
+$translatables['admin_views_file'] = array(
+  t('Master'),
+  t('Files'),
+  t('more'),
+  t('Apply'),
+  t('Reset'),
+  t('Sort by'),
+  t('Asc'),
+  t('Desc'),
+  t('Items per page'),
+  t('- All -'),
+  t('Offset'),
+  t('« first'),
+  t('‹ previous'),
+  t('next ›'),
+  t('last »'),
+  t('No files available.'),
+  t('user'),
+  t('Name'),
+  t('Type'),
+  t('User'),
+  t('Size'),
+  t('Uploaded'),
+  t('System'),
+);
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.admin.inc b/profiles/commons/modules/contrib/file_entity/file_entity.admin.inc
new file mode 100644
index 0000000..43ef475
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.admin.inc
@@ -0,0 +1,1120 @@
+<?php
+/**
+ * @file
+ * File administration and module settings UI.
+ */
+
+require_once dirname(__FILE__) . '/file_entity.pages.inc';
+
+/**
+ * List file administration filters that can be applied.
+ */
+function file_filters() {
+  $visible_steam_wrappers = file_get_stream_wrappers(STREAM_WRAPPERS_VISIBLE);
+  $options = array();
+  foreach ($visible_steam_wrappers as $scheme => $information) {
+    $options[$scheme] = check_plain($information['name']);
+  }
+  $filters['uri'] = array(
+    'title' => t('scheme'),
+    'options' => array(
+      '[any]' => t('any'),
+    ) + $options,
+  );
+  $filters['type'] = array(
+    'title' => t('type'),
+    'options' => array(
+      '[any]' => t('any'),
+    ) + file_entity_type_get_names(),
+  );
+  return $filters;
+}
+
+/**
+ * Apply filters for file administration filters based on session.
+ *
+ * @param object $query
+ *   A SelectQuery to which the filters should be applied.
+ */
+function file_entity_build_filter_query(SelectQueryInterface $query) {
+  // Build query.
+  $filter_data = isset($_SESSION['file_entity_overview_filter']) ? $_SESSION['file_entity_overview_filter'] : array();
+  foreach ($filter_data as $index => $filter) {
+    list($key, $value) = $filter;
+    switch ($key) {
+      case 'uri':
+        $query->condition('fm.' . $key, $value . '%', 'LIKE');
+        break;
+
+      case 'type':
+        $query->condition('fm.' . $key, $value);
+        break;
+
+    }
+  }
+}
+
+/**
+ * Return form for file administration filters.
+ */
+function file_entity_filter_form() {
+  $session = isset($_SESSION['file_entity_overview_filter']) ? $_SESSION['file_entity_overview_filter'] : array();
+  $filters = file_filters();
+
+  $i = 0;
+  $form['filters'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Show only items where'),
+    '#theme' => 'exposed_filters__file_entity',
+  );
+  foreach ($session as $filter) {
+    list($type, $value) = $filter;
+    if ($type == 'term') {
+      // Load term name from DB rather than search and parse options array.
+      $value = module_invoke('taxonomy', 'term_load', $value);
+      $value = $value->name;
+    }
+    else {
+      $value = $filters[$type]['options'][$value];
+    }
+    $t_args = array('%property' => $filters[$type]['title'], '%value' => $value);
+    if ($i++) {
+      $form['filters']['current'][] = array('#markup' => t('and where %property is %value', $t_args));
+    }
+    else {
+      $form['filters']['current'][] = array('#markup' => t('where %property is %value', $t_args));
+    }
+    if (in_array($type, array('type', 'uri'))) {
+      // Remove the option if it is already being filtered on.
+      unset($filters[$type]);
+    }
+  }
+
+  $form['filters']['status'] = array(
+    '#type' => 'container',
+    '#attributes' => array('class' => array('clearfix')),
+    '#prefix' => ($i ? '<div class="additional-filters">' . t('and where') . '</div>' : ''),
+  );
+  $form['filters']['status']['filters'] = array(
+    '#type' => 'container',
+    '#attributes' => array('class' => array('filters')),
+  );
+  foreach ($filters as $key => $filter) {
+    $form['filters']['status']['filters'][$key] = array(
+      '#type' => 'select',
+      '#options' => $filter['options'],
+      '#title' => $filter['title'],
+      '#default_value' => '[any]',
+    );
+  }
+
+  $form['filters']['status']['actions'] = array(
+    '#type' => 'actions',
+    '#attributes' => array('class' => array('container-inline')),
+  );
+  if (count($filters)) {
+    $form['filters']['status']['actions']['submit'] = array(
+      '#type' => 'submit',
+      '#value' => count($session) ? t('Refine') : t('Filter'),
+    );
+  }
+  if (count($session)) {
+    $form['filters']['status']['actions']['undo'] = array('#type' => 'submit', '#value' => t('Undo'));
+    $form['filters']['status']['actions']['reset'] = array('#type' => 'submit', '#value' => t('Reset'));
+  }
+
+  drupal_add_js('misc/form.js');
+
+  return $form;
+}
+
+/**
+ * Process result from file administration filter form.
+ */
+function file_entity_filter_form_submit($form, &$form_state) {
+  $filters = file_filters();
+  switch ($form_state['values']['op']) {
+    case t('Filter'):
+    case t('Refine'):
+      // Apply every filter that has a choice selected other than 'any'.
+      foreach ($filters as $filter => $options) {
+        if (isset($form_state['values'][$filter]) && $form_state['values'][$filter] != '[any]') {
+          // Flatten the options array to accommodate hierarchical/nested
+          // options.
+          $flat_options = form_options_flatten($filters[$filter]['options']);
+          // Only accept valid selections offered on the dropdown, block bad
+          // input.
+          if (isset($flat_options[$form_state['values'][$filter]])) {
+            $_SESSION['file_entity_overview_filter'][] = array($filter, $form_state['values'][$filter]);
+          }
+        }
+      }
+      break;
+
+    case t('Undo'):
+      array_pop($_SESSION['file_entity_overview_filter']);
+      break;
+
+    case t('Reset'):
+      $_SESSION['file_entity_overview_filter'] = array();
+      break;
+
+  }
+}
+
+/**
+ * Make mass update of files.
+ *
+ * Change all files in the $files array to update them with the field values in
+ * $updates.
+ *
+ * IMPORTANT NOTE: This function is intended to work when called
+ * from a form submit handler. Calling it outside of the form submission
+ * process may not work correctly.
+ *
+ * @param array $files
+ *   Array of file fids to update.
+ * @param array $updates
+ *   Array of key/value pairs with file field names and the
+ *   value to update that field to.
+ */
+function file_entity_mass_update($files, $updates) {
+  // We use batch processing to prevent timeout when updating a large number
+  // of files.
+  if (count($files) > 10) {
+    $batch = array(
+      'operations' => array(
+        array(
+          '_file_entity_mass_update_batch_process',
+          array($files, $updates),
+        ),
+      ),
+      'finished' => '_file_entity_mass_update_batch_finished',
+      'title' => t('Processing'),
+      // We use a single multi-pass operation, so the default
+      // 'Remaining x of y operations' message will be confusing here.
+      'progress_message' => '',
+      'error_message' => t('The update has encountered an error.'),
+      // The operations do not live in the .module file, so we need to
+      // tell the batch engine which file to load before calling them.
+      'file' => drupal_get_path('module', 'file_entity') . '/file_entity.admin.inc',
+    );
+    batch_set($batch);
+  }
+  else {
+    foreach ($files as $fid) {
+      _file_entity_mass_update_helper($fid, $updates);
+    }
+    drupal_set_message(t('The update has been performed.'));
+  }
+}
+
+/**
+ * File Mass Update - helper function.
+ */
+function _file_entity_mass_update_helper($fid, $updates) {
+  $file = file_load($fid);
+  // For efficiency manually save the original file before applying any changes.
+  $file->original = clone $file;
+  foreach ($updates as $name => $value) {
+    $file->$name = $value;
+  }
+  file_save($file);
+  return $file;
+}
+
+/**
+ * File Mass Update Batch operation.
+ */
+function _file_entity_mass_update_batch_process($files, $updates, &$context) {
+  if (!isset($context['sandbox']['progress'])) {
+    $context['sandbox']['progress'] = 0;
+    $context['sandbox']['max'] = count($files);
+    $context['sandbox']['files'] = $files;
+  }
+
+  // Process files by groups of 5.
+  $count = min(5, count($context['sandbox']['files']));
+  for ($i = 1; $i <= $count; $i++) {
+    // For each fid, load the file, reset the values, and save it.
+    $fid = array_shift($context['sandbox']['files']);
+    $file = _file_entity_mass_update_helper($fid, $updates);
+
+    // Store result for post-processing in the finished callback.
+    $context['results'][] = l($file->filename, 'file/' . $file->fid);
+
+    // Update our progress information.
+    $context['sandbox']['progress']++;
+  }
+
+  // Inform the batch engine that we are not finished,
+  // and provide an estimation of the completion level we reached.
+  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
+    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
+  }
+}
+
+/**
+ * File Mass Update Batch 'finished' callback.
+ */
+function _file_entity_mass_update_batch_finished($success, $results, $operations) {
+  if ($success) {
+    drupal_set_message(t('The update has been performed.'));
+  }
+  else {
+    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
+    $message = format_plural(count($results), '1 item successfully processed:', '@count items successfully processed:');
+    $message .= theme('item_list', array('items' => $results));
+    drupal_set_message($message);
+  }
+}
+
+/**
+ * Menu callback: file administration.
+ */
+function file_entity_admin_file($form, $form_state) {
+  if (isset($form_state['values']['operation']) && $form_state['values']['operation'] == 'delete') {
+    return file_entity_multiple_delete_confirm($form, $form_state, array_filter($form_state['values']['files']));
+  }
+  $form['filter'] = file_entity_filter_form();
+  $form['#submit'][] = 'file_entity_filter_form_submit';
+  $form['admin'] = file_entity_admin_files();
+
+  return $form;
+}
+
+/**
+ * Form builder: Builds the file administration overview.
+ */
+function file_entity_admin_files() {
+  $admin_access = user_access('administer files');
+
+  // Build the 'Update options' form.
+  $form['options'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Update options'),
+    '#attributes' => array('class' => array('container-inline')),
+    '#access' => $admin_access,
+  );
+  $options = array();
+  foreach (module_invoke_all('file_operations') as $operation => $array) {
+    $options[$operation] = $array['label'];
+  }
+  $form['options']['operation'] = array(
+    '#type' => 'select',
+    '#title' => t('Operation'),
+    '#title_display' => 'invisible',
+    '#options' => $options,
+    '#default_value' => 'approve',
+  );
+  $form['options']['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Update'),
+    '#validate' => array('file_entity_admin_files_validate'),
+    '#submit' => array('file_entity_admin_files_submit'),
+  );
+
+  // Build the sortable table header.
+  $header = array(
+    'title' => array('data' => t('Title'), 'field' => 'fm.filename'),
+    'type' => array('data' => t('Type'), 'field' => 'fm.type'),
+    'size' => array('data' => t('Size'), 'field' => 'fm.filesize'),
+    'author' => t('Author'),
+    'timestamp' => array(
+      'data' => t('Updated'),
+      'field' => 'fm.timestamp',
+      'sort' => 'desc'),
+    'usage' => array('data' => t('Used in'), 'field' => 'total_count'),
+    'operations' => array('data' => t('Operations')),
+  );
+
+  $query = db_select('file_managed', 'fm')->extend('PagerDefault')->extend('TableSort');
+  $query->leftJoin('file_usage', 'fu', 'fm.fid = fu.fid');
+  $query->groupBy('fm.fid');
+  $query->addExpression('SUM(fu.count)', 'total_count');
+  file_entity_build_filter_query($query);
+
+  $result = $query
+    ->fields('fm', array('fid', 'uid'))
+    ->limit(50)
+    ->orderByHeader($header)
+    ->addTag('file_access')
+    ->execute()
+    ->fetchAllAssoc('fid');
+  $files = file_load_multiple(array_keys($result));
+
+  $uids = array();
+  foreach ($files as $file) {
+    $uids[] = $file->uid;
+  }
+  $accounts = !empty($uids) ? user_load_multiple(array_unique($uids)) : array();
+
+  // Prepare the list of files.
+  $destination = drupal_get_destination();
+  $options = array();
+  foreach ($files as $file) {
+    $file_type = file_type_load($file->type);
+    $options[$file->fid] = array(
+      'title' => array(
+        'data' => array(
+          '#type' => 'link',
+          '#title' => $file->filename,
+          '#href' => 'file/' . $file->fid,
+        ),
+      ),
+      'type' => $file_type ? check_plain($file_type->label) : FILE_TYPE_NONE,
+      'size' => format_size($file->filesize),
+      'author' => theme('username', array('account' => $accounts[$file->uid])),
+      'timestamp' => format_date($file->timestamp, 'short'),
+      'usage' => format_plural((int) $result[$file->fid]->total_count, '1 place', '@count places'),
+    );
+
+    // Show a warning for files that do not exist.
+    if (@!is_file($file->uri)) {
+      $options[$file->fid]['#attributes']['class'][] = 'error';
+      if (!file_stream_wrapper_get_instance_by_uri($file->uri)) {
+        $options[$file->fid]['#attributes']['title'] = t('The stream wrapper for @scheme files is missing.', array('@scheme' => file_uri_scheme($file->uri)));
+      }
+      else {
+        $options[$file->fid]['#attributes']['title'] = t('The file does not exist.');
+      }
+    }
+
+    // Build a list of all the accessible operations for the current file.
+    $operations = array();
+    if (file_entity_access('update', $file)) {
+      // Convert the usage count to a link.
+      $options[$file->fid]['usage'] = l($options[$file->fid]['usage'], 'file/' . $file->fid . '/usage');
+      $operations['edit'] = array(
+        'title' => t('Edit'),
+        'href' => 'file/' . $file->fid . '/edit',
+        'query' => $destination,
+      );
+    }
+    if (file_entity_access('delete', $file)) {
+      $operations['delete'] = array(
+        'title' => t('Delete'),
+        'href' => 'file/' . $file->fid . '/delete',
+        'query' => $destination,
+      );
+    }
+    $options[$file->fid]['operations'] = array();
+    if (count($operations) > 1) {
+      // Render an unordered list of operations links.
+      $options[$file->fid]['operations'] = array(
+        'data' => array(
+          '#theme' => 'links__file_entity_operations',
+          '#links' => $operations,
+          '#attributes' => array('class' => array('links', 'inline')),
+        ),
+      );
+    }
+    elseif (!empty($operations)) {
+      // Render the first and only operation as a link.
+      $link = reset($operations);
+      $options[$file->fid]['operations'] = array(
+        'data' => array(
+          '#type' => 'link',
+          '#title' => $link['title'],
+          '#href' => $link['href'],
+          '#options' => array('query' => $link['query']),
+        ),
+      );
+    }
+  }
+
+  // Only use a tableselect when the current user is able to perform any
+  // operations.
+  if ($admin_access) {
+    $form['files'] = array(
+      '#type' => 'tableselect',
+      '#header' => $header,
+      '#options' => $options,
+      '#empty' => t('No files available.'),
+    );
+  }
+  // Otherwise, use a simple table.
+  else {
+    $form['files'] = array(
+      '#theme' => 'table',
+      '#header' => $header,
+      '#rows' => $options,
+      '#empty' => t('No files available.'),
+    );
+  }
+
+  $form['pager'] = array('#markup' => theme('pager'));
+  return $form;
+}
+
+/**
+ * Validate file_entity_admin_files form submissions.
+ *
+ * Check if any files have been selected to perform the chosen
+ * 'Update option' on.
+ */
+function file_entity_admin_files_validate($form, &$form_state) {
+  // Error if there are no items to select.
+  if (!is_array($form_state['values']['files']) || !count(array_filter($form_state['values']['files']))) {
+    form_set_error('', t('No items selected.'));
+  }
+}
+
+/**
+ * Process file_entity_admin_files form submissions.
+ *
+ * Execute the chosen 'Update option' on the selected files.
+ */
+function file_entity_admin_files_submit($form, &$form_state) {
+  $operations = module_invoke_all('file_operations');
+  $operation = $operations[$form_state['values']['operation']];
+  // Filter out unchecked files.
+  $files = array_filter($form_state['values']['files']);
+  if ($function = $operation['callback']) {
+    // Add in callback arguments if present.
+    if (isset($operation['callback arguments'])) {
+      $args = array_merge(array($files), $operation['callback arguments']);
+    }
+    else {
+      $args = array($files);
+    }
+    call_user_func_array($function, $args);
+
+    cache_clear_all();
+  }
+  else {
+    // We need to rebuild the form to go to a second step. For example, to
+    // show the confirmation form for the deletion of files.
+    $form_state['rebuild'] = TRUE;
+  }
+}
+
+/**
+ * File entity delete confirmation.
+ */
+function file_entity_multiple_delete_confirm($form, &$form_state, $files) {
+  $form['files'] = array(
+    '#prefix' => '<ul>',
+    '#suffix' => '</ul>',
+    '#tree' => TRUE,
+  );
+  // array_filter returns only elements with TRUE values.
+  foreach ($files as $fid => $value) {
+    $filename = db_query('SELECT filename FROM {file_managed} WHERE fid = :fid', array(':fid' => $fid))->fetchField();
+    $form['files'][$fid] = array(
+      '#type' => 'hidden',
+      '#value' => $fid,
+      '#prefix' => '<li>',
+      '#suffix' => check_plain($filename) . "</li>\n",
+    );
+  }
+  $form['operation'] = array('#type' => 'hidden', '#value' => 'delete');
+  $form['#submit'][] = 'file_entity_multiple_delete_confirm_submit';
+  $confirm_question = format_plural(count($files),
+                                  'Are you sure you want to delete this item?',
+                                  'Are you sure you want to delete these items?');
+  return confirm_form($form,
+                    $confirm_question,
+                    'admin/content/file', t('This action cannot be undone.'),
+                    t('Delete'), t('Cancel'));
+}
+
+/**
+ * Submit handler for delete confirmation.
+ */
+function file_entity_multiple_delete_confirm_submit($form, &$form_state) {
+  if ($form_state['values']['confirm']) {
+    file_delete_multiple(array_keys($form_state['values']['files']));
+    $count = count($form_state['values']['files']);
+    watchdog('file_entity', 'Deleted @count files.', array('@count' => $count));
+    drupal_set_message(format_plural($count, 'Deleted 1 file.', 'Deleted @count files.'));
+  }
+  $form_state['redirect'] = 'admin/content/file';
+}
+
+/**
+ * Displays the file type admin overview page.
+ */
+function file_entity_list_types_page() {
+  $file_entity_info = entity_get_info('file');
+  $field_ui = module_exists('field_ui');
+  $colspan = $field_ui ? 5 : 3;
+  $header = array(
+    array('data' => t('Name')),
+    array('data' => t('Operations'), 'colspan' => $colspan),
+    array('data' => t('Status')),
+  );
+  $rows = array();
+  $weight = 0;
+  $types = file_type_load_all(TRUE);
+  $count = count($types);
+  foreach ($types as $type) {
+    $weight++;
+    $row = array(
+      array(
+        'data' => theme('file_entity_file_type_overview',
+          array(
+            'label' => $type->label,
+            'description' => $type->description,
+          )
+        ),
+      ),
+    );
+    $path = isset($file_entity_info['bundles'][$type->type]['admin']['real path']) ? $file_entity_info['bundles'][$type->type]['admin']['real path'] : NULL;
+
+    if (empty($type->disabled) && isset($path)) {
+      $row[] = array('data' => l(t('edit file type'), $path . '/edit'));
+      if ($field_ui) {
+        $row[] = array('data' => l(t('manage fields'), $path . '/fields'));
+        $row[] = array('data' => l(t('manage display'), $path . '/display'));
+      }
+      $row[] = array('data' => l(t('manage file display'), $path . '/file-display'));
+    }
+    else {
+      $row += array_fill(1, $colspan - 1, '');
+    }
+
+    $admin_path = 'admin/structure/file-types/manage/' . $type->type;
+    switch ($type->ctools_type) {
+      // Configuration is in code.
+      case 'Default':
+        if (!empty($type->disabled)) {
+          $row[] = l(t('enable'), $admin_path . '/enable');
+        }
+        else {
+          $row[] = l(t('disable'), $admin_path . '/disable');
+        }
+        break;
+
+      // Configuration is in DB.
+      case 'Normal':
+        if (!empty($type->disabled)) {
+          $status = l(t('enable'), $admin_path . '/enable');
+        }
+        else {
+          $status = l(t('disable'), $admin_path . '/disable');
+        }
+        $row[] = $status . ' | ' . l(t('delete'), $admin_path . '/delete');
+        break;
+
+      // Configuration is in code, but overridden in DB.
+      case 'Overridden':
+        if (!empty($type->disabled)) {
+          $row[] = l(t('enable'), $admin_path . '/enable');
+        }
+        else {
+          $row[] = l(t('disable'), $admin_path . '/disable') . ' | ' . l(t('revert'), $admin_path . '/revert');
+        }
+        break;
+    }
+
+    if (!empty($type->disabled)) {
+      $row[] = t('Disabled');
+      $rows[$weight + $count] = array('data' => $row, 'class' => array('ctools-export-ui-disabled'));
+    }
+    else {
+      $row[] = $type->ctools_type;
+      $rows[$weight] = array('data' => $row);
+    }
+  }
+
+  // Move disabled items to the bottom.
+  ksort($rows);
+
+  $build['file_type_table'] = array(
+    '#theme' => 'table',
+    '#header' => $header,
+    '#rows' => $rows,
+    '#empty' => t('No file types available.'),
+    '#attached' => array(
+      'css' => array(drupal_get_path('module', 'ctools') . '/css/export-ui-list.css'),
+    ),
+  );
+
+  return $build;
+}
+
+/**
+ * Form callback; presents file display settings for a given view mode.
+ */
+function file_entity_file_display_form($form, &$form_state, $file_type, $view_mode) {
+  $form['#file_type'] = $file_type->type;
+  $form['#view_mode'] = $view_mode;
+  $form['#tree'] = TRUE;
+  $form['#attached']['js'][] = drupal_get_path('module', 'file_entity') . '/file_entity.admin.js';
+
+  // Retrieve available formatters for this file type and load all configured
+  // filters for existing text formats.
+  $formatters = file_info_formatter_types();
+  foreach ($formatters as $name => $formatter) {
+    if (!empty($formatter['hidden'])) {
+      unset($formatters[$name]);
+    }
+    if (isset($formatter['mime types'])) {
+      if (file_entity_match_mimetypes($formatter['mime types'], $file_type->mimetypes)) {
+        continue;
+      }
+      unset($formatters[$name]);
+    }
+  }
+  $current_displays = file_displays_load($file_type->type, $view_mode, TRUE);
+  foreach ($current_displays as $name => $display) {
+    $current_displays[$name] = (array) $display;
+  }
+
+  // Formatter status.
+  $form['displays']['status'] = array(
+    '#type' => 'item',
+    '#title' => t('Enabled displays'),
+    '#prefix' => '<div id="file-displays-status-wrapper">',
+    '#suffix' => '</div>',
+  );
+  $i = 0;
+  foreach ($formatters as $name => $formatter) {
+    $form['displays']['status'][$name] = array(
+      '#type' => 'checkbox',
+      '#title' => check_plain($formatter['label']),
+      '#default_value' => !empty($current_displays[$name]['status']),
+      '#description' => isset($formatter['description']) ? filter_xss($formatter['description']) : NULL,
+      '#parents' => array('displays', $name, 'status'),
+      '#weight' => (isset($formatter['weight']) ? $formatter['weight'] : 0) + ($i / 1000),
+    );
+    $i++;
+  }
+
+  // Formatter order (tabledrag).
+  $form['displays']['order'] = array(
+    '#type' => 'item',
+    '#title' => t('Display precedence order'),
+    '#theme' => 'file_entity_file_display_order',
+  );
+  foreach ($formatters as $name => $formatter) {
+    $form['displays']['order'][$name]['label'] = array(
+      '#markup' => check_plain($formatter['label']),
+    );
+    $form['displays']['order'][$name]['weight'] = array(
+      '#type' => 'weight',
+      '#title' => t('Weight for @title', array('@title' => $formatter['label'])),
+      '#title_display' => 'invisible',
+      '#delta' => 50,
+      '#default_value' => isset($current_displays[$name]['weight']) ? $current_displays[$name]['weight'] : 0,
+      '#parents' => array('displays', $name, 'weight'),
+    );
+    $form['displays']['order'][$name]['#weight'] = $form['displays']['order'][$name]['weight']['#default_value'];
+  }
+
+  // Formatter settings.
+  $form['display_settings_title'] = array(
+    '#type' => 'item',
+    '#title' => t('Display settings'),
+  );
+  $form['display_settings'] = array(
+    '#type' => 'vertical_tabs',
+  );
+  $i = 0;
+  foreach ($formatters as $name => $formatter) {
+    if (isset($formatter['settings callback']) && ($function = $formatter['settings callback']) && function_exists($function)) {
+      $defaults = !empty($formatter['default settings']) ? $formatter['default settings'] : array();
+      $settings = !empty($current_displays[$name]['settings']) ? $current_displays[$name]['settings'] : array();
+      $settings += $defaults;
+      $settings_form = $function($form, $form_state, $settings, $name, $file_type->type, $view_mode);
+      if (!empty($settings_form)) {
+        $form['displays']['settings'][$name] = array(
+          '#type' => 'fieldset',
+          '#title' => check_plain($formatter['label']),
+          '#parents' => array('displays', $name, 'settings'),
+          '#group' => 'display_settings',
+          '#weight' => (isset($formatter['weight']) ? $formatter['weight'] : 0) + ($i / 1000),
+        ) + $settings_form;
+      }
+    }
+    $i++;
+  }
+
+  $form['actions'] = array('#type' => 'actions');
+  $form['actions']['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save configuration'),
+  );
+
+  return $form;
+}
+
+/**
+ * Process file display settings form submissions.
+ */
+function file_entity_file_display_form_submit($form, &$form_state) {
+  $file_type = $form['#file_type'];
+  $view_mode = $form['#view_mode'];
+  $displays = isset($form_state['values']['displays']) ? $form_state['values']['displays'] : array();
+  $displays_original = file_displays_load($file_type, $view_mode, TRUE);
+  foreach ($displays as $formatter_name => $display) {
+    $display_original = isset($displays_original[$formatter_name]) ? $displays_original[$formatter_name] : file_display_new($file_type, $view_mode, $formatter_name);
+    $display += (array) $display_original;
+    file_display_save((object) $display);
+  }
+  drupal_set_message(t('Your settings have been saved.'));
+}
+
+/**
+ * Returns HTML for the file type overview page.
+ *
+ * Specifically, this returns HTML for a file type label and description.
+ */
+function theme_file_entity_file_type_overview($variables) {
+  return check_plain($variables['label']) . '<div class="description">' . $variables['description'] . '</div>';
+}
+
+/**
+ * Returns HTML for a file display's display order table.
+ */
+function theme_file_entity_file_display_order($variables) {
+  $element = $variables['element'];
+
+  $rows = array();
+  foreach (element_children($element, TRUE) as $name) {
+    $element[$name]['weight']['#attributes']['class'][] = 'file-display-order-weight';
+    $rows[] = array(
+      'data' => array(
+        drupal_render($element[$name]['label']),
+        drupal_render($element[$name]['weight']),
+      ),
+      'class' => array('draggable'),
+    );
+  }
+  $output = drupal_render_children($element);
+  $output .= theme('table', array('rows' => $rows, 'attributes' => array('id' => 'file-displays-order')));
+  drupal_add_tabledrag('file-displays-order', 'order', 'sibling', 'file-display-order-weight', NULL, NULL, TRUE);
+
+  return $output;
+}
+
+/**
+ * Form constructor for the file type settings form.
+ *
+ * @param object $type
+ *   The file type.
+ *
+ * @see file_entity_file_type_form_validate()
+ * @see file_entity_file_type_form_submit()
+ */
+function file_entity_file_type_form($form, &$form_state, $type = NULL) {
+  if (!isset($type->type)) {
+    // This is a new type.
+    $type = (object) array(
+      'type' => '',
+      'label' => '',
+      'description' => '',
+      'mimetypes' => array(),
+    );
+  }
+  $form['#file_type'] = $type;
+
+  $form['label'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Name'),
+    '#description' => t('This is the human readable name of the file type.'),
+    '#required' => TRUE,
+    '#default_value' => $type->label,
+  );
+
+  $form['type'] = array(
+    '#type' => 'machine_name',
+    '#default_value' => $type->type,
+    '#maxlength' => 255,
+    '#disabled' => (bool) $type->type,
+    '#machine_name' => array(
+      'exists' => 'file_type_load',
+      'source' => array('label'),
+    ),
+    '#description' => t('A unique machine-readable name for this file type. It must only contain lowercase letters, numbers, and underscores.'),
+  );
+
+  $form['description'] = array(
+    '#type' => 'textarea',
+    '#title' => t('Description'),
+    '#description' => t('This is the description of the file type.'),
+    '#default_value' => $type->description,
+  );
+
+  $form['mimetypes'] = array(
+    '#type' => 'textarea',
+    '#title' => t('Mimetypes'),
+    '#description' => t('Enter one mimetype per line.'),
+    '#default_value' => implode("\n", $type->mimetypes),
+  );
+
+  include_once DRUPAL_ROOT . '/includes/file.mimetypes.inc';
+  $mimetypes = file_mimetype_mapping();
+
+  $form['mimetype_mapping'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Mimetype List'),
+    '#collapsible' => TRUE,
+    '#collapsed' => TRUE,
+  );
+  $form['mimetype_mapping']['mapping'] = array(
+    '#theme' => 'item_list',
+    '#items' => $mimetypes['mimetypes'],
+  );
+
+  $form['actions'] = array('#type' => 'actions');
+
+  $form['actions']['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+  );
+  if (!empty($type->type)) {
+    $form['actions']['delete'] = array(
+      '#type' => 'submit',
+      '#value' => t('Delete'),
+    );
+  }
+
+  return $form;
+}
+
+/**
+ * Form validation handler for file_entity_file_type_form().
+ *
+ * @see file_entity_file_type_form_submit()
+ */
+function file_entity_file_type_form_validate($form, &$form_state) {
+  include_once DRUPAL_ROOT . '/includes/file.mimetypes.inc';
+  $mimetype_mapping = file_mimetype_mapping();
+
+  $valid_mimetypes = $mimetype_mapping['mimetypes'];
+  $submitted_mimetypes = array_filter(array_map('trim', explode("\n", $form_state['values']['mimetypes'])));
+
+  $invalid_mimetypes = array();
+  foreach ($submitted_mimetypes as $mimetype) {
+    if (!file_entity_match_mimetypes($mimetype, $valid_mimetypes)) {
+      $invalid_mimetypes[] = $mimetype;
+    }
+  }
+
+  foreach ($invalid_mimetypes as $mimetype) {
+    form_set_error('mimetypes', t('The mimetype %mimetype is not a valid mimetype.', array('%mimetype' => $mimetype)));
+  }
+}
+
+/**
+ * Form submission handler for file_entity_file_type_form().
+ *
+ * @see file_entity_file_type_form_validate()
+ */
+function file_entity_file_type_form_submit($form, &$form_state) {
+  if (!empty($form['#file_type']->type)) {
+    $type = file_type_load($form['#file_type']->type);
+  }
+  else {
+    $type = (object) array(
+      'type' => $form_state['values']['type'],
+    );
+  }
+  if ($form_state['values']['op'] == t('Delete')) {
+    $form_state['redirect'] = 'admin/structure/file-types/manage/' . $type->type . '/delete';
+    return;
+  }
+  $type->label = $form_state['values']['label'];
+  $type->description = $form_state['values']['description'];
+  $type->mimetypes = array_filter(array_map('trim', explode("\n", $form_state['values']['mimetypes'])));
+
+  file_type_save($type);
+
+  drupal_set_message(t('The file type %type has been updated.', array('%type' => $type->label)));
+  $form_state['redirect'] = 'admin/structure/file-types';
+}
+
+
+/**
+ * Menu callback; disable a single file type.
+ */
+function file_entity_type_enable_confirm($form, &$form_state, $type) {
+  $form['type'] = array('#type' => 'value', '#value' => $type->type);
+  $form['label'] = array('#type' => 'value', '#value' => $type->label);
+  $message = t('Are you sure you want to enable the file type %type?', array('%type' => $type->label));
+  return confirm_form($form, $message, 'admin/structure/file-types', '', t('Enable'));
+}
+
+
+/**
+ * Process file type disable confirm submissions.
+ */
+function file_entity_type_enable_confirm_submit($form, &$form_state) {
+  file_type_enable($form_state['values']['type']);
+  $t_args = array('%label' => $form_state['values']['label']);
+  drupal_set_message(t('The file type %label has been enabled.', $t_args));
+  watchdog('file_entity', 'Enabled file type %label.', $t_args, WATCHDOG_NOTICE);
+  $form_state['redirect'] = 'admin/structure/file-types';
+  return;
+}
+
+
+/**
+ * Menu callback; disable a single file type.
+ */
+function file_entity_type_disable_confirm($form, &$form_state, $type) {
+  $form['type'] = array('#type' => 'value', '#value' => $type->type);
+  $form['label'] = array('#type' => 'value', '#value' => $type->label);
+
+  $message = t('Are you sure you want to disable the file type %type?', array('%type' => $type->label));
+  $caption = '';
+
+  $num_files = db_query("SELECT COUNT(*) FROM {file_managed} WHERE type = :type", array(':type' => $type->type))->fetchField();
+  if ($num_files) {
+    $caption .= '<p>' . format_plural($num_files, '%type is used by 1 file on
+      your site. If you disable this file type, you will not be able to edit
+      the %type file and it may not display correctly.', '%type is used by
+      @count files on your site. If you remove %type, you will not be able to
+      edit the %type file and it may not display correctly.',
+    array('%type' => $type->label)) . '</p>';
+  }
+
+  return confirm_form($form, $message, 'admin/structure/file-types', $caption, t('Disable'));
+}
+
+
+/**
+ * Process file type disable confirm submissions.
+ */
+function file_entity_type_disable_confirm_submit($form, &$form_state) {
+  file_type_disable($form_state['values']['type']);
+  $t_args = array('%label' => $form_state['values']['label']);
+  drupal_set_message(t('The file type %label has been disabled.', $t_args));
+  watchdog('file_entity', 'Disabled file type %label.', $t_args, WATCHDOG_NOTICE);
+  $form_state['redirect'] = 'admin/structure/file-types';
+  return;
+}
+
+
+/**
+ * Menu callback; revert a single file type.
+ */
+function file_entity_type_revert_confirm($form, &$form_state, $type) {
+  $form['type'] = array('#type' => 'value', '#value' => $type->type);
+  $form['label'] = array('#type' => 'value', '#value' => $type->label);
+  $message = t('Are you sure you want to revert the file type %type?', array('%type' => $type->label));
+  return confirm_form($form, $message, 'admin/structure/file-types', '', t('Revert'));
+}
+
+
+/**
+ * Process file type delete confirm submissions.
+ */
+function file_entity_type_revert_confirm_submit($form, &$form_state) {
+  // @NOTE deleting the file_type from the DB actually reverts it to code.
+  file_type_delete($form_state['values']['type']);
+  $t_args = array('%label' => $form_state['values']['label']);
+  drupal_set_message(t('The file type %label has been reverted.', $t_args));
+  watchdog('file_entity', 'Reverted file type %label.', $t_args, WATCHDOG_NOTICE);
+  $form_state['redirect'] = 'admin/structure/file-types';
+  return;
+}
+
+
+/**
+ * Menu callback; delete a single file type.
+ */
+function file_entity_type_delete_confirm($form, &$form_state, $type) {
+  $form['type'] = array('#type' => 'value', '#value' => $type->type);
+  $form['label'] = array('#type' => 'value', '#value' => $type->label);
+
+  $message = t('Are you sure you want to delete the file type %type?', array('%type' => $type->label));
+  $caption = '';
+
+  $num_files = db_query("SELECT COUNT(*) FROM {file_managed} WHERE type = :type", array(':type' => $type->type))->fetchField();
+  if ($num_files) {
+    $caption .= '<p>' . format_plural($num_files, '%type is used by 1 file on your site. If you remove this file type, you will not be able to edit the %type file and it may not display correctly.', '%type is used by @count pieces of file on your site. If you remove %type, you will not be able to edit the %type file and it may not display correctly.', array('%type' => $type->label)) . '</p>';
+  }
+
+  $caption .= '<p>' . t('This action cannot be undone.') . '</p>';
+
+  return confirm_form($form, $message, 'admin/structure/file-types', $caption, t('Delete'));
+}
+
+/**
+ * Process file type delete confirm submissions.
+ */
+function file_entity_type_delete_confirm_submit($form, &$form_state) {
+  file_type_delete($form_state['values']['type']);
+
+  $t_args = array('%label' => $form_state['values']['label']);
+  drupal_set_message(t('The file type %label has been deleted.', $t_args));
+  watchdog('file_entity', 'Deleted file type %label.', $t_args, WATCHDOG_NOTICE);
+
+  $form_state['redirect'] = 'admin/structure/file-types';
+  return;
+}
+
+/**
+ * Form callback for file_entity settings.
+ */
+function file_entity_settings_form($form, &$form_state) {
+  $form['file_entity_max_filesize'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Maximum upload size'),
+    '#default_value' => variable_get('file_entity_max_filesize', ''),
+    '#description' => t('Enter a value like "512" (bytes), "80 KB" (kilobytes) or "50 MB" (megabytes) in order to restrict the allowed file size. If left empty the file sizes will be limited only by PHP\'s maximum post and file upload sizes (current max limit <strong>%limit</strong>).', array('%limit' => format_size(file_upload_max_size()))),
+    '#size' => 10,
+    '#element_validate' => array('_file_generic_settings_max_filesize'),
+  );
+
+  $form['file_entity_default_allowed_extensions'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Default allowed file extensions'),
+    '#default_value' => variable_get('file_entity_default_allowed_extensions', 'jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm'),
+    '#description' => t('Separate extensions with a space or comma and do not include the leading dot.'),
+  );
+
+  $form['file_entity_alt'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Alt attribute'),
+    '#description' => t('The text to use as value for the <em>img</em> tag <em>alt</em> attribute.'),
+    '#default_value' => variable_get('file_entity_alt', '[file:field_file_image_alt_text]'),
+  );
+  $form['file_entity_title'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Title attribute'),
+    '#description' => t('The text to use as value for the <em>img</em> tag <em>title</em> attribute.'),
+    '#default_value' => variable_get('file_entity_title', '[file:field_file_image_title_text]'),
+  );
+
+  // Provide default token values.
+  if (module_exists('token')) {
+    $form['token_help'] = array(
+      '#theme' => 'token_tree',
+      '#token_types' => array('file'),
+      '#dialog' => TRUE,
+    );
+    $form['file_entity_alt']['#description'] .= t('This field supports tokens.');
+    $form['file_entity_title']['#description'] .= t('This field supports tokens.');
+  }
+  $form['file_upload_wizard'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('File upload wizard'),
+    '#collapsible' => TRUE,
+    '#collapsed' => FALSE,
+    '#description' => t('Configure the steps available when uploading a new file.'),
+  );
+  $form['file_upload_wizard']['file_entity_file_upload_wizard_skip_file_type'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Skip filetype selection.'),
+    '#default_value' => variable_get('file_entity_file_upload_wizard_skip_file_type', FALSE),
+    '#description' => t('The file type selection step is only available if the uploaded file falls into two or more file types. If this step is skipped, files with no available file type or two or more file types will not be assigned a file type.'),
+  );
+  $form['file_upload_wizard']['file_entity_file_upload_wizard_skip_scheme'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Skip scheme selection.'),
+    '#default_value' => variable_get('file_entity_file_upload_wizard_skip_scheme', FALSE),
+    '#description' => t('The scheme selection step is only available if two or more file destinations, such as public local files served by the webserver and private local files served by Drupal, are available. If this step is skipped, files will automatically be saved using the default download method.'),
+  );
+  $form['file_upload_wizard']['file_entity_file_upload_wizard_skip_fields'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Skip available fields.'),
+    '#default_value' => variable_get('file_entity_file_upload_wizard_skip_fields', FALSE),
+    '#description' => t('The field selection step is only available if the file type the file belongs to has any available fields. If this step is skipped, any fields on the file will be left blank.'),
+  );
+
+  return system_settings_form($form);
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.admin.js b/profiles/commons/modules/contrib/file_entity/file_entity.admin.js
new file mode 100644
index 0000000..a8f83d9
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.admin.js
@@ -0,0 +1,44 @@
+(function ($) {
+
+Drupal.behaviors.fileDisplayStatus = {
+  attach: function (context, settings) {
+    $('#file-displays-status-wrapper input.form-checkbox', context).once('display-status', function () {
+      var $checkbox = $(this);
+      // Retrieve the tabledrag row belonging to this display.
+      var $row = $('#' + $checkbox.attr('id').replace(/-status$/, '-weight'), context).closest('tr');
+      // Retrieve the vertical tab belonging to this display.
+      var tab = $('#' + $checkbox.attr('id').replace(/-status$/, '-settings'), context).data('verticalTab');
+
+      // Bind click handler to this checkbox to conditionally show and hide the
+      // display's tableDrag row and vertical tab pane.
+      $checkbox.bind('click.displayStatusUpdate', function () {
+        if ($checkbox.is(':checked')) {
+          $row.show();
+          if (tab) {
+            tab.tabShow().updateSummary();
+          }
+        }
+        else {
+          $row.hide();
+          if (tab) {
+            tab.tabHide().updateSummary();
+          }
+        }
+        // Restripe table after toggling visibility of table row.
+        Drupal.tableDrag['file-displays-order'].restripeTable();
+      });
+
+      // Attach summary for configurable displays (only for screen-readers).
+      if (tab) {
+        tab.fieldset.drupalSetSummary(function (tabContext) {
+          return $checkbox.is(':checked') ? Drupal.t('Enabled') : Drupal.t('Disabled');
+        });
+      }
+
+      // Trigger our bound click handler to update elements to initial state.
+      $checkbox.triggerHandler('click.displayStatusUpdate');
+    });
+  }
+};
+
+})(jQuery);
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.api.php b/profiles/commons/modules/contrib/file_entity/file_entity.api.php
new file mode 100644
index 0000000..9827446
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.api.php
@@ -0,0 +1,396 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by the File Entity module.
+ */
+
+/**
+ * Declare that your module provides default file types.
+ *
+ * Your module may already implement this hook for other CTools plugin types.
+ * If so, copy the body of this function into the existing hook.
+ */
+function hook_ctools_plugin_api($owner, $api) {
+  if ($owner == 'file_entity' && $api == 'file_type') {
+    return array('version' => 1);
+  }
+}
+
+/**
+ * Define default file types.
+ *
+ * File types are implemented as CTools exportables, so modules can alter the
+ * defaults via hook_file_default_types_alter(), and the administrator can
+ * save overridden and custom types to the {file_type} database table.
+ *
+ * @return array
+ *   An array whose keys are file type names and whose values are objects
+ *   representing the file type, with the following key/value pairs:
+ *   - api_version: The version of this data.
+ *   - type: The file type name.
+ *   - label: The human-readable name of the file type.
+ *   - description: The description of this file type.
+ *   - mimetypes: An array of mimetypes that this file type will map to.
+ */
+function hook_file_default_types() {
+  return array(
+    'image' => (object) array(
+      'api_version' => 1,
+      'type' => 'image',
+      'label' => t('Image'),
+      'description' => t("An <em>Image</em> is a two-dimensional picture that has a similar appearance to some subject, usually a physical object or a person."),
+      'mimetypes' => array(
+        'image/*',
+      ),
+    ),
+  );
+}
+
+/**
+ * Alter default file types.
+ *
+ * @see hook_file_default_types()
+ */
+function hook_file_default_types_alter(&$types) {
+  $types['image']->mimetypes[] = 'image/svg+xml';
+}
+
+/**
+ * Define file formatters.
+ *
+ * @return array
+ *   An array whose keys are file formatter names and whose values are arrays
+ *   describing the formatter.
+ *
+ * @todo Document key/value pairs that comprise a formatter.
+ *
+ * @see hook_file_formatter_info_alter()
+ */
+function hook_file_formatter_info() {
+  // @todo Add example.
+}
+
+/**
+ * Perform alterations on file formatters.
+ *
+ * @param array $info
+ *   Array of information on file formatters exposed by
+ *   hook_file_formatter_info() implementations.
+ */
+function hook_file_formatter_info_alter(&$info) {
+  // @todo Add example.
+}
+
+/**
+ * @todo Add documentation.
+ *
+ * Note: This is not really a hook. The function name is manually specified via
+ * 'view callback' in hook_file_formatter_info(), with this recommended callback
+ * name pattern.
+ */
+function hook_file_formatter_FORMATTER_view($file, $display, $langcode) {
+}
+
+/**
+ * @todo Add documentation.
+ *
+ * Note: This is not really a hook. The function name is manually specified via
+ * 'settings callback' in hook_file_formatter_info(), with this recommended
+ * callback name pattern.
+ */
+function hook_file_formatter_FORMATTER_settings($form, &$form_state, $settings) {
+}
+
+/**
+ * @todo Add documentation.
+ */
+function hook_file_displays_alter($displays, $file, $view_mode) {
+}
+
+/**
+ * @todo Add documentation.
+ */
+function hook_file_view($file, $view_mode, $langcode) {
+}
+
+/**
+ * @todo Add documentation.
+ */
+function hook_file_view_alter($build, $type) {
+}
+
+/**
+ * Add mass file operations.
+ *
+ * This hook enables modules to inject custom operations into the mass
+ * operations dropdown found at admin/content/file, by associating a callback
+ * function with the operation, which is called when the form is submitted. The
+ * callback function receives one initial argument, which is an array of the
+ * checked files.
+ *
+ * @return array
+ *   An array of operations. Each operation is an associative array that may
+ *   contain the following key-value pairs:
+ *   - 'label': Required. The label for the operation, displayed in the dropdown
+ *     menu.
+ *   - 'callback': Required. The function to call for the operation.
+ *   - 'callback arguments': Optional. An array of additional arguments to pass
+ *     to the callback function.
+ */
+function hook_file_operations() {
+  $operations = array(
+    'delete' => array(
+      'label' => t('Delete selected files'),
+      'callback' => NULL,
+    ),
+  );
+  return $operations;
+}
+
+/**
+ * Control access to a file.
+ *
+ * Modules may implement this hook if they want to have a say in whether or not
+ * a given user has access to perform a given operation on a file.
+ *
+ * The administrative account (user ID #1) always passes any access check,
+ * so this hook is not called in that case. Users with the "bypass file access"
+ * permission may always view and edit files through the administrative
+ * interface.
+ *
+ * Note that not all modules will want to influence access on all
+ * file types. If your module does not want to actively grant or
+ * block access, return FILE_ENTITY_ACCESS_IGNORE or simply return nothing.
+ * Blindly returning FALSE will break other file access modules.
+ *
+ * @param string $op
+ *   The operation to be performed. Possible values:
+ *   - "create"
+ *   - "delete"
+ *   - "update"
+ *   - "view"
+ *   - "download"
+ * @param object $file
+ *   The file on which the operation is to be performed, or, if it does
+ *   not yet exist, the type of file to be created.
+ * @param object $account
+ *   A user object representing the user for whom the operation is to be
+ *   performed.
+ *
+ * @return string|NULL
+ *   FILE_ENTITY_ACCESS_ALLOW if the operation is to be allowed;
+ *   FILE_ENTITY_ACCESS_DENY if the operation is to be denied;
+ *   FILE_ENTITY_ACCESS_IGNORE to not affect this operation at all.
+ *
+ * @ingroup file_entity_access
+ */
+function hook_file_entity_access($op, $file, $account) {
+  $type = is_string($file) ? $file : $file->type;
+
+  if ($op !== 'create' && (REQUEST_TIME - $file->timestamp) < 3600) {
+    // If the file was uploaded in the last hour, deny access to it.
+    return FILE_ENTITY_ACCESS_DENY;
+  }
+
+  // Returning nothing from this function would have the same effect.
+  return FILE_ENTITY_ACCESS_IGNORE;
+}
+
+/**
+ * Control access to listings of files.
+ *
+ * @param object $query
+ *   A query object describing the composite parts of a SQL query related to
+ *   listing files.
+ *
+ * @see hook_query_TAG_alter()
+ * @ingroup file_entity_access
+ */
+function hook_query_file_entity_access_alter(QueryAlterableInterface $query) {
+  // Only show files that have been uploaded more than an hour ago.
+  $query->condition('timestamp', REQUEST_TIME - 3600, '<=');
+}
+
+/**
+ * Act on a file being displayed as a search result.
+ *
+ * This hook is invoked from file_entity_search_execute(), after file_load()
+ * and file_view() have been called.
+ *
+ * @param object $file
+ *   The file being displayed in a search result.
+ *
+ * @return array
+ *   Extra information to be displayed with search result. This information
+ *   should be presented as an associative array. It will be concatenated
+ *   with the file information (filename) in the default search result theming.
+ *
+ * @see template_preprocess_search_result()
+ * @see search-result.tpl.php
+ *
+ * @ingroup file_entity_api_hooks
+ */
+function hook_file_entity_search_result($file) {
+  $file_usage_count = db_query('SELECT count FROM {file_usage} WHERE fid = :fid', array('fid' => $file->fid))->fetchField();
+  return array(
+    'file_usage_count' => format_plural($file_usage_count, '1 use', '@count uses'),
+  );
+}
+
+/**
+ * Act on a file being indexed for searching.
+ *
+ * This hook is invoked during search indexing, after file_load(), and after
+ * the result of file_view() is added as $file->rendered to the file object.
+ *
+ * @param object $file
+ *   The file being indexed.
+ *
+ * @return string
+ *   Additional file information to be indexed.
+ *
+ * @ingroup file_entity_api_hooks
+ */
+function hook_file_update_index($file) {
+  $text = '';
+  $uses = db_query('SELECT module, count FROM {file_usage} WHERE fid = :fid', array(':fid' => $file->fid));
+  foreach ($uses as $use) {
+    $text .= '<h2>' . check_plain($use->module) . '</h2>' . check_plain($use->count);
+  }
+  return $text;
+}
+
+/**
+ * Provide additional methods of scoring for core search results for files.
+ *
+ * A file's search score is used to rank it among other files matched by the
+ * search, with the highest-ranked files appearing first in the search listing.
+ *
+ * For example, a module allowing users to vote on files could expose an
+ * option to allow search results' rankings to be influenced by the average
+ * voting score of a file.
+ *
+ * All scoring mechanisms are provided as options to site administrators, and
+ * may be tweaked based on individual sites or disabled altogether if they do
+ * not make sense. Individual scoring mechanisms, if enabled, are assigned a
+ * weight from 1 to 10. The weight represents the factor of magnification of
+ * the ranking mechanism, with higher-weighted ranking mechanisms having more
+ * influence. In order for the weight system to work, each scoring mechanism
+ * must return a value between 0 and 1 for every file. That value is then
+ * multiplied by the administrator-assigned weight for the ranking mechanism,
+ * and then the weighted scores from all ranking mechanisms are added, which
+ * brings about the same result as a weighted average.
+ *
+ * @return array
+ *   An associative array of ranking data. The keys should be strings,
+ *   corresponding to the internal name of the ranking mechanism, such as
+ *   'recent', or 'usage'. The values should be arrays themselves, with the
+ *   following keys available:
+ *   - "title": the human readable name of the ranking mechanism. Required.
+ *   - "join": part of a query string to join to any additional necessary
+ *     table. This is not necessary if the table required is already joined to
+ *     by the base query, such as for the {file_managed} table. Other tables
+ *     should use the full table name as an alias to avoid naming collisions.
+ *     Optional.
+ *   - "score": part of a query string to calculate the score for the ranking
+ *     mechanism based on values in the database. This does not need to be
+ *     wrapped in parentheses, as it will be done automatically; it also does
+ *     not need to take the weighted system into account, as it will be done
+ *     automatically. It does, however, need to calculate a decimal between
+ *     0 and 1; be careful not to cast the entire score to an integer by
+ *     inadvertently introducing a variable argument. Required.
+ *   - "arguments": if any arguments are required for the score, they can be
+ *     specified in an array here.
+ *
+ * @ingroup file_entity_api_hooks
+ */
+function hook_file_ranking() {
+  // If voting is disabled, we can avoid returning the array, no hard feelings.
+  if (variable_get('vote_file_enabled', TRUE)) {
+    return array(
+      'vote_average' => array(
+        'title' => t('Average vote'),
+        // Note that we use i.sid, the search index's search item id, rather
+        // than fm.fid.
+        'join' => 'LEFT JOIN {vote_file_data} vote_file_data ON vote_file_data.fid = i.sid',
+        // The highest possible score should be 1,
+        // and the lowest possible score, always 0, should be 0.
+        'score' => 'vote_file_data.average / CAST(%f AS DECIMAL)',
+        // Pass in the highest possible voting score as a decimal argument.
+        'arguments' => array(variable_get('vote_score_max', 5)),
+      ),
+    );
+  }
+}
+
+/**
+ * Alter file download headers.
+ *
+ * @param array $headers
+ *   Array of download headers.
+ * @param object $file
+ *   File object.
+ */
+function hook_file_download_headers_alter(array &$headers, $file) {
+  // Instead of being powered by PHP, tell the world this resource was powered
+  // by your custom module!
+  $headers['X-Powered-By'] = 'My Module';
+}
+
+/**
+ * Decides which file type (bundle) should be assigned to a file entity.
+ *
+ * @param object $file
+ *   File object.
+ *
+ * @return array
+ *   Array of file type machine names that can be assigned to a given file type.
+ *   If there are more proposed file types the one, that was returned the first,
+ *   wil be chosen. This can be, however, changed in alter hook.
+ *
+ * @see hook_file_type_alter()
+ */
+function hook_file_type($file) {
+  // Assign all files uploaded by anonymous users to a special file type.
+  if (user_is_anonymous()) {
+    return array('untrusted_files');
+  }
+}
+
+/**
+ * Alters list of file types that can be assigned to a file.
+ *
+ * @param array $types
+ *   List of proposed types.
+ * @param object $file
+ *   File object.
+ */
+function hook_file_type_alter(&$types, $file) {
+  // Choose a specific, non-first, file type.
+  $types = array($types[4]);
+}
+
+/**
+ * Provides metadata information.
+ *
+ * @todo Add documentation.
+ *
+ * @return array
+ *   An array of metadata information.
+ */
+function hook_file_metadata_info() {
+
+}
+
+/**
+ * Alters metadata information.
+ *
+ * @todo Add documentation.
+ *
+ * @return array
+ *   an array of metadata information.
+ */
+function hook_file_metadata_info_alter() {
+
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.field.inc b/profiles/commons/modules/contrib/file_entity/file_entity.field.inc
new file mode 100644
index 0000000..97f3c28
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.field.inc
@@ -0,0 +1,397 @@
+<?php
+
+/**
+ * @file
+ * Field API integration for the file_entity module.
+ */
+
+/**
+ * Implements hook_field_formatter_info().
+ */
+function file_entity_field_formatter_info() {
+  $info['file_rendered'] = array(
+    'label' => t('Rendered file'),
+    'description' => t('Display the file in a specific view mode'),
+    'field types' => array('file', 'image'),
+    'settings' => array(
+      'file_view_mode' => 'default',
+    ),
+    'file formatter' => array(
+      'hidden' => TRUE,
+    ),
+  );
+  $info['file_download_link'] = array(
+    'label' => t('Download link'),
+    'description' => t('Displays a link that will force the browser to download the file.'),
+    'field types' => array('file', 'image'),
+    'settings' => array(
+      'text' => t('Download [file:name]'),
+    ),
+  );
+  $info['file_audio'] = array(
+    'label' => t('Audio'),
+    'description' => t('Render the file using an HTML5 audio tag.'),
+    'field types' => array('file'),
+    'settings' => array(
+      'controls' => TRUE,
+      'autoplay' => FALSE,
+      'loop' => FALSE,
+      'multiple_file_behavior' => 'tags',
+    ),
+    'file formatter' => array(
+      'mime types' => array('audio/*'),
+    ),
+  );
+  $info['file_video'] = array(
+    'label' => t('Video'),
+    'description' => t('Render the file using an HTML5 video tag.'),
+    'field types' => array('file'),
+    'settings' => array(
+      'controls' => TRUE,
+      'autoplay' => FALSE,
+      'loop' => FALSE,
+      'muted' => FALSE,
+      'width' => NULL,
+      'height' => NULL,
+      'multiple_file_behavior' => 'tags',
+    ),
+    'file formatter' => array(
+      'mime types' => array('video/*'),
+    ),
+  );
+  return $info;
+}
+
+/**
+ * Implements hook_field_formatter_info_alter().
+ */
+function file_entity_field_formatter_info_alter(&$info) {
+  // Add descriptions to core formatters.
+  $descriptions = array(
+    'file_default' => t('Create a simple link to the file. The link is prefixed by a file type icon and the name of the file is used as the link text'),
+    'file_table' => t('Build a two-column table where the first column contains a generic link to the file and the second column displays the size of the file.'),
+    'file_url_plain' => t('Display a plain text URL to the file.'),
+    'image' => t('Format the file as an image. The image can be displayed using an image style and can optionally be linked to the image file itself or its parent content.'),
+  );
+  foreach ($descriptions as $key => $description) {
+    if (isset($info[$key]) && empty($info[$key]['description'])) {
+      $info[$key]['description'] = $description;
+    }
+  }
+
+  // Formatters that can be used for images but not files, should have a
+  // default mimetype restriction added to the image/* mime type for use with
+  // file formatters.
+  foreach ($info as &$formatter) {
+    if (!isset($formatter['file formatter']) && in_array('image', $formatter['field types']) && !in_array('file', $formatter['field types'])) {
+      $formatter['file formatter']['mime types'] = array('image/*');
+    }
+  }
+}
+
+/**
+ * Implements hook_field_formatter_settings_form().
+ */
+function file_entity_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
+  $display = $instance['display'][$view_mode];
+  $settings = $display['settings'];
+  $element = array();
+
+  if ($display['type'] == 'file_rendered') {
+    $element['file_view_mode'] = array(
+      '#title'   => t('View mode'),
+      '#type'    => 'select',
+      '#options' => file_entity_view_mode_labels(),
+      '#default_value' => $settings['file_view_mode'],
+      // Never empty, so no #empty_option
+    );
+  }
+  elseif ($display['type'] == 'file_download_link') {
+    $element['text'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Link text'),
+      '#description' => t('This field support tokens.'),
+      '#default_value' => $settings['text'],
+      '#required' => TRUE,
+    );
+  }
+  elseif ($display['type'] == 'file_audio') {
+    $element['controls'] = array(
+      '#title' => t('Show audio controls'),
+      '#type' => 'checkbox',
+      '#default_value' => $settings['controls'],
+    );
+    $element['autoplay'] = array(
+      '#title' => t('Autoplay'),
+      '#type' => 'checkbox',
+      '#default_value' => $settings['autoplay'],
+    );
+    $element['loop'] = array(
+      '#title' => t('Loop'),
+      '#type' => 'checkbox',
+      '#default_value' => $settings['loop'],
+    );
+    $element['multiple_file_behavior'] = array(
+      '#title' => t('Display of multiple files'),
+      '#type' => 'radios',
+      '#options' => array(
+        'tags' => t('Use multiple @tag tags, each with a single source', array('@tag' => '<audio>')),
+        'sources' => t('Use multiple sources within a single @tag tag', array('@tag' => '<audio>')),
+      ),
+      '#default_value' => $settings['multiple_file_behavior'],
+      // Hide this setting in the manage file display configuration.
+      '#access' => !empty($field),
+    );
+
+  }
+  elseif ($display['type'] == 'file_video') {
+    $element['controls'] = array(
+      '#title' => t('Show video controls'),
+      '#type' => 'checkbox',
+      '#default_value' => $settings['controls'],
+    );
+    $element['autoplay'] = array(
+      '#title' => t('Autoplay'),
+      '#type' => 'checkbox',
+      '#default_value' => $settings['autoplay'],
+    );
+    $element['loop'] = array(
+      '#title' => t('Loop'),
+      '#type' => 'checkbox',
+      '#default_value' => $settings['loop'],
+    );
+    $element['width'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Width'),
+      '#default_value' => $settings['width'],
+      '#size' => 5,
+      '#maxlength' => 5,
+      '#field_suffix' => t('pixels'),
+    );
+    $element['height'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Height'),
+      '#default_value' => $settings['height'],
+      '#size' => 5,
+      '#maxlength' => 5,
+      '#field_suffix' => t('pixels'),
+    );
+    $element['multiple_file_behavior'] = array(
+      '#title' => t('Display of multiple files'),
+      '#type' => 'radios',
+      '#options' => array(
+        'tags' => t('Use multiple @tag tags, each with a single source', array('@tag' => '<video>')),
+        'sources' => t('Use multiple sources within a single @tag tag', array('@tag' => '<video>')),
+      ),
+      '#default_value' => $settings['multiple_file_behavior'],
+      // Hide this setting in the manage file display configuration.
+      '#access' => !empty($field),
+    );
+  }
+
+  return $element;
+}
+
+/**
+ * Implements hook_field_formatter_settings_summary().
+ */
+function file_entity_field_formatter_settings_summary($field, $instance, $view_mode) {
+  $display = $instance['display'][$view_mode];
+  $settings = $display['settings'];
+  $summary = array();
+
+  if ($display['type'] === 'file_rendered') {
+    $view_mode_label = file_entity_view_mode_label($settings['file_view_mode'], t('Unknown'));
+    $summary[] = t('View mode: %mode', array('%mode' => $view_mode_label));
+  }
+  elseif ($display['type'] == 'file_download_link') {
+    $summary[] = t('Link text: %text', array('%text' => $settings['text']));
+  }
+  elseif ($display['type'] === 'file_audio') {
+    if (isset($settings['controls'])) {
+      $summary[] = t('Controls: %controls', array('%controls' => $settings['controls'] ? 'visible' : 'hidden'));
+    }
+    if (isset($settings['autoplay'])) {
+      $summary[] = t('Autoplay: %autoplay', array('%autoplay' => $settings['autoplay'] ? t('yes') : t('no')));
+    }
+    if (isset($settings['loop'])) {
+      $summary[] = t('Loop: %loop', array('%loop' => $settings['loop'] ? t('yes') : t('no')));
+    }
+    if (isset($settings['multiple_file_behavior'])) {
+      $summary[] = t('Multiple files: %multiple', array('%multiple' => $settings['multiple_file_behavior']));
+    }
+
+  }
+  elseif ($display['type'] === 'file_video') {
+    $summary_items = array();
+    if (isset($settings['controls'])) {
+      $summary[] = t('Controls: %controls', array('%controls' => $settings['controls'] ? 'visible' : 'hidden'));
+    }
+    if (isset($settings['autoplay'])) {
+      $summary[] = t('Autoplay: %autoplay', array('%autoplay' => $settings['autoplay'] ? t('yes') : t('no')));
+    }
+    if (isset($settings['loop'])) {
+      $summary[] = t('Loop: %loop', array('%loop' => $settings['loop'] ? t('yes') : t('no')));
+    }
+    if (isset($settings['muted'])) {
+      $summary[] = t('Muted: %muted', array('%muted' => $settings['muted'] ? t('yes') : t('no')));
+    }
+    if ($settings['width'] && $settings['height']) {
+      $summary[] = t('Size: %width x %height', array('%width' => $settings['width'], '%height' => $settings['height']));
+    }
+    if (isset($settings['multiple_file_behavior'])) {
+      $summary[] = t('Multiple files: %multiple', array('%multiple' => $settings['multiple_file_behavior']));
+    }
+  }
+
+  return implode('<br />', $summary);
+}
+
+/**
+ * Implements hook_field_formatter_view().
+ */
+function file_entity_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
+  $settings = $display['settings'];
+  $element = array();
+
+  if ($display['type'] == 'file_rendered') {
+    $view_mode = $settings['file_view_mode'];
+
+    // To prevent infinite recursion caused by reference cycles, we store
+    // diplayed nodes in a recursion queue.
+    $recursion_queue = &drupal_static(__FUNCTION__, array());
+
+    // If no 'referencing entity' is set, we are starting a new 'reference
+    // thread' and need to reset the queue.
+    // @todo Bug: $entity->referencing_entity on files referenced in a different
+    // thread on the page.
+    // E.g: 1 references 1+2 / 2 references 1+2 / visit homepage.
+    // We'd need a more accurate way...
+    if (!isset($entity->referencing_entity)) {
+      $recursion_queue = array();
+    }
+
+    // The recursion queue only needs to track files.
+    if ($entity_type == 'file') {
+      list($id) = entity_extract_ids($entity_type, $entity);
+      $recursion_queue[$id] = $id;
+    }
+
+    // Prevent 'empty' fields from causing a WSOD.
+    $items = array_filter($items);
+
+    // Check the recursion queue to determine which nodes should be fully
+    // displayed, and which nodes will only be displayed as a title.
+    $files_display = array();
+    foreach ($items as $delta => $item) {
+      if (!isset($recursion_queue[$item['fid']])) {
+        $files_display[$item['fid']] = file_load($item['fid']);
+      }
+    }
+
+    // Load and build the fully displayed nodes.
+    if ($files_display) {
+      foreach ($files_display as $fid => $file) {
+        $files_display[$fid]->referencing_entity = $entity;
+        $files_display[$fid]->referencing_field = $field['field_name'];
+      }
+      $output = file_view_multiple($files_display, $view_mode);
+      // Remove the first level from the output array.
+      $files_built = reset($output);
+    }
+
+    // Assemble the render array.
+    foreach ($items as $delta => $item) {
+      if (isset($files_built[$item['fid']])) {
+        $element[$delta] = $files_built[$item['fid']];
+      }
+    }
+  }
+  elseif ($display['type'] == 'file_download_link') {
+    foreach ($items as $delta => $item) {
+      $file = (object) $item;
+      if (file_entity_access('download', $file)) {
+        $element[$delta] = array(
+          '#theme' => 'file_entity_download_link',
+          '#file' => $file,
+          '#text' => $settings['text'],
+        );
+      }
+    }
+  }
+  elseif ($display['type'] == 'file_audio') {
+    $multiple_file_behavior = $settings['multiple_file_behavior'];
+
+    // Prevent 'empty' fields from causing a WSOD.
+    $items = array_filter($items);
+
+    // Build an array of sources for each <audio> element.
+    $source_lists = array();
+    if ($multiple_file_behavior == 'tags') {
+      foreach ($items as $delta => $item) {
+        if ($item['type'] == 'audio') {
+          $source_lists[] = array($item);
+        }
+      }
+    }
+    else {
+      foreach ($items as $delta => $item) {
+        if ($item['type'] == 'audio') {
+          $source_lists[0][] = $item;
+        }
+      }
+    }
+
+    // Render each source list as an <audio> element.
+    foreach ($source_lists as $delta => $sources) {
+      $element[$delta] = array(
+        '#theme' => 'file_entity_file_audio',
+        '#files' => $sources,
+        '#controls' => $settings['controls'],
+        '#autoplay' => $settings['autoplay'],
+        '#loop' => $settings['loop'],
+      );
+    }
+  }
+  elseif ($display['type'] == 'file_video') {
+    $multiple_file_behavior = $settings['multiple_file_behavior'];
+
+    // Prevent 'empty' fields from causing a WSOD.
+    $items = array_filter($items);
+
+    // Build an array of sources for each <video> element.
+    $source_lists = array();
+    if ($multiple_file_behavior == 'tags') {
+      foreach ($items as $delta => $item) {
+        if ($item['type'] == 'video') {
+          $source_lists[] = array($item);
+        }
+      }
+    }
+    else {
+      foreach ($items as $delta => $item) {
+        if ($item['type'] == 'video') {
+          $source_lists[0][] = $item;
+        }
+      }
+    }
+
+    // Render each source list as an <video> element.
+    foreach ($source_lists as $delta => $sources) {
+      $width = $settings['width'];
+      $height = $settings['height'];
+      $element[$delta] = array(
+        '#theme' => 'file_entity_file_video',
+        '#files' => $sources,
+        '#controls' => $settings['controls'],
+        '#autoplay' => $settings['autoplay'],
+        '#loop' => $settings['loop'],
+        '#muted' => $settings['muted'],
+        '#width' => ($width && $height) ? $width : NULL,
+        '#height' => ($width && $height) ? $height : NULL,
+      );
+    }
+  }
+
+  return $element;
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.file.inc b/profiles/commons/modules/contrib/file_entity/file_entity.file.inc
new file mode 100644
index 0000000..d5cfadc
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.file.inc
@@ -0,0 +1,313 @@
+<?php
+
+/**
+ * @file
+ * File hooks implemented by the File entity module.
+ */
+
+/**
+ * Implements hook_file_presave().
+ */
+function file_entity_file_presave($file) {
+  // Always ensure the filemime property is current.
+  if (!empty($file->original) || empty($file->filemime)) {
+    $file->filemime = file_get_mimetype($file->uri);
+  }
+
+  // The file type is used as a bundle key, and therefore, must not be NULL.
+  // It defaults to FILE_TYPE_NONE when loaded via file_load(), but in case
+  // file_save() is called on a new file object, default it here too.
+  if (!isset($file->type)) {
+    $file->type = FILE_TYPE_NONE;
+  }
+
+  // If the file isn't already assigned a real type, determine what type should
+  // be assigned to it.
+  if ($file->type === FILE_TYPE_NONE) {
+    $type = file_get_type($file);
+    if (isset($type)) {
+      $file->type = $type;
+    }
+  }
+
+  field_attach_presave('file', $file);
+
+  // Fetch image dimensions.
+  file_entity_metadata_fetch_image_dimensions($file);
+}
+
+/**
+ * Implements hook_file_type().
+ */
+function file_entity_file_type($file) {
+  $types = array();
+  foreach (file_type_get_enabled_types() as $type) {
+    if (file_entity_match_mimetypes($type->mimetypes, $file->filemime)) {
+      $types[] = $type->type;
+    }
+  }
+
+  return $types;
+}
+
+/**
+ * Implements hook_file_insert().
+ */
+function file_entity_file_insert($file) {
+  // Ensure field data is saved since file_save() does not in Drupal 7.
+  field_attach_insert('file', $file);
+
+  // Save file metadata.
+  if (!empty($file->metadata)) {
+    foreach ($file->metadata as $name => $value) {
+      db_merge('file_metadata')
+        ->fields(array(
+          'value' => serialize($value),
+        ))
+        ->key(array(
+          'fid' => $file->fid,
+          'name' => $name,
+        ))
+        ->execute();
+    }
+  }
+
+  // Clear any related field caches.
+  file_entity_invalidate_field_caches($file);
+}
+
+/**
+ * Implements hook_file_update().
+ */
+function file_entity_file_update($file) {
+  // Ensure field data is saved since file_save() does not in Drupal 7.
+  field_attach_update('file', $file);
+
+  // Save file metadata.
+  if (!empty($file->metadata)) {
+    foreach ($file->metadata as $name => $value) {
+      db_merge('file_metadata')
+        ->fields(array(
+          'value' => serialize($value),
+        ))
+        ->key(array(
+          'fid' => $file->fid,
+          'name' => $name,
+        ))
+        ->execute();
+    }
+  }
+
+  // Save file metadata.
+  db_delete('file_metadata')->condition('fid', $file->fid);
+  if (!empty($file->metadata)) {
+    foreach ($file->metadata as $name => $value) {
+      db_merge('file_metadata')
+        ->fields(array(
+          'value' => serialize($value),
+        ))
+        ->key(array(
+          'fid' => $file->fid,
+          'name' => $name,
+        ))
+        ->execute();
+    }
+  }
+
+  if (file_entity_file_get_mimetype_type($file) == 'image' && module_exists('image')) {
+    // If the image dimensions have changed, update any image field references
+    // to this file and flush image style derivatives.
+    if ($file->metadata['width'] != $file->metadata['width'] || $file->metadata['height'] != $file->metadata['height']) {
+      _file_entity_update_image_field_dimensions($file);
+    }
+
+    // Flush image style derivatives whenever an image is updated.
+    image_path_flush($file->uri);
+  }
+
+  // Clear any related field caches.
+  file_entity_invalidate_field_caches($file);
+}
+
+/**
+ * Implements hook_file_delete().
+ */
+function file_entity_file_delete($file) {
+  field_attach_delete('file', $file);
+
+  // This is safe to call since the file's records from the usage table have
+  // not yet been deleted.
+  file_entity_invalidate_field_caches($file);
+
+  // Remove file metadata.
+  db_delete('file_metadata')->condition('fid', $file->fid)->execute();
+
+  // Remove this file from the search index if needed.
+  // This code is implemented in file entity module rather than in search
+  // module because file entity is implementing search module's API, not the
+  // other way around.
+  if (module_exists('search')) {
+    search_reindex($file->fid, 'file');
+  }
+}
+
+/**
+ * Implements hook_file_mimetype_mapping_alter().
+ */
+function file_entity_file_mimetype_mapping_alter(&$mapping) {
+  // Add support for mka and mkv.
+  // @todo Remove when http://drupal.org/node/1443070 is fixed in core.
+  $new_mappings['mka'] = 'audio/x-matroska';
+  $new_mappings['mkv'] = 'video/x-matroska';
+
+  // Add support for weba, webm, and webp.
+  // @todo Remove when http://drupal.org/node/1443070 is fixed in core.
+  $new_mappings['weba'] = 'audio/webm';
+  $new_mappings['webm'] = 'video/webm';
+  $new_mappings['webp'] = 'image/webp';
+
+  foreach ($new_mappings as $extension => $mime_type) {
+    if (!in_array($mime_type, $mapping['mimetypes'])) {
+      // If the mime type does not already exist, add it.
+      $mapping['mimetypes'][] = $mime_type;
+    }
+
+    // Get the index of the mime type and assign the extension to that key.
+    $index = array_search($mime_type, $mapping['mimetypes']);
+    $mapping['extensions'][$extension] = $index;
+  }
+}
+
+/**
+ * Implements hook_file_load().
+ */
+function file_entity_file_load($files) {
+  $alt = variable_get('file_entity_alt', '[file:field_file_image_alt_text]');
+  $title = variable_get('file_entity_title', '[file:field_file_image_title_text]');
+
+  $replace_options = array(
+    'clear' => TRUE,
+    'sanitize' => FALSE,
+  );
+
+  foreach ($files as $file) {
+    $file->metadata = array();
+
+    // Load alt and title text from fields.
+    if (!empty($alt)) {
+      $file->alt = token_replace($alt, array('file' => $file), $replace_options);
+    }
+    if (!empty($title)) {
+      $file->title = token_replace($title, array('file' => $file), $replace_options);
+    }
+  }
+
+  // Load and unserialize metadata.
+  $results = db_query("SELECT * FROM {file_metadata} WHERE fid IN (:fids)", array(':fids' => array_keys($files)));
+  foreach ($results as $result) {
+    $files[$result->fid]->metadata[$result->name] = unserialize($result->value);
+  }
+}
+
+/**
+ * Fetch the dimensions of an image and store them in the file metadata array.
+ */
+function file_entity_metadata_fetch_image_dimensions($file) {
+  // Prevent PHP notices when trying to read empty files.
+  // @see http://drupal.org/node/681042
+  if (!$file->filesize) {
+    return;
+  }
+
+  // Do not bother proceeding if this file does not have an image mime type.
+  if (file_entity_file_get_mimetype_type($file) != 'image') {
+    return;
+  }
+
+  // We have a non-empty image file.
+  $image_info = image_get_info($file->uri);
+  if ($image_info) {
+    $file->metadata['width'] = $image_info['width'];
+    $file->metadata['height'] = $image_info['height'];
+  }
+  else {
+    // Fallback to NULL values.
+    $file->metadata['width'] = NULL;
+    $file->metadata['height'] = NULL;
+  }
+}
+
+/**
+ * Update the image dimensions stored in any image fields for a file.
+ *
+ * @param object $file
+ *   A file object that is an image.
+ *
+ * @see http://drupal.org/node/1448124
+ */
+function _file_entity_update_image_field_dimensions($file) {
+  // Do not bother proceeding if this file does not have an image mime type.
+  if (file_entity_file_get_mimetype_type($file) != 'image') {
+    return;
+  }
+
+  // Find all image field enabled on the site.
+  $image_fields = _file_entity_get_fields_by_type('image');
+
+  foreach ($image_fields as $image_field) {
+    $query = new EntityFieldQuery();
+    $query->fieldCondition($image_field, 'fid', $file->fid);
+    $results = $query->execute();
+
+    foreach ($results as $entity_type => $entities) {
+      $entities = entity_load($entity_type, array_keys($entities));
+      foreach ($entities as $entity) {
+        foreach ($entity->{$image_field} as $langcode => $items) {
+          foreach ($items as $delta => $item) {
+            if ($item['fid'] == $file->fid) {
+              $entity->{$image_field}[$langcode][$delta]['width'] = $file->metadata['width'];
+              $entity->{$image_field}[$langcode][$delta]['height'] = $file->metadata['height'];
+            }
+          }
+        }
+
+        // Save the updated field column values.
+        _file_entity_entity_fields_update($entity_type, $entity);
+      }
+    }
+  }
+}
+
+/**
+ * Update an entity's field values without changing anything on the entity.
+ */
+function _file_entity_entity_fields_update($entity_type, $entity) {
+  list($id) = entity_extract_ids($entity_type, $entity);
+  if (empty($id)) {
+    throw new Exception(t('Cannot call _file_entity_update_entity_fields() on a new entity.'));
+  }
+
+  // Some modules use the original property.
+  if (!isset($entity->original)) {
+    $entity->original = $entity;
+  }
+
+  // Ensure that file_field_update() will not trigger additional usage.
+  unset($entity->revision);
+
+  // Invoke the field presave and update hooks.
+  field_attach_presave($entity_type, $entity);
+  field_attach_update($entity_type, $entity);
+
+  // Clear the cache for this entity now.
+  entity_get_controller($entity_type)->resetCache(array($id));
+}
+
+/**
+ * Implements hook_file_metadata_info().
+ */
+function file_entity_file_metadata_info() {
+  $info['width'] = array('label' => t('Width'), 'type' => 'integer');
+  $info['height'] = array('label' => t('Height'), 'type' => 'integer');
+  return $info;
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.file_api.inc b/profiles/commons/modules/contrib/file_entity/file_entity.file_api.inc
new file mode 100644
index 0000000..9baa1a4
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.file_api.inc
@@ -0,0 +1,764 @@
+<?php
+
+/**
+ * @file
+ * API extensions of Drupal core's file.inc.
+ */
+
+/**
+ * The {file_managed}.type value when the file type has not yet been determined.
+ */
+define('FILE_TYPE_NONE', 'undefined');
+
+/**
+ * Returns information about file formatters from hook_file_formatter_info().
+ *
+ * @param string $formatter_type
+ *   (optional) A file formatter type name. If ommitted, all file formatter
+ *   will be returned.
+ *
+ * @return string|array
+ *   Either a file formatter description, as provided by
+ *   hook_file_formatter_info(), or an array of all existing file formatters,
+ *   keyed by formatter type name.
+ */
+function file_info_formatter_types($formatter_type = NULL) {
+  $info = &drupal_static(__FUNCTION__);
+  if (!isset($info)) {
+    $info = module_invoke_all('file_formatter_info');
+    drupal_alter('file_formatter_info', $info);
+    uasort($info, '_file_entity_sort_weight_label');
+  }
+  if ($formatter_type) {
+    if (isset($info[$formatter_type])) {
+      return $info[$formatter_type];
+    }
+  }
+  else {
+    return $info;
+  }
+}
+
+/**
+ * Clears caches that are related to file entity.
+ *
+ * Clears all cached configuration related to file types, formatters, and
+ * display settings.
+ */
+function file_info_cache_clear() {
+  // Clear the CTools managed caches.
+  ctools_include('export');
+  ctools_export_load_object_reset('file_type');
+  ctools_export_load_object_reset('file_display');
+
+  // Clear the formatter type cache, managed by file_info_formatter_types().
+  drupal_static_reset('file_info_formatter_types');
+
+  // Clear file type caches.
+  drupal_static_reset('file_type_get_names');
+}
+
+/**
+ * Construct a drupal_render() style array from an array of loaded files.
+ *
+ * @param array $files
+ *   An array of files as returned by file_load_multiple().
+ * @param string $view_mode
+ *   View mode.
+ * @param int $weight
+ *   An integer representing the weight of the first file in the list.
+ * @param string $langcode
+ *   A string indicating the language field values are to be shown in. If no
+ *   language is provided the current content language is used.
+ *
+ * @return array
+ *   An array in the format expected by drupal_render().
+ */
+function file_view_multiple($files, $view_mode = 'full', $weight = 0, $langcode = NULL) {
+  if (empty($files)) {
+    return array();
+  }
+
+  field_attach_prepare_view('file', $files, $view_mode, $langcode);
+  entity_prepare_view('file', $files, $langcode);
+
+  $build = array();
+  foreach ($files as $file) {
+    $build['files'][$file->fid] = file_view($file, $view_mode, $langcode);
+    $build['files'][$file->fid]['#weight'] = $weight;
+    $weight++;
+  }
+  $build['files']['#sorted'] = TRUE;
+
+  return $build;
+}
+
+/**
+ * Generate an array for rendering the given file.
+ *
+ * @param object $file
+ *   A file object.
+ * @param string $view_mode
+ *   View mode.
+ * @param string $langcode
+ *   (optional) A language code to use for rendering. Defaults to the global
+ *   content language of the current request.
+ *
+ * @return array
+ *   An array as expected by drupal_render().
+ */
+function file_view($file, $view_mode = 'full', $langcode = NULL) {
+  if (!isset($langcode)) {
+    $langcode = $GLOBALS['language_content']->language;
+  }
+
+  // Populate $file->content with a render() array.
+  file_build_content($file, $view_mode, $langcode);
+
+  $build = $file->content;
+  // We don't need duplicate rendering info in $file->content.
+  unset($file->content);
+
+  $build += array(
+    '#theme' => 'file_entity',
+    '#file' => $file,
+    '#view_mode' => $view_mode,
+    '#language' => $langcode,
+  );
+
+  // Add contextual links for this file, except when the file is already being
+  // displayed on its own page. Modules may alter this behavior (for example,
+  // to restrict contextual links to certain view modes) by implementing
+  // hook_file_view_alter().
+  if (!empty($file->fid) && !($view_mode == 'full' && file_entity_is_page($file))) {
+    $build['#contextual_links']['file'] = array('file', array($file->fid));
+  }
+
+  // Allow modules to modify the structured file.
+  $type = 'file';
+  drupal_alter(array('file_view', 'entity_view'), $build, $type);
+
+  return $build;
+}
+
+/**
+ * Builds a structured array representing the file's content.
+ *
+ * @param object $file
+ *   A file object.
+ * @param string $view_mode
+ *   View mode, e.g. 'default', 'full', etc.
+ * @param string $langcode
+ *   (optional) A language code to use for rendering. Defaults to the global
+ *   content language of the current request.
+ */
+function file_build_content($file, $view_mode = 'full', $langcode = NULL) {
+  if (!isset($langcode)) {
+    $langcode = $GLOBALS['language_content']->language;
+  }
+
+  // Remove previously built content, if exists.
+  $file->content = array();
+
+  // Build the actual file display.
+  // @todo Figure out how to clean this crap up.
+  $file->content['file'] = file_view_file($file, $view_mode, $langcode);
+  if (isset($file->content['file'])) {
+    if (isset($file->content['file']['#theme']) && $file->content['file']['#theme'] != 'file_link') {
+      unset($file->content['file']['#file']);
+    }
+    unset($file->content['file']['#view_mode']);
+    unset($file->content['file']['#language']);
+  }
+  else {
+    unset($file->content['file']);
+  }
+
+  // Build fields content.
+  // In case of a multiple view, file_view_multiple() already ran the
+  // 'prepare_view' step. An internal flag prevents the operation from running
+  // twice.
+  field_attach_prepare_view('file', array($file->fid => $file), $view_mode, $langcode);
+  entity_prepare_view('file', array($file->fid => $file), $langcode);
+  $file->content += field_attach_view('file', $file, $view_mode, $langcode);
+
+  $links = array();
+  $file->content['links'] = array(
+    '#theme' => 'links__file',
+    '#pre_render' => array('drupal_pre_render_links'),
+    '#attributes' => array('class' => array('links', 'inline')),
+  );
+  $file->content['links']['file'] = array(
+    '#theme' => 'links__file__file',
+    '#links' => $links,
+    '#attributes' => array('class' => array('links', 'inline')),
+  );
+
+  // Allow modules to make their own additions to the file.
+  module_invoke_all('file_view', $file, $view_mode, $langcode);
+  module_invoke_all('entity_view', $file, 'file', $view_mode, $langcode);
+}
+
+/**
+ * Generate an array for rendering just the file portion of a file entity.
+ *
+ * @param object $file
+ *   A file object.
+ * @param string|array $displays
+ *   Can be either:
+ *   - the name of a view mode;
+ *   - or an array of custom display settings, as returned by file_displays().
+ * @param string $langcode
+ *   (optional) A language code to use for rendering. Defaults to the global
+ *   content language of the current request.
+ *
+ * @return array
+ *   An array as expected by drupal_render().
+ */
+function file_view_file($file, $displays = 'full', $langcode = NULL) {
+  if (!isset($langcode)) {
+    $langcode = $GLOBALS['language_content']->language;
+  }
+
+  // Prepare incoming display specifications.
+  if (is_string($displays)) {
+    $view_mode = $displays;
+    $displays = file_displays($file->type, $view_mode);
+  }
+  else {
+    $view_mode = '_custom_display';
+  }
+  drupal_alter('file_displays', $displays, $file, $view_mode);
+  _file_sort_array_by_weight($displays);
+
+  // Attempt to display the file with each of the possible displays. Stop after
+  // the first successful one. See file_displays() for details.
+  $element = NULL;
+  foreach ($displays as $formatter_type => $display) {
+    if (!empty($display['status'])) {
+      $formatter_info = file_info_formatter_types($formatter_type);
+      // Under normal circumstances, the UI prevents enabling formatters for
+      // incompatible MIME types. In case this was somehow circumvented (for
+      // example, a module updated its formatter definition without updating
+      // existing display settings), perform an extra check here.
+      if (isset($formatter_info['mime types'])) {
+        if (!file_entity_match_mimetypes($formatter_info['mime types'], $file->filemime)) {
+          continue;
+        }
+      }
+      if (isset($formatter_info['view callback']) && ($function = $formatter_info['view callback']) && function_exists($function)) {
+        $display['type'] = $formatter_type;
+        if (!empty($formatter_info['default settings'])) {
+          if (empty($display['settings'])) {
+            $display['settings'] = array();
+          }
+          $display['settings'] += $formatter_info['default settings'];
+        }
+        $element = $function($file, $display, $langcode);
+        if (isset($element)) {
+          break;
+        }
+      }
+    }
+  }
+
+  // As a last resort, fall back to showing a link to the file.
+  if (!isset($element)) {
+    $element = array(
+      '#theme' => 'file_link',
+      '#file' => $file,
+    );
+  }
+
+  // Add defaults and return the element.
+  $element += array(
+    '#file' => $file,
+    '#view_mode' => $view_mode,
+    '#language' => $langcode,
+  );
+
+  return $element;
+}
+
+/**
+ * @defgroup file_displays File displays API
+ * @{
+ * Functions to load and save information about file displays.
+ */
+
+/**
+ * Returns an array of displays to use for a file type in a given view mode.
+ *
+ * It is common for a site to be configured with broadly defined file types
+ * (e.g., 'video'), and to have different files of this type require different
+ * displays (for example, the code required to display a YouTube video is
+ * different than the code required to display a local QuickTime video).
+ * Therefore, the site administrator can configure multiple displays for a given
+ * file type. This function returns all of the displays that the administrator
+ * enabled for the given file type in the given view mode. file_view_file() then
+ * invokes each of these, and passes the specific file to display. Each display
+ * implementation can inspect the file, and either return a render array (if it
+ * is capable of displaying the file), or return nothing (if it is incapable of
+ * displaying the file). The first render array returned is the one used.
+ *
+ * @param string $file_type
+ *   The type of file.
+ * @param string $view_mode
+ *   The view mode.
+ *
+ * @return array
+ *   An array keyed by the formatter type name. Each item in the array contains
+ *   the following key/value pairs:
+ *   - status: Whether this display is enabled. If not TRUE, file_view_file()
+ *     skips over it.
+ *   - weight: An integer that determines the order of precedence within the
+ *     returned array. The lowest weight display capable of displaying the file
+ *     is used.
+ *   - settings: An array of key/value pairs specific to the formatter type. See
+ *     hook_file_formatter_info() for details.
+ *
+ * @see hook_file_formatter_info()
+ * @see file_view_file()
+ */
+function file_displays($file_type, $view_mode) {
+  $cache = &drupal_static(__FUNCTION__, array());
+
+  // If the requested view mode isn't configured to use a custom display for its
+  // fields, then don't use a custom display for its file either.
+  if ($view_mode != 'default') {
+    $view_mode_settings = field_view_mode_settings('file', $file_type);
+    $view_mode = !empty($view_mode_settings[$view_mode]['custom_settings']) ? $view_mode : 'default';
+  }
+
+  if (!isset($cache[$file_type][$view_mode])) {
+    // Load the display configurations for the file type and view mode. If none
+    // exist for the view mode, use the default view mode.
+    $displays = file_displays_load($file_type, $view_mode, TRUE);
+    if (empty($displays) && $view_mode != 'default') {
+      $cache[$file_type][$view_mode] = file_displays($file_type, 'default');
+    }
+    else {
+      // Convert the display objects to arrays and remove unnecessary keys.
+      foreach ($displays as $formatter_name => $display) {
+        $displays[$formatter_name] = array_intersect_key((array) $display, drupal_map_assoc(array('status', 'weight', 'settings')));
+      }
+      $cache[$file_type][$view_mode] = $displays;
+    }
+  }
+
+  return $cache[$file_type][$view_mode];
+}
+
+/**
+ * Returns an array of {file_display} objects for the file type and view mode.
+ */
+function file_displays_load($file_type, $view_mode, $key_by_formatter_name = FALSE) {
+  ctools_include('export');
+
+  $display_names = array();
+  $prefix = $file_type . '__' . $view_mode . '__';
+  foreach (array_keys(file_info_formatter_types()) as $formatter_name) {
+    $display_names[] = $prefix . $formatter_name;
+  }
+  $displays = ctools_export_load_object('file_display', 'names', $display_names);
+
+  if ($key_by_formatter_name) {
+    $prefix_length = strlen($prefix);
+    $rekeyed_displays = array();
+    foreach ($displays as $name => $display) {
+      $rekeyed_displays[substr($name, $prefix_length)] = $display;
+    }
+    $displays = $rekeyed_displays;
+  }
+
+  return $displays;
+}
+
+/**
+ * Saves a {file_display} object to the database.
+ */
+function file_display_save($display) {
+  ctools_include('export');
+  ctools_export_crud_save('file_display', $display);
+  file_info_cache_clear();
+}
+
+/**
+ * Creates a new {file_display} object.
+ */
+function file_display_new($file_type, $view_mode, $formatter_name) {
+  ctools_include('export');
+  $display = ctools_export_crud_new('file_display');
+  file_info_cache_clear();
+  $display->name = implode('__', array($file_type, $view_mode, $formatter_name));
+  return $display;
+}
+
+/**
+ * @} End of "defgroup file_displays".
+ */
+
+/**
+ * @defgroup file_types File types API
+ * @{
+ * Functions to load and save information about file types.
+ */
+
+/**
+ * Load a file type configuration object.
+ *
+ * @param string $name
+ *   The file type machine name to load.
+ *
+ * @return object
+ *   The file type object, or FALSE if it does not exist.
+ */
+function file_type_load($name) {
+  ctools_include('export');
+  $type = ctools_export_crud_load('file_type', $name);
+  return isset($type) ? $type : FALSE;
+}
+
+/**
+ * Load multiple file type configuration objects.
+ *
+ * @param array $names
+ *   An array of file type machine names to load.
+ *
+ * @return array
+ *   An array of file type objects, keyed by machine name.
+ */
+function file_type_load_multiple(array $names) {
+  ctools_include('export');
+  return ctools_export_crud_load_multiple('file_type', $names);
+}
+
+/**
+ * Load all file type configuration objects.
+ *
+ * This includes all enabled and disabled file types.
+ *
+ * @param bool $reset
+ *   If TRUE, the static cache of all file types will be flushed prior to
+ *   loading. This can be important on listing pages where file types might
+ *   have changed on the page load.
+ *
+ * @return array
+ *   An array of file type objects, keyed by machine name.
+ *
+ * @see file_type_get_enabled_types()
+ * @see file_type_get_disabled_types()
+ */
+function file_type_load_all($reset = FALSE) {
+  ctools_include('export');
+  return ctools_export_crud_load_all('file_type', $reset);
+}
+
+/**
+ * Returns an array of enabled file types.
+ */
+function file_type_get_enabled_types() {
+  $types = file_type_load_all();
+  return array_filter($types, 'file_type_is_enabled');
+}
+
+/**
+ * Returns an array of disabled file types.
+ */
+function file_type_get_disabled_types() {
+  $types = file_type_load_all();
+  return array_filter($types, 'file_type_is_disabled');
+}
+
+/**
+ * Returns TRUE if a file type is enabled, FALSE otherwise.
+ */
+function file_type_is_enabled($type) {
+  return empty($type->disabled);
+}
+
+/**
+ * Returns TRUE if a file type is disabled, FALSE otherwise.
+ */
+function file_type_is_disabled($type) {
+  return !empty($type->disabled);
+}
+
+/**
+ * Updates an existing file type or creates a new one.
+ *
+ * This function can be called on its own, or via the CTools exportables
+ * 'save callback' for {file_type} objects.
+ */
+function file_type_save($type) {
+  // Get the old type object, so we now can issue the correct insert/update
+  // queries.
+  if (!empty($type->old_type) && $type->old_type != $type->type) {
+    $rename_bundle = TRUE;
+    $old_type = file_type_load($type->old_type);
+  }
+  else {
+    $rename_bundle = FALSE;
+    $old_type = file_type_load($type->type);
+  }
+
+  // The type and label fields are required, but description is optional.
+  if (!isset($type->description)) {
+    $type->description = '';
+  }
+  $fields = array(
+    'type' => $type->type,
+    'label' => $type->label,
+    'description' => $type->description,
+    'mimetypes' => serialize($type->mimetypes),
+  );
+
+  // Update an existing type object, whether with a modified 'type' property or
+  // not.
+  if ($old_type) {
+    if ($old_type->export_type & EXPORT_IN_DATABASE) {
+      db_update('file_type')
+        ->fields($fields)
+        ->condition('type', $old_type->type)
+        ->execute();
+    }
+    else {
+      db_insert('file_type')
+        ->fields($fields)
+        ->execute();
+    }
+    if ($rename_bundle) {
+      field_attach_rename_bundle('file', $old_type->type, $type->type);
+    }
+    module_invoke_all('file_type_update', $type);
+    $status = SAVED_UPDATED;
+  }
+  // Insert a new type object.
+  else {
+    db_insert('file_type')
+      ->fields($fields)
+      ->execute();
+    field_attach_create_bundle('file', $type->type);
+    module_invoke_all('file_type_insert', $type);
+    $status = SAVED_NEW;
+  }
+
+  // Clear the necessary caches.
+  file_info_cache_clear();
+
+  // Ensure the type has the correct export_type in case the $type parameter
+  // continues to be used by the calling function after this function completes.
+  if (empty($type->export_type)) {
+    $type->export_type = 0;
+  }
+  $type->export_type |= EXPORT_IN_DATABASE;
+
+  return $status;
+}
+
+/**
+ * Deletes a file type from the database.
+ *
+ * This function can be called on its own, or via the CTools exportables
+ * 'delete callback' for {file_type} objects.
+ *
+ * @param object|string $type
+ *   Either a loaded file type object or the machine-name of the type.
+ */
+function file_type_delete($type) {
+  $type = is_string($type) ? file_type_load($type) : $type;
+
+  db_delete('file_type')
+    ->condition('type', $type->type)
+    ->execute();
+
+  // Remove this type from CToolS status variable.
+  $status = variable_get('default_file_type', array());
+  unset($status[$type->type]);
+  variable_set('default_file_type', $status);
+
+  file_info_cache_clear();
+
+  // After deleting from the database, check if the type still exists as a
+  // code-provided default type. If not, consider the type fully deleted and
+  // invoke the needed hooks.
+  if (!file_type_load($type->type)) {
+    field_attach_delete_bundle('file', $type->type);
+    module_invoke_all('file_type_delete', $type);
+  }
+}
+
+
+/**
+ * Enable a file type.
+ *
+ * @param string $type
+ *   Type of the file_type to disable
+ */
+function file_type_enable($type) {
+  ctools_export_crud_enable('file_type', $type);
+}
+
+
+/**
+ * Disable a file type.
+ *
+ * @param string $type
+ *   Type of the file_type to disable
+ */
+function file_type_disable($type) {
+  ctools_export_crud_disable('file_type', $type);
+}
+
+
+/**
+ * Determines file type for a given file.
+ *
+ * @param object $file
+ *   File object.
+ *
+ * @return string
+ *   Machine name of file type that should be used for given file.
+ */
+function file_get_type($file) {
+  $types = module_invoke_all('file_type', $file);
+  drupal_alter('file_type', $types, $file);
+
+  return empty($types) ? NULL : reset($types);
+}
+
+/**
+ * @} End of "defgroup file_types".
+ */
+
+/**
+ * Sorts an array by weight.
+ *
+ * Helper function to sort an array by the value of each item's 'weight' key,
+ * while preserving relative order of items that have equal weight.
+ */
+function _file_sort_array_by_weight(&$a) {
+  $i = 0;
+  foreach ($a as $key => $item) {
+    if (!isset($a[$key]['weight'])) {
+      $a[$key]['weight'] = 0;
+    }
+    $original_weight[$key] = $a[$key]['weight'];
+    $a[$key]['weight'] += $i / 1000;
+    $i++;
+  }
+  uasort($a, 'drupal_sort_weight');
+  foreach ($a as $key => $item) {
+    $a[$key]['weight'] = $original_weight[$key];
+  }
+}
+
+/**
+ * User sort function to sort by weight, then label/name.
+ */
+function _file_entity_sort_weight_label($a, $b) {
+  $a_weight = isset($a['weight']) ? $a['weight'] : 0;
+  $b_weight = isset($b['weight']) ? $b['weight'] : 0;
+  if ($a_weight == $b_weight) {
+    $a_label = isset($a['label']) ? $a['label'] : '';
+    $b_label = isset($b['label']) ? $b['label'] : '';
+    return strcasecmp($a_label, $b_label);
+  }
+  else {
+    return $a_weight < $b_weight ? -1 : 1;
+  }
+}
+
+/**
+ * Returns a file object which can be passed to file_save().
+ *
+ * @param string $uri
+ *   A string containing the URI, path, or filename.
+ * @param bool $use_existing
+ *   (Optional) If TRUE and there's an existing file in the {file_managed}
+ *   table with the passed in URI, then that file object is returned.
+ *   Otherwise, a new file object is returned. Default is TRUE.
+ *
+ * @return object|bool
+ *   A file object, or FALSE on error.
+ *
+ * @todo This should probably be named
+ *   file_load_by_uri($uri, $create_if_not_exists).
+ * @todo Remove this function when http://drupal.org/node/685818 is fixed.
+ */
+function file_uri_to_object($uri, $use_existing = TRUE) {
+  $file = FALSE;
+  $uri = file_stream_wrapper_uri_normalize($uri);
+
+  if ($use_existing) {
+    // We should always attempt to re-use a file if possible.
+    $files = entity_load('file', FALSE, array('uri' => $uri));
+    $file = !empty($files) ? reset($files) : FALSE;
+  }
+
+  if (empty($file)) {
+    $file = new stdClass();
+    $file->uid = $GLOBALS['user']->uid;
+    $file->filename = basename($uri);
+    $file->uri = $uri;
+    $file->filemime = file_get_mimetype($uri);
+    // This is gagged because some uris will not support it.
+    $file->filesize = @filesize($uri);
+    $file->timestamp = REQUEST_TIME;
+    $file->status = FILE_STATUS_PERMANENT;
+  }
+
+  return $file;
+}
+
+/**
+ * Delete multiple files.
+ *
+ * Unlike core's file_delete(), this function does not care about file usage
+ * or skip on invalid URIs. Just deletes the damn file like it should.
+ *
+ * @param array $fids
+ *   An array of file IDs.
+ */
+function file_delete_multiple(array $fids) {
+  $transaction = db_transaction();
+  if (!empty($fids) && $files = file_load_multiple($fids)) {
+    try {
+      foreach ($files as $fid => $file) {
+        module_invoke_all('file_delete', $file);
+        module_invoke_all('entity_delete', $file, 'file');
+        // Skip calling field_attach_delete as file_entity_file_delete()
+        // does this.
+        // field_attach_delete('file', $file);
+        // Remove this file from the search index if needed.
+        // This code is implemented in file_entity module rather than in search
+        // module, because node module is implementing search module's API,
+        // not the other way around.
+        if (module_exists('search')) {
+          search_reindex($fid, 'file');
+        }
+
+        // Make sure the file is deleted before removing its row from the
+        // database, so UIs can still find the file in the database.
+        if (file_valid_uri($file->uri)) {
+          file_unmanaged_delete($file->uri);
+        }
+      }
+
+      db_delete('file_managed')
+        ->condition('fid', $fids, 'IN')
+        ->execute();
+      db_delete('file_usage')
+        ->condition('fid', $fids, 'IN')
+        ->execute();
+    }
+    catch (Exception $e) {
+      $transaction->rollback();
+      watchdog_exception('file', $e);
+      throw $e;
+    }
+
+    // Clear the page and block and file_load_multiple caches.
+    entity_get_controller('file')->resetCache();
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.file_default_displays.inc b/profiles/commons/modules/contrib/file_entity/file_entity.file_default_displays.inc
new file mode 100644
index 0000000..c96f6a1
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.file_default_displays.inc
@@ -0,0 +1,135 @@
+<?php
+
+/**
+ * @file
+ * Default display configuration for the default file types.
+ */
+
+/**
+ * Implements hook_file_default_displays().
+ */
+function file_entity_file_default_displays() {
+  $file_displays = array();
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'audio__default__file_field_file_audio';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'controls' => 1,
+    'autoplay' => 0,
+    'loop' => 0,
+    'multiple_file_behavior' => 'tags',
+  );
+  $file_displays['audio__default__file_field_file_audio'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'audio__preview__file_field_file_default';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = '';
+  $file_displays['audio__preview__file_field_file_default'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'audio__teaser__file_field_file_audio';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'controls' => 1,
+    'autoplay' => 0,
+    'loop' => 0,
+    'multiple_file_behavior' => 'tags',
+  );
+  $file_displays['audio__teaser__file_field_file_audio'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'document__default__file_field_file_default';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = '';
+  $file_displays['document__default__file_field_file_default'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'document__preview__file_field_file_default';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = '';
+  $file_displays['document__preview__file_field_file_default'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'document__teaser__file_field_file_default';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = '';
+  $file_displays['document__teaser__file_field_file_default'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__default__file_field_file_default';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = '';
+  $file_displays['image__default__file_field_file_default'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__preview__file_field_file_default';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = '';
+  $file_displays['image__preview__file_field_file_default'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__teaser__file_field_file_default';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = '';
+  $file_displays['image__teaser__file_field_file_default'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'video__default__file_field_file_video';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'controls' => 1,
+    'autoplay' => 0,
+    'loop' => 0,
+    'width' => '',
+    'height' => '',
+    'multiple_file_behavior' => 'tags',
+  );
+  $file_displays['video__default__file_field_file_video'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'video__preview__file_field_file_default';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = '';
+  $file_displays['video__preview__file_field_file_default'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'video__teaser__file_field_file_video';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'controls' => 1,
+    'autoplay' => 0,
+    'loop' => 0,
+    'width' => '',
+    'height' => '',
+    'multiple_file_behavior' => 'tags',
+  );
+  $file_displays['video__teaser__file_field_file_video'] = $file_display;
+
+  return $file_displays;
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.info b/profiles/commons/modules/contrib/file_entity/file_entity.info
new file mode 100644
index 0000000..623ae37
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.info
@@ -0,0 +1,32 @@
+name = File entity
+description = "Extends Drupal file entities to be fieldable and viewable."
+package = Media
+core = 7.x
+dependencies[] = field
+dependencies[] = file
+dependencies[] = ctools
+dependencies[] = system (>=7.9)
+files[] = views/views_handler_argument_file_type.inc
+files[] = views/views_handler_field_file_rendered.inc
+files[] = views/views_handler_field_file_type.inc
+files[] = views/views_handler_filter_file_type.inc
+files[] = views/views_handler_field_file_filename.inc
+files[] = views/views_handler_field_file_link.inc
+files[] = views/views_handler_field_file_link_edit.inc
+files[] = views/views_handler_field_file_link_delete.inc
+files[] = views/views_handler_field_file_link_download.inc
+files[] = views/views_handler_field_file_link_usage.inc
+files[] = views/views_plugin_row_file_rss.inc
+files[] = views/views_plugin_row_file_view.inc
+files[] = file_entity.test
+configure = admin/config/media/file-settings
+
+; We have to add a fake version so Git checkouts do not fail Media dependencies
+version = 7.x-2.x-dev
+
+; Information added by drupal.org packaging script on 2013-10-25
+version = "7.x-2.0-alpha3"
+core = "7.x"
+project = "file_entity"
+datestamp = "1382744726"
+
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.install b/profiles/commons/modules/contrib/file_entity/file_entity.install
new file mode 100644
index 0000000..ca4ab06
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.install
@@ -0,0 +1,1073 @@
+<?php
+
+/**
+ * @file
+ * Install, update and uninstall functions for the file_entity module.
+ */
+
+/**
+ * Implements hook_schema().
+ */
+function file_entity_schema() {
+  $schema['file_type'] = array(
+    'description' => 'Stores the settings for file types.',
+    'fields' => array(
+      'type' => array(
+        'description' => 'The machine name of the file type.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'label' => array(
+        'description' => 'The human readable name of the file type.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+        'translatable' => TRUE,
+      ),
+      'description' => array(
+        'description' => 'A brief description of this file type.',
+        'type' => 'text',
+        'not null' => TRUE,
+        'size' => 'medium',
+        'translatable' => TRUE,
+      ),
+      'mimetypes' => array(
+        'description' => 'Mimetypes mapped to this file type.',
+        'type' => 'blob',
+        'size' => 'big',
+        'not null' => FALSE,
+        'serialize' => TRUE,
+      ),
+    ),
+    'primary key' => array('type'),
+    'export' => array(
+      'key' => 'type',
+      'key name' => 'Type',
+      'primary key' => 'type',
+      'default hook' => 'file_default_types',
+      'identifier' => 'file_type',
+      'export type string' => 'ctools_type',
+      'save callback' => 'file_type_save',
+      'delete callback' => 'file_type_delete',
+      'api' => array(
+        'owner' => 'file_entity',
+        'api' => 'file_type',
+        'minimum_version' => 1,
+        'current_version' => 1,
+      ),
+    ),
+  );
+  $schema['file_display'] = array(
+    'description' => 'Stores configuration options for file displays.',
+    'fields' => array(
+      // @todo Can be refactored as a compond primary key after
+      //   http://drupal.org/node/924236 is implemented.
+      'name' => array(
+        'description' => 'A combined string (FILE_TYPE__VIEW_MODE__FILE_FORMATTER) identifying a file display configuration. For integration with CTools Exportables, stored as a single string rather than as a compound primary key.',
+        'type' => 'varchar',
+        'length' => '255',
+        'not null' => TRUE,
+      ),
+      'weight' => array(
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+        'description' => 'Weight of formatter within the display chain for the associated file type and view mode. A file is rendered using the lowest weighted enabled display configuration that matches the file type and view mode and that is capable of displaying the file.',
+      ),
+      'status' => array(
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 0,
+        'size' => 'tiny',
+        'description' => 'The status of the display. (1 = enabled, 0 = disabled)',
+      ),
+      'settings' => array(
+        'type' => 'blob',
+        'not null' => FALSE,
+        'size' => 'big',
+        'serialize' => TRUE,
+        'description' => 'A serialized array of name value pairs that store the formatter settings for the display.',
+      ),
+    ),
+    'primary key' => array('name'),
+    // Exportable support via CTools.
+    'export' => array(
+      'key' => 'name',
+      'key name' => 'Name',
+      'primary key' => 'name',
+      // The {file_display}.status field is used to control whether the display
+      // is active in the display chain. CTools-level disabling is something
+      // different, and it's not yet clear how to interpret it for file
+      // displays. Until that's figured out, prevent CTools-level disabling.
+      'can disable' => FALSE,
+      'default hook' => 'file_default_displays',
+      'identifier' => 'file_display',
+      'api' => array(
+        'owner' => 'file_entity',
+        'api' => 'file_default_displays',
+        'minimum_version' => 1,
+        'current_version' => 1,
+      ),
+    ),
+  );
+  $schema['file_metadata'] = array(
+    'description' => 'Cache images dimensions.',
+    'fields' => array(
+      'fid' => array(
+        'description' => 'The {file_managed}.fid of the metadata.',
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'name' => array(
+        'description' => "The name of the metadata (e.g. 'width').",
+        'type' => 'varchar',
+        'length' => '255',
+        'not null' => TRUE,
+      ),
+      'value' => array(
+        'description' => "The value of the metadata (e.g. '200px').",
+        'type' => 'blob',
+        'not null' => FALSE,
+        'size' => 'big',
+        'serialize' => TRUE,
+      ),
+    ),
+    'primary key' => array('fid', 'name'),
+    'foreign keys' => array(
+      'file_managed' => array(
+        'table' => 'file_managed',
+        'columns' => array('fid' => 'fid'),
+      ),
+    ),
+  );
+  return $schema;
+}
+
+/**
+ * Implements hook_schema_alter().
+ */
+function file_entity_schema_alter(&$schema) {
+  $schema['file_managed']['fields']['type'] = array(
+    'description' => 'The type of this file.',
+    'type' => 'varchar',
+    'length' => 50,
+    'not null' => TRUE,
+    // If the FILE_TYPE_NONE constant ever changes, then change the value here
+    // too, and add an update function to deal with existing records. The
+    // constant isn't used here, because there may be cases where this function
+    // runs without the module file loaded.
+    'default' => 'undefined',
+  );
+  $schema['file_managed']['indexes']['file_type'] = array('type');
+}
+
+
+/**
+ * Implements hook_install().
+ */
+function file_entity_install() {
+  $schema = array();
+  file_entity_schema_alter($schema);
+  $spec = $schema['file_managed']['fields']['type'];
+  $indexes_new = array('indexes' => $schema['file_managed']['indexes']);
+
+  // If another module (e.g., Media) had added a {file_managed}.type field,
+  // then change it to the expected specification. Otherwise, add the field.
+  if (db_field_exists('file_managed', 'type')) {
+    // db_change_field() will fail if any records have type=NULL, so update
+    // them to the new default value.
+    db_update('file_managed')->fields(array('type' => $spec['default']))->isNull('type')->execute();
+
+    // Indexes using a field being changed must be dropped prior to calling
+    // db_change_field(). However, the database API doesn't provide a way to do
+    // this without knowing what the old indexes are. Therefore, it is the
+    // responsibility of the module that added them to drop them prior to
+    // allowing this module to be installed.
+    db_change_field('file_managed', 'type', 'type', $spec, $indexes_new);
+  }
+  else {
+    db_add_field('file_managed', 'type', $spec, $indexes_new);
+  }
+
+  // Set permissions.
+  $roles = user_roles();
+  foreach ($roles as $rid => $role) {
+    user_role_grant_permissions($rid, array('view files'));
+  }
+
+  // Create the title and alt text fields.
+  _file_entity_create_alt_title_fields();
+
+  // Configure default pathauto variables if it is currently installed.
+  if (module_exists('pathauto')) {
+    variable_set('pathauto_file_pattern', 'file/[file:name]');
+  }
+
+  // Classify existing files according to the currently defined file types.
+  // Queue all files to be classified during cron runs using the Queue API.
+  $queue = DrupalQueue::get('file_entity_type_determine');
+  $result = db_query('SELECT fid FROM {file_managed}');
+  foreach ($result as $record) {
+    $queue->createItem($record->fid);
+  }
+
+  // Warn users that existing files will not have a file type until the queue
+  // has been processed.
+  if ($queue->numberOfItems()) {
+    drupal_set_message(t('Existing files must be classified according to the currently defined file types. These files have been queued for processing and will have their file type determined during cron runs.'));
+  }
+}
+
+/**
+ * Implements hook_uninstall().
+ */
+function file_entity_uninstall() {
+  drupal_load('module', 'file_entity');
+  foreach (file_type_load_all(TRUE) as $type) {
+    file_type_delete($type);
+  }
+
+  // Remove the added column to the core {file_managed} table.
+  db_drop_field('file_managed', 'type');
+
+  // Remove variables.
+  variable_del('file_entity_max_filesize');
+  variable_del('file_entity_default_allowed_extensions');
+  variable_del('file_entity_alt');
+  variable_del('file_entity_title');
+  variable_del('file_entity_allow_insecure_download');
+  variable_del('file_entity_file_upload_wizard_skip_file_type');
+  variable_del('file_entity_file_upload_wizard_skip_scheme');
+  variable_del('file_entity_file_upload_wizard_skip_fields');
+}
+
+/**
+ * Create the {file_display} database table.
+ */
+function file_entity_update_7000() {
+  if (db_table_exists('file_display')) {
+    return t('The table {file_display} already exists.');
+  }
+
+  $schema['file_display'] = array(
+    'description' => 'Stores configuration options for file displays.',
+    'fields' => array(
+      'name' => array(
+        'description' => 'A combined string (FILE_TYPE__VIEW_MODE__FILE_FORMATTER) identifying a file display configuration. For integration with CTools Exportables, stored as a single string rather than as a compound primary key.',
+        'type' => 'varchar',
+        'length' => '255',
+        'not null' => TRUE,
+      ),
+      'weight' => array(
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+        'description' => 'Weight of formatter within the display chain for the associated file type and view mode. A file is rendered using the lowest weighted enabled display configuration that matches the file type and view mode and that is capable of displaying the file.',
+      ),
+      'status' => array(
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 0,
+        'size' => 'tiny',
+        'description' => 'The status of the display. (1 = enabled, 0 = disabled)',
+      ),
+      'settings' => array(
+        'type' => 'blob',
+        'not null' => FALSE,
+        'size' => 'big',
+        'serialize' => TRUE,
+        'description' => 'A serialized array of name value pairs that store the formatter settings for the display.',
+      ),
+    ),
+    'primary key' => array('name'),
+  );
+  db_create_table('file_display', $schema['file_display']);
+}
+
+/**
+ * Move file display configurations.
+ *
+ * Move file display configurations from the 'file_displays' variable to the
+ * {file_display} database table.
+ */
+function file_entity_update_7001() {
+  $file_displays = variable_get('file_displays');
+  if (!empty($file_displays)) {
+    foreach ($file_displays as $file_type => $file_type_displays) {
+      if (!empty($file_type_displays)) {
+        foreach ($file_type_displays as $view_mode => $view_mode_displays) {
+          if (!empty($view_mode_displays)) {
+            foreach ($view_mode_displays as $formatter_name => $display) {
+              if (!empty($display)) {
+                db_merge('file_display')
+                  ->key(array(
+                    'name' => implode('__', array($file_type, $view_mode, $formatter_name)),
+                  ))
+                  ->fields(array(
+                    'status' => isset($display['status']) ? $display['status'] : 0,
+                    'weight' => isset($display['weight']) ? $display['weight'] : 0,
+                    'settings' => isset($display['settings']) ? serialize($display['settings']) : NULL,
+                  ))
+                  ->execute();
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+  variable_del('file_displays');
+}
+
+/**
+ * Empty update function to trigger a theme registry rebuild.
+ */
+function file_entity_update_7100() { }
+
+/**
+ * Update all files with empty types to use the first part of filemime.
+ *
+ * For example, an png image with filemime 'image/png' will be assigned a file
+ * type of 'image'.
+ */
+function file_entity_update_7101() {
+  db_update('file_managed')
+    ->expression('type', "SUBSTRING_INDEX(filemime, '/', 1)")
+    ->condition('type', '')
+    ->execute();
+}
+
+/**
+ * Empty update function to trigger an entity cache rebuild.
+ */
+function file_entity_update_7102() {
+}
+
+/**
+ * Empty update function.
+ */
+function file_entity_update_7103() {
+}
+
+/**
+ * Assign view file permission when updating without the Media module.
+ */
+function file_entity_update_7104() {
+  if (!module_exists('media')) {
+    $roles = user_roles(FALSE, 'view file');
+    if (empty($roles)) {
+      // Set permissions.
+      $roles = user_roles();
+      foreach ($roles as $rid => $role) {
+        // Do not use user_role_grant_permission() since it relies on
+        // hook_permission(), which will not run for file entity module if it
+        // is disabled or the permission is renamed or removed.
+        db_merge('role_permission')
+          ->fields(array(
+            'rid' => $rid,
+            'permission' => 'view file',
+            'module' => 'file_entity',
+          ))
+          ->execute();
+      }
+    }
+  }
+}
+
+/**
+ * Create the {image_dimensions} database table.
+ */
+function file_entity_update_7200() {
+  if (db_table_exists('image_dimensions')) {
+    return t('The table {image_dimensions} already exists.');
+  }
+
+  $schema['image_dimensions'] = array(
+    'description' => 'Cache images dimensions.',
+    'fields' => array(
+      'fid' => array(
+        'description' => 'File ID.',
+        'type' => 'serial',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+      ),
+      'height' => array(
+        'description' => 'The height of the image in pixels.',
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'width' => array(
+        'description' => 'The width of the image in pixels..',
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+    ),
+    'primary key' => array('fid'),
+    'foreign keys' => array(
+      'file_managed' => array(
+        'table' => 'file_managed',
+        'columns' => array('fid' => 'fid'),
+      ),
+    ),
+  );
+  db_create_table('image_dimensions', $schema['image_dimensions']);
+}
+
+/**
+ * Add the {file_type}, {file_type_mimetypes} tables.
+ */
+function file_entity_update_7201() {
+  $schema = array(
+    'description' => 'Stores the settings for file types.',
+    'fields' => array(
+      'type' => array(
+        'description' => 'The machine name of the file type.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'label' => array(
+        'description' => 'The human readable name of the file type.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+        'translatable' => TRUE,
+      ),
+      'description' => array(
+        'description' => 'A brief description of this file type.',
+        'type' => 'text',
+        'not null' => TRUE,
+        'size' => 'medium',
+        'translatable' => TRUE,
+      ),
+    ),
+    'primary key' => array('type'),
+    'export' => array(
+      'key' => 'type',
+      'key name' => 'Type',
+      'primary key' => 'type',
+      'default hook' => 'file_default_types',
+      'identifier' => 'file_type',
+      'export type string' => 'ctools_type',
+      'subrecords callback' => 'file_type_load_subrecords',
+      'save callback' => 'file_type_save',
+      'delete callback' => 'file_type_delete',
+      'api' => array(
+        'owner' => 'file_entity',
+        'api' => 'file_type',
+        'minimum_version' => 1,
+        'current_version' => 1,
+      ),
+    ),
+  );
+  if (!db_table_exists('file_type')) {
+    db_create_table('file_type', $schema);
+  }
+
+  $schema = array(
+    'description' => 'Maps mimetypes to file types.',
+    'fields' => array(
+      'type' => array(
+        'description' => 'The machine name of the file type.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'mimetype' => array(
+        'description' => 'Mimetypes mapped to this file type.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+    ),
+    'indexes' => array(
+      'file_type' => array('type'),
+      'file_type_mimetype' => array('mimetype'),
+    ),
+  );
+  if (!db_table_exists('file_type_mimetypes')) {
+    db_create_table('file_type_mimetypes', $schema);
+  }
+}
+
+/**
+ * Update empty {file_managed}.type records to 'undefined'.
+ *
+ * Drupal 7.8 disallows empty string as the value for a bundle key, so update
+ * empty {file_managed}.type records to 'undefined' instead.
+ */
+function file_entity_update_7202() {
+  db_update('file_managed')
+    // Using 'undefined' instead of FILE_TYPE_NONE, because update functions can
+    // run for disabled modules.
+    ->fields(array('type' => 'undefined'))
+    ->condition('type', '')
+    ->execute();
+}
+
+/**
+ * Update permission names.
+ */
+function file_entity_update_7203() {
+  $permissions = array(
+    'view file' => 'view files',
+    'edit file' => 'edit any files',
+  );
+  foreach ($permissions as $old => $new) {
+    db_update('role_permission')
+      ->fields(array('permission' => $new))
+      ->condition('permission', $old)
+      ->execute();
+  }
+}
+
+
+/**
+ * Add title and alt text to image file types.
+ */
+function file_entity_update_7204() {
+  _file_entity_create_alt_title_fields();
+}
+
+/**
+ * Function to create the title and alt text fields and instances.
+ */
+function _file_entity_create_alt_title_fields() {
+  $t = get_t();
+  // Create the alt text field and instance.
+  // Define the alt text field.
+  $alt_text_field = array(
+    'active' => '1',
+    'cardinality' => '1',
+    'deleted' => '0',
+    'entity_types' => array(),
+    'field_name' => 'field_file_image_alt_text',
+    'foreign keys' => array(
+      'format' => array(
+        'columns' => array(
+          'format' => 'format',
+        ),
+        'table' => 'filter_format',
+      ),
+    ),
+    'indexes' => array(
+      'format' => array(
+        0 => 'format',
+      ),
+    ),
+    'module' => 'text',
+    'settings' => array(
+      'max_length' => '255',
+    ),
+    'translatable' => '0',
+    'type' => 'text',
+  );
+
+  // As long as the alt text field doesn't already exist create it.
+  if (!field_info_field($alt_text_field['field_name'])) {
+    field_create_field($alt_text_field);
+  }
+
+  // Define the alt text instance.
+  $alt_text_instance = array(
+    'bundle' => 'image',
+    'default_value' => NULL,
+    'deleted' => '0',
+    'description' => $t('Alternative text is used by screen readers, search engines, and when the image cannot be loaded. By adding alt text you improve accessibility and search engine optimization.'),
+    'display' => array(
+      'default' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 0,
+      ),
+      'full' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 0,
+      ),
+      'preview' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 0,
+      ),
+      'teaser' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 0,
+      ),
+    ),
+    'entity_type' => 'file',
+    'field_name' => 'field_file_image_alt_text',
+    'label' => 'Alt Text',
+    'required' => 0,
+    'settings' => array(
+      'text_processing' => '0',
+      'user_register_form' => FALSE,
+    ),
+    'widget' => array(
+      'active' => 1,
+      'module' => 'text',
+      'settings' => array(
+        'size' => '60',
+      ),
+      'type' => 'text_textfield',
+      'weight' => '-4',
+    ),
+  );
+
+  // For sites that updated from Media 1.x, continue to provide these deprecated
+  // view modes.
+  // @see http://drupal.org/node/1051090
+  if (variable_get('media__show_deprecated_view_modes')) {
+    $alt_text_instance['display'] += array(
+      'media_link' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 0,
+      ),
+      'media_original' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 0,
+      ),
+    );
+  }
+
+  // As long as the alt text instance doesn't already exist create it.
+  if (!field_info_instance($alt_text_instance['entity_type'], $alt_text_instance['field_name'], $alt_text_instance['bundle'])) {
+    field_create_instance($alt_text_instance);
+  }
+
+  // Create the title text field and instance.
+  // Define the title text field.
+  $title_text_field = array(
+    'active' => '1',
+    'cardinality' => '1',
+    'deleted' => '0',
+    'entity_types' => array(),
+    'field_name' => 'field_file_image_title_text',
+    'foreign keys' => array(
+      'format' => array(
+        'columns' => array(
+          'format' => 'format',
+        ),
+        'table' => 'filter_format',
+      ),
+    ),
+    'indexes' => array(
+      'format' => array(
+        0 => 'format',
+      ),
+    ),
+    'module' => 'text',
+    'settings' => array(
+      'max_length' => '255',
+    ),
+    'translatable' => '0',
+    'type' => 'text',
+  );
+
+  // As long as the title text field doesn't exist create it.
+  if (!field_info_field($title_text_field['field_name'])) {
+    field_create_field($title_text_field);
+  }
+
+  // Define the title text instance.
+  $title_text_instance = array(
+    'bundle' => 'image',
+    'default_value' => NULL,
+    'deleted' => '0',
+    'description' => $t('Title text is used in the tool tip when a user hovers their mouse over the image. Adding title text makes it easier to understand the context of an image and improves usability.'),
+    'display' => array(
+      'default' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 1,
+      ),
+      'full' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 0,
+      ),
+      'preview' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 0,
+      ),
+      'teaser' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 0,
+      ),
+    ),
+    'entity_type' => 'file',
+    'field_name' => 'field_file_image_title_text',
+    'label' => 'Title Text',
+    'required' => 0,
+    'settings' => array(
+      'text_processing' => '0',
+      'user_register_form' => FALSE,
+    ),
+    'widget' => array(
+      'active' => 1,
+      'module' => 'text',
+      'settings' => array(
+        'size' => '60',
+      ),
+      'type' => 'text_textfield',
+      'weight' => '-3',
+    ),
+  );
+
+  // For sites that updated from Media 1.x, continue to provide these deprecated
+  // view modes.
+  // @see http://drupal.org/node/1051090
+  if (variable_get('media__show_deprecated_view_modes')) {
+    $title_text_instance['display'] += array(
+      'media_link' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 0,
+      ),
+      'media_original' => array(
+        'label' => 'above',
+        'settings' => array(),
+        'type' => 'hidden',
+        'weight' => 0,
+      ),
+    );
+  }
+
+  // As long as the title text instance doesn't already exist create it.
+  if (!field_info_instance($title_text_instance['entity_type'], $title_text_instance['field_name'], $title_text_instance['bundle'])) {
+    field_create_instance($title_text_instance);
+  }
+}
+
+/**
+ * Fix broken indexes caused by incorrect index definitions in update 7201.
+ */
+function file_entity_update_7205() {
+  // Drop broken file type indexes. These may not exist if the broken version
+  // of update 7201 was never run.
+  if (db_index_exists('file_type_mimetypes', 0)) {
+    db_drop_index('file_type_mimetypes', 0);
+  }
+  if (db_index_exists('file_type_mimetypes', 1)) {
+    db_drop_index('file_type_mimetypes', 1);
+  }
+
+  // Add file type indexes. These may already exist if the fixed version of
+  // update 7201 was run.
+  if (!db_index_exists('file_type_mimetypes', 'file_type')) {
+    db_add_index('file_type_mimetypes', 'file_type', array('type'));
+  }
+  if (!db_index_exists('file_type_mimetypes', 'file_type_mimetype')) {
+    db_add_index('file_type_mimetypes', 'file_type_mimetype', array('mimetype'));
+  }
+}
+
+/**
+ * Configure default pathauto variables if it is currently installed.
+ */
+function file_entity_update_7206() {
+  if (module_exists('pathauto')) {
+    variable_set('pathauto_file_pattern', 'file/[file:name]');
+  }
+}
+
+/**
+ * Remove the administration files limit variable.
+ */
+function file_entity_update_7207() {
+  variable_del('file_entity_admin_files_limit');
+}
+
+/**
+ * Add expanded file type permissions to roles with existing file permissions.
+ */
+function file_entity_update_7208() {
+  foreach (array('edit own files', 'edit any files', 'delete own files', 'delete any files', 'download own files', 'download any files') as $old_permission) {
+    $roles = user_roles(FALSE, $old_permission);
+
+    foreach ($roles as $rid => $name) {
+      $new_permissions = array();
+
+      foreach (file_type_get_enabled_types() as $type => $info) {
+        switch ($old_permission) {
+          case 'edit own files':
+            $new_permissions[] = 'edit own ' . $type . ' files';
+            break;
+
+          case 'edit any files':
+            $new_permissions[] = 'edit any ' . $type . ' files';
+            break;
+
+          case 'delete own files':
+            $new_permissions[] = 'delete own ' . $type . ' files';
+            break;
+
+          case 'delete any files':
+            $new_permissions[] = 'delete any ' . $type . ' files';
+            break;
+
+          case 'download own files':
+            $new_permissions[] = 'download own ' . $type . ' files';
+            break;
+
+          case 'download any files':
+            $new_permissions[] = 'download any ' . $type . ' files';
+            break;
+        }
+      }
+
+      if (!empty($new_permissions)) {
+        // Grant new permissions for the role.
+        foreach ($new_permissions as $name) {
+          db_merge('role_permission')
+            ->key(array(
+              'rid' => $rid,
+              'permission' => $name,
+            ))
+            ->fields(array(
+              'module' => 'file_entity',
+            ))
+            ->execute();
+        }
+      }
+
+      // Remove old permission from the role.
+      db_delete('role_permission')
+        ->condition('rid', $rid)
+        ->condition('permission', $old_permission)
+        ->condition('module', 'file_entity')
+        ->execute();
+    }
+  }
+}
+
+/**
+ * Remove the {file_type_streams} table if it exists.
+ */
+function file_entity_update_7209() {
+  if (db_table_exists('file_type_streams')) {
+    db_drop_table('file_type_streams');
+  }
+}
+
+/**
+ * Merge MIME types into the {file_type} table.
+ */
+function file_entity_update_7210() {
+  // Add the new mimetypes field if it doesn't already exist.
+  if (!db_field_exists('file_type', 'mimetypes')) {
+    $field = array(
+      'description' => 'Mimetypes mapped to this file type.',
+      'type' => 'blob',
+      'size' => 'big',
+      'not null' => FALSE,
+      'serialize' => TRUE,
+    );
+
+    db_add_field('file_type', 'mimetypes', $field);
+  }
+
+  // Migrate any existing MIME type information into {file_type}.
+  if (db_table_exists('file_type_mimetypes')) {
+    foreach (file_type_load_all(TRUE) as $type) {
+      $mimetypes = array();
+      $result = db_select('file_type_mimetypes', 'ftm')
+        ->fields('ftm', array('mimetype'))
+        ->condition('type', $type->type, '=')
+        ->execute();
+
+      foreach ($result as $record) {
+        $mimetypes[] = $record->mimetype;
+      }
+
+      if (!empty($mimetypes)) {
+        $type->mimetypes = $mimetypes;
+        file_type_save($type);
+      }
+    }
+
+    // Remove {file_type_mimetypes} after the information is migrated.
+    db_drop_table('file_type_mimetypes');
+  }
+}
+
+/**
+ * Create the {file_metadata} table.
+ */
+function file_entity_update_7211() {
+  $schema = array(
+    'description' => 'Stores file metadata in a key/value store.',
+    'fields' => array(
+      'fid' => array(
+        'description' => 'The {file_managed}.fid of the metadata.',
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'name' => array(
+        'description' => "The name of the metadata (e.g. 'width').",
+        'type' => 'varchar',
+        'length' => '255',
+        'not null' => TRUE,
+      ),
+      'value' => array(
+        'description' => "The value of the metadata (e.g. '200px').",
+        'type' => 'blob',
+        'not null' => FALSE,
+        'size' => 'big',
+        'serialize' => TRUE,
+      ),
+    ),
+    'primary key' => array('fid', 'name'),
+    'foreign keys' => array(
+      'file_managed' => array(
+        'table' => 'file_managed',
+        'columns' => array('fid' => 'fid'),
+      ),
+    ),
+  );
+  db_create_table('file_metadata', $schema);
+}
+
+/**
+ * Migrate the image_dimensions table to the new file_metadata table.
+ */
+function file_entity_update_7212(&$sandbox) {
+  if (!db_table_exists('image_dimensions')) {
+    return;
+  }
+
+  if (!isset($sandbox['progress'])) {
+    $sandbox['progress'] = 0;
+    $sandbox['current_fid'] = 0;
+    $sandbox['max'] = db_query('SELECT COUNT(DISTINCT fid) FROM {image_dimensions}')->fetchField();
+  }
+
+  $results = db_query_range("SELECT fid, width, height FROM {image_dimensions} WHERE fid > :fid ORDER BY fid ASC", 0, 20, array(':fid' => $sandbox['current_fid']))->fetchAllAssoc('fid');
+
+  // Clear any existing records in the metadata table in case they exist
+  // because we only want to do one insert.
+  if (!empty($results)) {
+    db_delete('file_metadata')
+      ->condition('fid', array_keys($results), 'IN')
+      ->condition(db_or()
+        ->condition('name', 'width')
+        ->condition('name', 'height')
+      )
+      ->execute();
+  }
+
+  $values = array();
+  foreach ($results as $result) {
+    foreach (array('width', 'height') as $key) {
+      $values[] = array(
+        'fid' => $result->fid,
+        'name' => $key,
+        'value' => serialize((int) $result->{$key}),
+      );
+    }
+    $sandbox['progress'] += count($results);
+    $sandbox['current_fid'] = $result->fid;
+  }
+
+  if (!empty($values)) {
+    $query = db_insert('file_metadata');
+    $query->fields(array('fid', 'name', 'value'));
+    foreach ($values as $value) {
+      $query->values($value);
+    }
+    $query->execute();
+  }
+
+  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
+
+  if ($sandbox['#finished'] >= 1) {
+    db_drop_table('image_dimensions');
+  }
+}
+
+/**
+ * Update default alt text and title image field descriptions.
+ */
+function file_entity_update_7213() {
+  if ($title_text_instance = field_info_instance('file', 'field_file_image_title_text', 'image')) {
+    if ($title_text_instance['description'] == 'Title text attribute') {
+      $title_text_instance['description'] = t('Title text is used in the tool tip when a user hovers their mouse over the image. Adding title text makes it easier to understand the context of an image and improves usability.');
+      field_update_instance($title_text_instance);
+    }
+  }
+
+  if ($alt_text_instance = field_info_instance('file', 'field_file_image_alt_text', 'image')) {
+    if ($alt_text_instance['description'] == '') {
+      $alt_text_instance['description'] = t('Alternative text is used by screen readers, search engines, and when the image cannot be loaded. By adding alt text you improve accessibility and search engine optimization.');
+      field_update_instance($alt_text_instance);
+    }
+  }
+}
+
+/**
+ * Fix the default value in {file_managed}.type to match the field schema.
+ */
+function file_entity_update_7214() {
+  db_drop_index('file_managed', 'file_type');
+  db_change_field('file_managed', 'type', 'type', array(
+    'description' => 'The type of this file.',
+    'type' => 'varchar',
+    'length' => 50,
+    'not null' => TRUE,
+    'default' => 'undefined',
+  ));
+  db_add_index('file_managed', 'file_type', array('type'));
+}
+
+/**
+ * Fix the {file_metadata}.fid schema.
+ */
+function file_entity_update_7215() {
+  // When changing a primary key serial field to an int, we need to add a
+  // temporary index to make this update work.
+  // @see https://drupal.org/node/190027
+  db_add_index('file_metadata', 'temp', array('fid'));
+  db_drop_primary_key('file_metadata');
+  db_change_field('file_metadata', 'fid', 'fid', array(
+    'description' => 'The {file_managed}.fid of the metadata.',
+    'type' => 'int',
+    'unsigned' => TRUE,
+    'not null' => TRUE,
+    'default' => 0,
+  ));
+  db_add_primary_key('file_metadata', array('fid', 'name'));
+  db_drop_index('file_metadata', 'temp');
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.js b/profiles/commons/modules/contrib/file_entity/file_entity.js
new file mode 100644
index 0000000..e70eac5
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.js
@@ -0,0 +1,16 @@
+(function ($) {
+
+Drupal.behaviors.fileFieldsetSummaries = {
+  attach: function (context) {
+    $('fieldset.file-form-destination', context).drupalSetSummary(function (context) {
+      var scheme = $('.form-item-scheme input:checked', context).parent().text();
+      return Drupal.t('Destination: @scheme', { '@scheme': scheme });
+    });
+    $('fieldset.file-form-user', context).drupalSetSummary(function (context) {
+      var name = $('.form-item-name input', context).val() || Drupal.settings.anonymous;
+      return Drupal.t('Associated with @name', { '@name': name });
+    });
+  }
+};
+
+})(jQuery);
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.module b/profiles/commons/modules/contrib/file_entity/file_entity.module
new file mode 100644
index 0000000..3ca0bb7
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.module
@@ -0,0 +1,2571 @@
+<?php
+
+/**
+ * @file
+ * Extends Drupal file entities to be fieldable and viewable.
+ */
+
+/**
+ * Modules should return this value from hook_file_entity_access() to allow
+ * access to a file.
+ */
+define('FILE_ENTITY_ACCESS_ALLOW', 'allow');
+
+/**
+ * Modules should return this value from hook_file_entity_access() to deny
+ * access to a file.
+ */
+define('FILE_ENTITY_ACCESS_DENY', 'deny');
+
+/**
+ * Modules should return this value from hook_file_entity_access() to not affect
+ * file access.
+ */
+define('FILE_ENTITY_ACCESS_IGNORE', NULL);
+
+/**
+ * As part of extending Drupal core's file entity API, this module adds some
+ * functions to the 'file' namespace. For organization, those are kept in the
+ * 'file_entity.file_api.inc' file.
+ */
+require_once dirname(__FILE__) . '/file_entity.file_api.inc';
+
+// @todo Remove when http://drupal.org/node/977052 is fixed.
+require_once dirname(__FILE__) . '/file_entity.field.inc';
+
+/**
+ * Implements hook_hook_info().
+ */
+function file_entity_hook_info() {
+  $hooks = array(
+    'file_operation_info',
+    'file_operation_info_alter',
+    'file_type_info',
+    'file_type_info_alter',
+    'file_formatter_info',
+    'file_formatter_info_alter',
+    'file_view',
+    'file_view_alter',
+    'file_displays_alter',
+    'file_type',
+    'file_type_alter',
+    'file_download_headers_alter',
+    'file_entity_access',
+  );
+
+  return array_fill_keys($hooks, array('group' => 'file'));
+}
+
+/**
+ * Implements hook_hook_info_alter().
+ *
+ * Add support for existing core hooks to be located in modulename.file.inc.
+ */
+function file_entity_hook_info_alter(&$info) {
+  $hooks = array(
+    // File API hooks
+    'file_copy',
+    'file_move',
+    'file_validate',
+    // File access
+    'file_download',
+    'file_download_access',
+    'file_download_access_alter',
+    // File entity hooks
+    'file_load',
+    'file_presave',
+    'file_insert',
+    'file_update',
+    'file_delete',
+    // Miscellaneous hooks
+    'file_mimetype_mapping_alter',
+    'file_url_alter',
+  );
+  $info += array_fill_keys($hooks, array('group' => 'file'));
+}
+
+/**
+ * Implements hook_help().
+ */
+function file_entity_help($path, $arg) {
+  switch ($path) {
+    case 'admin/structure/file-types':
+      $output = '<p>' . t('When a file is uploaded to this website, it is assigned one of the following types, based on what kind of file it is.') . '</p>';
+      return $output;
+    case 'admin/structure/file-types/manage/%/display/preview':
+    case 'admin/structure/file-types/manage/%/file-display/preview':
+      drupal_set_message(t('Some modules rely on the Preview view mode to function correctly. Changing these settings may break parts of your site.'), 'warning');
+      break;
+  }
+}
+
+/**
+ * Implements hook_menu().
+ */
+function file_entity_menu() {
+  // File Configuration
+  // @todo Move this back to admin/config/media/file-types in Drupal 8 if
+  // MENU_MAX_DEPTH is increased to a value higher than 9.
+  $items['admin/structure/file-types'] = array(
+    'title' => 'File types',
+    'description' => 'Manage settings for the type of files used on your site.',
+    'page callback' => 'file_entity_list_types_page',
+    'access arguments' => array('administer file types'),
+    'file' => 'file_entity.admin.inc',
+  );
+  $items['admin/structure/file-types/add'] = array(
+    'title' => 'Add file type',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('file_entity_file_type_form'),
+    'access arguments' => array('administer file types'),
+    'type' => MENU_LOCAL_ACTION,
+    'file' => 'file_entity.admin.inc',
+  );
+  $items['admin/structure/file-types/manage/%file_type'] = array(
+    'title' => 'Manage file types',
+    'description' => 'Manage settings for the type of files used on your site.',
+  );
+  $items['admin/structure/file-types/manage/%file_type/enable'] = array(
+    'title' => 'Enable',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('file_entity_type_enable_confirm', 4),
+    'access arguments' => array('administer file types'),
+    'file' => 'file_entity.admin.inc',
+    'type' => MENU_CALLBACK,
+  );
+  $items['admin/structure/file-types/manage/%file_type/disable'] = array(
+    'title' => 'Disable',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('file_entity_type_disable_confirm', 4),
+    'access arguments' => array('administer file types'),
+    'file' => 'file_entity.admin.inc',
+    'type' => MENU_CALLBACK,
+  );
+  $items['admin/structure/file-types/manage/%file_type/revert'] = array(
+    'title' => 'Revert',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('file_entity_type_revert_confirm', 4),
+    'access arguments' => array('administer file types'),
+    'file' => 'file_entity.admin.inc',
+    'type' => MENU_CALLBACK,
+  );
+  $items['admin/structure/file-types/manage/%file_type/delete'] = array(
+    'title' => 'Delete',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('file_entity_type_delete_confirm', 4),
+    'access arguments' => array('administer file types'),
+    'file' => 'file_entity.admin.inc',
+    'type' => MENU_CALLBACK,
+  );
+
+  $items['admin/content/file'] = array(
+    'title' => 'Files',
+    'description' => 'Manage files used on your site.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('file_entity_admin_file'),
+    'access arguments' => array('administer files'),
+    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
+    'file' => 'file_entity.admin.inc',
+  );
+  $items['admin/content/file/list'] = array(
+    'title' => 'List',
+    'type' => MENU_DEFAULT_LOCAL_TASK,
+  );
+
+  // general view, edit, delete for files
+  $items['file/add'] = array(
+    'title' => 'Add file',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('file_entity_add_upload', array()),
+    'access callback' => 'file_entity_access',
+    'access arguments' => array('create'),
+    'file' => 'file_entity.pages.inc',
+  );
+  if (module_exists('plupload') && module_exists('multiform')) {
+    $items['file/add']['page arguments'] = array('file_entity_add_upload_multiple');
+  }
+  $items['file/add/upload'] = array(
+    'title' => 'Upload',
+    'type' => MENU_DEFAULT_LOCAL_TASK,
+    'weight' => -10,
+  );
+  $items['file/%file'] = array(
+    'title callback' => 'entity_label',
+    'title arguments' => array('file', 1),
+    // The page callback also invokes drupal_set_title() in case
+    // the menu router's title is overridden by a menu link.
+    'page callback' => 'file_entity_view_page',
+    'page arguments' => array(1),
+    'access callback' => 'file_entity_access',
+    'access arguments' => array('view', 1),
+    'file' => 'file_entity.pages.inc',
+  );
+  $items['file/%file/view'] = array(
+    'title' => 'View',
+    'type' => MENU_DEFAULT_LOCAL_TASK,
+    'weight' => -10,
+  );
+  $items['file/%file/usage'] = array(
+    'title' => 'Usage',
+    'page callback' => 'file_entity_usage_page',
+    'page arguments' => array(1),
+    'access callback' => 'file_entity_access',
+    'access arguments' => array('update', 1),
+    'type' => MENU_LOCAL_TASK,
+    'context' => MENU_CONTEXT_PAGE,
+    'file' => 'file_entity.pages.inc',
+  );
+  $items['file/%file/download'] = array(
+    'title' => 'Download',
+    'page callback' => 'file_entity_download_page',
+    'page arguments' => array(1),
+    'access callback' => 'file_entity_access',
+    'access arguments' => array('download', 1),
+    'file' => 'file_entity.pages.inc',
+    'type' => MENU_CALLBACK,
+  );
+  $items['file/%file/edit'] = array(
+    'title' => 'Edit',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('file_entity_edit', 1),
+    'access callback' => 'file_entity_access',
+    'access arguments' => array('update', 1),
+    'weight' => 0,
+    'type' => MENU_LOCAL_TASK,
+    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
+    'file' => 'file_entity.pages.inc',
+  );
+  $items['file/%file/delete'] = array(
+    'title' => 'Delete',
+    'page callback' => 'drupal_get_form',
+    'page arguments'  => array('file_entity_delete_form', 1),
+    'access callback' => 'file_entity_access',
+    'access arguments' => array('delete', 1),
+    'weight' => 1,
+    'type' => MENU_LOCAL_TASK,
+    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
+    'file' => 'file_entity.pages.inc',
+  );
+
+  // Attach a "Manage file display" tab to each file type in the same way that
+  // Field UI attaches "Manage fields" and "Manage display" tabs. Note that
+  // Field UI does not have to be enabled; we're just using the same IA pattern
+  // here for attaching the "Manage file display" page.
+  $entity_info = entity_get_info('file');
+  foreach ($entity_info['bundles'] as $file_type => $bundle_info) {
+    if (isset($bundle_info['admin'])) {
+      // Get the base path and access.
+      $path = $bundle_info['admin']['path'];
+      $access = array_intersect_key($bundle_info['admin'], drupal_map_assoc(array('access callback', 'access arguments')));
+      $access += array(
+        'access callback' => 'user_access',
+        'access arguments' => array('administer file types'),
+      );
+
+      // The file type must be passed to the page callbacks. It might be
+      // configured as a wildcard (multiple file types sharing the same menu
+      // router path).
+      $file_type_argument = isset($bundle_info['admin']['bundle argument']) ? $bundle_info['admin']['bundle argument'] : $file_type;
+
+      $items[$path] = array(
+        'title' => 'Edit file type',
+        'title callback' => 'file_entity_type_get_name',
+        'title arguments' => array(4),
+        'page callback' => 'drupal_get_form',
+        'page arguments' => array('file_entity_file_type_form', $file_type_argument),
+        'file' => 'file_entity.admin.inc',
+      ) + $access;
+
+      // Add the 'File type settings' tab.
+      $items["$path/edit"] = array(
+        'title' => 'Edit',
+        'type' => MENU_DEFAULT_LOCAL_TASK,
+      );
+
+      // Add the 'Manage file display' tab.
+      $items["$path/file-display"] = array(
+        'title' => 'Manage file display',
+        'page callback' => 'drupal_get_form',
+        'page arguments' => array('file_entity_file_display_form', $file_type_argument, 'default'),
+        'type' => MENU_LOCAL_TASK,
+        'weight' => 3,
+        'file' => 'file_entity.admin.inc',
+      ) + $access;
+
+      // Add a secondary tab for each view mode.
+      $weight = 0;
+      $view_modes = array('default' => array('label' => t('Default'))) + $entity_info['view modes'];
+      foreach ($view_modes as $view_mode => $view_mode_info) {
+        $items["$path/file-display/$view_mode"] = array(
+          'title' => $view_mode_info['label'],
+          'page arguments' => array('file_entity_file_display_form', $file_type_argument, $view_mode),
+          'type' => ($view_mode == 'default' ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK),
+          'weight' => ($view_mode == 'default' ? -10 : $weight++),
+          'file' => 'file_entity.admin.inc',
+          // View modes for which the 'custom settings' flag isn't TRUE are
+          // disabled via this access callback. This needs to extend, rather
+          // than override normal $access rules.
+          'access callback' => '_file_entity_view_mode_menu_access',
+          'access arguments' => array_merge(array($file_type_argument, $view_mode, $access['access callback']), $access['access arguments']),
+        );
+      }
+    }
+  }
+
+  $items['admin/config/media/file-settings'] = array(
+    'title' => 'File settings',
+    'description' => 'Configure allowed file extensions, default alt and title sources, and the file upload wizard.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('file_entity_settings_form'),
+    'access arguments' => array('administer site configuration'),
+    'file' => 'file_entity.admin.inc',
+  );
+
+  // Optional devel module integration
+  if (module_exists('devel')) {
+    $items['file/%file/devel'] = array(
+      'title' => 'Devel',
+      'page callback' => 'devel_load_object',
+      'page arguments' => array('file', 1),
+      'access arguments' => array('access devel information'),
+      'type' => MENU_LOCAL_TASK,
+      'file' => 'devel.pages.inc',
+      'file path' => drupal_get_path('module', 'devel'),
+      'weight' => 100,
+    );
+    $items['file/%file/devel/load'] = array(
+      'title' => 'Load',
+      'type' => MENU_DEFAULT_LOCAL_TASK,
+    );
+    $items['file/%file/devel/render'] = array(
+      'title' => 'Render',
+      'page callback' => 'devel_render_object',
+      'page arguments' => array('file', 1),
+      'access arguments' => array('access devel information'),
+      'file' => 'devel.pages.inc',
+      'file path' => drupal_get_path('module', 'devel'),
+      'type' => MENU_LOCAL_TASK,
+      'weight' => 100,
+    );
+    if (module_exists('token')) {
+      $items['file/%file/devel/token'] = array(
+        'title' => 'Tokens',
+        'page callback' => 'token_devel_token_object',
+        'page arguments' => array('file', 1),
+        'access arguments' => array('access devel information'),
+        'type' => MENU_LOCAL_TASK,
+        'file' => 'token.pages.inc',
+        'file path' => drupal_get_path('module', 'token'),
+        'weight' => 5,
+      );
+    }
+  }
+
+  return $items;
+}
+
+/**
+ * Implements hook_menu_local_tasks_alter().
+ */
+function file_entity_menu_local_tasks_alter(&$data, $router_item, $root_path) {
+  // Add action link to 'file/add' on 'admin/content/file' page.
+  if ($root_path == 'admin/content/file') {
+    $item = menu_get_item('file/add');
+    if (!empty($item['access'])) {
+      $data['actions']['output'][] = array(
+        '#theme' => 'menu_local_action',
+        '#link' => $item,
+        '#weight' => $item['weight'],
+      );
+    }
+  }
+}
+
+/**
+ * Implement hook_permission().
+ */
+function file_entity_permission() {
+  $permissions = array(
+    'bypass file access' => array(
+      'title' => t('Bypass file access control'),
+      'description' => t('View, edit and delete all files regardless of permission restrictions.'),
+      'restrict access' => TRUE,
+    ),
+    'administer file types' => array(
+      'title' => t('Administer file types'),
+      'restrict access' => TRUE,
+    ),
+    'administer files' => array(
+      'title' => t('Administer files'),
+      'restrict access' => TRUE,
+    ),
+    'create files' => array(
+      'title' => t('Add and upload new files'),
+    ),
+    'view own private files' => array(
+      'title' => t('View own private files'),
+    ),
+    'view own files' => array(
+      'title' => t('View own files'),
+    ),
+    'view private files' => array(
+      'title' => t('View private files'),
+      'restrict access' => TRUE,
+    ),
+    'view files' => array(
+      'title' => t('View files'),
+    ),
+  );
+
+  // Add description for the 'View file details' and 'View own private file
+  // details' permissions to show which stream wrappers they apply to.
+  $wrappers = file_entity_get_public_and_private_stream_wrapper_names();
+  $wrappers += array('public' => array(t('None')), 'private' => array(t('None')));
+
+  $permissions['view files']['description'] = t('Includes the following stream wrappers: %wrappers.', array('%wrappers' => implode(', ', $wrappers['public'])));
+  $permissions['view own private files']['description'] = t('Includes the following stream wrappers: %wrappers.', array('%wrappers' => implode(', ', $wrappers['private'])));
+
+  // Generate standard file permissions for all applicable file types.
+  foreach (file_entity_permissions_get_configured_types() as $type) {
+    $permissions += file_entity_list_permissions($type);
+  }
+
+  return $permissions;
+}
+
+/*
+ * Implements hook_cron_queue_info().
+ */
+function file_entity_cron_queue_info() {
+  $queues['file_entity_type_determine'] = array(
+    'worker callback' => 'file_entity_type_determine',
+  );
+  return $queues;
+}
+
+/*
+ * Determines file type for a given file ID and saves the file.
+ *
+ * @param $fid
+ *   A file ID.
+ */
+function file_entity_type_determine($fid) {
+  if ($file = file_load($fid)) {
+    // The file type will be automatically determined when saving the file.
+    file_save($file);
+  }
+}
+
+/**
+ * Gather the rankings from the the hook_ranking implementations.
+ *
+ * @param $query
+ *   A query object that has been extended with the Search DB Extender.
+ */
+function _file_entity_rankings(SelectQueryExtender $query) {
+  if ($ranking = module_invoke_all('file_ranking')) {
+    $tables = &$query->getTables();
+    foreach ($ranking as $rank => $values) {
+      if ($file_rank = variable_get('file_entity_rank_' . $rank, 0)) {
+        // If the table defined in the ranking isn't already joined, then add it.
+        if (isset($values['join']) && !isset($tables[$values['join']['alias']])) {
+          $query->addJoin($values['join']['type'], $values['join']['table'], $values['join']['alias'], $values['join']['on']);
+        }
+        $arguments = isset($values['arguments']) ? $values['arguments'] : array();
+        $query->addScore($values['score'], $arguments, $file_rank);
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_search_info().
+ */
+function file_entity_search_info() {
+  return array(
+    'title' => 'Files',
+    'path' => 'file',
+  );
+}
+
+/**
+ * Implements hook_search_access().
+ */
+function file_entity_search_access() {
+  return user_access('view own private files') || user_access('view own files') || user_access('view private files') || user_access('view files');
+}
+
+/**
+ * Implements hook_search_reset().
+ */
+function file_entity_search_reset() {
+  db_update('search_dataset')
+    ->fields(array('reindex' => REQUEST_TIME))
+    ->condition('type', 'file')
+    ->execute();
+}
+
+/**
+ * Implements hook_search_status().
+ */
+function file_entity_search_status() {
+  $total = db_query('SELECT COUNT(*) FROM {file_managed}')->fetchField();
+  $remaining = db_query("SELECT COUNT(*) FROM {file_managed} fm LEFT JOIN {search_dataset} d ON d.type = 'file' AND d.sid = fm.fid WHERE d.sid IS NULL OR d.reindex <> 0")->fetchField();
+  return array('remaining' => $remaining, 'total' => $total);
+}
+
+/**
+ * Implements hook_search_admin().
+ */
+function file_entity_search_admin() {
+  // Output form for defining rank factor weights.
+  $form['file_ranking'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('File ranking'),
+  );
+  $form['file_ranking']['#theme'] = 'file_entity_search_admin';
+  $form['file_ranking']['info'] = array(
+    '#value' => '<em>' . t('The following numbers control which properties the file search should favor when ordering the results. Higher numbers mean more influence, zero means the property is ignored. Changing these numbers does not require the search index to be rebuilt. Changes take effect immediately.') . '</em>'
+  );
+
+  // Note: reversed to reflect that higher number = higher ranking.
+  $options = drupal_map_assoc(range(0, 10));
+  foreach (module_invoke_all('file_ranking') as $var => $values) {
+    $form['file_ranking']['factors']['file_entity_rank_' . $var] = array(
+      '#title' => $values['title'],
+      '#type' => 'select',
+      '#options' => $options,
+      '#default_value' => variable_get('file_entity_rank_' . $var, 0),
+    );
+  }
+  return $form;
+}
+
+/**
+ * Implements hook_search_execute().
+ */
+function file_entity_search_execute($keys = NULL, $conditions = NULL) {
+  global $user;
+
+  // Build matching conditions
+  $query = db_select('search_index', 'i', array('target' => 'slave'))->extend('SearchQuery')->extend('PagerDefault');
+  $query->join('file_managed', 'fm', 'fm.fid = i.sid');
+  $query->searchExpression($keys, 'file');
+
+  // Insert special keywords.
+  $query->setOption('type', 'fm.type');
+  if ($query->setOption('term', 'ti.tid')) {
+    $query->join('taxonomy_index', 'ti', 'fm.fid = ti.fid');
+  }
+  // Only continue if the first pass query matches.
+  if (!$query->executeFirstPass()) {
+    return array();
+  }
+
+  // Add the ranking expressions.
+  _file_entity_rankings($query);
+
+  // Load results.
+  $find = $query
+    ->limit(10)
+    ->addTag('file_access')
+    ->execute();
+  $results = array();
+  foreach ($find as $item) {
+    // Render the file.
+    $file = file_load($item->sid);
+    $build = file_view($file, 'search_result');
+    unset($build['#theme']);
+    $file->rendered = drupal_render($build);
+
+    $extra = module_invoke_all('file_entity_search_result', $file);
+
+    $types = file_entity_type_get_names();
+
+    $uri = entity_uri('file', $file);
+    $results[] = array(
+      'link' => url($uri['path'], array_merge($uri['options'], array('absolute' => TRUE))),
+      'type' => check_plain($types[$file->type]),
+      'title' => $file->filename,
+      'user' => theme('username', array('account' => user_load($file->uid))),
+      'date' => $file->timestamp,
+      'file' => $file,
+      'extra' => $extra,
+      'score' => $item->calculated_score,
+      'snippet' => search_excerpt($keys, $file->rendered),
+      'language' => function_exists('entity_language') ? entity_language('file', $file) : NULL,
+    );
+  }
+  return $results;
+}
+
+/**
+ * Implements hook_file_ranking().
+ */
+function file_entity_file_ranking() {
+  // Create the ranking array and add the basic ranking options.
+  $ranking = array(
+    'relevance' => array(
+      'title' => t('Keyword relevance'),
+      // Average relevance values hover around 0.15
+      'score' => 'i.relevance',
+    ),
+  );
+
+  // Add relevance based on creation date.
+  if ($file_cron_last = variable_get('file_entity_cron_last', 0)) {
+    $ranking['timestamp'] = array(
+      'title' => t('Recently posted'),
+      // Exponential decay with half-life of 6 months, starting at last indexed file
+      'score' => 'POW(2.0, (fm.timestamp - :file_cron_last) * 6.43e-8)',
+      'arguments' => array(':file_cron_last' => $file_cron_last),
+    );
+  }
+  return $ranking;
+}
+
+/**
+ * Returns HTML for the file ranking part of the search settings admin page.
+ *
+ * @param $variables
+ *   An associative array containing:
+ *   - form: A render element representing the form.
+ *
+ * @ingroup themeable
+ */
+function theme_file_entity_search_admin($variables) {
+  $form = $variables['form'];
+
+  $output = drupal_render($form['info']);
+
+  $header = array(t('Factor'), t('Weight'));
+  foreach (element_children($form['factors']) as $key) {
+    $row = array();
+    $row[] = $form['factors'][$key]['#title'];
+    $form['factors'][$key]['#title_display'] = 'invisible';
+    $row[] = drupal_render($form['factors'][$key]);
+    $rows[] = $row;
+  }
+  $output .= theme('table', array('header' => $header, 'rows' => $rows));
+
+  $output .= drupal_render_children($form);
+  return $output;
+}
+
+/**
+ * Implements hook_update_index().
+ */
+function file_entity_update_index() {
+  $limit = (int)variable_get('search_cron_limit', 100);
+
+  $result = db_query_range("SELECT fm.fid FROM {file_managed} fm LEFT JOIN {search_dataset} d ON d.type = 'file' AND d.sid = fm.fid WHERE d.sid IS NULL OR d.reindex <> 0 ORDER BY d.reindex ASC, fm.fid ASC", 0, $limit, array(), array('target' => 'slave'));
+
+  foreach ($result as $file) {
+    _file_entity_index_file($file);
+  }
+}
+
+/**
+ * Index a single file.
+ *
+ * @param $file
+ *   The file to index.
+ */
+function _file_entity_index_file($file) {
+  $file = file_load($file->fid);
+
+  // Save the creation time of the most recent indexed file, for the search
+  // results half-life calculation.
+  variable_set('file_entity_cron_last', $file->timestamp);
+
+  // Render the file.
+  $build = file_view($file, 'search_index');
+  unset($build['#theme']);
+  $file->rendered = drupal_render($build);
+
+  $text = '<h1>' . check_plain($file->filename) . '</h1>' . $file->rendered;
+
+  // Fetch extra data normally not visible
+  $extra = module_invoke_all('file_entity_update_index', $file);
+  foreach ($extra as $t) {
+    $text .= $t;
+  }
+
+  // Update index
+  search_index($file->fid, 'file', $text);
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function file_entity_form_search_form_alter(&$form, $form_state) {
+  if (isset($form['module']) && $form['module']['#value'] == 'file_entity' && user_access('use advanced search')) {
+    // Keyword boxes:
+    $form['advanced'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('Advanced search'),
+      '#collapsible' => TRUE,
+      '#collapsed' => TRUE,
+      '#attributes' => array('class' => array('search-advanced')),
+    );
+    $form['advanced']['keywords'] = array(
+      '#prefix' => '<div class="criterion">',
+      '#suffix' => '</div>',
+    );
+    $form['advanced']['keywords']['or'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Containing any of the words'),
+      '#size' => 30,
+      '#maxlength' => 255,
+    );
+    $form['advanced']['keywords']['phrase'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Containing the phrase'),
+      '#size' => 30,
+      '#maxlength' => 255,
+    );
+    $form['advanced']['keywords']['negative'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Containing none of the words'),
+      '#size' => 30,
+      '#maxlength' => 255,
+    );
+
+    // File types:
+    $types = array_map('check_plain', file_entity_type_get_names());
+    $form['advanced']['type'] = array(
+      '#type' => 'checkboxes',
+      '#title' => t('Only of the type(s)'),
+      '#prefix' => '<div class="criterion">',
+      '#suffix' => '</div>',
+      '#options' => $types,
+    );
+    $form['advanced']['submit'] = array(
+      '#type' => 'submit',
+      '#value' => t('Advanced search'),
+      '#prefix' => '<div class="action">',
+      '#suffix' => '</div>',
+      '#weight' => 100,
+    );
+
+    $form['#validate'][] = 'file_entity_search_validate';
+  }
+}
+
+/**
+ * Form API callback for the search form. Registered in file_entity_form_alter().
+ */
+function file_entity_search_validate($form, &$form_state) {
+  // Initialize using any existing basic search keywords.
+  $keys = $form_state['values']['processed_keys'];
+
+  // Insert extra restrictions into the search keywords string.
+  if (isset($form_state['values']['type']) && is_array($form_state['values']['type'])) {
+    // Retrieve selected types - Form API sets the value of unselected
+    // checkboxes to 0.
+    $form_state['values']['type'] = array_filter($form_state['values']['type']);
+    if (count($form_state['values']['type'])) {
+      $keys = search_expression_insert($keys, 'type', implode(',', array_keys($form_state['values']['type'])));
+    }
+  }
+
+  if (isset($form_state['values']['term']) && is_array($form_state['values']['term']) && count($form_state['values']['term'])) {
+    $keys = search_expression_insert($keys, 'term', implode(',', $form_state['values']['term']));
+  }
+  if ($form_state['values']['or'] != '') {
+    if (preg_match_all('/ ("[^"]+"|[^" ]+)/i', ' ' . $form_state['values']['or'], $matches)) {
+      $keys .= ' ' . implode(' OR ', $matches[1]);
+    }
+  }
+  if ($form_state['values']['negative'] != '') {
+    if (preg_match_all('/ ("[^"]+"|[^" ]+)/i', ' ' . $form_state['values']['negative'], $matches)) {
+      $keys .= ' -' . implode(' -', $matches[1]);
+    }
+  }
+  if ($form_state['values']['phrase'] != '') {
+    $keys .= ' "' . str_replace('"', ' ', $form_state['values']['phrase']) . '"';
+  }
+  if (!empty($keys)) {
+    form_set_value($form['basic']['processed_keys'], trim($keys), $form_state);
+  }
+}
+
+/**
+ * Implements hook_admin_paths().
+ */
+function file_entity_admin_paths() {
+  $paths = array(
+    'file/add' => TRUE,
+    'file/add/*' => TRUE,
+    'file/*/edit' => TRUE,
+    'file/*/usage' => TRUE,
+    'file/*/delete' => TRUE,
+  );
+  return $paths;
+}
+
+/**
+ * Implements hook_action_info_alter().
+ */
+function file_entity_action_info_alter(&$actions) {
+  if (module_exists('pathauto')) {
+    $actions['pathauto_file_update_action'] = array(
+      'type' => 'file',
+      'label' => t('Update file alias'),
+      'configurable' => FALSE,
+    );
+  }
+}
+
+/**
+ * Implements hook_theme().
+ */
+function file_entity_theme() {
+  return array(
+    'file_entity' => array(
+      'render element' => 'elements',
+      'template' => 'file_entity',
+    ),
+    'file_entity_search_admin' => array(
+      'render element' => 'form',
+    ),
+    'file_entity_file_type_overview' => array(
+      'variables' => array('label' => NULL, 'description' => NULL),
+      'file' => 'file_entity.admin.inc',
+    ),
+    'file_entity_file_display_order' => array(
+      'render element' => 'element',
+      'file' => 'file_entity.admin.inc',
+    ),
+    'file_entity_file_link' => array(
+      'variables' => array('file' => NULL, 'icon_directory' => NULL),
+      'file' => 'file_entity.theme.inc',
+    ),
+    'file_entity_download_link' => array(
+      'variables' => array('file' => NULL, 'icon_directory' => NULL, 'text' => NULL),
+      'file' => 'file_entity.theme.inc',
+    ),
+    'file_entity_file_audio' => array(
+      'variables' => array(
+        'files' => array(),
+        'controls' => TRUE,
+        'autoplay' => FALSE,
+        'loop' => FALSE,
+      ),
+      'file' => 'file_entity.theme.inc',
+    ),
+    'file_entity_file_video' => array(
+      'variables' => array(
+        'files' => array(),
+        'controls' => TRUE,
+        'autoplay' => FALSE,
+        'loop' => FALSE,
+        'muted' => FALSE,
+        'width' => NULL,
+        'height' => NULL,
+      ),
+      'file' => 'file_entity.theme.inc',
+    ),
+  );
+}
+
+/**
+ * Implements hook_entity_info_alter().
+ *
+ * Extends the core file entity to be fieldable. The file type is used as the
+ * bundle key. File types are implemented as CTools exportables, so modules can
+ * define default file types via hook_file_default_types(), and the
+ * administrator can override the default types or add custom ones via
+ * admin/structure/file-types.
+ */
+function file_entity_entity_info_alter(&$entity_info) {
+  $entity_info['file']['fieldable'] = TRUE;
+  $entity_info['file']['entity keys']['bundle'] = 'type';
+  $entity_info['file']['bundle keys']['bundle'] = 'type';
+  $entity_info['file']['bundles'] = array();
+  $entity_info['file']['uri callback'] = 'file_entity_uri';
+  $entity_info['file']['view modes']['teaser'] = array(
+    'label' => t('Teaser'),
+    'custom settings' => TRUE,
+  );
+  $entity_info['file']['view modes']['full'] = array(
+    'label' => t('Full content'),
+    'custom settings' => FALSE,
+  );
+  $entity_info['file']['view modes']['preview'] = array(
+    'label' => t('Preview'),
+    'custom settings' => TRUE,
+  );
+  $entity_info['file']['view modes']['rss'] = array(
+    'label' => t('RSS'),
+    'custom settings' => FALSE,
+  );
+
+  // Search integration is provided by file_entity.module, so search-related
+  // view modes for files are defined here and not in search.module.
+  if (module_exists('search')) {
+    $entity_info['file']['view modes']['search_index'] = array(
+      'label' => t('Search index'),
+      'custom settings' => FALSE,
+    );
+    $entity_info['file']['view modes']['search_result'] = array(
+      'label' => t('Search result'),
+      'custom settings' => FALSE,
+    );
+  }
+
+  foreach (file_type_get_enabled_types() as $type) {
+    $entity_info['file']['bundles'][$type->type] = array(
+      'label' => $type->label,
+      'admin' => array(
+        'path' => 'admin/structure/file-types/manage/%file_type',
+        'real path' => 'admin/structure/file-types/manage/' . $type->type,
+        'bundle argument' => 4,
+      ),
+    );
+  }
+
+  // Enable Metatag support.
+  $entity_info['file']['metatags'] = TRUE;
+
+  // Ensure some of the Entity API callbacks are supported.
+  $entity_info['file']['creation callback'] = 'entity_metadata_create_object';
+  $entity_info['file']['view callback'] = 'file_view_multiple';
+  $entity_info['file']['edit callback'] = 'file_entity_metadata_form_file';
+  $entity_info['file']['access callback'] = 'file_entity_access';
+
+  // Add integration with the Title module for file name replacement support.
+  $entity_info['file']['field replacement'] = array(
+    'filename' => array(
+      'field' => array(
+        'type' => 'text',
+        'cardinality' => 1,
+        'translatable' => TRUE,
+      ),
+      'instance' => array(
+        'label' => t('File name'),
+        'description' => t('A field replacing file name.'),
+        'required' => TRUE,
+        'settings' => array(
+          'text_processing' => 0,
+        ),
+        'widget' => array(
+          'weight' => -5,
+        ),
+        'display' => array(
+          'default' => array(
+            'type' => 'hidden',
+          ),
+        ),
+      ),
+      'preprocess_key' => 'filename',
+    ),
+  );
+}
+
+/**
+ * Implements hook_entity_property_info().
+ */
+function file_entity_entity_property_info() {
+  $info['file']['properties']['type'] = array(
+    'label' => t('File type'),
+    'type' => 'token',
+    'description' => t('The type of the file.'),
+    'setter callback' => 'entity_property_verbatim_set',
+    'setter permission' => 'administer files',
+    'options list' => 'file_entity_type_get_names',
+    'required' => TRUE,
+    'schema field' => 'type',
+  );
+
+  return $info;
+}
+
+/**
+ * Implements hook_field_display_ENTITY_TYPE_alter().
+ */
+function file_entity_field_display_file_alter(&$display, $context) {
+  // Hide field labels in search index.
+  if ($context['view_mode'] == 'search_index') {
+    $display['label'] = 'hidden';
+  }
+}
+
+/**
+ * URI callback for file entities.
+ */
+function file_entity_uri($file) {
+  $uri['path'] = 'file/' . $file->fid;
+  return $uri;
+}
+
+/**
+ * Entity API callback to get the form of a file entity.
+ */
+function file_entity_metadata_form_file($file) {
+  // Pre-populate the form-state with the right form include.
+  $form_state['build_info']['args'] = array($file);
+  form_load_include($form_state, 'inc', 'file_entity', 'file_entity.pages');
+  return drupal_build_form('file_entity_edit', $form_state);
+}
+
+/**
+ * Implements hook_ctools_plugin_directory().
+ */
+
+function file_entity_ctools_plugin_directory($module, $type) {
+  if ($module == 'ctools' && $type == 'content_types') {
+    return 'plugins/' . $type;
+  }
+}
+
+/**
+ * Implements hook_field_extra_fields().
+ *
+ * Adds 'file' as an extra field, so that its display and form component can be
+ * weighted relative to the fields that are added to file entity bundles.
+ */
+function file_entity_field_extra_fields() {
+  $info = array();
+
+  if ($file_type_names = file_entity_type_get_names()) {
+    foreach ($file_type_names as $type => $name) {
+      $info['file'][$type]['form']['filename'] = array(
+        'label' => t('File name'),
+        'description' => t('File name'),
+        'weight' => -10,
+      );
+      $info['file'][$type]['form']['preview'] = array(
+        'label' => t('File'),
+        'description' => t('File preview'),
+        'weight' => -5,
+      );
+      $info['file'][$type]['display']['file'] = array(
+        'label' => t('File'),
+        'description' => t('File display'),
+        'weight' => 0,
+      );
+    }
+  }
+
+  return $info;
+}
+
+/**
+ * Implements hook_file_formatter_info().
+ */
+function file_entity_file_formatter_info() {
+  $formatters = array();
+
+  // Allow file field formatters to be reused for displaying the file entity's
+  // file pseudo-field.
+  foreach (field_info_formatter_types() as $key => $formatter) {
+    if (array_intersect($formatter['field types'], array('file', 'image'))) {
+      $key = 'file_field_' . $key;
+      $formatters[$key] = array(
+        'label' => $formatter['label'],
+        'description' => !empty($formatter['description']) ? $formatter['description'] : '',
+        'view callback' => 'file_entity_file_formatter_file_field_view',
+      );
+      if (!empty($formatter['settings'])) {
+        $formatters[$key] += array(
+          'default settings' => $formatter['settings'],
+          'settings callback' => 'file_entity_file_formatter_file_field_settings',
+        );
+      }
+      if (!empty($formatter['file formatter'])) {
+        $formatters[$key] += $formatter['file formatter'];
+      }
+    }
+  }
+
+  // Add a simple file formatter for displaying an image in a chosen style.
+  if (module_exists('image')) {
+    $formatters['file_image'] = array(
+      'label' => t('Image'),
+      'default settings' => array(
+        'image_style' => '',
+        'alt' => '[file:field_file_image_alt_text]',
+        'title' => '[file:field_file_image_title_text]'
+      ),
+      'view callback' => 'file_entity_file_formatter_file_image_view',
+      'settings callback' => 'file_entity_file_formatter_file_image_settings',
+      'hidden' => TRUE,
+      'mime types' => array('image/*'),
+    );
+  }
+
+  return $formatters;
+}
+
+/**
+ * Implements hook_file_formatter_FORMATTER_view().
+ *
+ * This function provides a bridge to the field formatter API, so that file
+ * field formatters can be reused for displaying the file entity's file
+ * pseudo-field.
+ */
+function file_entity_file_formatter_file_field_view($file, $display, $langcode) {
+  if (strpos($display['type'], 'file_field_') === 0) {
+    $field_formatter_type = substr($display['type'], strlen('file_field_'));
+    $field_formatter_info = field_info_formatter_types($field_formatter_type);
+    if (isset($field_formatter_info['module'])) {
+      // Set $display['type'] to what hook_field_formatter_*() expects.
+      $display['type'] = $field_formatter_type;
+
+      // Set $items to what file field formatters expect. See file_field_load(),
+      // and note that, here, $file is already a fully loaded entity.
+      $items = array((array) $file);
+
+      // Invoke hook_field_formatter_prepare_view() and
+      // hook_field_formatter_view(). Note that we are reusing field formatter
+      // functions, but we are not displaying a Field API field, so we set
+      // $field and $instance accordingly, and do not invoke
+      // hook_field_prepare_view(). This assumes that the formatter functions do
+      // not rely on $field or $instance. A module that implements formatter
+      // functions that rely on $field or $instance (and therefore, can only be
+      // used for real fields) can prevent this formatter from being used on the
+      // pseudo-field by removing it within hook_file_formatter_info_alter().
+      $field = $instance = NULL;
+      if (($function = ($field_formatter_info['module'] . '_field_formatter_prepare_view')) && function_exists($function)) {
+        $fid = $file->fid;
+        // hook_field_formatter_prepare_view() alters $items by reference.
+        $grouped_items = array($fid => &$items);
+        $function('file', array($fid => $file), $field, array($fid => $instance), $langcode, $grouped_items, array($fid => $display));
+      }
+      if (($function = ($field_formatter_info['module'] . '_field_formatter_view')) && function_exists($function)) {
+        $element = $function('file', $file, $field, $instance, $langcode, $items, $display);
+        // We passed the file as $items[0], so return the corresponding element.
+        if (isset($element[0])) {
+          return $element[0];
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_file_formatter_FORMATTER_settings().
+ *
+ * This function provides a bridge to the field formatter API, so that file
+ * field formatters can be reused for displaying the file entity's file
+ * pseudo-field.
+ */
+function file_entity_file_formatter_file_field_settings($form, &$form_state, $settings, $formatter_type, $file_type, $view_mode) {
+  if (strpos($formatter_type, 'file_field_') === 0) {
+    $field_formatter_type = substr($formatter_type, strlen('file_field_'));
+    $field_formatter_info = field_info_formatter_types($field_formatter_type);
+
+    // Invoke hook_field_formatter_settings_form(). We are reusing field
+    // formatter functions, but we are not working with a Field API field, so
+    // set $field accordingly. Unfortunately, the API is for $settings to be
+    // transfered via the $instance parameter, so we must mock it.
+    if (isset($field_formatter_info['module']) && ($function = ($field_formatter_info['module'] . '_field_formatter_settings_form')) && function_exists($function)) {
+      $field = NULL;
+      $mock_instance = array(
+        'display' => array(
+          $view_mode => array(
+            'type' => $field_formatter_type,
+            'settings' => $settings,
+          ),
+        ),
+        'entity_type' => 'file',
+        'bundle' => $file_type,
+      );
+      return $function($field, $mock_instance, $view_mode, $form, $form_state);
+    }
+  }
+}
+
+/**
+ * Implements hook_file_formatter_FORMATTER_view().
+ *
+ * Returns a drupal_render() array to display an image of the chosen style.
+ *
+ * This formatter is only capable of displaying local images. If the passed in
+ * file is either not local or not an image, nothing is returned, so that
+ * file_view_file() can try another formatter.
+ */
+function file_entity_file_formatter_file_image_view($file, $display, $langcode) {
+  // Prevent PHP notices when trying to read empty files.
+  // @see http://drupal.org/node/681042
+  if (!$file->filesize) {
+    return;
+  }
+
+  // Do not bother proceeding if this file does not have an image mime type.
+  if (file_entity_file_get_mimetype_type($file) != 'image') {
+    return;
+  }
+
+  if (file_entity_file_is_readable($file)) {
+    // We don't sanitize here.
+    // @see http://drupal.org/node/1553094#comment-6257382
+    // Theme function will take care of escaping.
+    if (!isset($file->metadata)) {
+      $file->metadata = array();
+    }
+    $file->metadata += array('width' => NULL, 'height' => NULL);
+    $replace_options = array(
+      'clear' => TRUE,
+      'sanitize' => FALSE,
+    );
+    if (!empty($display['settings']['image_style'])) {
+      $element = array(
+        '#theme' => 'image_style',
+        '#style_name' => $display['settings']['image_style'],
+        '#path' => $file->uri,
+        '#width' => isset($file->override['attributes']['width']) ? $file->override['attributes']['width'] : $file->metadata['width'],
+        '#height' => isset($file->override['attributes']['height']) ? $file->override['attributes']['height'] : $file->metadata['height'],
+        '#alt' => token_replace($display['settings']['alt'], array('file' => $file), $replace_options),
+        '#title' => token_replace($display['settings']['title'], array('file' => $file), $replace_options),
+      );
+    }
+    else {
+      $element = array(
+        '#theme' => 'image',
+        '#path' => $file->uri,
+        '#width' => isset($file->override['attributes']['width']) ? $file->override['attributes']['width'] : $file->metadata['width'],
+        '#height' => isset($file->override['attributes']['height']) ? $file->override['attributes']['height'] : $file->metadata['height'],
+        '#alt' => token_replace($display['settings']['alt'], array('file' => $file), $replace_options),
+        '#title' => token_replace($display['settings']['title'], array('file' => $file), $replace_options),
+      );
+    }
+    return $element;
+  }
+}
+
+/**
+ * Check if a file entity is readable or not.
+ *
+ * @param object $file
+ *   A file entity object from file_load().
+ *
+ * @return boolean
+ *   TRUE if the file is using a readable stream wrapper, or FALSE otherwise.
+ */
+function file_entity_file_is_readable($file) {
+  $scheme = file_uri_scheme($file->uri);
+  $wrappers = file_get_stream_wrappers(STREAM_WRAPPERS_READ);
+  return !empty($wrappers[$scheme]);
+}
+
+/**
+ * Implements hook_file_formatter_FORMATTER_settings().
+ *
+ * Returns form elements for configuring the 'file_image' formatter.
+ */
+function file_entity_file_formatter_file_image_settings($form, &$form_state, $settings) {
+  $element = array();
+  $element['image_style'] = array(
+    '#title' => t('Image style'),
+    '#type' => 'select',
+    '#options' => image_style_options(FALSE),
+    '#default_value' => $settings['image_style'],
+    '#empty_option' => t('None (original image)'),
+  );
+
+  // For image files we allow the alt attribute (required in HTML).
+  $element['alt'] = array(
+    '#title' => t('Alt attribute'),
+    '#description' => t('The text to use as value for the <em>img</em> tag <em>alt</em> attribute.'),
+    '#type' => 'textfield',
+    '#default_value' => $settings['alt'],
+  );
+
+  // Allow the setting of the title attribute.
+  $element['title'] = array(
+    '#title' => t('Title attribute'),
+    '#description' => t('The text to use as value for the <em>img</em> tag <em>title</em> attribute.'),
+    '#type' => 'textfield',
+    '#default_value' => $settings['title'],
+  );
+
+  if (module_exists('token')) {
+    $element['alt']['#description'] .= t('This field supports tokens.');
+    $element['title']['#description'] .= t('This field supports tokens.');
+    $element['tokens'] = array(
+      '#theme' => 'token_tree',
+      '#token_types' => array('file'),
+      '#dialog' => TRUE,
+    );
+  }
+
+  return $element;
+}
+
+/**
+ * Menu access callback for the 'view mode file display settings' pages.
+ *
+ * Based on _field_ui_view_mode_menu_access(), but the Field UI module might not
+ * be enabled.
+ */
+function _file_entity_view_mode_menu_access($file_type, $view_mode, $access_callback) {
+  // Deny access if the view mode isn't configured to use custom display
+  // settings.
+  $view_mode_settings = field_view_mode_settings('file', $file_type->type);
+  $visibility = ($view_mode == 'default') || !empty($view_mode_settings[$view_mode]['custom_settings']);
+  if (!$visibility) {
+    return FALSE;
+  }
+
+  // Otherwise, continue to an $access_callback check.
+  $args = array_slice(func_get_args(), 3);
+  $callback = empty($access_callback) ? 0 : trim($access_callback);
+  if (is_numeric($callback)) {
+    return (bool) $callback;
+  }
+  elseif (function_exists($access_callback)) {
+    return call_user_func_array($access_callback, $args);
+  }
+}
+
+/**
+ * Implements hook_modules_enabled().
+ */
+function file_entity_modules_enabled($modules) {
+  file_info_cache_clear();
+}
+
+/**
+ * Implements hook_modules_disabled().
+ */
+function file_entity_modules_disabled($modules) {
+  file_info_cache_clear();
+}
+
+/**
+ * Implements hook_views_api().
+ */
+function file_entity_views_api() {
+  return array(
+    'api' => 3,
+  );
+}
+
+/**
+ * Returns whether the current page is the full page view of the passed-in file.
+ *
+ * @param $file
+ *   A file object.
+ */
+function file_entity_is_page($file) {
+  $page_file = menu_get_object('file', 1);
+  return (!empty($page_file) ? $page_file->fid == $file->fid : FALSE);
+}
+
+/**
+ * Process variables for file_entity.tpl.php
+ *
+ * The $variables array contains the following arguments:
+ * - $file
+ * - $view_mode
+ *
+ * @see file_entity.tpl.php
+ */
+function template_preprocess_file_entity(&$variables) {
+  $view_mode = $variables['view_mode'] = $variables['elements']['#view_mode'];
+  $variables['file'] = $variables['elements']['#file'];
+  $file = $variables['file'];
+
+  $variables['id'] = drupal_html_id('file-'. $file->fid);
+  $variables['date']      = format_date($file->timestamp);
+  $account = user_load($file->uid);
+  $variables['name']      = theme('username', array('account' => $account));
+
+  $uri = entity_uri('file', $file);
+  $variables['file_url']  = url($uri['path'], $uri['options']);
+  $label = entity_label('file', $file);
+  $variables['label']     = check_plain($label);
+  $variables['page']      = $view_mode == 'full' && file_entity_is_page($file);
+
+  // Hide the file name from being displayed until we can figure out a better
+  // way to control this. We cannot simply not output the title since
+  // contextual links require $title_suffix to be output in the template.
+  // @see http://drupal.org/node/1245266
+  if (!$variables['page']) {
+    $variables['title_attributes_array']['class'][] = 'element-invisible';
+  }
+
+  // Flatten the file object's member fields.
+  $variables = array_merge((array) $file, $variables);
+
+  // Helpful $content variable for templates.
+  $variables += array('content' => array());
+  foreach (element_children($variables['elements']) as $key) {
+    $variables['content'][$key] = $variables['elements'][$key];
+  }
+
+  // Make the field variables available with the appropriate language.
+  field_attach_preprocess('file', $file, $variables['content'], $variables);
+
+  // Attach the file object to the content element.
+  $variables['content']['file']['#file'] = $file;
+
+  // Display post information only on certain file types.
+  if (variable_get('file_submitted_' . $file->type, FALSE)) {
+    $variables['display_submitted'] = TRUE;
+    $variables['submitted'] = t('Uploaded by !username on !datetime', array('!username' => $variables['name'], '!datetime' => $variables['date']));
+    $variables['user_picture'] = theme_get_setting('toggle_file_user_picture') ? theme('user_picture', array('account' => $account)) : '';
+  }
+  else {
+    $variables['display_submitted'] = FALSE;
+    $variables['submitted'] = '';
+    $variables['user_picture'] = '';
+  }
+
+  // Gather file classes.
+  $variables['classes_array'][] = drupal_html_class('file-' . $file->type);
+  $variables['classes_array'][] = drupal_html_class('file-' . $file->filemime);
+  if ($file->status != FILE_STATUS_PERMANENT) {
+    $variables['classes_array'][] = 'file-temporary';
+  }
+
+  // Change the 'file-entity' class into 'file'
+  if ($variables['classes_array'][0] == 'file-entity') {
+    $variables['classes_array'][0] = 'file';
+  }
+
+  // Clean up name so there are no underscores.
+  $variables['theme_hook_suggestions'][] = 'file__' . $file->type;
+  $variables['theme_hook_suggestions'][] = 'file__' . $file->type . '__' . $view_mode;
+  $variables['theme_hook_suggestions'][] = 'file__' . str_replace(array('/', '-'), array('__', '_'), $file->filemime);
+  $variables['theme_hook_suggestions'][] = 'file__' . str_replace(array('/', '-'), array('__', '_'), $file->filemime) . '__' . $view_mode;
+  $variables['theme_hook_suggestions'][] = 'file__' . $file->fid;
+  $variables['theme_hook_suggestions'][] = 'file__' . $file->fid . '__' . $view_mode;
+}
+
+/**
+ * Returns the file type name of the passed file or file type string.
+ *
+ * @param $file
+ *   A file object or string that indicates the file type to return.
+ *
+ * @return
+ *   The file type name or FALSE if the file type is not found.
+ */
+function file_entity_type_get_name($file) {
+  $type = is_object($file) ? $file->type : $file;
+  $info = entity_get_info('file');
+  return isset($info['bundles'][$type]['label']) ? $info['bundles'][$type]['label'] : FALSE;
+}
+
+/**
+ * Returns a list of available file type names.
+ *
+ * @return
+ *   An array of file type names, keyed by the type.
+ */
+function file_entity_type_get_names() {
+  $names = &drupal_static(__FUNCTION__);
+
+  if (!isset($names)) {
+    $info = entity_get_info('file');
+    foreach ($info['bundles'] as $bundle => $bundle_info) {
+      $names[$bundle] = $bundle_info['label'];
+    }
+  }
+
+  return $names;
+}
+
+/**
+ * Return an array of available view modes for file entities.
+ */
+function file_entity_view_mode_labels() {
+  $labels = &drupal_static(__FUNCTION__);
+
+  if (!isset($options)) {
+    $entity_info = entity_get_info('file');
+    $labels = array('default' => t('Default'));
+    foreach ($entity_info['view modes'] as $machine_name => $mode) {
+      $labels[$machine_name] = $mode['label'];
+    }
+  }
+
+  return $labels;
+}
+
+/**
+ * Return the label for a specific file entity view mode.
+ */
+function file_entity_view_mode_label($view_mode, $default = FALSE) {
+  $labels = file_entity_view_mode_labels();
+  return isset($labels[$view_mode]) ? $labels[$view_mode] : $default;
+}
+
+/**
+ * Helper function to get a list of hidden stream wrappers.
+ *
+ * This is used in several places to filter queries for media so that files in
+ * temporary:// don't show up.
+ */
+function file_entity_get_hidden_stream_wrappers() {
+  return array_diff_key(file_get_stream_wrappers(STREAM_WRAPPERS_ALL), file_get_stream_wrappers(STREAM_WRAPPERS_VISIBLE));
+}
+
+/**
+ * Return a specific stream wrapper's registry information.
+ *
+ * @param $scheme
+ *   A URI scheme, a stream is referenced as "scheme://target".
+ *
+ * @see file_get_stream_wrappers()
+ */
+function file_entity_get_stream_wrapper($scheme) {
+  $wrappers = file_get_stream_wrappers();
+  return isset($wrappers[$scheme]) ? $wrappers[$scheme] : FALSE;
+}
+
+/**
+ * Implements hook_stream_wrappers_alter().
+ */
+function file_entity_stream_wrappers_alter(&$wrappers) {
+  if (isset($wrappers['private'])) {
+    $wrappers['private']['private'] = TRUE;
+  }
+  if (isset($wrappers['temporary'])) {
+    $wrappers['temporary']['private'] = TRUE;
+  }
+}
+
+/**
+ * Implements hook_ctools_plugin_api().
+ */
+function file_entity_ctools_plugin_api($owner, $api) {
+  if ($owner == 'file_entity' && $api == 'file_type') {
+    return array('version' => 1);
+  }
+  if ($owner == 'file_entity' && $api == 'file_default_displays') {
+    return array('version' => 1);
+  }
+}
+
+/**
+ * @defgroup file_entity_access File access rights
+ * @{
+ * The file access system determines who can do what to which files.
+ *
+ * In determining access rights for a file, file_entity_access() first checks
+ * whether the user has the "bypass file access" permission. Such users have
+ * unrestricted access to all files. user 1 will always pass this check.
+ *
+ * Next, all implementations of hook_file_entity_access() will be called. Each
+ * implementation may explicitly allow, explicitly deny, or ignore the access
+ * request. If at least one module says to deny the request, it will be rejected.
+ * If no modules deny the request and at least one says to allow it, the request
+ * will be permitted.
+ *
+ * There is no access grant system for files.
+ *
+ * In file listings, the process above is followed except that
+ * hook_file_entity_access() is not called on each file for performance reasons
+ * and for proper functioning of the pager system. When adding a filelisting to
+ * your module, be sure to use a dynamic query created by db_select()
+ * and add a tag of "file_entity_access". This will allow modules dealing
+ * with file access to ensure only files to which the user has access
+ * are retrieved, through the use of hook_query_TAG_alter().
+ *
+ * Note: Even a single module returning FILE_ENTITY_ACCESS_DENY from
+ * hook_file_entity_access() will block access to the file. Therefore,
+ * implementers should take care to not deny access unless they really intend to.
+ * Unless a module wishes to actively deny access it should return
+ * FILE_ENTITY_ACCESS_IGNORE (or simply return nothing)
+ * to allow other modules to control access.
+ *
+ * Stream wrappers that are considered private should implement a 'private'
+ * flag equal to TRUE in hook_stream_wrappers().
+ */
+
+/**
+ * Determine if a user may perform the given operation on the specified file.
+ *
+ * @param $op
+ *   The operation to be performed on the file. Possible values are:
+ *   - "view"
+ *   - "download"
+ *   - "update"
+ *   - "delete"
+ *   - "create"
+ * @param $file
+ *   The file object on which the operation is to be performed, or file type
+ *   (e.g. 'image') for "create" operation.
+ * @param $account
+ *   Optional, a user object representing the user for whom the operation is to
+ *   be performed. Determines access for a user other than the current user.
+ *
+ * @return
+ *   TRUE if the operation may be performed, FALSE otherwise.
+ */
+function file_entity_access($op, $file = NULL, $account = NULL) {
+  $rights = &drupal_static(__FUNCTION__, array());
+
+  if (!$file && !in_array($op, array('view', 'download', 'update', 'delete', 'create'), TRUE)) {
+    // If there was no file to check against, and the $op was not one of the
+    // supported ones, we return access denied.
+    return FALSE;
+  }
+
+  // If no user object is supplied, the access check is for the current user.
+  if (empty($account)) {
+    $account = $GLOBALS['user'];
+  }
+
+  // $file may be either an object or a file type. Since file types cannot be
+  // an integer, use either fid or type as the static cache id.
+  $cache_id = is_object($file) ? $file->fid : $file;
+
+  // If we've already checked access for this file, user and op, return from
+  // cache.
+  if (isset($rights[$account->uid][$cache_id][$op])) {
+    return $rights[$account->uid][$cache_id][$op];
+  }
+
+  if (user_access('bypass file access', $account)) {
+    return $rights[$account->uid][$cache_id][$op] = TRUE;
+  }
+
+  // We grant access to the file if both of the following conditions are met:
+  // - No modules say to deny access.
+  // - At least one module says to grant access.
+  $access = module_invoke_all('file_entity_access', $op, $file, $account);
+  if (in_array(FILE_ENTITY_ACCESS_DENY, $access, TRUE)) {
+    return $rights[$account->uid][$cache_id][$op] = FALSE;
+  }
+  elseif (in_array(FILE_ENTITY_ACCESS_ALLOW, $access, TRUE)) {
+    return $rights[$account->uid][$cache_id][$op] = TRUE;
+  }
+
+
+  // Fall back to default behaviors on view.
+  if ($op == 'view' && is_object($file)) {
+    $scheme = file_uri_scheme($file->uri);
+    $wrapper = file_entity_get_stream_wrapper($scheme);
+
+    if (!empty($wrapper['private'])) {
+      // For private files, users can view private files if the
+      // user has the 'view private files' permission.
+      if (user_access('view private files', $account)) {
+        return $rights[$account->uid][$cache_id][$op] = TRUE;
+      }
+
+      // For private files, users can view their own private files if the
+      // user is not anonymous, and has the 'view own private files' permission.
+      if (!empty($account->uid) && $file->uid == $account->uid && user_access('view own private files', $account)) {
+        return $rights[$account->uid][$cache_id][$op] = TRUE;
+      }
+    }
+    elseif ($file->status == FILE_STATUS_PERMANENT && $file->uid == $account->uid && user_access('view own files', $account)) {
+      // For non-private files, allow to see if user owns the file.
+      return $rights[$account->uid][$cache_id][$op] = TRUE;
+    }
+    elseif ($file->status == FILE_STATUS_PERMANENT && user_access('view files', $account)) {
+      // For non-private files, users can view if they have the 'view files'
+      // permission.
+      return $rights[$account->uid][$cache_id][$op] = TRUE;
+    }
+  }
+
+  return FALSE;
+}
+
+/**
+ * Implements hook_file_entity_access().
+ */
+function file_entity_file_entity_access($op, $file, $account) {
+  // If the file URI is invalid, deny access.
+  if (is_object($file) && !file_valid_uri($file->uri)) {
+    return FILE_ENTITY_ACCESS_DENY;
+  }
+
+  if ($op == 'create') {
+    if (user_access('create files')) {
+      return FILE_ENTITY_ACCESS_ALLOW;
+    }
+  }
+
+  if (!empty($file)) {
+    $type = is_string($file) ? $file : $file->type;
+
+    if (in_array($type, file_entity_permissions_get_configured_types())) {
+      if ($op == 'download') {
+        if (user_access('download any ' . $type . ' files', $account) || is_object($file) && user_access('download own ' . $type . ' files', $account) && ($account->uid == $file->uid)) {
+          return FILE_ENTITY_ACCESS_ALLOW;
+        }
+      }
+
+      if ($op == 'update') {
+        if (user_access('edit any ' . $type . ' files', $account) || (is_object($file) && user_access('edit own ' . $type . ' files', $account) && ($account->uid == $file->uid))) {
+          return FILE_ENTITY_ACCESS_ALLOW;
+        }
+      }
+
+      if ($op == 'delete') {
+        if (user_access('delete any ' . $type . ' files', $account) || (is_object($file) && user_access('delete own ' . $type . ' files', $account) && ($account->uid == $file->uid))) {
+          return FILE_ENTITY_ACCESS_ALLOW;
+        }
+      }
+    }
+  }
+
+  return FILE_ENTITY_ACCESS_IGNORE;
+}
+
+/**
+ * Implements hook_query_TAG_alter().
+ *
+ * This is the hook_query_alter() for queries tagged with 'file_access'. It adds
+ * file access checks for the user account given by the 'account' meta-data (or
+ * global $user if not provided).
+ */
+function file_entity_query_file_access_alter(QueryAlterableInterface $query) {
+  _file_entity_query_file_entity_access_alter($query, 'file');
+}
+
+/**
+ * Implements hook_query_TAG_alter().
+ *
+ * This function implements the same functionality as
+ * file_entity_query_file_access_alter() for the SQL field storage engine. File
+ * access conditions are added for field values belonging to files only.
+ */
+function file_entity_query_entity_field_access_alter(QueryAlterableInterface $query) {
+  //_file_entity_query_file_entity_access_alter($query, 'entity');
+}
+
+/**
+ * Helper for file entity access functions.
+ *
+ * @param $query
+ *   The query to add conditions to.
+ * @param $type
+ *   Either 'file' or 'entity' depending on what sort of query it is. See
+ *   file_entity_query_file_entity_access_alter() and
+ *   file_entity_query_entity_field_access_alter() for more.
+ */
+function _file_entity_query_file_entity_access_alter($query, $type) {
+  global $user;
+
+  // Read meta-data from query, if provided.
+  if (!$account = $query->getMetaData('account')) {
+    $account = $user;
+  }
+
+  // If $account can bypass file access, we don't need to alter the query.
+  if (user_access('bypass file access', $account)) {
+    return;
+  }
+
+  $tables = $query->getTables();
+  $base_table = $query->getMetaData('base_table');
+  // If no base table is specified explicitly, search for one.
+  if (!$base_table) {
+    $fallback = '';
+    foreach ($tables as $alias => $table_info) {
+      if (!($table_info instanceof SelectQueryInterface)) {
+        $table = $table_info['table'];
+        // If the file_managed table is in the query, it wins immediately.
+        if ($table == 'file_managed') {
+          $base_table = $table;
+          break;
+        }
+        // Check whether the table has a foreign key to file_managed.fid. If it
+        // does, do not run this check again as we found a base table and only
+        // file_managed can triumph that.
+        if (!$base_table) {
+          // The schema is cached.
+          $schema = drupal_get_schema($table);
+          if (isset($schema['fields']['fid'])) {
+            if (isset($schema['foreign keys'])) {
+              foreach ($schema['foreign keys'] as $relation) {
+                if ($relation['table'] === 'file_managed' && $relation['columns'] === array('fid' => 'fid')) {
+                  $base_table = $table;
+                }
+              }
+            }
+            else {
+              // At least it's a fid. A table with a field called fid is very
+              // very likely to be a file_managed.fid in a file access query.
+              $fallback = $table;
+            }
+          }
+        }
+      }
+    }
+    // If there is nothing else, use the fallback.
+    if (!$base_table) {
+      if ($fallback) {
+        watchdog('security', 'Your file listing query is using @fallback as a base table in a query tagged for file access. This might not be secure and might not even work. Specify foreign keys in your schema to file_managed.fid ', array('@fallback' => $fallback), WATCHDOG_WARNING);
+        $base_table = $fallback;
+      }
+      else {
+        throw new Exception(t('Query tagged for file access but there is no fid. Add foreign keys to file_managed.fid in schema to fix.'));
+      }
+    }
+  }
+
+  if ($type == 'entity') {
+    // The original query looked something like:
+    // @code
+    //  SELECT fid FROM sometable s
+    //  WHERE ($file_access_conditions)
+    // @endcode
+    //
+    // Our query will look like:
+    // @code
+    //  SELECT entity_type, entity_id
+    //  FROM field_data_something s
+    //  WHERE (entity_type = 'file' AND $file_access_conditions) OR (entity_type <> 'file')
+    // @endcode
+    //
+    // So instead of directly adding to the query object, we need to collect
+    // all of the file access conditions in a separate db_and() object and
+    // then add it to the query at the end.
+    $file_conditions = db_and();
+  }
+  foreach ($tables as $falias => $tableinfo) {
+    $table = $tableinfo['table'];
+    if (!($table instanceof SelectQueryInterface) && $table == $base_table) {
+      $subquery = db_select('file_managed', 'fm_access')->fields('fm_access', array('fid'));
+      $subquery_conditions = db_or();
+
+      $wrappers = file_entity_get_public_and_private_stream_wrapper_names();
+      if (!empty($wrappers['public'])) {
+        if (user_access('view files', $account)) {
+          foreach (array_keys($wrappers['public']) as $wrapper) {
+            $subquery_conditions->condition('fm_access.uri', $wrapper . '%', 'LIKE');
+          }
+        }
+        elseif (user_access('view own files', $account)) {
+          foreach (array_keys($wrappers['public']) as $wrapper) {
+            $subquery_conditions->condition(db_and()
+              ->condition('fm_access.uri', $wrapper . '%', 'LIKE')
+              ->condition('fm_access.uid', $account->uid)
+            );
+          }
+        }
+      }
+      if (!empty($wrappers['private'])) {
+        if (user_access('view private files', $account)) {
+          foreach (array_keys($wrappers['private']) as $wrapper) {
+            $subquery_conditions->condition('fm_access.uri', $wrapper . '%', 'LIKE');
+          }
+        }
+        elseif (user_access('view own private files', $account)) {
+          foreach (array_keys($wrappers['private']) as $wrapper) {
+            $subquery_conditions->condition(db_and()
+              ->condition('fm_access.uri', $wrapper . '%', 'LIKE')
+              ->condition('fm_access.uid', $account->uid)
+            );
+          }
+        }
+      }
+
+      if ($subquery_conditions->count()) {
+        $subquery->condition($subquery_conditions);
+
+        $field = 'fid';
+        // Now handle entities.
+        if ($type == 'entity') {
+          // Set a common alias for entities.
+          $base_alias = $falias;
+          $field = 'entity_id';
+        }
+        $subquery->where("$falias.$field = fm_access.fid");
+
+        // For an entity query, attach the subquery to entity conditions.
+        if ($type == 'entity') {
+          $file_conditions->exists($subquery);
+        }
+        // Otherwise attach it to the node query itself.
+        else {
+          $query->exists($subquery);
+        }
+      }
+    }
+  }
+
+  if ($type == 'entity' && $file_conditions->count()) {
+    // All the file access conditions are only for field values belonging to
+    // files.
+    $file_conditions->condition("$base_alias.entity_type", 'file');
+    $or = db_or();
+    $or->condition($file_conditions);
+    // If the field value belongs to a non-file entity type then this function
+    // does not do anything with it.
+    $or->condition("$base_alias.entity_type", 'file', '<>');
+    // Add the compiled set of rules to the query.
+    $query->condition($or);
+  }
+}
+
+/**
+ * Implements hook_file_download().
+ */
+function file_entity_file_download($uri) {
+  // Load the file from the URI.
+  $file = file_uri_to_object($uri);
+
+  // An existing file wasn't found, so we don't control access.
+  // E.g. image derivatives will fall here.
+  if (empty($file->fid)) {
+    return NULL;
+  }
+
+  // Allow the user to download the file if they have appropriate permissions.
+  if (file_entity_access('view', $file)) {
+    return file_get_content_headers($file);
+  }
+
+  return NULL;
+}
+
+/**
+ * Helper function to generate standard file permission list for a given type.
+ *
+ * @param $type
+ *   The machine-readable name of the file type.
+ * @return array
+ *   An array of permission names and descriptions.
+ */
+function file_entity_list_permissions($type) {
+  $info = file_type_load($type);
+
+  // Build standard list of file permissions for this type.
+  $permissions = array(
+    "edit own $type files" => array(
+      'title' => t('%type_name: Edit own files', array('%type_name' => $info->label)),
+    ),
+    "edit any $type files" => array(
+      'title' => t('%type_name: Edit any files', array('%type_name' => $info->label)),
+    ),
+    "delete own $type files" => array(
+      'title' => t('%type_name: Delete own files', array('%type_name' => $info->label)),
+    ),
+    "delete any $type files" => array(
+      'title' => t('%type_name: Delete any files', array('%type_name' => $info->label)),
+    ),
+    "download own $type files" => array(
+      'title' => t('%type_name: Download own files', array('%type_name' => $info->label)),
+    ),
+    "download any $type files" => array(
+      'title' => t('%type_name: Download any files', array('%type_name' => $info->label)),
+    ),
+  );
+
+  return $permissions;
+}
+
+/**
+ * Returns an array of file types that should be managed by permissions.
+ *
+ * By default, this will include all file types in the system. To exclude a
+ * specific file from getting permissions defined for it, set the
+ * file_entity_permissions_$type variable to 0. File entity does not provide an
+ * interface for doing so, however, contrib modules may exclude their own files
+ * in hook_install(). Alternatively, contrib modules may configure all file
+ * types at once, or decide to apply some other hook_file_entity_access()
+ * implementation to some or all file types.
+ *
+ * @return
+ *   An array of file types managed by this module.
+ */
+function file_entity_permissions_get_configured_types() {
+
+  $configured_types = array();
+
+  foreach (file_type_get_enabled_types() as $type => $info) {
+    if (variable_get('file_entity_permissions_' . $type, 1)) {
+      $configured_types[] = $type;
+    }
+  }
+
+  return $configured_types;
+}
+
+/**
+ * @} End of "defgroup file_entity_access".
+ *
+ * Implements hook_file_default_types().
+ */
+function file_entity_file_default_types() {
+  $types = array();
+
+  // Image.
+  $types['image'] = (object) array(
+    'api_version' => 1,
+    'type' => 'image',
+    'label' => t('Image'),
+    'description' => t('An <em>Image</em> file is a still visual.'),
+    'mimetypes' => array(
+      'image/*',
+    ),
+  );
+
+  // Video.
+  $types['video'] = (object) array(
+    'api_version' => 1,
+    'type' => 'video',
+    'label' => t('Video'),
+    'description' => t('A <em>Video</em> file is a moving visual recording.'),
+    'mimetypes' => array(
+      'video/*',
+    ),
+  );
+
+  // Audio.
+  $types['audio'] = (object) array(
+    'api_version' => 1,
+    'type' => 'audio',
+    'label' => t('Audio'),
+    'description' => t('An <em>Audio</em> file is a sound recording.'),
+    'mimetypes' => array(
+      'audio/*',
+    ),
+  );
+
+  // Document.
+  $types['document'] = (object) array(
+    'api_version' => 1,
+    'type' => 'document',
+    'label' => t('Document'),
+    'description' => t('A <em>Document</em> file is written information.'),
+    'mimetypes' => array(
+      'text/plain',
+      'application/msword',
+      'application/vnd.ms-excel',
+      'application/pdf',
+      'application/vnd.ms-powerpoint',
+      'application/vnd.oasis.opendocument.text',
+      'application/vnd.oasis.opendocument.spreadsheet',
+      'application/vnd.oasis.opendocument.presentation',
+      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
+      'application/vnd.openxmlformats-officedocument.presentationml.presentation',
+      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
+    ),
+  );
+
+  return $types;
+}
+
+/**
+ * Implements hook_file_operations().
+ */
+function file_entity_file_operations() {
+  $operations = array(
+    'permanent' => array(
+      'label' => t('Indicate that the selected files are permanent and should not be deleted'),
+      'callback' => 'file_entity_mass_update',
+      'callback arguments' => array('updates' => array('status' => FILE_STATUS_PERMANENT)),
+    ),
+    'temporary' => array(
+      'label' => t('Indicate that the selected files are temporary and should be removed during cron runs'),
+      'callback' => 'file_entity_mass_update',
+      'callback arguments' => array('updates' => array('status' => 0)),
+    ),
+    'delete' => array(
+      'label' => t('Delete selected files'),
+      'callback' => NULL,
+    ),
+  );
+  return $operations;
+}
+
+/**
+ * Clear the field cache for any entities referencing a specific file.
+ *
+ * @param object $file
+ *   A file object.
+ */
+function file_entity_invalidate_field_caches($file) {
+  $entity_types = &drupal_static(__FUNCTION__);
+
+  // Gather the list of entity types which support field caching.
+  if (!isset($entity_types)) {
+    $entity_types = array();
+    foreach (entity_get_info() as $entity_type => $entity_info) {
+      if (!empty($entity_info['fieldable']) && !empty($entity_info['field cache'])) {
+        $entity_types[] = $entity_type;
+      }
+    }
+  }
+
+  // If no entity types support field caching, then there is no work to be done.
+  if (empty($entity_types)) {
+    return;
+  }
+
+  $records = db_query("SELECT DISTINCT type, id FROM {file_usage} WHERE fid = :fid AND type IN (:types) AND id > 0", array(':fid' => $file->fid, ':types' => $entity_types))->fetchAll();
+  if (!empty($records)) {
+    $cids = array();
+    foreach ($records as $record) {
+      $cids[] = 'field:' . $record->type . ':' . $record->id;
+    }
+    cache_clear_all($cids, 'cache_field');
+  }
+}
+
+/**
+ * Check if a file entity is considered local or not.
+ *
+ * @param object $file
+ *   A file entity object from file_load().
+ *
+ * @return
+ *   TRUE if the file is using a local stream wrapper, or FALSE otherwise.
+ */
+function file_entity_file_is_local($file) {
+  $scheme = file_uri_scheme($file->uri);
+  $wrappers = file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL);
+  return !empty($wrappers[$scheme]) && empty($wrappers[$scheme]['remote']);
+}
+
+/**
+ * Check if a file entity is considered writeable or not.
+ *
+ * @param object $file
+ *   A file entity object from file_load().
+ *
+ * @return
+ *   TRUE if the file is using a visible, readable and writeable stream wrapper,
+ *   or FALSE otherwise.
+ */
+function file_entity_file_is_writeable($file) {
+  $scheme = file_uri_scheme($file->uri);
+  $wrappers = file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE);
+  return !empty($wrappers[$scheme]);
+}
+
+/**
+ * Pre-render callback for adding validation descriptions to file upload fields.
+ */
+function file_entity_upload_validators_pre_render($element) {
+  if (!empty($element['#upload_validators'])) {
+    if (!isset($element['#description'])) {
+      $element['#description'] = '';
+    }
+    if ($element['#description'] !== FALSE) {
+      $element['#description'] = theme('file_upload_help', array('description' => $element['#description'], 'upload_validators' => $element['#upload_validators']));
+    }
+  }
+  return $element;
+}
+
+/**
+ * Implements hook_file_default_displays_alter() on behalf of image.module.
+ */
+function image_file_default_displays_alter(&$file_displays) {
+  // Images should be displayed as unstyled images by default.
+  if (isset($file_displays['image__default__file_field_file_default'])) {
+    $file_displays['image__default__file_field_file_default']->status = FALSE;
+  }
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__default__file_field_image';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'image_style' => '',
+    'image_link' => '',
+  );
+  $file_displays['image__default__file_field_image'] = $file_display;
+
+  // Image previews should be displayed as image thumbnails by default.
+  if (isset($file_displays['image__preview__file_field_file_default'])) {
+    $file_displays['image__preview__file_field_file_default']->status = FALSE;
+  }
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__preview__file_field_image';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'image_style' => 'thumbnail',
+    'image_link' => '',
+  );
+  $file_displays['image__preview__file_field_image'] = $file_display;
+
+  // Image teasers should be displayed as medium images by default.
+  if (isset($file_displays['image__teaser__file_field_file_default'])) {
+    $file_displays['image__teaser__file_field_file_default']->status = FALSE;
+  }
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__teaser__file_field_image';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'image_style' => 'medium',
+    'image_link' => 'content',
+  );
+  $file_displays['image__teaser__file_field_image'] = $file_display;
+}
+
+/**
+ * @name pathauto_file Pathauto integration for the core file module.
+ * @{
+ */
+
+/**
+ * Implements hook_file_insert() on behalf of pathauto.module.
+ */
+function pathauto_file_insert($file) {
+  pathauto_file_update_alias($file, 'insert');
+}
+
+/**
+ * Implements hook_file_update() on behalf of pathauto.module.
+ */
+function pathauto_file_update($file) {
+  pathauto_file_update_alias($file, 'update');
+}
+
+/**
+ * Implements hook_file_delete() on behalf of pathauto.module.
+ */
+function pathauto_file_delete($file) {
+  pathauto_entity_path_delete_all('file', $file, "file/{$file->fid}");
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter() on behalf of pathauto.module.
+ *
+ * Add the Pathauto settings to the file form.
+ */
+function pathauto_form_file_entity_edit_alter(&$form, &$form_state, $form_id) {
+  $file = $form_state['file'];
+  $langcode = pathauto_entity_language('file', $file);
+  pathauto_field_attach_form('file', $file, $form, $form_state, $langcode);
+}
+
+/**
+ * Implements hook_file_operations() on behalf of pathauto.module.
+ */
+function pathauto_file_operations() {
+  $operations['pathauto_update_alias'] = array(
+    'label' => t('Update URL alias'),
+    'callback' => 'pathauto_file_update_alias_multiple',
+    'callback arguments' => array('bulkupdate', array('message' => TRUE)),
+  );
+  return $operations;
+}
+
+/**
+ * Update the URL aliases for an individual file.
+ *
+ * @param $file
+ *   A file object.
+ * @param $op
+ *   Operation being performed on the file ('insert', 'update' or 'bulkupdate').
+ * @param $options
+ *   An optional array of additional options.
+ */
+function pathauto_file_update_alias(stdClass $file, $op, array $options = array()) {
+  // Skip processing if the user has disabled pathauto for the file.
+  if (isset($file->path['pathauto']) && empty($file->path['pathauto'])) {
+    return;
+  }
+
+  $options += array('language' => pathauto_entity_language('file', $file));
+
+  // Skip processing if the file has no pattern.
+  if (!pathauto_pattern_load_by_entity('file', $file->type, $options['language'])) {
+    return;
+  }
+
+  module_load_include('inc', 'pathauto');
+  $uri = entity_uri('file', $file);
+  pathauto_create_alias('file', $op, $uri['path'], array('file' => $file), $file->type, $options['language']);
+}
+
+/**
+ * Update the URL aliases for multiple files.
+ *
+ * @param $fids
+ *   An array of file IDs.
+ * @param $op
+ *   Operation being performed on the files ('insert', 'update' or
+ *   'bulkupdate').
+ * @param $options
+ *   An optional array of additional options.
+ */
+function pathauto_file_update_alias_multiple(array $fids, $op, array $options = array()) {
+  $options += array('message' => FALSE);
+
+  $files = file_load_multiple($fids);
+  foreach ($files as $file) {
+    pathauto_file_update_alias($file, $op, $options);
+  }
+
+  if (!empty($options['message'])) {
+    drupal_set_message(format_plural(count($fids), 'Updated URL alias for 1 file.', 'Updated URL aliases for @count files.'));
+  }
+}
+
+/**
+ * Update action wrapper for pathauto_file_update_alias().
+ */
+function pathauto_file_update_action($file, $context = array()) {
+  pathauto_file_update_alias($file, 'bulkupdate', array('message' => TRUE));
+}
+
+/**
+ * @} End of "name pathauto_file".
+ */
+
+/**
+ * Implements hook_form_FORM_ID_alter() for file_entity_edit() on behalf of path.module.
+ */
+function path_form_file_entity_edit_alter(&$form, $form_state) {
+  // Make sure this does not show up on the delete confirmation form.
+  if (empty($form_state['confirm_delete'])) {
+    $file = $form_state['file'];
+    $langcode = function_exists('entity_language') ? entity_language('file', $file) : NULL;
+    $langcode = !empty($langcode) ? $langcode : LANGUAGE_NONE;
+    $conditions = array('source' => 'file/' . $file->fid, 'language' => $langcode);
+    $path = (isset($file->fid) ? path_load($conditions) : array());
+    if ($path === FALSE) {
+      $path = array();
+    }
+    $path += array(
+      'pid' => NULL,
+      'source' => isset($file->fid) ? 'file/' . $file->fid : NULL,
+      'alias' => '',
+      'language' => $langcode,
+    );
+    $form['path'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('URL path settings'),
+      '#collapsible' => TRUE,
+      '#collapsed' => empty($path['alias']),
+      '#group' => 'additional_settings',
+      '#attributes' => array(
+        'class' => array('path-form'),
+      ),
+      '#attached' => array(
+        'js' => array(drupal_get_path('module', 'path') . '/path.js'),
+      ),
+      '#access' => user_access('create url aliases') || user_access('administer url aliases'),
+      '#weight' => 30,
+      '#tree' => TRUE,
+      '#element_validate' => array('path_form_element_validate'),
+    );
+    $form['path']['alias'] = array(
+      '#type' => 'textfield',
+      '#title' => t('URL alias'),
+      '#default_value' => $path['alias'],
+      '#maxlength' => 255,
+      '#description' => t('Optionally specify an alternative URL by which this file can be accessed. For example, type "about" when writing an about page. Use a relative path and don\'t add a trailing slash or the URL alias won\'t work.'),
+    );
+    $form['path']['pid'] = array('#type' => 'value', '#value' => $path['pid']);
+    $form['path']['source'] = array('#type' => 'value', '#value' => $path['source']);
+    $form['path']['language'] = array('#type' => 'value', '#value' => $path['language']);
+  }
+}
+
+/**
+ * Implements hook_file_insert() on behalf of path.module.
+ */
+function path_file_insert($file) {
+  if (isset($file->path)) {
+    $path = $file->path;
+    $path['alias'] = trim($path['alias']);
+    // Only save a non-empty alias.
+    if (!empty($path['alias'])) {
+      // Ensure fields for programmatic executions.
+      $path['source'] = 'file/' . $file->fid;
+      // Core does not provide a way to store the file language but contrib
+      // modules can do it so we need to take this into account.
+      $langcode = entity_language('file', $file);
+      $path['language'] = !empty($langcode) ? $langcode : LANGUAGE_NONE;
+      path_save($path);
+    }
+  }
+}
+
+/**
+ * Implements hook_file_update() on behalf of path.module.
+ */
+function path_file_update($file) {
+  if (isset($file->path)) {
+    $path = $file->path;
+    $path['alias'] = trim($path['alias']);
+    // Delete old alias if user erased it.
+    if (!empty($path['fid']) && empty($path['alias'])) {
+      path_delete($path['fid']);
+    }
+    // Only save a non-empty alias.
+    if (!empty($path['alias'])) {
+      // Ensure fields for programmatic executions.
+      $path['source'] = 'file/' . $file->fid;
+      // Core does not provide a way to store the file language but contrib
+      // modules can do it so we need to take this into account.
+      $langcode = entity_language('file', $file);
+      $path['language'] = !empty($langcode) ? $langcode : LANGUAGE_NONE;
+      path_save($path);
+    }
+  }
+}
+
+/**
+ * Implements hook_file_delete() on behalf of path.module.
+ */
+function path_file_delete($file) {
+  // Delete all aliases associated with this file.
+  path_delete(array('source' => 'file/' . $file->fid));
+}
+
+/**
+ * Checks if pattern(s) match mimetype(s).
+ */
+function file_entity_match_mimetypes($needle, $haystack) {
+  $needle = is_array($needle) ? $needle : array($needle);
+  $haystack = is_array($haystack) ? $haystack : array($haystack);
+
+  foreach ($haystack as $mimetype) {
+    foreach ($needle as $search) {
+      if (file_entity_fnmatch($search, $mimetype) || file_entity_fnmatch($mimetype, $search)) {
+        return TRUE;
+      }
+    }
+  }
+
+  return FALSE;
+}
+
+/**
+ * A wrapper function for the PHP function fnmatch().
+ *
+ * We include this, because Windows servers do not implement fnmatch() until
+ * PHP Version 5.3. See: http://php.net/manual/en/function.fnmatch.php
+ */
+function file_entity_fnmatch($pattern, $string) {
+  if (!function_exists('fnmatch')) {
+    return preg_match("#^" . strtr(preg_quote($pattern, '#'), array('\*' => '.*', '\?' => '.', '\[' => '[', '\]' => ']')) . "$#", $string);
+  }
+  return fnmatch($pattern, $string);
+}
+
+/**
+ * Return an URI for a file download.
+ */
+function file_entity_download_uri($file) {
+  $uri = array('path' => "file/{$file->fid}/download", 'options' => array());
+  if (!variable_get('file_entity_allow_insecure_download', FALSE)) {
+    $uri['options']['query']['token'] = file_entity_get_download_token($file);
+  }
+  return $uri;
+}
+
+function file_entity_file_get_mimetype_type($file) {
+  list($type, $subtype) = explode('/', $file->filemime, 2);
+  return $type;
+}
+
+/**
+ * Implements hook_admin_menu_map().
+ */
+function file_entity_admin_menu_map() {
+  if (!user_access('administer file types')) {
+    return;
+  }
+  $map['admin/structure/file-types/manage/%file_type'] = array(
+    'parent' => 'admin/structure/file-types',
+    'arguments' => array(
+      array('%file_type' => array_keys(file_entity_type_get_names())),
+    ),
+  );
+  return $map;
+}
+
+/*
+ * Generate a file download CSRF token.
+ *
+ * This is essentially a duplicate of drupal_get_token, that attempts to still
+ * work if the user is anonymous, by using ip_address() as the identifier
+ * rather than session_id().
+ *
+ * @param object $file
+ *   A file entity object.
+ *
+ * @return string
+ *   A CSRF token string.
+ */
+function file_entity_get_download_token($file) {
+  $identifier = !empty($GLOBALS['user']->uid) ? session_id() : ip_address();
+  return drupal_hmac_base64("file/$file->fid/download", $identifier . drupal_get_private_key() . drupal_get_hash_salt());
+}
+
+/**
+ * Find all fields that are of a certain field type.
+ *
+ * @param string $field_type
+ *   A field type.
+ *
+ * @return array
+ *   An array of field names that match the type $field_type.
+ */
+function _file_entity_get_fields_by_type($field_type) {
+  $return = array();
+  if (function_exists('field_info_field_map')) {
+    foreach (field_info_field_map() as $field_name => $field) {
+      if ($field['type'] == $field_type) {
+        $return[$field_name] = $field_name;
+      }
+    }
+  }
+  else {
+    foreach (field_info_fields() as $field_name => $field) {
+      if ($field['type'] == $field_type) {
+        $return[$field_name] = $field_name;
+      }
+    }
+  }
+  return $return;
+}
+
+/**
+ * Implements hook_field_attach_load().
+ */
+function file_entity_field_attach_load($entity_type, $entities, $age, $options) {
+  // Loop over all the entities looking for entities with attached images.
+  foreach ($entities as $entity) {
+    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
+    // Examine every image field instance attached to this entity's bundle.
+    $instances = array_intersect_key(field_info_instances($entity_type, $bundle), _file_entity_get_fields_by_type('image'));
+    foreach ($instances as $field_name => $instance) {
+      if (!empty($entity->{$field_name})) {
+        foreach ($entity->{$field_name} as $langcode => $items) {
+          foreach ($items as $delta => $item) {
+            // If alt and title text is not specified, fall back to alt and
+            // title text on the file.
+            if (empty($item['alt']) || empty($item['title'])) {
+              $file = file_load($item['fid']);
+              foreach (array('alt', 'title') as $key) {
+                if (empty($item[$key]) && !empty($file->{$key})) {
+                  $entity->{$field_name}[$langcode][$delta][$key] = $file->{$key};
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+}
+
+function file_entity_get_public_and_private_stream_wrapper_names($flag = STREAM_WRAPPERS_VISIBLE) {
+  $wrappers = array();
+  foreach (file_get_stream_wrappers($flag) as $key => $wrapper) {
+    if (empty($wrapper['private'])) {
+      $wrappers['public'][$key] = $wrapper['name'];
+    }
+    else {
+      $wrappers['private'][$key] = $wrapper['name'];
+    }
+  }
+  return $wrappers;
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.pages.inc b/profiles/commons/modules/contrib/file_entity/file_entity.pages.inc
new file mode 100644
index 0000000..31d0d76
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.pages.inc
@@ -0,0 +1,986 @@
+<?php
+
+/**
+ * @file
+ * Supports file operations including View, Edit, and Delete.
+ */
+
+/**
+ * Menu callback; view a single file entity.
+ */
+function file_entity_view_page($file) {
+  drupal_set_title($file->filename);
+
+  $uri = entity_uri('file', $file);
+  // Set the file path as the canonical URL to prevent duplicate content.
+  drupal_add_html_head_link(array('rel' => 'canonical', 'href' => url($uri['path'], $uri['options'])), TRUE);
+  // Set the non-aliased path as a default shortlink.
+  drupal_add_html_head_link(array('rel' => 'shortlink', 'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))), TRUE);
+
+  return file_view($file, 'full');
+}
+
+/**
+ * Menu callback; download a single file entity.
+ */
+function file_entity_download_page($file) {
+  // Ensure there is a valid token to download this file.
+  if (!variable_get('file_entity_allow_insecure_download', FALSE)) {
+    if (!isset($_GET['token']) || $_GET['token'] !== file_entity_get_download_token($file)) {
+      return MENU_ACCESS_DENIED;
+    }
+  }
+
+  // If the file does not exist it can cause problems with file_transfer().
+  if (!is_file($file->uri)) {
+    return MENU_NOT_FOUND;
+  }
+
+  $headers = array(
+    'Content-Type' => 'force-download',
+    'Content-Disposition' => 'attachment; filename="' . $file->filename . '"',
+    'Content-Length' => $file->filesize,
+    'Content-Transfer-Encoding' => 'binary',
+    'Pragma' => 'no-cache',
+    'Cache-Control' => 'must-revalidate, post-check=0, pre-check=0',
+    'Expires' => '0',
+    'Accept-Ranges' => 'bytes',
+  );
+
+  // Let other modules alter the download headers.
+  drupal_alter('file_download_headers', $headers, $file);
+
+  file_transfer($file->uri, $headers);
+}
+
+/**
+ * Form callback for adding a file via an upload form.
+ *
+ * This is a multi step form which has 1-3 pages:
+ * - Upload file
+ * - Choose filetype
+ *   If there is only one candidate (based on mimetype) we will skip this step.
+ * - Edit fields
+ *   Skip this step if there are no fields on this entity type.
+ */
+function file_entity_add_upload($form, &$form_state, array $options = array()) {
+  $step = (isset($form_state['step']) && in_array($form_state['step'], array(1, 2, 3, 4))) ? $form_state['step'] : 1;
+  $form['#step'] = $step;
+  switch ($step) {
+    case 1:
+      return file_entity_add_upload_step_upload($form, $form_state, $options);
+
+    case 2:
+      return file_entity_add_upload_step_filetype($form, $form_state, $options);
+
+    case 3:
+      return file_entity_add_upload_step_scheme($form, $form_state, $options);
+
+    case 4:
+      return file_entity_add_upload_step_fields($form, $form_state, $options);
+
+  }
+}
+
+/**
+ * Generate form fields for the first step in the add file wizard.
+ */
+function file_entity_add_upload_step_upload($form, &$form_state, array $options = array()) {
+  $form['upload'] = array(
+    '#type' => 'managed_file',
+    '#title' => t('Upload a new file'),
+    '#upload_location' => file_entity_upload_destination_uri($options),
+    '#upload_validators' => file_entity_get_upload_validators($options),
+    '#progress_indicator' => 'bar',
+    '#required' => TRUE,
+    '#pre_render' => array('file_managed_file_pre_render', 'file_entity_upload_validators_pre_render'),
+    '#default_value' => isset($form_state['storage']['upload']) ? $form_state['storage']['upload'] : NULL,
+  );
+
+  $form['actions'] = array('#type' => 'actions');
+  $form['actions']['next'] = array(
+    '#type' => 'submit',
+    '#value' => t('Next'),
+  );
+
+  form_load_include($form_state, 'inc', 'file_entity', 'file_entity.pages');
+
+  return $form;
+}
+
+/**
+ * Generate form fields for the second step in the add file wizard.
+ */
+function file_entity_add_upload_step_filetype($form, &$form_state, array $options = array()) {
+  $file = file_load($form_state['storage']['upload']);
+
+  $form['type'] = array(
+    '#type' => 'radios',
+    '#title' => t('File type'),
+    '#options' => file_entity_get_filetype_candidates($file),
+    '#default_value' => isset($form_state['storage']['type']) ? $form_state['storage']['type'] : NULL,
+    '#required' => TRUE,
+  );
+
+  $form['actions'] = array('#type' => 'actions');
+  $form['actions']['previous'] = array(
+    '#type' => 'submit',
+    '#value' => t('Previous'),
+    '#limit_validation_errors' => array(),
+    '#submit' => array('file_entity_add_upload_submit'),
+  );
+  $form['actions']['next'] = array(
+    '#type' => 'submit',
+    '#value' => t('Next'),
+  );
+
+  return $form;
+}
+
+/**
+ * Generate form fields for the third step in the add file wizard.
+ */
+function file_entity_add_upload_step_scheme($form, &$form_state, array $options = array()) {
+  $file = file_load($form_state['storage']['upload']);
+
+  $options = array();
+  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $info) {
+    $options[$scheme] = check_plain($info['description']);
+  }
+
+  $form['scheme'] = array(
+    '#type' => 'radios',
+    '#title' => t('Destination'),
+    '#options' => $options,
+    '#default_value' => isset($form_state['storage']['scheme']) ? $form_state['storage']['scheme'] : file_default_scheme(),
+    '#required' => TRUE,
+  );
+
+  $form['actions'] = array('#type' => 'actions');
+  $form['actions']['previous'] = array(
+    '#type' => 'submit',
+    '#value' => t('Previous'),
+    '#limit_validation_errors' => array(),
+    '#submit' => array('file_entity_add_upload_submit'),
+  );
+  $form['actions']['next'] = array(
+    '#type' => 'submit',
+    '#value' => t('Next'),
+  );
+
+  return $form;
+}
+
+/**
+ * Generate form fields for the fourth step in the add file wizard.
+ */
+function file_entity_add_upload_step_fields($form, &$form_state, array $options = array()) {
+  // Load the file and overwrite the filetype set on the previous screen.
+  $file = file_load($form_state['storage']['upload']);
+  $file->type = $form_state['storage']['type'];
+
+  // Add fields.
+  field_attach_form('file', $file, $form, $form_state);
+
+  $form['actions'] = array('#type' => 'actions');
+  $form['actions']['previous'] = array(
+    '#type' => 'submit',
+    '#value' => t('Previous'),
+    '#limit_validation_errors' => array(),
+    '#submit' => array('file_entity_add_upload_submit'),
+  );
+  $form['actions']['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+  );
+
+  return $form;
+}
+
+/**
+ * Page callback to show file usage information.
+ */
+function file_entity_usage_page($file) {
+  $rows = array();
+  $occured_entities = array();
+
+  foreach (file_usage_list($file) as $module => $usage) {
+    $info = system_get_info('module', $module);
+
+    // There are cases, where actual entitiy doesen't exist.
+    // We have to handle this.
+    foreach ($usage as $entity_type => $entity_ids) {
+      $entity_info = entity_get_info($entity_type);
+      $entities = empty($entity_info) ? NULL : entity_load($entity_type, array_keys($entity_ids));
+
+      foreach ($entity_ids as $entity_id => $count) {
+        // If some other module already added this entity just sum all counts.
+        if (isset($occured_entities[$entity_type][$entity_id])) {
+          $rows[$occured_entities[$entity_type][$entity_id]][2] += $count;
+          continue;
+        }
+
+        $label = empty($entities[$entity_id]) ? $module : entity_label($entity_type, $entities[$entity_id]);
+        $entity_uri = empty($entities[$entity_id]) ? NULL : entity_uri($entity_type, $entities[$entity_id]);
+
+        // Some entities do not have URL.
+        if (empty($entity_uri)) {
+          $rows[] = array(check_plain($label), $entity_type, $module, $count);
+        }
+        else {
+          $uri = $entity_uri['path'];
+          $rows[] = array(l($label, $uri), $entity_type, $module, $count);
+        }
+
+        $occured_entities[$entity_type][$entity_id] = count($rows) - 1;
+      }
+    }
+  }
+  $header[] = array(
+    'data' => t('Entity'),
+  );
+  $header[] = array(
+    'data' => t('Entity type'),
+  );
+  $header[] = array(
+    'data' => t('Registering module'),
+  );
+  $header[] = array(
+    'data' => t('Use count'),
+  );
+  $build['usage_table'] = array(
+    '#theme' => 'table',
+    '#header' => $header,
+    '#rows' => $rows,
+    '#caption' => t('This table lists all of the places where @filename is used.',
+    array('@filename' => $file->filename)),
+    '#empty' => t('This file is not currently used.'),
+  );
+  return $build;
+}
+
+/**
+ * Get the candidate filetypes for a given file.
+ *
+ * Only filetypes for which the user has access to create entities are returned.
+ *
+ * @param array $file
+ *   An upload file array from form_state.
+ *
+ * @return array
+ *   An array of file type bundles that support the file's mime type.
+ */
+function file_entity_get_filetype_candidates($file) {
+  $types = module_invoke_all('file_type', $file);
+  drupal_alter('file_type', $types, $file);
+  $candidates = array();
+  foreach ($types as $type) {
+    $file->type = $type;
+    if (file_entity_access('create', $file)) {
+      $candidates[$type] = file_entity_type_get_name($file);
+    }
+  }
+  return $candidates;
+}
+
+/**
+ * Submit handler for the add file form.
+ */
+function file_entity_add_upload_submit($form, &$form_state) {
+  $form_state['storage'] = isset($form_state['storage']) ? $form_state['storage'] : array();
+  $form_state['storage'] = array_merge($form_state['storage'], $form_state['values']);
+
+  // This var is set to TRUE when we are ready to save the file.
+  $save = FALSE;
+  $trigger = $form_state['triggering_element']['#id'];
+
+  $steps_to_check = array(2, 3);
+  if ($trigger == 'edit-previous') {
+    // If the previous button was hit,
+    // the step checking order should be reversed 3, 2.
+    $steps_to_check = array_reverse($steps_to_check);
+  }
+
+  foreach ($steps_to_check as $step) {
+    // Check if we can skip step 2 and 3.
+    if (($form['#step'] == $step - 1 && $trigger == 'edit-next') || ($form['#step'] == $step + 1 && $trigger == 'edit-previous')) {
+      $file = file_load($form_state['storage']['upload']);
+      if ($step == 2) {
+        // Check if we can skip step 2.
+        $candidates = file_entity_get_filetype_candidates($file);
+        if (count($candidates) == 1) {
+          $candidates_keys = array_keys($candidates);
+          // There is only one possible filetype for this file.
+          // Skip the second page.
+          $form['#step'] += ($trigger == 'edit-previous') ? -1 : 1;
+          $form_state['storage']['type'] = reset($candidates_keys);
+        }
+        elseif (variable_get('file_entity_file_upload_wizard_skip_file_type', FALSE)) {
+          // Do not assign the file a file type.
+          $form['#step'] += ($trigger == 'edit-previous') ? -1 : 1;
+          $form_state['storage']['type'] = FILE_TYPE_NONE;
+        }
+      }
+      else {
+        // Check if we can skip step 3.
+        $schemes = file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE);
+        if (count($schemes) == 1) {
+          // There is only one possible stream wrapper for this file.
+          // Skip the third page.
+          $form['#step'] += ($trigger == 'edit-previous') ? -1 : 1;
+          $form_state['storage']['scheme'] = key($schemes);
+        }
+        elseif (variable_get('file_entity_file_upload_wizard_skip_scheme', FALSE)) {
+          // Assign the file the default scheme.
+          $form['#step'] += ($trigger == 'edit-previous') ? -1 : 1;
+          $form_state['storage']['scheme'] = file_default_scheme();
+        }
+      }
+    }
+  }
+
+  // We have the filetype, check if we can skip step 4.
+  if (($form['#step'] == 3 && $trigger == 'edit-next')) {
+    $file = file_load($form_state['storage']['upload']);
+    if (!field_info_instances('file', $form_state['storage']['type'])) {
+      // This filetype doesn't have fields, save the file.
+      $save = TRUE;
+    }
+    elseif (variable_get('file_entity_file_upload_wizard_skip_fields', FALSE)) {
+      // Save the file with blanks fields.
+      $save = TRUE;
+    }
+  }
+
+  // Form id's can vary depending on how many other forms are displayed, so we
+  // need to do string comparissons. e.g edit-submit--2.
+  if (strpos($trigger, 'edit-next') !== FALSE) {
+    $form_state['step'] = $form['#step'] + 1;
+  }
+  elseif (strpos($trigger, 'edit-previous') !== FALSE) {
+    $form_state['step'] = $form['#step'] - 1;
+  }
+  elseif (strpos($trigger, 'edit-submit') !== FALSE) {
+    $save = TRUE;
+  }
+
+  if ($save) {
+    $file = file_load($form_state['storage']['upload']);
+    if ($file) {
+      if (file_uri_scheme($file->uri) != $form_state['storage']['scheme']) {
+        if ($moved_file = file_move($file, $form_state['storage']['scheme'] . '://' . file_uri_target($file->uri), FILE_EXISTS_RENAME)) {
+          // Only re-assign the file object if file_move() did not fail.
+          $file = $moved_file;
+        }
+      }
+      $file->type = $form_state['storage']['type'];
+      $file->display = TRUE;
+
+      // Change the file from temporary to permanent.
+      $file->status = FILE_STATUS_PERMANENT;
+
+      // Save the form fields.
+      // Keep in mind that the values for the Field API fields must be in
+      // $form_state['values'] and not in ['storage']. This is true as long as
+      // the fields are on the last page of the multi step form.
+      entity_form_submit_build_entity('file', $file, $form, $form_state);
+
+      file_save($file);
+      $form_state['file'] = $file;
+      drupal_set_message(t('@type %name was uploaded.', array('@type' => file_entity_type_get_name($file), '%name' => $file->filename)));
+    }
+    else {
+      drupal_set_message(t('An error occurred and no file was uploaded.'), 'error');
+      return;
+    }
+
+    // Figure out destination.
+    if (isset($_GET['destination'])) {
+      $destination = drupal_get_destination();
+      unset($_GET['destination']);
+    }
+    elseif (user_access('administer files')) {
+      $destination = array('destination' => 'admin/content/file');
+    }
+    else {
+      $destination = array('destination' => 'file/' . $file->fid);
+    }
+    $form_state['redirect'] = $destination['destination'];
+  }
+  else {
+    $form_state['rebuild'] = TRUE;
+  }
+
+  // Clear the page and block caches.
+  cache_clear_all();
+}
+
+/**
+ * Determines the upload location for the file add upload form.
+ *
+ * @param array $params
+ *   An array of parameters from the media browser.
+ * @param array $data
+ *   (optional) An array of token objects to pass to token_replace().
+ *
+ * @return string
+ *   A file directory URI with tokens replaced.
+ *
+ * @see token_replace()
+ */
+function file_entity_upload_destination_uri(array $params, array $data = array()) {
+  $params += array(
+    'uri_scheme' => file_default_scheme(),
+    'file_directory' => '',
+  );
+
+  $destination = trim($params['file_directory'], '/');
+
+  // Replace tokens.
+  $destination = token_replace($destination, $data);
+
+  return $params['uri_scheme'] . '://' . $destination;
+}
+
+/**
+ * Form for uploading multiple files.
+ */
+function file_entity_add_upload_multiple($form, &$form_state, $params = array()) {
+  $form = file_entity_add_upload($form, $form_state, $params);
+  unset($form['upload']['#title']);
+  // The validators will be set from plupload anyway. This isn't pretty,
+  // but don't allow it to show up twice.
+  unset($form['upload']['#description']);
+
+  $form['upload']['#type'] = 'plupload';
+
+  // Ensure that we call the plupload_element_pre_render function.
+  // If it isn't called, it doesn't set the JS settings that transfers the
+  // list of allowed file extentions to the PLUpload widget.
+  // We override the 'file_entity_upload_validators_pre_render' setting if it
+  // exists, because both pre-render hooks adds the upload-help with list of
+  // allowed file extensions.
+  $index = array_search('file_entity_upload_validators_pre_render', $form['upload']['#pre_render']);
+  if ($index !== FALSE) {
+    $form['upload']['#pre_render'][$index] = 'plupload_element_pre_render';
+  }
+  else {
+    $form['upload']['#pre_render'][] = 'plupload_element_pre_render';
+  }
+
+  $form['submit']['#value'] = t('Start upload');
+  return $form;
+}
+
+/**
+ * Submit handler for the multiple upload form.
+ */
+function file_entity_add_upload_multiple_submit($form, &$form_state) {
+  $upload_location = !empty($form['upload']['#upload_location']) ?
+    $form['upload']['#upload_location'] . '/' :
+    variable_get('file_default_scheme', 'public') . '://';
+
+  // We can't use file_save_upload() because of
+  // http://www.jacobsingh.name/content/tight-coupling-no-not.
+  foreach ($form_state['values']['upload'] as $uploaded_file) {
+    if ($uploaded_file['status'] == 'done') {
+      $source = $uploaded_file['tmppath'];
+      $destination = file_stream_wrapper_uri_normalize($upload_location . $uploaded_file['name']);
+      // Rename it to its original name, and put it in its final home.
+      // Note - not using file_move here because if we call file_get_mime
+      // (in file_uri_to_object) while it has a .tmp extension, it horks.
+      $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);
+
+      $file = file_uri_to_object($destination);
+      $file->status = FILE_STATUS_PERMANENT;
+      file_save($file);
+
+      $saved_files[] = $file;
+      $form_state['files'][$file->fid] = $file;
+    }
+    else {
+      // @todo: move this to element validate or something.
+      form_set_error('pud', t('The specified file %name could not be uploaded.', array('%name' => $uploaded_file['name'])));
+    }
+  }
+
+  // Redirect to the file edit page.
+  if (file_entity_access('update', $file) && module_exists('multiform') && module_exists('media')) {
+    $destination = array();
+    if (isset($_GET['destination'])) {
+      $destination = drupal_get_destination();
+      unset($_GET['destination']);
+    }
+    elseif (user_access('administer files')) {
+      $destination = array('destination' => 'admin/content/file');
+    }
+    $form_state['redirect'] = array('admin/content/file/edit-multiple/' . implode(' ', array_keys($form_state['files'])), array('query' => $destination));
+  }
+  else {
+    $form_state['redirect'] = user_access('administer files') ? 'admin/content/file' : '<front>';
+  }
+
+  // Clear the page and block caches.
+  cache_clear_all();
+}
+
+/**
+ * Page callback: Form constructor for the file edit form.
+ *
+ * Path: file/%file/edit
+ *
+ * @param object $file
+ *   A file object from file_load().
+ *
+ * @see file_entity_menu()
+ *
+ * @todo Rename this form to file_edit_form to ease into core.
+ */
+function file_entity_edit($form, &$form_state, $file) {
+  drupal_set_title(t('<em>Edit @type</em> @title', array('@type' => $file->type, '@title' => $file->filename)), PASS_THROUGH);
+
+  $form_state['file'] = $file;
+
+  $form['#attributes']['class'][] = 'file-form';
+  if (!empty($file->type)) {
+    $form['#attributes']['class'][] = 'file-' . $file->type . '-form';
+  }
+
+  // Basic file information.
+  // These elements are just values so they are not even sent to the client.
+  foreach (array('fid', 'type', 'uid', 'timestamp') as $key) {
+    $form[$key] = array(
+      '#type' => 'value',
+      '#value' => isset($file->$key) ? $file->$key : NULL,
+    );
+  }
+
+  $form['filename'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Name'),
+    '#default_value' => $file->filename,
+    '#required' => TRUE,
+    '#maxlength' => 255,
+    '#weight' => -10,
+  );
+
+  // Add a 'replace this file' upload field if the file is writeable.
+  if (file_entity_file_is_writeable($file)) {
+    // Set up replacement file validation.
+    $replacement_options = array();
+    // The replacement file must have the same extension as the original file.
+    $replacement_options['file_extensions'] = pathinfo($file->uri, PATHINFO_EXTENSION);
+
+    $form['replace_upload'] = array(
+      '#type' => 'file',
+      '#title' => t('Replace file'),
+      '#description' => t('This file will replace the existing file. This action cannot be undone.'),
+      '#upload_validators' => file_entity_get_upload_validators($replacement_options),
+      '#pre_render' => array('file_entity_upload_validators_pre_render'),
+    );
+  }
+
+  $form['preview'] = file_view_file($file, 'preview');
+
+  $form['additional_settings'] = array(
+    '#type' => 'vertical_tabs',
+    '#weight' => 99,
+  );
+
+  // File destination information for administrators.
+  $form['destination'] = array(
+    '#type' => 'fieldset',
+    '#access' => user_access('administer files') && file_entity_file_is_writeable($file),
+    '#title' => t('Destination'),
+    '#collapsible' => TRUE,
+    '#collapsed' => TRUE,
+    '#group' => 'additional_settings',
+    '#attributes' => array(
+      'class' => array('file-form-destination'),
+    ),
+    '#attached' => array(
+      'js' => array(
+        drupal_get_path('module', 'file_entity') . '/file_entity.js',
+      ),
+    ),
+  );
+
+  $options = array();
+  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $info) {
+    $options[$scheme] = check_plain($info['name']);
+  }
+
+  $form['destination']['scheme'] = array(
+    '#type' => 'radios',
+    '#title' => t('Destination'),
+    '#options' => $options,
+    '#default_value' => file_uri_scheme($file->uri),
+  );
+
+  // File user information for administrators.
+  $form['user'] = array(
+    '#type' => 'fieldset',
+    '#access' => user_access('administer files'),
+    '#title' => t('User information'),
+    '#collapsible' => TRUE,
+    '#collapsed' => TRUE,
+    '#group' => 'additional_settings',
+    '#attributes' => array(
+      'class' => array('file-form-user'),
+    ),
+    '#attached' => array(
+      'js' => array(
+        drupal_get_path('module', 'file_entity') . '/file_entity.js',
+        array(
+          'type' => 'setting',
+          'data' => array('anonymous' => variable_get('anonymous', t('Anonymous'))),
+        ),
+      ),
+    ),
+    '#weight' => 90,
+  );
+  $form['user']['name'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Associated with'),
+    '#maxlength' => 60,
+    '#autocomplete_path' => 'user/autocomplete',
+    '#default_value' => !empty($file->uid) ? user_load($file->uid)->name : '',
+    '#weight' => -1,
+    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
+  );
+
+  // Add the buttons.
+  $form['actions'] = array('#type' => 'actions');
+  $form['actions']['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+    '#weight' => 5,
+    '#submit' => array('file_entity_edit_submit'),
+  );
+  $form['actions']['delete'] = array(
+    '#type' => 'submit',
+    '#value' => t('Delete'),
+    '#weight' => 10,
+    '#submit' => array('file_entity_edit_delete_submit'),
+    '#access' => file_entity_access('delete', $file),
+  );
+
+  // Build the URL for the cancel button taking into account that there might be
+  // a "destination" that includes query string variables.
+  $parameters = drupal_get_query_parameters();
+  $destination = isset($parameters['destination']) ? $parameters['destination'] : 'file/' . $file->fid;
+  $url = drupal_parse_url($destination);
+
+  $form['actions']['cancel'] = array(
+    '#type' => 'link',
+    '#title' => t('Cancel'),
+    '#href' => $url['path'],
+    '#options' => array('query' => $url['query']),
+    '#weight' => 15,
+  );
+
+  $langcode = function_exists('entity_language') ? entity_language('file', $file) : NULL;
+  field_attach_form('file', $file, $form, $form_state, $langcode);
+
+  return $form;
+}
+
+/**
+ * Form validation handler for file_entity_edit().
+ */
+function file_entity_edit_validate($form, &$form_state) {
+  $file = (object) $form_state['values'];
+
+  // Validate the "associated user" field.
+  if (!empty($file->name) && !($account = user_load_by_name($file->name))) {
+    // The use of empty() is mandatory in the context of usernames
+    // as the empty string denotes the anonymous user. In case we
+    // are dealing with an anonymous user we set the user ID to 0.
+    form_set_error('name', t('The username %name does not exist.', array('%name' => $file->name)));
+  }
+
+  // Handle the replacement file if uploaded.
+  if (isset($form_state['values']['replace_upload'])) {
+    // Save the file as a temporary file.
+    $file = file_save_upload('replace_upload', $form['replace_upload']['#upload_validators']);
+    if (!empty($file)) {
+      // Put the temporary file in form_values so we can save it on submit.
+      $form_state['values']['replace_upload'] = $file;
+    }
+    elseif ($file === FALSE) {
+      // File uploaded failed.
+      form_set_error('replace_upload', t('The replacement file could not be uploaded.'));
+    }
+  }
+
+  // Run entity form validation.
+  entity_form_field_validate('file', $form, $form_state);
+}
+
+/**
+ * Form submission handler for the 'Save' button for file_entity_edit().
+ */
+function file_entity_edit_submit($form, &$form_state) {
+  $file = $form_state['file'];
+
+  // Check if a replacement file has been uploaded.
+  if (!empty($form_state['values']['replace_upload'])) {
+    $replacement = $form_state['values']['replace_upload'];
+    // Move file from temp to permanent home.
+    file_unmanaged_copy($replacement->uri, $file->uri, FILE_EXISTS_REPLACE);
+  }
+
+  // Run entity form submit handling and save the file.
+  entity_form_submit_build_entity('file', $file, $form, $form_state);
+
+  // A user might assign the associated user by entering a user name in the file
+  // edit form, which we then need to translate to a user ID.
+  if (isset($file->name)) {
+    // The use of isset() is mandatory in the context of user IDs, because
+    // user ID 0 denotes the anonymous user.
+    if ($user = user_load_by_name($file->name)) {
+      $file->uid = $user->uid;
+    }
+    else {
+      // Anonymous user.
+      $file->uid = 0;
+    }
+  }
+  elseif ($file->uid) {
+    $user = user_load($file->uid);
+    $file->name = $user->name;
+  }
+
+  if (file_uri_scheme($file->uri) != $form_state['values']['scheme']) {
+    if ($moved_file = file_move($file, $form_state['values']['scheme'] . '://' . file_uri_target($file->uri), FILE_EXISTS_RENAME)) {
+      // Only re-assign the file object if file_move() did not fail.
+      $file = $moved_file;
+    }
+  }
+
+  file_save($file);
+
+  $args = array(
+    '@type' => file_entity_type_get_name($file),
+    '%title' => entity_label('file', $file),
+  );
+  watchdog('file', '@type: updated %title.', $args);
+  drupal_set_message(t('@type %title has been updated.', $args));
+
+  $form_state['redirect'] = 'file/' . $file->fid;
+
+  // Clear the page and block caches.
+  cache_clear_all();
+}
+
+/**
+ * Form submission handler for the 'Delete' button for file_entity_edit().
+ */
+function file_entity_edit_delete_submit($form, &$form_state) {
+  $fid = $form_state['values']['fid'];
+  $destination = array();
+  if (isset($_GET['destination'])) {
+    $destination = drupal_get_destination();
+    unset($_GET['destination']);
+  }
+  $form_state['redirect'] = array('file/' . $fid . '/delete', array('query' => $destination));
+
+  // Clear the page and block caches.
+  cache_clear_all();
+}
+
+/**
+ * Page callback: Form constructor for the file deletion confirmation form.
+ *
+ * Path: file/%file/delete
+ *
+ * @param object $file
+ *   A file object from file_load().
+ *
+ * @see file_entity_menu()
+ */
+function file_entity_delete_form($form, &$form_state, $file) {
+  $form_state['file'] = $file;
+
+  $form['fid'] = array(
+    '#type' => 'value',
+    '#value' => $file->fid,
+  );
+
+  $description = t('This action cannot be undone.');
+  if ($references = file_usage_list($file)) {
+    $description .= ' ' . t('This file is currently in use and may cause problems if deleted.');
+  }
+
+  return confirm_form($form,
+    t('Are you sure you want to delete the file %title?', array(
+      '%title' => entity_label('file', $file),
+    )),
+    'file/' . $file->fid,
+    $description,
+    t('Delete')
+  );
+}
+
+/**
+ * Form submission handler for file_entity_delete_form().
+ */
+function file_entity_delete_form_submit($form, &$form_state) {
+  if ($form_state['values']['confirm'] && $file = file_load($form_state['values']['fid'])) {
+    // Use file_delete_multiple() rather than file_delete() since we want to
+    // avoid unwanted validation and usage checking.
+    file_delete_multiple(array($file->fid));
+
+    $args = array(
+      '@type' => file_entity_type_get_name($file),
+      '%title' => entity_label('file', $file),
+    );
+    watchdog('file', '@type: deleted %title.', $args);
+    drupal_set_message(t('@type %title has been deleted.', $args));
+  }
+
+  $form_state['redirect'] = '<front>';
+
+  // Clear the page and block caches.
+  cache_clear_all();
+}
+
+/**
+ * Form constructor for file deletion confirmation form.
+ *
+ * @param array $files
+ *   An array of file objects.
+ */
+function file_entity_multiple_delete_form($form, &$form_state, array $files) {
+  $form['files'] = array(
+    '#prefix' => '<ul>',
+    '#suffix' => '</ul>',
+    '#tree' => TRUE,
+  );
+
+  $files_have_usage = FALSE;
+  foreach ($files as $fid => $file) {
+    $title = entity_label('file', $file);
+    $usage = file_usage_list($file);
+    if (!empty($usage)) {
+      $files_have_usage = TRUE;
+      $title = t('@title (in use)', array('@title' => $title));
+    }
+    else {
+      $title = check_plain($title);
+    }
+    $form['files'][$fid] = array(
+      '#type' => 'hidden',
+      '#value' => $fid,
+      '#prefix' => '<li>',
+      '#suffix' => $title . "</li>\n",
+    );
+  }
+
+  $form['operation'] = array(
+    '#type' => 'hidden',
+    '#value' => 'delete',
+  );
+
+  $description = t('This action cannot be undone.');
+  if ($files_have_usage) {
+    $description .= ' ' . t('Some of the files are currently in use and may cause problems if deleted.');
+  }
+
+  return confirm_form(
+    $form,
+    format_plural(count($files), 'Are you sure you want to delete this file?', 'Are you sure you want to delete these files?'),
+    'admin/content/file',
+    $description,
+    t('Delete')
+  );
+}
+
+/**
+ * Form submission handler for file_entity_multiple_delete_form().
+ */
+function file_entity_multiple_delete_form_submit($form, &$form_state) {
+  if ($form_state['values']['confirm'] && $fids = array_keys($form_state['values']['files'])) {
+    file_delete_multiple($fids);
+    $count = count($fids);
+    watchdog('file', 'Deleted @count files.', array('@count' => $count));
+    drupal_set_message(format_plural($count, 'Deleted one file.', 'Deleted @count files.'));
+  }
+  $form_state['redirect'] = 'admin/content/file';
+
+  // Clear the page and block caches.
+  cache_clear_all();
+}
+
+/**
+ * Page callback for the file edit form.
+ *
+ * @deprecated
+ *   Use drupal_get_form('file_entity_edit')
+ */
+function file_entity_page_edit($file) {
+  return drupal_get_form('file_entity_edit', $file);
+}
+
+/**
+ * Page callback for the file deletion confirmation form.
+ *
+ * @deprecated
+ *   Use drupal_get_form('file_entity_delete_form')
+ */
+function file_entity_page_delete($file) {
+  return drupal_get_form('file_entity_delete_form');
+}
+
+/**
+ * Retrieves the upload validators for a file.
+ *
+ * @param array $options
+ *   (optional) An array of options for file validation.
+ *
+ * @return array
+ *   An array suitable for passing to file_save_upload() or for a managed_file
+ *   or upload element's '#upload_validators' property.
+ */
+function file_entity_get_upload_validators(array $options = array()) {
+  // Set up file upload validators.
+  $validators = array();
+
+  // Validate file extensions. If there are no file extensions in $params and
+  // there are no Media defaults, there is no file extension validation.
+  if (!empty($options['file_extensions'])) {
+    $validators['file_validate_extensions'] = array($options['file_extensions']);
+  }
+  else {
+    $validators['file_validate_extensions'] = array(variable_get('file_entity_default_allowed_extensions', 'jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm'));
+  }
+
+  // Cap the upload size according to the system or user defined limit.
+  $max_filesize = parse_size(file_upload_max_size());
+  $file_entity_max_filesize = parse_size(variable_get('file_entity_max_filesize', ''));
+
+  // If the user defined a size limit, use the smaller of the two.
+  if (!empty($file_entity_max_filesize)) {
+    $max_filesize = min($max_filesize, $file_entity_max_filesize);
+  }
+
+  if (!empty($options['max_filesize']) && $options['max_filesize'] < $max_filesize) {
+    $max_filesize = parse_size($options['max_filesize']);
+  }
+
+  // There is always a file size limit due to the PHP server limit.
+  $validators['file_validate_size'] = array($max_filesize);
+
+  // Add image validators.
+  $options += array('min_resolution' => 0, 'max_resolution' => 0);
+  if ($options['min_resolution'] || $options['max_resolution']) {
+    $validators['file_validate_image_resolution'] = array($options['max_resolution'], $options['min_resolution']);
+  }
+
+  // Add other custom upload validators from options.
+  if (!empty($options['upload_validators'])) {
+    $validators += $options['upload_validators'];
+  }
+
+  return $validators;
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.pathauto.inc b/profiles/commons/modules/contrib/file_entity/file_entity.pathauto.inc
new file mode 100644
index 0000000..3b3d695
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.pathauto.inc
@@ -0,0 +1,84 @@
+<?php
+
+/**
+ * @file
+ * Pathauto integration for files.
+ *
+ * @ingroup pathauto
+ */
+
+/**
+ * Implements hook_path_alias_types().
+ */
+function file_entity_path_alias_types() {
+  $objects['file/'] = t('Files');
+
+  return $objects;
+}
+
+/**
+ * Implements hook_pathauto().
+ */
+function file_entity_pathauto($op) {
+  switch ($op) {
+    case 'settings':
+      $settings = array();
+      $settings['module'] = 'file';
+      $settings['token_type'] = 'file';
+      $settings['groupheader'] = t('File paths');
+      $settings['patterndescr'] = t('Default path pattern (applies to all file types with blank patterns below)');
+      $settings['patterndefault'] = 'files/[file:name]';
+      $settings['batch_update_callback'] = 'file_entity_pathauto_bulk_update_batch_process';
+      $settings['batch_file'] = drupal_get_path('module', 'file_entity') . '/file_entity.pathauto.inc';
+
+      foreach (file_type_get_enabled_types() as $file_type => $type) {
+        $settings['patternitems'][$file_type] = t('Pattern for all @file_type paths.', array('@file_type' => $type->label));
+      }
+      return (object) $settings;
+
+    default:
+      break;
+  }
+}
+
+/**
+ * Batch processing callback; Generate aliases for files.
+ */
+function file_entity_pathauto_bulk_update_batch_process(&$context) {
+  if (!isset($context['sandbox']['current'])) {
+    $context['sandbox']['count'] = 0;
+    $context['sandbox']['current'] = 0;
+  }
+
+  $query = db_select('file_managed', 'fm');
+  $query->leftJoin('url_alias', 'ua', "CONCAT('file/', fm.fid) = ua.source");
+  $query->addField('fm', 'fid');
+  $query->isNull('ua.source');
+  $query->condition('fm.fid', $context['sandbox']['current'], '>');
+  $query->orderBy('fm.fid');
+  $query->addTag('pathauto_bulk_update');
+  $query->addMetaData('entity', 'file');
+
+  // Get the total amount of items to process.
+  if (!isset($context['sandbox']['total'])) {
+    $context['sandbox']['total'] = $query->countQuery()->execute()->fetchField();
+
+    // If there are no files to update, the stop immediately.
+    if (!$context['sandbox']['total']) {
+      $context['finished'] = 1;
+      return;
+    }
+  }
+
+  $query->range(0, 25);
+  $fids = $query->execute()->fetchCol();
+
+  pathauto_file_update_alias_multiple($fids, 'bulkupdate');
+  $context['sandbox']['count'] += count($fids);
+  $context['sandbox']['current'] = max($fids);
+  $context['message'] = t('Updated alias for file @fid.', array('@fid' => end($fids)));
+
+  if ($context['sandbox']['count'] != $context['sandbox']['total']) {
+    $context['finished'] = $context['sandbox']['count'] / $context['sandbox']['total'];
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.test b/profiles/commons/modules/contrib/file_entity/file_entity.test
new file mode 100644
index 0000000..acc1092
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.test
@@ -0,0 +1,1258 @@
+<?php
+
+/**
+ * @file
+ * Test integration for the file_entity module.
+ */
+
+class FileEntityTestHelper extends DrupalWebTestCase {
+  protected $files = array();
+
+  function setUp() {
+    $modules = func_get_args();
+    if (isset($modules[0]) && is_array($modules[0])) {
+      $modules = $modules[0];
+    }
+    $modules[] = 'file_entity';
+    parent::setUp($modules);
+  }
+
+  protected function setUpFiles() {
+    $types = array('text', 'image');
+    foreach ($types as $type) {
+      foreach ($this->drupalGetTestFiles($type) as $file) {
+        $this->files[$type][] = file_save($file);
+      }
+    }
+  }
+
+  protected function createFileType($overrides = array()) {
+    $type = new stdClass();
+    $type->type = 'test';
+    $type->label = "Test";
+    $type->description = '';
+    $type->mimetypes = array('image/jpeg', 'image/gif', 'image/png', 'image/tiff');
+
+    foreach ($overrides as $k => $v) {
+      $type->$k = $v;
+    }
+
+    file_type_save($type);
+    return $type;
+  }
+
+  /**
+   * Helper for testFileEntityPrivateDownloadAccess() test.
+   *
+   * Defines several cases for accesing private files.
+   *
+   * @return array
+   *   Array of associative arrays, each one having the next keys:
+   *   - "message" string with the assertion message.
+   *   - "permissions" array of permissions or NULL for anonymous user.
+   *   - "expect" expected HTTP response code.
+   *   - "owner" Optional boolean indicating if the user is a file owner.
+   */
+  protected function getPrivateDownloadAccessCases() {
+    return array(
+      array(
+        'message' => "File owners cannot download their own files unless they are granted the 'view own private files' permission.",
+        'permissions' => array(),
+        'expect' => 403,
+        'owner' => TRUE,
+      ),
+      array(
+        'message' => "File owners can download their own files as they have been granted the 'view own private files' permission.",
+        'permissions' => array('view own private files'),
+        'expect' => 200,
+        'owner' => TRUE,
+      ),
+      array(
+        'message' => "Anonymous users cannot download private files.",
+        'permissions' => NULL,
+        'expect' => 403,
+      ),
+      array(
+        'message' => "Authenticated users cannot download each other's private files.",
+        'permissions' => array(),
+        'expect' => 403,
+      ),
+      array(
+        'message' => "Users who can view public files are not able to download private files.",
+        'permissions' => array('view files'),
+        'expect' => 403,
+      ),
+      array(
+        'message' => "Users who bypass file access can download any file.",
+        'permissions' => array('bypass file access'),
+        'expect' => 200,
+      ),
+    );
+  }
+
+  /**
+   * Retrieves a sample file of the specified type.
+   */
+  function getTestFile($type_name, $size = NULL) {
+    // Get a file to upload.
+    $file = current($this->drupalGetTestFiles($type_name, $size));
+
+    // Add a filesize property to files as would be read by file_load().
+    $file->filesize = filesize($file->uri);
+
+    return $file;
+  }
+
+  /**
+   * Get a file from the database based on its filename.
+   *
+   * @param $filename
+   *   A file filename, usually generated by $this->randomName().
+   * @param $reset
+   *   (optional) Whether to reset the internal file_load() cache.
+   *
+   * @return
+   *   A file object matching $filename.
+   */
+  function getFileByFilename($filename, $reset = FALSE) {
+    $files = file_load_multiple(array(), array('filename' => $filename), $reset);
+    // Load the first file returned from the database.
+    $returned_file = reset($files);
+    return $returned_file;
+  }
+
+  protected function createFileEntity($settings = array()) {
+    $file = new stdClass();
+
+    // Populate defaults array.
+    $settings += array(
+      'filepath' => 'Файл для тестирования ' . $this->randomName(), // Prefix with non-latin characters to ensure that all file-related tests work with international filenames.
+      'filemime' => 'text/plain',
+      'uid' => 1,
+      'timestamp' => REQUEST_TIME,
+      'status' => FILE_STATUS_PERMANENT,
+      'contents' => "file_put_contents() doesn't seem to appreciate empty strings so let's put in some data.",
+      'scheme' => file_default_scheme(),
+      'type' => NULL,
+    );
+
+    $filepath = $settings['scheme'] . '://' . $settings['filepath'];
+
+    file_put_contents($filepath, $settings['contents']);
+    $this->assertTrue(is_file($filepath), t('The test file exists on the disk.'), 'Create test file');
+
+    $file = new stdClass();
+    $file->uri = $filepath;
+    $file->filename = drupal_basename($file->uri);
+    $file->filemime = $settings['filemime'];
+    $file->uid = $settings['uid'];
+    $file->timestamp = $settings['timestamp'];
+    $file->filesize = filesize($file->uri);
+    $file->status = $settings['status'];
+    $file->type = $settings['type'];
+
+    // The file type is used as a bundle key, and therefore, must not be NULL.
+    if (!isset($file->type)) {
+      $file->type = FILE_TYPE_NONE;
+    }
+
+    // If the file isn't already assigned a real type, determine what type should
+    // be assigned to it.
+    if ($file->type === FILE_TYPE_NONE) {
+      $type = file_get_type($file);
+      if (isset($type)) {
+        $file->type = $type;
+      }
+    }
+
+    // Write the record directly rather than calling file_save() so we don't
+    // invoke the hooks.
+    $this->assertNotIdentical(drupal_write_record('file_managed', $file), FALSE, t('The file was added to the database.'), 'Create test file');
+
+    return $file;
+  }
+
+  /**
+   * Overrides DrupalWebTestCase::drupalGetToken() to support the hash salt.
+   *
+   * @todo Remove when http://drupal.org/node/1555862 is fixed in core.
+   */
+  protected function drupalGetToken($value = '') {
+    $private_key = drupal_get_private_key();
+    return drupal_hmac_base64($value, $this->session_id . $private_key . drupal_get_hash_salt());
+  }
+}
+
+class FileEntityFileTypeClassificationTestCase extends DrupalWebTestCase {
+  public static function getInfo() {
+    return array(
+      'name' => 'File entity classification',
+      'description' => 'Test existing file entity classification functionality.',
+      'group' => 'File entity',
+    );
+  }
+
+  function setUp() {
+    parent::setUp();
+  }
+
+  /**
+   * Get the file type of a given file.
+   *
+   * @param $file
+   *   A file object.
+   *
+   * @return
+   *   The file's file type as a string.
+   */
+  function getFileType($file) {
+    $type = db_select('file_managed', 'fm')
+      ->fields('fm', array('type'))
+      ->condition('fid', $file->fid, '=')
+      ->execute()
+      ->fetchAssoc();
+
+    return $type;
+  }
+
+  /**
+   * Test that existing files are properly classified by file type.
+   */
+  function testFileTypeClassification() {
+    // Get test text and image files.
+    $file = current($this->drupalGetTestFiles('text'));
+    $text_file = file_save($file);
+    $file = current($this->drupalGetTestFiles('image'));
+    $image_file = file_save($file);
+
+    // Enable file entity which adds adds a file type property to files and
+    // queues up existing files for classification.
+    module_enable(array('file_entity'));
+
+    // Existing files have yet to be classified and should have an undefined
+    // file type.
+    $file_type = $this->getFileType($text_file);
+    $this->assertEqual($file_type['type'], 'undefined', t('The text file has an undefined file type.'));
+    $file_type = $this->getFileType($image_file);
+    $this->assertEqual($file_type['type'], 'undefined', t('The image file has an undefined file type.'));
+
+    // The classification queue is processed during cron runs. Run cron to
+    // trigger the classification process.
+    $this->cronRun();
+
+    // The classification process should assign a file type to any file whose
+    // MIME type is assigned to a file type. Check to see if each file was
+    // assigned a proper file type.
+    $file_type = $this->getFileType($text_file);
+    $this->assertEqual($file_type['type'], 'document', t('The text file was properly assigned the Document file type.'));
+    $file_type = $this->getFileType($image_file);
+    $this->assertEqual($file_type['type'], 'image', t('The image file was properly assigned the Image file type.'));
+  }
+}
+
+class FileEntityUnitTestCase extends FileEntityTestHelper {
+  public static function getInfo() {
+    return array(
+      'name' => 'File entity unit tests',
+      'description' => 'Test basic file entity functionality.',
+      'group' => 'File entity',
+    );
+  }
+
+  function setUp() {
+    parent::setUp();
+    parent::setUpFiles();
+  }
+
+  /**
+   * Regression tests for core issue http://drupal.org/node/1239376.
+   */
+  function testMimeTypeMappings() {
+    $tests = array(
+      'public://test.ogg' => 'audio/ogg',
+      'public://test.mkv' => 'video/x-m4v',
+      'public://test.mka' => 'audio/x-matroska',
+      'public://test.mkv' => 'video/x-matroska',
+      'public://test.webp' => 'image/webp',
+    );
+    foreach ($tests as $input => $expected) {
+      $this->assertEqual(file_get_mimetype($input), $expected);
+    }
+  }
+
+  function testFileEntity() {
+    $file = reset($this->files['text']);
+
+    // Test entity ID, revision ID, and bundle.
+    $ids = entity_extract_ids('file', $file);
+    $this->assertIdentical($ids, array($file->fid, NULL, 'document'));
+
+    // Test the entity URI callback.
+    $uri = entity_uri('file', $file);
+    $this->assertEqual($uri['path'], "file/{$file->fid}");
+  }
+
+  function testImageDimensions() {
+    $files = array();
+    $text_fids = array();
+    // Test hook_file_insert().
+    // Files have been saved as part of setup (in FileEntityTestHelper::setUpFiles).
+    foreach ($this->files['image'] as $file) {
+      $files[$file->fid] = $file->metadata;
+      $this->assertTrue(isset($file->metadata['height']), 'Image height retrieved on file_save() for an image file.');
+      $this->assertTrue(isset($file->metadata['width']), 'Image width retrieved on file_save() for an image file.');
+    }
+    foreach ($this->files['text'] as $file) {
+      $text_fids[] = $file->fid;
+      $this->assertFalse(isset($file->metadata['height']), 'No image height retrieved on file_save() for an text file.');
+      $this->assertFalse(isset($file->metadata['width']), 'No image width retrieved on file_save() for an text file.');
+    }
+
+    // Test hook_file_load().
+    // Clear the cache and load fresh files objects to test file_load behavior.
+    entity_get_controller('file')->resetCache();
+    foreach (file_load_multiple(array_keys($files)) as $file) {
+      $this->assertTrue(isset($file->metadata['height']), 'Image dimensions retrieved on file_load() for an image file.');
+      $this->assertTrue(isset($file->metadata['width']), 'Image dimensions retrieved on file_load() for an image file.');
+      $this->assertEqual($file->metadata['height'], $files[$file->fid]['height'], 'Loaded image height is equal to saved image height.');
+      $this->assertEqual($file->metadata['width'], $files[$file->fid]['width'], 'Loaded image width is equal to saved image width.');
+    }
+    foreach (file_load_multiple($text_fids) as $file) {
+      $this->assertFalse(isset($file->metadata['height']), 'No image height retrieved on file_load() for an text file.');
+      $this->assertFalse(isset($file->metadata['width']), 'No image width retrieved on file_load() for an text file.');
+    }
+
+    // Test hook_file_update().
+    // Load the first image file and resize it.
+    $image_files = array_keys($files);
+    $file = file_load(reset($image_files));
+    $image = image_load($file->uri);
+    image_resize($image, $file->metadata['width'] / 2, $file->metadata['height'] / 2);
+    image_save($image);
+    file_save($file);
+    $this->assertEqual($file->metadata['height'], $files[$file->fid]['height'] / 2, 'Image file height updated by file_save().');
+    $this->assertEqual($file->metadata['width'], $files[$file->fid]['width'] / 2, 'Image file width updated by file_save().');
+    // Clear the cache and reload the file.
+    entity_get_controller('file')->resetCache();
+    $file = file_load($file->fid);
+    $this->assertEqual($file->metadata['height'], $files[$file->fid]['height'] / 2, 'Updated image height retrieved by file_load().');
+    $this->assertEqual($file->metadata['width'], $files[$file->fid]['width'] / 2, 'Updated image width retrieved by file_load().');
+
+    //Test hook_file_delete().
+    file_delete($file, TRUE);
+    $this->assertFalse(db_query('SELECT COUNT(*) FROM {file_metadata} WHERE fid = :fid', array(':fid' => 'fid'))->fetchField(), 'Row deleted in {file_dimensions} on file_delete().');
+  }
+}
+
+class FileEntityEditTestCase extends FileEntityTestHelper {
+  protected $web_user;
+  protected $admin_user;
+
+  public static function getInfo() {
+    return array(
+      'name' => 'File entity edit',
+      'description' => 'Create a file and test file edit functionality.',
+      'group' => 'File entity',
+    );
+  }
+
+  function setUp() {
+    parent::setUp();
+
+    $this->web_user = $this->drupalCreateUser(array('edit own document files', 'create files'));
+    $this->admin_user = $this->drupalCreateUser(array('bypass file access', 'administer files'));
+  }
+
+  /**
+   * Check file edit functionality.
+   */
+  function testFileEntityEdit() {
+    $this->drupalLogin($this->web_user);
+
+    $test_file = $this->getTestFile('text');
+    $name_key = "filename";
+
+    // Create file to edit.
+    $edit = array();
+    $edit['files[upload]'] = drupal_realpath($test_file->uri);
+    $this->drupalPost('file/add', $edit, t('Next'));
+    if ($this->xpath('//input[@name="scheme"]')) {
+      $this->drupalPost(NULL, array(), t('Next'));
+    }
+
+    // Check that the file exists in the database.
+    $file = $this->getFileByFilename($test_file->filename);
+    $this->assertTrue($file, t('File found in database.'));
+
+    // Check that "edit" link points to correct page.
+    $this->clickLink(t('Edit'));
+    $edit_url = url("file/$file->fid/edit", array('absolute' => TRUE));
+    $actual_url = $this->getURL();
+    $this->assertEqual($edit_url, $actual_url, t('On edit page.'));
+
+    // Check that the name field is displayed with the correct value.
+    $active = '<span class="element-invisible">' . t('(active tab)') . '</span>';
+    $link_text = t('!local-task-title!active', array('!local-task-title' => t('Edit'), '!active' => $active));
+    $this->assertText(strip_tags($link_text), 0, t('Edit tab found and marked active.'));
+    $this->assertFieldByName($name_key, $file->filename, t('Name field displayed.'));
+
+    // The user does not have "delete" permissions so no delete button should be found.
+    $this->assertNoFieldByName('op', t('Delete'), 'Delete button not found.');
+
+    // Edit the content of the file.
+    $edit = array();
+    $edit[$name_key] = $this->randomName(8);
+    // Stay on the current page, without reloading.
+    $this->drupalPost(NULL, $edit, t('Save'));
+
+    // Check that the name field is displayed with the updated values.
+    $this->assertText($edit[$name_key], t('Name displayed.'));
+  }
+
+  /**
+   * Check changing file associated user fields.
+   */
+  function testFileEntityAssociatedUser() {
+    $this->drupalLogin($this->admin_user);
+
+    // Create file to edit.
+    $test_file = $this->getTestFile('text');
+    $name_key = "filename";
+    $edit = array();
+    $edit['files[upload]'] = drupal_realpath($test_file->uri);
+    $this->drupalPost('file/add', $edit, t('Next'));
+
+    // Check that the file was associated with the currently logged in user.
+    $file = $this->getFileByFilename($test_file->filename);
+    $this->assertIdentical($file->uid, $this->admin_user->uid, 'File associated with admin user.');
+
+    // Try to change the 'associated user' field to an invalid user name.
+    $edit = array(
+      'name' => 'invalid-name',
+    );
+    $this->drupalPost('file/' . $file->fid . '/edit', $edit, t('Save'));
+    $this->assertText('The username invalid-name does not exist.');
+
+    // Change the associated user field to an empty string, which should assign
+    // association to the anonymous user (uid 0).
+    $edit['name'] = '';
+    $this->drupalPost('file/' . $file->fid . '/edit', $edit, t('Save'));
+    $file = file_load($file->fid);
+    $this->assertIdentical($file->uid, '0', 'File associated with anonymous user.');
+
+    // Change the associated user field to another user's name (that is not
+    // logged in).
+    $edit['name'] = $this->web_user->name;
+    $this->drupalPost('file/' . $file->fid . '/edit', $edit, t('Save'));
+    $file = file_load($file->fid);
+    $this->assertIdentical($file->uid, $this->web_user->uid, 'File associated with normal user.');
+
+    // Check that normal users cannot change the associated user information.
+    $this->drupalLogin($this->web_user);
+    $this->drupalGet('file/' . $file->fid . '/edit');
+    $this->assertNoFieldByName('name');
+  }
+}
+
+class FileEntityCreationTestCase extends FileEntityTestHelper {
+  public static function getInfo() {
+    return array(
+      'name' => 'File entity creation',
+      'description' => 'Create a file and test saving it.',
+      'group' => 'File entity',
+    );
+  }
+
+  function setUp() {
+    parent::setUp();
+
+    $web_user = $this->drupalCreateUser(array('create files', 'edit own document files'));
+    $this->drupalLogin($web_user);
+  }
+
+  /**
+   * Create a "document" file and verify its consistency in the database.
+   */
+  function testFileEntityCreation() {
+    $test_file = $this->getTestFile('text');
+    // Create a file.
+    $edit = array();
+    $edit['files[upload]'] = drupal_realpath($test_file->uri);
+    $this->drupalPost('file/add', $edit, t('Next'));
+
+    // Step 2: Scheme selection
+    if ($this->xpath('//input[@name="scheme"]')) {
+      $this->drupalPost(NULL, array(), t('Next'));
+    }
+
+    // Check that the document file has been uploaded.
+    $this->assertRaw(t('!type %name was uploaded.', array('!type' => 'Document', '%name' => $test_file->filename)), t('Document file uploaded.'));
+
+    // Check that the file exists in the database.
+    $file = $this->getFileByFilename($test_file->filename);
+    $this->assertTrue($file, t('File found in database.'));
+  }
+}
+
+/**
+ * Test file administration page functionality.
+ */
+class FileEntityAdminTestCase extends FileEntityTestHelper {
+  public static function getInfo() {
+    return array(
+      'name' => 'File administration',
+      'description' => 'Test file administration page functionality.',
+      'group' => 'File entity',
+    );
+  }
+
+  function setUp() {
+    parent::setUp();
+
+    // Remove the "view files" permission which is set
+    // by default for all users so we can test this permission
+    // correctly.
+    $roles = user_roles();
+    foreach ($roles as $rid => $role) {
+      user_role_revoke_permissions($rid, array('view files'));
+    }
+
+    $this->admin_user = $this->drupalCreateUser(array('administer files', 'bypass file access'));
+    $this->base_user_1 = $this->drupalCreateUser(array('administer files'));
+    $this->base_user_2 = $this->drupalCreateUser(array('administer files', 'view own private files'));
+    $this->base_user_3 = $this->drupalCreateUser(array('administer files', 'view private files'));
+    $this->base_user_4 = $this->drupalCreateUser(array('administer files', 'edit any document files', 'delete any document files', 'edit any image files', 'delete any image files'));
+  }
+
+  /**
+   * Tests that the table sorting works on the files admin pages.
+   */
+  function testFilesAdminSort() {
+    $this->drupalLogin($this->admin_user);
+    $i = 0;
+    foreach (array('dd', 'aa', 'DD', 'bb', 'cc', 'CC', 'AA', 'BB') as $prefix) {
+      $this->createFileEntity(array('filepath' => $prefix . $this->randomName(6), 'timestamp' => $i));
+      $i++;
+    }
+
+    // Test that the default sort by file_managed.timestamp DESC actually fires properly.
+    $files_query = db_select('file_managed', 'fm')
+      ->fields('fm', array('fid'))
+      ->orderBy('timestamp', 'DESC')
+      ->execute()
+      ->fetchCol();
+
+    $files_form = array();
+    $this->drupalGet('admin/content/file');
+    foreach ($this->xpath('//table/tbody/tr/td/div/input/@value') as $input) {
+      $files_form[] = $input;
+    }
+    $this->assertEqual($files_query, $files_form, 'Files are sorted in the form according to the default query.');
+
+    // Compare the rendered HTML node list to a query for the files ordered by
+    // filename to account for possible database-dependent sort order.
+    $files_query = db_select('file_managed', 'fm')
+      ->fields('fm', array('fid'))
+      ->orderBy('filename')
+      ->execute()
+      ->fetchCol();
+
+    $files_form = array();
+    $this->drupalGet('admin/content/file', array('query' => array('sort' => 'asc', 'order' => 'Title')));
+    foreach ($this->xpath('//table/tbody/tr/td/div/input/@value') as $input) {
+      $files_form[] = $input;
+    }
+    $this->assertEqual($files_query, $files_form, 'Files are sorted in the form the same as they are in the query.');
+  }
+
+  /**
+   * Tests files overview with different user permissions.
+   */
+  function testFilesAdminPages() {
+    $this->drupalLogin($this->admin_user);
+
+    $files['public_image'] = $this->createFileEntity(array('scheme' => 'public', 'uid' => $this->base_user_1->uid, 'type' => 'image'));
+    $files['public_document'] = $this->createFileEntity(array('scheme' => 'public', 'uid' => $this->base_user_2->uid, 'type' => 'document'));
+    $files['private_image'] = $this->createFileEntity(array('scheme' => 'private', 'uid' => $this->base_user_1->uid, 'type' => 'image'));
+    $files['private_document'] = $this->createFileEntity(array('scheme' => 'private', 'uid' => $this->base_user_2->uid, 'type' => 'document'));
+
+    // Verify view, edit, and delete links for any file.
+    $this->drupalGet('admin/content/file');
+    $this->assertResponse(200);
+    foreach ($files as $file) {
+      $this->assertLinkByHref('file/' . $file->fid);
+      $this->assertLinkByHref('file/' . $file->fid . '/edit');
+      $this->assertLinkByHref('file/' . $file->fid . '/delete');
+      // Verify tableselect.
+      $this->assertFieldByName('files[' . $file->fid . ']', '', t('Tableselect found.'));
+    }
+
+    // Verify no operation links are displayed for regular users.
+    $this->drupalLogout();
+    $this->drupalLogin($this->base_user_1);
+    $this->drupalGet('admin/content/file');
+    $this->assertResponse(200);
+    $this->assertLinkByHref('file/' . $files['public_image']->fid);
+    $this->assertLinkByHref('file/' . $files['public_document']->fid);
+    $this->assertNoLinkByHref('file/' . $files['public_image']->fid . '/edit');
+    $this->assertNoLinkByHref('file/' . $files['public_image']->fid . '/delete');
+    $this->assertNoLinkByHref('file/' . $files['public_document']->fid . '/edit');
+    $this->assertNoLinkByHref('file/' . $files['public_document']->fid . '/delete');
+
+    // Verify no tableselect.
+    $this->assertNoFieldByName('files[' . $files['public_image']->fid . ']', '', t('No tableselect found.'));
+
+    // Verify private file is displayed with permission.
+    $this->drupalLogout();
+    $this->drupalLogin($this->base_user_2);
+    $this->drupalGet('admin/content/file');
+    $this->assertResponse(200);
+    $this->assertLinkByHref('file/' . $files['private_document']->fid);
+    // Verify no operation links are displayed.
+    $this->assertNoLinkByHref('file/' . $files['private_document']->fid . '/edit');
+    $this->assertNoLinkByHref('file/' . $files['private_document']->fid . '/delete');
+
+    // Verify user cannot see private file of other users.
+    $this->assertNoLinkByHref('file/' . $files['private_image']->fid);
+    $this->assertNoLinkByHref('file/' . $files['private_image']->fid . '/edit');
+    $this->assertNoLinkByHref('file/' . $files['private_image']->fid . '/delete');
+
+    // Verify no tableselect.
+    $this->assertNoFieldByName('files[' . $files['private_document']->fid . ']', '', t('No tableselect found.'));
+
+    // Verify private file is displayed with permission.
+    $this->drupalLogout();
+    $this->drupalLogin($this->base_user_3);
+    $this->drupalGet('admin/content/file');
+    $this->assertResponse(200);
+
+    // Verify user can see private file of other users.
+    $this->assertLinkByHref('file/' . $files['private_document']->fid);
+    $this->assertLinkByHref('file/' . $files['private_image']->fid);
+
+    // Verify operation links are displayed for users with appropriate permission.
+    $this->drupalLogout();
+    $this->drupalLogin($this->base_user_4);
+    $this->drupalGet('admin/content/file');
+    $this->assertResponse(200);
+    foreach ($files as $file) {
+      $this->assertLinkByHref('file/' . $file->fid);
+      $this->assertLinkByHref('file/' . $file->fid . '/edit');
+      $this->assertLinkByHref('file/' . $file->fid . '/delete');
+    }
+
+    // Verify file access can be bypassed.
+    $this->drupalLogout();
+    $this->drupalLogin($this->admin_user);
+    $this->drupalGet('admin/content/file');
+    $this->assertResponse(200);
+    foreach ($files as $file) {
+      $this->assertLinkByHref('file/' . $file->fid);
+      $this->assertLinkByHref('file/' . $file->fid . '/edit');
+      $this->assertLinkByHref('file/' . $file->fid . '/delete');
+    }
+  }
+}
+
+class FileEntityReplaceTestCase extends FileEntityTestHelper {
+  public static function getInfo() {
+    return array(
+      'name' => 'File replacement',
+      'description' => 'Test file replace functionality.',
+      'group' => 'File entity',
+    );
+  }
+
+  function setUp() {
+    parent::setUp();
+    parent::setUpFiles();
+  }
+
+  /**
+   * @todo Test image dimensions for an image field are reset when a file is replaced.
+   * @todo Test image styles are cleared when an image is updated.
+   */
+  function testReplaceFile() {
+    // Select the first text test file to use.
+    $file = reset($this->files['text']);
+
+    // Create a user with file edit permissions.
+    $user = $this->drupalCreateUser(array('edit any document files'));
+    $this->drupalLogin($user);
+
+    // Test that the Upload widget appears for a local file.
+    $this->drupalGet('file/' . $file->fid . '/edit');
+    $this->assertFieldByName('files[replace_upload]');
+
+    // Test that file saves without uploading a file.
+    $this->drupalPost(NULL, array(), t('Save'));
+    $this->assertText(t('Document @file has been updated.', array('@file' => $file->filename)), 'File was updated without file upload.');
+
+    // Get the next text file to use as a replacement.
+    $original = clone $file;
+    $replacement = next($this->files['text']);
+
+    // Test that the file saves when uploading a replacement file.
+    $edit = array();
+    $edit['files[replace_upload]'] = drupal_realpath($replacement->uri);
+    $this->drupalPost('file/' . $file->fid . '/edit', $edit, t('Save'));
+    $this->assertText(t('Document @file has been updated.', array('@file' => $file->filename)), 'File was updated with file upload.');
+
+    // Re-load the file from the database.
+    $file = file_load($file->fid);
+
+    // Test how file properties changed after the file has been replaced.
+    $this->assertEqual($file->filename, $original->filename, 'Updated file name did not change.');
+    $this->assertNotEqual($file->filesize, $original->filesize, 'Updated file size changed from previous file.');
+    $this->assertEqual($file->filesize, $replacement->filesize, 'Updated file size matches uploaded file.');
+    $this->assertEqual(file_get_contents($replacement->uri), file_get_contents($file->uri), 'Updated file contents matches uploaded file.');
+
+    // Get an image file.
+    $image = reset($this->files['image']);
+    $edit['files[replace_upload]'] = drupal_realpath($image->uri);
+
+    // Test that validation works by uploading a non-text file as a replacement.
+    $this->drupalPost('file/' . $file->fid . '/edit', $edit, t('Save'));
+    $this->assertRaw(t('The specified file %file could not be uploaded. Only files with the following extensions are allowed:', array('%file' => $image->filename)), 'File validation works, upload failed correctly.');
+
+    // Create a non-local file record.
+    $file2 = new stdClass();
+    $file2->uri = 'oembed://' . $this->randomName();
+    $file2->filename = drupal_basename($file2->uri);
+    $file2->filemime = 'image/oembed';
+    $file2->type = 'image';
+    $file2->uid = 1;
+    $file2->timestamp = REQUEST_TIME;
+    $file2->filesize = 0;
+    $file2->status = 0;
+    // Write the record directly rather than calling file_save() so we don't
+    // invoke the hooks.
+    $this->assertTrue(drupal_write_record('file_managed', $file2), 'Non-local file was added to the database.');
+
+    // Test that Upload widget does not appear for non-local file.
+    $this->drupalGet('file/' . $file2->fid . '/edit');
+    $this->assertNoFieldByName('files[replace_upload]');
+  }
+}
+
+class FileEntityTokenTestCase extends FileEntityTestHelper {
+  public static function getInfo() {
+    return array(
+      'name' => 'File entity tokens',
+      'description' => 'Test the file entity tokens.',
+      'group' => 'File entity',
+    );
+  }
+
+  function setUp() {
+    parent::setUp();
+    parent::setUpFiles();
+  }
+
+  function testFileEntityTokens() {
+    $tokens = array(
+      'type' => 'Document',
+      'type:name' => 'Document',
+      'type:machine-name' => 'document',
+      'type:count' => count($this->files['text']),
+    );
+    $this->assertTokens('file', array('file' => $this->files['text'][0]), $tokens);
+
+    $tokens = array(
+      'type' => 'Image',
+      'type:name' => 'Image',
+      'type:machine-name' => 'image',
+      'type:count' => count($this->files['image']),
+    );
+    $this->assertTokens('file', array('file' => $this->files['image'][0]), $tokens);
+  }
+
+  function assertTokens($type, array $data, array $tokens, array $options = array()) {
+    $token_input = drupal_map_assoc(array_keys($tokens));
+    $values = token_generate($type, $token_input, $data, $options);
+    foreach ($tokens as $token => $expected) {
+      if (!isset($expected)) {
+        $this->assertTrue(!isset($values[$token]), t("Token value for [@type:@token] was not generated.", array('@type' => $type, '@token' => $token)));
+      }
+      elseif (!isset($values[$token])) {
+        $this->fail(t("Token value for [@type:@token] was not generated.", array('@type' => $type, '@token' => $token)));
+      }
+      elseif (!empty($options['regex'])) {
+        $this->assertTrue(preg_match('/^' . $expected . '$/', $values[$token]), t("Token value for [@type:@token] was '@actual', matching regular expression pattern '@expected'.", array('@type' => $type, '@token' => $token, '@actual' => $values[$token], '@expected' => $expected)));
+      }
+      else {
+        $this->assertIdentical($values[$token], $expected, t("Token value for [@type:@token] was '@actual', expected value '@expected'.", array('@type' => $type, '@token' => $token, '@actual' => $values[$token], '@expected' => $expected)));
+      }
+    }
+
+    return $values;
+  }
+}
+
+class FileEntityTypeTestCase extends FileEntityTestHelper {
+  public static function getInfo() {
+    return array(
+      'name' => 'File entity types',
+      'description' => 'Test the file entity types.',
+      'group' => 'File entity',
+    );
+  }
+
+  function setUp() {
+    parent::setUp();
+    parent::setUpFiles();
+  }
+
+  /**
+   * Test admin pages access and functionality.
+   */
+  function testAdminPages() {
+    // Create a user with file type administration access.
+    $user = $this->drupalCreateUser(array('administer file types'));
+    $this->drupalLogin($user);
+
+    $this->drupalGet('admin/structure/file-types');
+    $this->assertResponse(200, 'File types admin page is accessible');
+  }
+
+  /**
+   * Test creating a new type. Basic CRUD.
+   */
+  function testCreate() {
+    $type_machine_type = 'foo';
+    $type_machine_label = 'foobar';
+    $type = $this->createFileType(array('type' => $type_machine_type, 'label' => $type_machine_label));
+    $loaded_type = file_type_load($type_machine_type);
+    $this->assertEqual($loaded_type->label, $type_machine_label, "Was able to create a type and retreive it.");
+  }
+
+
+  /**
+   * Ensures that the weight is respected when types are created.
+   * @return unknown_type
+   */
+  function testOrder() {
+//    $type = $this->createFileType(array('name' => 'last', 'label' => 'Last', 'weight' => 100));
+//    $type = $this->createFileType(array('name' => 'first', 'label' => 'First'));
+//    $types = media_type_get_types();
+//    $keys = array_keys($types);
+//    $this->assertTrue(isset($types['last']) && isset($types['first']), "Both types saved");
+//    $this->assertTrue(array_search('last', $keys) > array_search('first', $keys), 'Type which was supposed to be first came first');
+  }
+
+  /**
+   * Test view mode assignment.  Currently fails, don't know why.
+   * @return unknown_type
+   */
+  function testViewModesAssigned() {
+  }
+
+  /**
+   * Make sure candidates are presented in the case of multiple
+   * file types.
+   */
+  function testTypeWithCandidates() {
+    // Create multiple file types with the same mime types.
+    $types = array(
+      'image1' => $this->createFileType(array('type' => 'image1', 'label' => 'Image 1')),
+      'image2' => $this->createFileType(array('type' => 'image2', 'label' => 'Image 2'))
+    );
+
+    // Attach a text field to one of the file types.
+    $field = array(
+      'field_name' => drupal_strtolower($this->randomName()),
+      'type' => 'text',
+      'settings' => array(
+        'max_length' => 255,
+      )
+    );
+    field_create_field($field);
+    $instance = array(
+      'field_name' => $field['field_name'],
+      'entity_type' => 'file',
+      'bundle' => 'image2',
+      'widget' => array(
+        'type' => 'text_textfield',
+      ),
+      'display' => array(
+        'default' => array(
+          'type' => 'text_default',
+        ),
+      ),
+    );
+    field_create_instance($instance);
+
+    // Create a user with file creation access.
+    $user = $this->drupalCreateUser(array('create files'));
+    $this->drupalLogin($user);
+
+    // Step 1: Upload file
+    $file = reset($this->files['image']);
+    $edit = array();
+    $edit['files[upload]'] = drupal_realpath($file->uri);
+    $this->drupalPost('file/add', $edit, t('Next'));
+
+    // Step 2: Select file type candidate
+    $this->assertText('Image 1', 'File type candidate list item found.');
+    $this->assertText('Image 2', 'File type candidate list item found.');
+    $edit = array();
+    $edit['type'] = 'image2';
+    $this->drupalPost(NULL, $edit, t('Next'));
+
+    // Step 3: Select file scheme candidate
+    $this->assertText('Public local files served by the webserver.', 'File scheme candidate list item found.');
+    $this->assertText('Private local files served by Drupal.', 'File scheme candidate list item found.');
+    $edit = array();
+    $edit['scheme'] = 'public';
+    $this->drupalPost(NULL, $edit, t('Next'));
+
+    // Step 4: Complete field widgets
+    $langcode = LANGUAGE_NONE;
+    $edit = array();
+    $edit["{$field['field_name']}[$langcode][0][value]"] = $this->randomName();
+    $this->drupalPost(NULL, $edit, t('Save'));
+    $this->assertRaw(t('!type %name was uploaded.', array('!type' => 'Image 2', '%name' => $file->filename)), t('Image 2 file updated.'));
+    $this->assertText($field['field_name'], 'File text field was found.');
+  }
+
+  /**
+   * Make sure no candidates appear when only one mime type is available.
+   * NOTE: Depends on file_entity.module default 'image' type.
+   */
+  function testTypeWithoutCandidates() {
+    // Attach a text field to the default image file type.
+    $field = array(
+      'field_name' => drupal_strtolower($this->randomName()),
+      'type' => 'text',
+      'settings' => array(
+        'max_length' => 255,
+      )
+    );
+    field_create_field($field);
+    $instance = array(
+      'field_name' => $field['field_name'],
+      'entity_type' => 'file',
+      'bundle' => 'image',
+      'widget' => array(
+        'type' => 'text_textfield',
+      ),
+      'display' => array(
+        'default' => array(
+          'type' => 'text_default',
+        ),
+      ),
+    );
+    field_create_instance($instance);
+
+    // Create a user with file creation access.
+    $user = $this->drupalCreateUser(array('create files'));
+    $this->drupalLogin($user);
+
+    // Step 1: Upload file
+    $file = reset($this->files['image']);
+    $edit = array();
+    $edit['files[upload]'] = drupal_realpath($file->uri);
+    $this->drupalPost('file/add', $edit, t('Next'));
+
+    // Step 2: Scheme selection
+    if ($this->xpath('//input[@name="scheme"]')) {
+      $this->drupalPost(NULL, array(), t('Next'));
+    }
+
+    // Step 3: Complete field widgets
+    $langcode = LANGUAGE_NONE;
+    $edit = array();
+    $edit["{$field['field_name']}[$langcode][0][value]"] = $this->randomName();
+    $this->drupalPost(NULL, $edit, t('Save'));
+    $this->assertRaw(t('!type %name was uploaded.', array('!type' => 'Image', '%name' => $file->filename)), t('Image file uploaded.'));
+    $this->assertText($field['field_name'], 'File text field was found.');
+  }
+
+  /**
+   * Test file types CRUD UI.
+   */
+  function testTypesCrudUi() {
+    $this->drupalGet('admin/structure/file-types');
+    $this->assertResponse(403, 'File types UI page is not accessible to unauthorized users.');
+
+    $user = $this->drupalCreateUser(array('administer file types'));
+    $this->drupalLogin($user);
+
+    $this->drupalGet('admin/structure/file-types');
+    $this->assertResponse(200, 'File types UI page is accessible to users with adequate permission.');
+
+    // Create new file type.
+    $edit = array(
+      'label' => t('Test type'),
+      'type' => 'test_type',
+      'description' => t('This is dummy file type used just for testing.'),
+      'mimetypes' => 'image/png',
+    );
+    $this->drupalGet('admin/structure/file-types/add');
+    $this->drupalPost(NULL, $edit, t('Save'));
+    $this->assertText(t('The file type @type has been updated.', array('@type' => $edit['label'])), 'New file type successfully created.');
+    $this->assertText($edit['label'], 'New file type created: label found.');
+    $this->assertText($edit['description'], 'New file type created: description found.');
+    $this->assertFieldByXPath("//table//tr[1]//td[7]", t('Normal'), 'Newly created file type is stored in DB.');
+    $this->assertLink(t('disable'), 0, 'Able to disable newly created file type.');
+    $this->assertLink(t('delete'), 0, 'Able to delete newly created file type.');
+    $this->assertLinkByHref('admin/structure/file-types/manage/' . $edit['type'] . '/disable', 0, 'Disable link points to disable confirmation page.');
+    $this->assertLinkByHref('admin/structure/file-types/manage/' . $edit['type'] . '/delete', 0, 'Delete link points to delete confirmation page.');
+
+    // Edit file type.
+    $this->drupalGet('admin/structure/file-types/manage/' . $edit['type'] . '/edit');
+    $this->assertRaw(t('Save'), 'Save button found on edit page.');
+    $this->assertRaw(t('Delete'), 'Delete button found on edit page.');
+    $this->assertRaw($edit['label'], 'Label found on file type edit page');
+    $this->assertText($edit['description'], 'Description found on file type edit page');
+    $this->assertText($edit['mimetypes'], 'Mime-type configuration found on file type edit page');
+    $this->assertText(t('Mimetype List'), 'Mimetype list present on edit form.');
+
+    // Modify file type.
+    $edit['label'] = t('New type label');
+    $this->drupalPost(NULL, array('label' => $edit['label']), t('Save'));
+    $this->assertText(t('The file type @type has been updated.', array('@type' => $edit['label'])), 'File type was modified.');
+    $this->assertText($edit['label'], 'Modified label found on file types list.');
+
+    // Disable and re-enable file type.
+    $this->drupalGet('admin/structure/file-types/manage/' . $edit['type'] . '/disable');
+    $this->assertText(t('Are you sure you want to disable the file type @type?', array('@type' => $edit['label'])), 'Disable confirmation page found.');
+    $this->drupalPost(NULL, array(), t('Disable'));
+    $this->assertText(t('The file type @type has been disabled.', array('@type' => $edit['label'])), 'Disable confirmation message found.');
+    $this->assertFieldByXPath("//table//tr[5]//td[1]", $edit['label'], 'Disabled type moved to the tail of the list.');
+    $this->assertLink(t('enable'), 0, 'Able to re-enable newly created file type.');
+    $this->assertLinkByHref('admin/structure/file-types/manage/' . $edit['type'] . '/enable', 0, 'Enable link points to enable confirmation page.');
+    $this->drupalGet('admin/structure/file-types/manage/' . $edit['type'] . '/enable');
+    $this->assertText(t('Are you sure you want to enable the file type @type?', array('@type' => $edit['label'])), 'Enable confirmation page found.');
+    $this->drupalPost(NULL, array(), t('Enable'));
+    $this->assertText(t('The file type @type has been enabled.', array('@type' => $edit['label'])), 'Enable confirmation message found.');
+    $this->assertFieldByXPath("//table//tr[1]//td[1]", $edit['label'], 'Enabled type moved to the top of the list.');
+
+    // Delete newly created type.
+    $this->drupalGet('admin/structure/file-types/manage/' . $edit['type'] . '/delete');
+    $this->assertText(t('Are you sure you want to delete the file type @type?', array('@type' => $edit['label'])), 'Delete confirmation page found.');
+    $this->drupalPost(NULL, array(), t('Delete'));
+    $this->assertText(t('The file type @type has been deleted.', array('@type' => $edit['label'])), 'Delete confirmation message found.');
+    $this->drupalGet('admin/structure/file-types');
+    $this->assertNoText($edit['label'], 'File type successfully deleted.');
+
+    // Edit exported file type.
+    $this->drupalGet('admin/structure/file-types/manage/image/edit');
+    $this->assertRaw(t('Image'), 'Label found on file type edit page');
+    $this->assertText("image/*", 'Mime-type configuration found on file type edit page');
+    $this->drupalPost(NULL, array('label' => t('Funky images')), t('Save'));
+    $this->assertText(t('The file type @type has been updated.', array('@type' => t('Funky images'))), 'File type was modified.');
+    $this->assertText(t('Funky image'), 'Modified label found on file types list.');
+    $this->assertFieldByXPath("//table//tr[1]//td[7]", t('Overridden'), 'Modified type overrides configuration from code.');
+    $this->assertLink(t('revert'), 0, 'Able to revert overridden file type.');
+    $this->assertLinkByHref('admin/structure/file-types/manage/image/revert', 0, 'Revert link points to revert confirmation page.');
+
+    // Revert file type.
+    $this->drupalGet('admin/structure/file-types/manage/image/revert');
+    $this->assertText(t('Are you sure you want to revert the file type @type?', array('@type' => t('Funky images'))), 'Revert confirmation page found.');
+    $this->drupalPost(NULL, array(), t('Revert'));
+    $this->assertText(t('The file type @type has been reverted.', array('@type' => t('Funky images'))), 'Revert confirmation message found.');
+    $this->assertText(t('Image'), 'Reverted file type found in list.');
+    $this->assertFieldByXPath("//table//tr[1]//td[7]", t('Default'), 'Reverted file type shows correct state.');
+  }
+}
+
+class FileEntityAccessTestCase extends FileEntityTestHelper {
+
+  public static function getInfo() {
+    return array(
+      'name' => 'File entity access',
+      'description' => 'Test the access aspects of file entity.',
+      'group' => 'File entity',
+    );
+  }
+
+  function setUp() {
+    parent::setUp();
+    parent::setUpFiles();
+  }
+
+  /**
+   * Asserts file_entity_access correctly grants or denies access.
+   */
+  function assertFileEntityAccess($ops, $file, $account) {
+    foreach ($ops as $op => $result) {
+      $msg = t("file_entity_access returns @result with operation '@op'.", array('@result' => $result ? 'true' : 'false', '@op' => $op));
+      $this->assertEqual($result, file_entity_access($op, $file, $account), $msg);
+    }
+  }
+
+  /**
+   * Runs basic tests for file_entity_access function.
+   */
+  function testFileEntityAccess() {
+    $file = reset($this->files['image']);
+
+    // Ensures user with 'bypass file access' permission can do everything.
+    $web_user = $this->drupalCreateUser(array('bypass file access'));
+    $this->assertFileEntityAccess(array('create' => TRUE), NULL, $web_user);
+    $this->assertFileEntityAccess(array('view' => TRUE, 'download' => TRUE, 'update' => TRUE, 'delete' => TRUE), $file, $web_user);
+
+    // A user with 'administer files' should not access CRUD operations.
+    $web_user = $this->drupalCreateUser(array('administer files'));
+    $this->assertFileEntityAccess(array('view' => FALSE, 'download' => FALSE, 'update' => FALSE, 'delete' => FALSE), $file, $web_user);
+
+    // User cannot 'view files'.
+    $web_user = $this->drupalCreateUser(array('create files'));
+    $this->assertFileEntityAccess(array('view' => FALSE), $file, $web_user);
+    // But can upload new ones.
+    $this->assertFileEntityAccess(array('create' => TRUE), NULL, $web_user);
+
+    // User can view own files but no other files.
+    $web_user = $this->drupalCreateUser(array('create files', 'view own files'));
+    $this->assertFileEntityAccess(array('view' => FALSE), $file, $web_user);
+    $file->uid = $web_user->uid;
+    $file->status = FILE_STATUS_PERMANENT;
+    file_save($file);
+    $this->assertFileEntityAccess(array('view' => TRUE), $file, $web_user);
+
+    // User can download own files but no other files.
+    $web_user = $this->drupalCreateUser(array('create files', 'download own image files'));
+    $this->assertFileEntityAccess(array('download' => FALSE), $file, $web_user);
+    $file->uid = $web_user->uid;
+    $file->status = FILE_STATUS_PERMANENT;
+    file_save($file);
+    $this->assertFileEntityAccess(array('download' => TRUE), $file, $web_user);
+
+    // User can update own files but no other files.
+    $web_user = $this->drupalCreateUser(array('create files', 'view own files', 'edit own image files'));
+    $this->assertFileEntityAccess(array('update' => FALSE), $file, $web_user);
+    $file->uid = $web_user->uid;
+    $file->status = FILE_STATUS_PERMANENT;
+    file_save($file);
+    $this->assertFileEntityAccess(array('update' => TRUE), $file, $web_user);
+
+    // User can delete own files but no other files.
+    $web_user = $this->drupalCreateUser(array('create files', 'view own files', 'edit own image files', 'delete own image files'));
+    $this->assertFileEntityAccess(array('delete' => FALSE), $file, $web_user);
+    $file->uid = $web_user->uid;
+    $file->status = FILE_STATUS_PERMANENT;
+    file_save($file);
+    $this->assertFileEntityAccess(array('delete' => TRUE), $file, $web_user);
+
+    // User can view any file.
+    $web_user = $this->drupalCreateUser(array('create files', 'view files'));
+    $this->assertFileEntityAccess(array('view' => TRUE), $file, $web_user);
+
+    // User can download any file.
+    $web_user = $this->drupalCreateUser(array('create files', 'download any image files'));
+    $this->assertFileEntityAccess(array('download' => TRUE), $file, $web_user);
+
+    // User can edit any file.
+    $web_user = $this->drupalCreateUser(array('create files', 'view files', 'edit any image files'));
+    $this->assertFileEntityAccess(array('update' => TRUE), $file, $web_user);
+
+    // User can delete any file.
+    $web_user = $this->drupalCreateUser(array('create files', 'view files', 'edit any image files', 'delete any image files'));
+    $this->assertFileEntityAccess(array('delete' => TRUE), $file, $web_user);
+  }
+
+  /**
+   * Test to see if we have access to view files when granted the permissions.
+   * In this test we aim to prove the permissions work in the following pages:
+   *  file/add
+   *  file/%/view
+   *  file/%/download
+   *  file/%/edit
+   *  file/%/delete
+   */
+  function testFileEntityPageAccess() {
+    $web_user = $this->drupalCreateUser(array());
+    $this->drupalLogin($web_user);
+    $this->drupalGet('file/add');
+    $this->assertResponse(403, 'Users without access can not access the file add page');
+    $web_user = $this->drupalCreateUser(array('create files'));
+    $this->drupalLogin($web_user);
+    $this->drupalGet('file/add');
+    $this->assertResponse(200, 'Users with access can access the file add page');
+
+    $file = reset($this->files['text']);
+    $file->status = FILE_STATUS_PERMANENT;
+    file_save($file);
+
+    // This fails.. No clue why but, tested manually and works as should.
+    //$web_user = $this->drupalCreateUser(array('view own files'));
+    //$this->drupalLogin($web_user);
+    //$this->drupalGet("file/{$file->fid}/view");
+    //$this->assertResponse(403, 'Users without access can not access the file view page');
+    $web_user = $this->drupalCreateUser(array('view files'));
+    $this->drupalLogin($web_user);
+    $this->drupalGet("file/{$file->fid}/view");
+    $this->assertResponse(200, 'Users with access can access the file view page');
+
+    $url = "file/{$file->fid}/download";
+    $web_user = $this->drupalCreateUser(array());
+    $this->drupalLogin($web_user);
+    $this->drupalGet($url, array('query' => array('token' => $this->drupalGetToken($url))));
+    $this->assertResponse(403, 'Users without access can not download the file');
+    $web_user = $this->drupalCreateUser(array('download any document files'));
+    $this->drupalLogin($web_user);
+    $this->drupalGet($url, array('query' => array('token' => $this->drupalGetToken($url))));
+    $this->assertResponse(200, 'Users with access can download the file');
+    $this->drupalGet($url, array('query' => array('token' => 'invalid-token')));
+    $this->assertResponse(403, 'Cannot download file with in invalid token.');
+    $this->drupalGet($url);
+    $this->assertResponse(403, 'Cannot download file without a token.');
+
+    $web_user = $this->drupalCreateUser(array());
+    $this->drupalLogin($web_user);
+    $this->drupalGet("file/{$file->fid}/edit");
+    $this->assertResponse(403, 'Users without access can not access the file edit page');
+    $web_user = $this->drupalCreateUser(array('edit any document files'));
+    $this->drupalLogin($web_user);
+    $this->drupalGet("file/{$file->fid}/edit");
+    $this->assertResponse(200, 'Users with access can access the file add page');
+
+    $web_user = $this->drupalCreateUser(array());
+    $this->drupalLogin($web_user);
+    $this->drupalGet("file/{$file->fid}/delete");
+    $this->assertResponse(403, 'Users without access can not access the file view page');
+    $web_user = $this->drupalCreateUser(array('delete any document files'));
+    $this->drupalLogin($web_user);
+    $this->drupalGet("file/{$file->fid}/delete");
+    $this->assertResponse(200, 'Users with access can access the file add page');
+  }
+
+  /**
+   * Test to see if we have access to download private files when granted the permissions.
+   */
+  function testFileEntityPrivateDownloadAccess() {
+    foreach ($this->getPrivateDownloadAccessCases() as $case) {
+      // Create users and login only if non-anonymous.
+      $authenticated_user = !is_null($case['permissions']);
+      if ($authenticated_user) {
+        $account = $this->drupalCreateUser($case['permissions']);
+        $this->drupalLogin($account);
+      }
+
+      // Create private, permanent files owned by this user only he's an owner.
+      if (!empty($case['owner'])) {
+        $file = next($this->files['text']);
+        $file->status = FILE_STATUS_PERMANENT;
+        $file->uid = $account->uid;
+        file_save($file);
+        $file = file_move($file, 'private://');
+
+        // Check if the physical file is there.
+        $arguments = array('%name' => $file->filename, '%username' => $account->name, '%uri' => $file->uri);
+        $this->assertTrue(is_file($file->uri), format_string('File %name owned by %username successfully created at %uri.', $arguments));
+        $url = file_create_url($file->uri);
+        $message_file_info = ' ' . format_string('File %uri was checked.', array('%uri' => $file->uri));
+      }
+
+      // Try to download the file.
+      $this->drupalGet($url);
+      $this->assertResponse($case['expect'], $case['message'] . $message_file_info);
+
+      // Logout authenticated users.
+      if ($authenticated_user) {
+        $this->drupalLogout();
+      }
+    }
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.theme.inc b/profiles/commons/modules/contrib/file_entity/file_entity.theme.inc
new file mode 100644
index 0000000..123b83e
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.theme.inc
@@ -0,0 +1,160 @@
+<?php
+
+/**
+ * @file
+ * Theme callbacks for the file entity module.
+ */
+
+/**
+ * Copy of theme_file_file_link() for linking to the view file page.
+ *
+ * @see theme_file_file_link()
+ */
+function theme_file_entity_file_link($variables) {
+  $file = $variables['file'];
+  $icon_directory = $variables['icon_directory'];
+
+  $url = 'file/' . $file->fid;
+  $icon = theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));
+
+  // Set options as per anchor format described at
+  // http://microformats.org/wiki/file-format-examples
+  $options = array(
+    'attributes' => array(
+      'type' => $file->filemime . '; length=' . $file->filesize,
+    ),
+  );
+
+  // Use the description as the link text if available.
+  if (empty($file->description)) {
+    $link_text = $file->filename;
+  }
+  else {
+    $link_text = $file->description;
+    $options['attributes']['title'] = check_plain($file->filename);
+  }
+
+  return '<span class="file">' . $icon . ' ' . l($link_text, $url, $options) . '</span>';
+}
+
+/**
+ * Copy of theme_file_file_link() for linking to the file download URL.
+ *
+ * @see theme_file_file_link()
+ */
+function theme_file_entity_download_link($variables) {
+  $file = $variables['file'];
+  $icon_directory = $variables['icon_directory'];
+
+  $uri = file_entity_download_uri($file);
+  $icon = theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));
+
+  // Set options as per anchor format described at
+  // http://microformats.org/wiki/file-format-examples
+  $uri['options']['attributes']['type'] = $file->filemime . '; length=' . $file->filesize;
+
+  // Provide the default link text.
+  if (!isset($variables['text'])) {
+    $variables['text'] = t('Download [file:name]');
+  }
+
+  // Peform unsanitized token replacement if $uri['options']['html'] is empty
+  // since then l() will escape the link text.
+  $variables['text'] = token_replace($variables['text'], array('file' => $file), array('clear' => TRUE, 'sanitize' => empty($uri['options']['html'])));
+
+  $output = '<span class="file">' . $icon . ' ' . l($variables['text'], $uri['path'], $uri['options']);
+  $output .= ' ' . '<span class="file-size">(' . format_size($file->filesize) . ')</span>';
+  $output .= '</span>';
+
+  return $output;
+}
+
+/**
+ * Returns HTML for displaying an HTML5 <audio> tag.
+ *
+ * @param array $variables
+ *   An associative array containing:
+ *   - file: Associative array of file data, which must include "uri".
+ *   - controls: Boolean indicating whether or not controls should be displayed.
+ *   - autoplay: Boolean indicating whether or not the audio should start
+ *     playing automatically.
+ *   - loop: Boolean indicating whether or not the audio should loop.
+ *
+ * @ingroup themeable
+ */
+function theme_file_entity_file_audio($variables) {
+  $files = $variables['files'];
+  $output = '';
+
+  $audio_attributes = array();
+  if ($variables['controls']) {
+    $audio_attributes['controls'] = 'controls';
+  }
+  if ($variables['autoplay']) {
+    $audio_attributes['autoplay'] = 'autoplay';
+  }
+  if ($variables['loop']) {
+    $audio_attributes['loop'] = 'loop';
+  }
+
+  $output .= '<audio' . drupal_attributes($audio_attributes) . '>';
+  foreach ($files as $delta => $file) {
+    $source_attributes = array(
+      'src' => file_create_url($file['uri']),
+      'type' => $file['filemime'],
+    );
+    $output .= '<source' . drupal_attributes($source_attributes) . ' />';
+  }
+  $output .= '</audio>';
+  return $output;
+}
+
+/**
+ * Returns HTML for displaying an HTML5 <video> tag.
+ *
+ * @param array $variables
+ *   An associative array containing:
+ *   - file: Associative array of file data, which must include "uri".
+ *   - controls: Boolean indicating whether or not controls should be displayed.
+ *   - autoplay: Boolean indicating whether or not the video should start
+ *     playing automatically.
+ *   - loop: Boolean indicating whether or not the video should loop.
+ *   - muted: Boolean indicating whether or not the sound should be muted.
+ *   - width: Width, in pixels, of the video player.
+ *   - height: Height, in pixels, of the video player.
+ *
+ * @ingroup themeable
+ */
+function theme_file_entity_file_video($variables) {
+  $files = $variables['files'];
+  $output = '';
+
+  $video_attributes = array();
+  if ($variables['controls']) {
+    $video_attributes['controls'] = 'controls';
+  }
+  if ($variables['autoplay']) {
+    $video_attributes['autoplay'] = 'autoplay';
+  }
+  if ($variables['loop']) {
+    $video_attributes['loop'] = 'loop';
+  }
+  if ($variables['muted']) {
+    $video_attributes['muted'] = 'muted';
+  }
+  if ($variables['width'] && $variables['height']) {
+    $video_attributes['width'] = $variables['width'];
+    $video_attributes['height'] = $variables['height'];
+  }
+
+  $output .= '<video' . drupal_attributes($video_attributes) . '>';
+  foreach ($files as $delta => $file) {
+    $source_attributes = array(
+      'src' => file_create_url($file['uri']),
+      'type' => $file['filemime'],
+    );
+    $output .= '<source' . drupal_attributes($source_attributes) . ' />';
+  }
+  $output .= '</video>';
+  return $output;
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.tokens.inc b/profiles/commons/modules/contrib/file_entity/file_entity.tokens.inc
new file mode 100644
index 0000000..d3d1a30
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.tokens.inc
@@ -0,0 +1,133 @@
+<?php
+
+/**
+ * @file
+ * Token integration for the file_entity module.
+ */
+
+/**
+ * Implements hook_token_info().
+ */
+function file_entity_token_info() {
+  // File type tokens.
+  $info['types']['file-type'] = array(
+    'name' => t('File type'),
+    'description' => t('Tokens associated with file types.'),
+    'needs-data' => 'file_type',
+  );
+  $info['tokens']['file-type']['name'] = array(
+    'name' => t('Name'),
+    'description' => t('The name of the file type.'),
+  );
+  $info['tokens']['file-type']['machine-name'] = array(
+    'name' => t('Machine-readable name'),
+    'description' => t('The unique machine-readable name of the file type.'),
+  );
+  $info['tokens']['file-type']['count'] = array(
+    'name' => t('File count'),
+    'description' => t('The number of files belonging to the file type.'),
+  );
+  $info['tokens']['file-type']['edit-url'] = array(
+    'name' => t('Edit URL'),
+    'description' => t("The URL of the file type's edit page."),
+  );
+
+  // File tokens.
+  $info['tokens']['file']['type'] = array(
+    'name' => t('File type'),
+    'description' => t('The file type of the file.'),
+    'type' => 'file-type',
+  );
+  $info['tokens']['file']['download-url'] = array(
+    'name' => t('Download URL'),
+    'description' => t('The URL to download the file directly.'),
+    'type' => 'url',
+  );
+
+  return $info;
+}
+
+/**
+ * Implements hook_token_info_alter().
+ */
+function file_entity_token_info_alter(&$info) {
+  $info['tokens']['file']['name']['description'] = t('The name of the file.');
+}
+
+/**
+ * Implements hook_tokens().
+ */
+function file_entity_tokens($type, $tokens, array $data = array(), array $options = array()) {
+  $replacements = array();
+
+  $url_options = array('absolute' => TRUE);
+  if (isset($options['language'])) {
+    $url_options['language'] = $options['language'];
+    $language_code = $options['language']->language;
+  }
+  else {
+    $language_code = NULL;
+  }
+
+  $sanitize = !empty($options['sanitize']);
+
+  // File tokens.
+  if ($type == 'file' && !empty($data['file'])) {
+    $file = $data['file'];
+
+    foreach ($tokens as $name => $original) {
+      switch ($name) {
+        case 'type':
+          if ($file_type = file_type_load($file->type)) {
+            $replacements[$original] = $sanitize ? check_plain($file_type->label) : $file_type->label;
+          }
+          break;
+
+        case 'download-url':
+          $uri = file_entity_download_uri($file);
+          $replacements[$original] = url($uri['path'], $uri['options'] + $url_options);
+          break;
+      }
+    }
+
+    // Chained token relationships.
+    if (($file_type_tokens = token_find_with_prefix($tokens, 'type')) && $file_type = file_type_load($file->type)) {
+      $replacements += token_generate('file-type', $file_type_tokens, array('file_type' => $file_type), $options);
+    }
+    if ($download_url_tokens = token_find_with_prefix($tokens, 'download-url')) {
+      $replacements += token_generate('url', $download_url_tokens, file_entity_download_uri($file), $options);
+    }
+  }
+
+  // File type tokens.
+  if ($type == 'file-type' && !empty($data['file_type'])) {
+    $file_type = $data['file_type'];
+
+    foreach ($tokens as $name => $original) {
+      switch ($name) {
+        case 'name':
+          $replacements[$original] = $sanitize ? check_plain($file_type->label) : $file_type->label;
+          break;
+
+        case 'machine-name':
+          // This is a machine name so does not ever need to be sanitized.
+          $replacements[$original] = $file_type->type;
+          break;
+
+        case 'count':
+          $query = db_select('file_managed');
+          $query->condition('type', $file_type->type);
+          $query->addTag('file_type_file_count');
+          $count = $query->countQuery()->execute()->fetchField();
+          $replacements[$original] = (int) $count;
+          break;
+
+        case 'edit-url':
+          $replacements[$original] = url('admin/structure/file-types/manage/' . $file_type->type . '/fields', $url_options);
+          break;
+      }
+    }
+  }
+
+  return $replacements;
+}
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.tpl.php b/profiles/commons/modules/contrib/file_entity/file_entity.tpl.php
new file mode 100644
index 0000000..cc12db7
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.tpl.php
@@ -0,0 +1,95 @@
+<?php
+
+/**
+ * @file
+ * Default theme implementation to display a file.
+ *
+ * Available variables:
+ * - $label: the (sanitized) file name of the file.
+ * - $content: An array of file items. Use render($content) to print them all,
+ *   or print a subset such as render($content['field_example']). Use
+ *   hide($content['field_example']) to temporarily suppress the printing of a
+ *   given element.
+ * - $user_picture: The file owner's picture from user-picture.tpl.php.
+ * - $date: Formatted added date. Preprocess functions can reformat it by
+ *   calling format_date() with the desired parameters on the $timestamp
+ *   variable.
+ * - $name: Themed username of file owner output from theme_username().
+ * - $file_url: Direct URL of the current file.
+ * - $display_submitted: Whether submission information should be displayed.
+ * - $submitted: Submission information created from $name and $date during
+ *   template_preprocess_file().
+ * - $classes: String of classes that can be used to style contextually through
+ *   CSS. It can be manipulated through the variable $classes_array from
+ *   preprocess functions. The default values can be one or more of the
+ *   following:
+ *   - file-entity: The current template type, i.e., "theming hook".
+ *   - file-[type]: The current file type. For example, if the file is a
+ *     "Image" file it would result in "file-image". Note that the machine
+ *     name will often be in a short form of the human readable label.
+ *   - file-[mimetype]: The current file's MIME type. For exampe, if the file
+ *     is a PNG image, it would result in "file-image-png"
+ * - $title_prefix (array): An array containing additional output populated by
+ *   modules, intended to be displayed in front of the main title tag that
+ *   appears in the template.
+ * - $title_suffix (array): An array containing additional output populated by
+ *   modules, intended to be displayed after the main title tag that appears in
+ *   the template.
+ *
+ * Other variables:
+ * - $file: Full file object. Contains data that may not be safe.
+ * - $type: File type, i.e. image, audio, video, etc.
+ * - $uid: User ID of the file owner.
+ * - $timestamp: Time the file was added formatted in Unix timestamp.
+ * - $classes_array: Array of html class attribute values. It is flattened
+ *   into a string within the variable $classes.
+ * - $zebra: Outputs either "even" or "odd". Useful for zebra striping in
+ *   listings.
+ * - $id: Position of the file. Increments each time it's output.
+ *
+ * File status variables:
+ * - $view_mode: View mode, e.g. 'default', 'full', etc.
+ * - $page: Flag for the full page state.
+ * - $is_front: Flags true when presented in the front page.
+ * - $logged_in: Flags true when the current user is a logged-in member.
+ * - $is_admin: Flags true when the current user is an administrator.
+ *
+ * Field variables: for each field instance attached to the file a corresponding
+ * variable is defined, e.g. $file->caption becomes $caption. When needing to
+ * access a field's raw values, developers/themers are strongly encouraged to
+ * use these variables. Otherwise they will have to explicitly specify the
+ * desired field language, e.g. $file->caption['en'], thus overriding any
+ * language negotiation rule that was previously applied.
+ *
+ * @see template_preprocess()
+ * @see template_preprocess_file_entity()
+ * @see template_process()
+ *
+ * @ingroup themeable
+ */
+?>
+<div id="<?php print $id; ?>" class="<?php print $classes ?>"<?php print $attributes; ?>>
+
+  <?php print render($title_prefix); ?>
+  <?php if (!$page): ?>
+    <h2<?php print $title_attributes; ?>><a href="<?php print $file_url; ?>"><?php print $label; ?></a></h2>
+  <?php endif; ?>
+  <?php print render($title_suffix); ?>
+
+  <?php if ($display_submitted): ?>
+    <div class="submitted">
+      <?php print $submitted; ?>
+    </div>
+  <?php endif; ?>
+
+  <div class="content"<?php print $content_attributes; ?>>
+    <?php
+      // We hide the links now so that we can render them later.
+      hide($content['links']);
+      print render($content);
+    ?>
+  </div>
+
+  <?php print render($content['links']); ?>
+
+</div>
diff --git a/profiles/commons/modules/contrib/file_entity/file_entity.views.inc b/profiles/commons/modules/contrib/file_entity/file_entity.views.inc
new file mode 100644
index 0000000..ea8b5a1
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/file_entity.views.inc
@@ -0,0 +1,150 @@
+<?php
+
+/**
+ * @file
+ * Views integration for the file_entity module.
+ */
+
+/**
+ * Implements hook_views_data().
+ */
+function file_entity_views_data() {
+  // File type.
+  $data['file_managed']['type'] = array(
+    'title' => t('Type'),
+    'help' => t('The type of the file (for example, "audio", "image", "video", etc).'),
+    'field' => array(
+      'handler' => 'views_handler_field_file_type',
+      'click sortable' => TRUE,
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_file_type',
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_file_type',
+    ),
+  );
+  // Rendered file.
+  $data['file_managed']['rendered'] = array(
+    'title' => t('Rendered'),
+    'help' => t('Display the file in a specific view mode.'),
+    'field' => array(
+      'handler' => 'views_handler_field_file_rendered',
+      'click sortable' => TRUE,
+      'real field' => 'fid',
+      'additional fields' => array(
+        'fid',
+      ),
+    ),
+  );
+
+  // View link.
+  $data['file_managed']['link'] = array(
+    'title' => t('Link'),
+    'help' => t('Provide a simple link to the file entity.'),
+    'field' => array(
+      'handler' => 'views_handler_field_file_link',
+      'real field' => 'fid',
+      'additional fields' => array(
+        'fid',
+      ),
+    ),
+  );
+
+  // Edit link.
+  $data['file_managed']['edit'] = array(
+    'title' => t('Edit link'),
+    'help' => t('Provide a simple link to edit the file entity.'),
+    'field' => array(
+      'handler' => 'views_handler_field_file_link_edit',
+      'real field' => 'fid',
+      'additional fields' => array(
+        'fid',
+      ),
+    ),
+  );
+
+  // Delete link.
+  $data['file_managed']['delete'] = array(
+    'title' => t('Delete link'),
+    'help' => t('Provide a simple link to delete the file entity.'),
+    'field' => array(
+      'handler' => 'views_handler_field_file_link_delete',
+      'real field' => 'fid',
+      'additional fields' => array(
+        'fid',
+      ),
+    ),
+  );
+
+  // Download link.
+  $data['file_managed']['download'] = array(
+    'title' => t('Download link'),
+    'help' => t('Provide a simple link to download the file entity.'),
+    'field' => array(
+      'handler' => 'views_handler_field_file_link_download',
+      'real field' => 'fid',
+      'additional fields' => array(
+        'fid',
+      ),
+    ),
+  );
+
+  // Usage link.
+  $data['file_managed']['usage'] = array(
+    'title' => t('Usage link'),
+    'help' => t('Provide a simple link to view the usage of the file entity.'),
+    'field' => array(
+      'handler' => 'views_handler_field_file_link_usage',
+      'real field' => 'fid',
+      'additional fields' => array(
+        'fid',
+      ),
+    ),
+  );
+
+  return $data;
+}
+
+/**
+ * Implements hook_views_data_alter().
+ */
+function file_entity_views_data_alter(&$data) {
+  // Add access tag for all queries against file_managed.
+  $data['file_managed']['table']['base']['access query tag'] = 'file_access';
+  // Override the filename field handler.
+  $data['file_managed']['filename']['field']['handler'] = 'views_handler_field_file_filename';
+}
+
+/**
+ * Implements hook_views_plugins().
+ */
+function file_entity_views_plugins() {
+  return array(
+    'module' => 'views', // This just tells our themes are elsewhere.
+    'row' => array(
+      'file' => array(
+        'title' => t('File'),
+        'help' => t('Display the file with standard file view.'),
+        'handler' => 'views_plugin_row_file_view',
+        'base' => array('file_managed'), // only works with 'file' as base.
+        'uses options' => TRUE,
+        'type' => 'normal',
+        'help topic' => 'style-file',
+      ),
+      'file_rss' => array(
+        'title' => t('File'),
+        'help' => t('Display the file with standard file view.'),
+        'handler' => 'views_plugin_row_file_rss',
+        'theme' => 'views_view_row_rss',
+        'base' => array('file_managed'), // only works with 'file' as base.
+        'uses options' => TRUE,
+        'type' => 'feed',
+        'help topic' => 'style-file-rss',
+      ),
+    ),
+  );
+}
diff --git a/profiles/commons/modules/contrib/file_entity/plugins/content_types/file_content.inc b/profiles/commons/modules/contrib/file_entity/plugins/content_types/file_content.inc
new file mode 100644
index 0000000..7895307
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/plugins/content_types/file_content.inc
@@ -0,0 +1,92 @@
+<?php
+
+/**
+ * Plugins are described by creating a $plugin array which will be used
+ * by the system that includes this file.
+ */
+$plugin = array(
+  'single' => TRUE,
+  'title' => t('File content'),
+  'description' => t('Display a full file with a view mode.'),
+  'required context' => new ctools_context_required(t('File'), 'entity:file'),
+  'category' => t('File'),
+  'defaults' => array(
+    'link' => FALSE,
+    'view_mode' => 'teaser',
+  ),
+);
+
+/**
+ * Render the node content.
+ */
+function file_entity_file_content_content_type_render($subtype, $conf, $panel_args, $context) {
+  if (!empty($context) && empty($context->data)) {
+    return;
+  }
+
+  $file = isset($context->data) ? clone($context->data) : NULL;
+  $block = new stdClass();
+  $block->module = 'file_entity';
+  $block->delta  = $file->fid;
+
+  if (empty($file)) {
+    $block->delta   = 'placeholder';
+    $block->title = t('File title.');
+    $block->content = t('File content goes here.');
+  }
+  else {
+    if (!empty($conf['identifier'])) {
+      $node->ctools_template_identifier = $conf['identifier'];
+    }
+
+    $block->title = $file->filename;
+    $block->content = file_build_content($file, $conf['view_mode']);
+  }
+
+  if (!empty($conf['link']) && $file) {
+    $block->title_link = entity_uri('file', $file);
+  }
+
+  return $block;
+}
+
+/**
+ * Returns an edit form for this plugin.
+ */
+function file_entity_file_content_content_type_edit_form($form, &$form_state) {
+  $conf = $form_state['conf'];
+
+  $form['link'] = array(
+    '#title' => t('Link title to file'),
+    '#type' => 'checkbox',
+    '#default_value' => $conf['link'],
+    '#description' => t('Check this to make the title link to the file.'),
+  );
+
+  $entity_info = entity_get_info('file');
+  $build_mode_options = array();
+  foreach ($entity_info['view modes'] as $mode => $option) {
+    $build_mode_options[$mode] = $option['label'];
+  }
+
+  $form['view_mode'] = array(
+    '#title' => t('View mode'),
+    '#type' => 'select',
+    '#description' => t('Select a view mode for this node.'),
+    '#options' => $build_mode_options,
+    '#default_value' => $conf['view_mode'],
+  );
+
+  return $form;
+}
+
+function file_entity_file_content_content_type_edit_form_submit($form, &$form_state) {
+  // Copy everything from our defaults.
+  foreach (array_keys($form_state['plugin']['defaults']) as $key) {
+    $form_state['conf'][$key] = $form_state['values'][$key];
+  }
+}
+
+function file_entity_file_content_content_type_admin_title($subtype, $conf, $context) {
+  return t('"@s" content', array('@s' => $context->identifier));
+}
diff --git a/profiles/commons/modules/contrib/file_entity/plugins/content_types/file_display.inc b/profiles/commons/modules/contrib/file_entity/plugins/content_types/file_display.inc
new file mode 100644
index 0000000..8133a3b
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/plugins/content_types/file_display.inc
@@ -0,0 +1,142 @@
+<?php
+
+/**
+ * Plugins are described by creating a $plugin array which will be used
+ * by the system that includes this file.
+ */
+$plugin = array(
+  'single' => TRUE,
+  'title' => t('File display'),
+  'description' => t('Displays the file with a configurable style.'),
+  'required context' => new ctools_context_required(t('File'), 'entity:file'),
+  'category' => t('File'),
+  'defaults' => array(
+    'displays' => array(),
+  ),
+);
+
+/**
+ * Render the node content.
+ */
+function file_entity_file_display_content_type_render($subtype, $conf, $panel_args, $context) {
+  if (!empty($context) && empty($context->data)) {
+    return;
+  }
+  $file = isset($context->data) ? clone($context->data) : NULL;
+  $block = new stdClass();
+  $block->module = 'file_entity';
+  $block->delta  = $file->fid;
+
+  if (empty($file)) {
+    $block->delta   = 'placeholder';
+    $block->title = t('File display');
+    $block->content = t('File display goes here.');
+  }
+  else {
+    if (!empty($conf['identifier'])) {
+      $file->ctools_template_identifier = $conf['identifier'];
+    }
+
+    $block->title = $file->filename;
+    $block->content = file_view_file($file, $conf['displays']);
+  }
+
+  if (!empty($conf['link']) && $file) {
+    $block->title_link = entity_uri('file', $file);
+  }
+
+  return $block;
+}
+
+/**
+ * Edit form for this plugin.
+ */
+function file_entity_file_display_content_type_edit_form($form, &$form_state) {
+  $conf = $form_state['conf'];
+  $form['#tree'] = TRUE;
+  $form['#attached']['js'][] = drupal_get_path('module', 'file_entity') . '/file_entity.admin.js';
+
+  // Retrieve available formatters for this file. We can load all file types
+  // since we don't know which type the file is at this point.
+  $formatters = file_info_formatter_types();
+
+  // Formatter status.
+  $form['displays']['status'] = array(
+    '#type' => 'item',
+    '#title' => t('Enabled displays'),
+    '#prefix' => '<div id="file-displays-status-wrapper">',
+    '#suffix' => '</div>',
+  );
+  $i=0;
+  foreach ($formatters as $name => $formatter) {
+    $form['displays']['status'][$name] = array(
+      '#type' => 'checkbox',
+      '#title' => check_plain($formatter['label']),
+      '#default_value' => !empty($conf['displays'][$name]['status']),
+      '#description' => isset($formatter['description']) ? filter_xss($formatter['description']) : NULL,
+      '#parents' => array('displays', $name, 'status'),
+      '#weight' => (isset($formatter['weight']) ? $formatter['weight'] : 0) + ($i / 1000),
+    );
+    $i++;
+  }
+  // Formatter order (tabledrag).
+  $form['displays']['order'] = array(
+    '#type' => 'item',
+    '#title' => t('Display precedence order'),
+    '#theme' => 'file_entity_file_display_order',
+  );
+  foreach ($formatters as $name => $formatter) {
+    $form['displays']['order'][$name]['label'] = array(
+      '#markup' => check_plain($formatter['label']),
+    );
+    $form['displays']['order'][$name]['weight'] = array(
+      '#type' => 'weight',
+      '#title' => t('Weight for @title', array('@title' => $formatter['label'])),
+      '#title_display' => 'invisible',
+      '#delta' => 50,
+      '#default_value' => isset($conf['displays'][$name]['weight']) ? $conf['displays'][$name]['weight'] : 0,
+      '#parents' => array('displays', $name, 'weight'),
+    );
+    $form['displays']['order'][$name]['#weight'] = $form['displays']['order'][$name]['weight']['#default_value'];
+  }
+
+  // Formatter settings.
+  $form['display_settings_title'] = array(
+    '#type' => 'item',
+    '#title' => t('Display settings'),
+  );
+  $form['display_settings'] = array(
+    '#type' => 'vertical_tabs',
+  );
+  $i=0;
+  foreach ($formatters as $name => $formatter) {
+    if (isset($formatter['settings callback']) && ($function = $formatter['settings callback']) && function_exists($function)) {
+      $defaults = !empty($formatter['default settings']) ? $formatter['default settings'] : array();
+      $settings = !empty($conf['displays'][$name]['settings']) ? $conf['displays'][$name]['settings'] : array();
+      $settings += $defaults;
+      $settings_form = $function($form, $form_state, $settings, $name, $file_type, $view_mode);
+      if (!empty($settings_form)) {
+        $form['displays']['settings'][$name] = array(
+          '#type' => 'fieldset',
+          '#title' => check_plain($formatter['label']),
+          '#parents' => array('displays', $name, 'settings'),
+          '#group' => 'display_settings',
+          '#weight' => (isset($formatter['weight']) ? $formatter['weight'] : 0) + ($i / 1000),
+        ) + $settings_form;
+      }
+    }
+    $i++;
+  }
+  return $form;
+}
+
+function file_entity_file_display_content_type_edit_form_submit($form, &$form_state) {
+  // Copy everything from our defaults.
+  foreach (array_keys($form_state['plugin']['defaults']) as $key) {
+    $form_state['conf'][$key] = $form_state['values'][$key];
+  }
+}
+
+function file_entity_file_display_content_type_admin_title($subtype, $conf, $context) {
+  return t('"@s" content', array('@s' => $context->identifier));
+}
diff --git a/profiles/commons/modules/contrib/file_entity/tests/file_entity_test.info b/profiles/commons/modules/contrib/file_entity/tests/file_entity_test.info
new file mode 100644
index 0000000..39040fb
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/tests/file_entity_test.info
@@ -0,0 +1,13 @@
+name = "File Entity Test"
+description = "Support module for File Entity tests."
+package = Testing
+core = 7.x
+dependencies[] = file_entity
+hidden = TRUE
+
+; Information added by drupal.org packaging script on 2013-10-25
+version = "7.x-2.0-alpha3"
+core = "7.x"
+project = "file_entity"
+datestamp = "1382744726"
+
diff --git a/profiles/commons/modules/contrib/file_entity/tests/file_entity_test.module b/profiles/commons/modules/contrib/file_entity/tests/file_entity_test.module
new file mode 100644
index 0000000..c6b1dfd
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/tests/file_entity_test.module
@@ -0,0 +1,15 @@
+<?php
+
+/**
+ * @file
+ * File Entity Test
+ */
+
+/**
+ * Implements hook_menu().
+ */
+function file_entity_test_menu() {
+  $items = array();
+
+  return $items;
+}
diff --git a/profiles/commons/modules/contrib/file_entity/tests/file_entity_test.pages.inc b/profiles/commons/modules/contrib/file_entity/tests/file_entity_test.pages.inc
new file mode 100644
index 0000000..4b608f7
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/tests/file_entity_test.pages.inc
@@ -0,0 +1,6 @@
+<?php
+
+/**
+ * @file
+ * Test pages for the File Entity Test module.
+ */
diff --git a/profiles/commons/modules/contrib/file_entity/views/views_handler_argument_file_type.inc b/profiles/commons/modules/contrib/file_entity/views/views_handler_argument_file_type.inc
new file mode 100644
index 0000000..3eb2fa5
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/views/views_handler_argument_file_type.inc
@@ -0,0 +1,39 @@
+<?php
+
+/**
+ * @file
+ * Definition of views_handler_argument_file_type.
+ */
+
+/**
+ * Argument handler to accept a file type.
+ */
+class views_handler_argument_file_type extends views_handler_argument_string {
+
+  /**
+   * Override the behavior of summary_name(). Get the user friendly version
+   * of the file type.
+   */
+  function summary_name($data) {
+    return $this->file_type($data->{$this->name_alias});
+  }
+
+  /**
+   * Override the behavior of title(). Get the user friendly version of the
+   * file type.
+   */
+  function title() {
+    return $this->file_type($this->argument);
+  }
+
+  /**
+   * Helper function to return the human-readable type of the file.
+   */
+  function file_type($type) {
+    $output = file_entity_type_get_name($type);
+    if (empty($output)) {
+      $output = t('Unknown file type');
+    }
+    return check_plain($output);
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_filename.inc b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_filename.inc
new file mode 100644
index 0000000..7f3a992
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_filename.inc
@@ -0,0 +1,52 @@
+<?php
+
+/**
+ * @file
+ * Definition of views_handler_field_file_filename.
+ */
+
+/**
+ * Field handler to provide simple renderer that allows linking to a file.
+ *
+ * @ingroup views_field_handlers
+ */
+class views_handler_field_file_filename extends views_handler_field_file {
+  /**
+   * Constructor to provide additional field to add.
+   */
+  function init(&$view, &$options) {
+    if (!empty($this->options['link_to_file'])) {
+      $this->additional_fields['fid'] = 'fid';
+    }
+    parent::init($view, $options);
+  }
+
+  function option_definition() {
+    $options = parent::option_definition();
+    $options['link_to_file'] = array('default' => TRUE, 'bool' => TRUE);
+    return $options;
+  }
+
+  /**
+   * Provide link to file option
+   */
+  function options_form(&$form, &$form_state) {
+    parent::options_form($form, $form_state);
+    $form['link_to_file']['#title'] = t('Link this field to the original file');
+  }
+
+  /**
+   * Render whatever the data is as a link to the file.
+   *
+   * Data should be made XSS safe prior to calling this function.
+   */
+  function render_link($data, $values) {
+    if (!empty($this->options['link_to_file']) && !empty($this->additional_fields['fid'])) {
+      if ($data !== NULL && $data !== '') {
+        $this->options['alter']['make_link'] = TRUE;
+        $this->options['alter']['path'] = 'file/' . $this->get_value($values, 'fid');
+      }
+    }
+    return $data;
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link.inc b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link.inc
new file mode 100644
index 0000000..2e5df5f
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link.inc
@@ -0,0 +1,48 @@
+<?php
+
+/**
+ * @file
+ * Definition of views_handler_field_file_link.
+ */
+
+/**
+ * Field handler to present a link to the file.
+ *
+ * @ingroup views_field_handlers
+ */
+class views_handler_field_file_link extends views_handler_field_entity {
+
+  function option_definition() {
+    $options = parent::option_definition();
+    $options['text'] = array('default' => '', 'translatable' => TRUE);
+    return $options;
+  }
+
+  function options_form(&$form, &$form_state) {
+    $form['text'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Text to display'),
+      '#default_value' => $this->options['text'],
+    );
+    parent::options_form($form, $form_state);
+
+    // The path is set by render_link function so don't allow to set it.
+    $form['alter']['path'] = array('#access' => FALSE);
+    $form['alter']['external'] = array('#access' => FALSE);
+  }
+
+  function render($values) {
+    if ($entity = $this->get_value($values)) {
+      return $this->render_link($entity, $values);
+    }
+  }
+
+  function render_link($file, $values) {
+    if (file_entity_access('view', $file)) {
+      $this->options['alter']['make_link'] = TRUE;
+      $this->options['alter']['path'] = "file/$file->fid";
+      $text = !empty($this->options['text']) ? $this->options['text'] : t('View');
+      return $text;
+    }
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link_delete.inc b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link_delete.inc
new file mode 100644
index 0000000..49e195e
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link_delete.inc
@@ -0,0 +1,31 @@
+<?php
+
+/**
+ * @file
+ * Definition of views_handler_field_file_link_delete.
+ */
+
+/**
+ * Field handler to present a link to delete a file.
+ *
+ * @ingroup views_field_handlers
+ */
+class views_handler_field_file_link_delete extends views_handler_field_file_link {
+
+  /**
+   * Renders the link.
+   */
+  function render_link($file, $values) {
+    // Ensure user has access to delete this file.
+    if (!file_entity_access('delete', $file)) {
+      return;
+    }
+
+    $this->options['alter']['make_link'] = TRUE;
+    $this->options['alter']['path'] = "file/$file->fid/delete";
+    $this->options['alter']['query'] = drupal_get_destination();
+
+    $text = !empty($this->options['text']) ? $this->options['text'] : t('Delete');
+    return $text;
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link_download.inc b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link_download.inc
new file mode 100644
index 0000000..088d18c
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link_download.inc
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * @file
+ * Definition of views_handler_field_file_link_download.
+ */
+
+/**
+ * Field handler to present a link to download a file.
+ *
+ * @ingroup views_field_handlers
+ */
+class views_handler_field_file_link_download extends views_handler_field_file_link {
+
+  /**
+   * Renders the link.
+   */
+  function render_link($file, $values) {
+    // Ensure user has access to download this file.
+    if (!file_entity_access('download', $file)) {
+      return;
+    }
+
+    $this->options['alter']['make_link'] = TRUE;
+    $uri = file_entity_download_uri($file);
+    $this->options['alter']['path'] = $uri['path'];
+    $this->options['alter'] += $uri['options'];
+
+    $text = !empty($this->options['text']) ? $this->options['text'] : t('Download');
+    return $text;
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link_edit.inc b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link_edit.inc
new file mode 100644
index 0000000..993b9dd
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link_edit.inc
@@ -0,0 +1,31 @@
+<?php
+
+/**
+ * @file
+ * Definition of views_handler_field_file_link_edit.
+ */
+
+/**
+ * Field handler to present a link file edit.
+ *
+ * @ingroup views_field_handlers
+ */
+class views_handler_field_file_link_edit extends views_handler_field_file_link {
+
+  /**
+   * Renders the link.
+   */
+  function render_link($file, $values) {
+    // Ensure user has access to edit this file.
+    if (!file_entity_access('update', $file)) {
+      return;
+    }
+
+    $this->options['alter']['make_link'] = TRUE;
+    $this->options['alter']['path'] = "file/$file->fid/edit";
+    $this->options['alter']['query'] = drupal_get_destination();
+
+    $text = !empty($this->options['text']) ? $this->options['text'] : t('Edit');
+    return $text;
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link_usage.inc b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link_usage.inc
new file mode 100644
index 0000000..f4f64c2
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_link_usage.inc
@@ -0,0 +1,31 @@
+<?php
+
+/**
+ * @file
+ * Definition of views_handler_field_file_link_usage.
+ */
+
+/**
+ * Field handler to present a link to view the usage of a file.
+ *
+ * @ingroup views_field_handlers
+ */
+class views_handler_field_file_link_usage extends views_handler_field_file_link {
+
+  /**
+   * Renders the link.
+   */
+  function render_link($file, $values) {
+    // Ensure user has access to update this file.
+    if (!file_entity_access('update', $file)) {
+      return;
+    }
+
+    $this->options['alter']['make_link'] = TRUE;
+    $this->options['alter']['path'] = "file/$file->fid/usage";
+    $this->options['alter']['query'] = drupal_get_destination();
+
+    $text = !empty($this->options['text']) ? $this->options['text'] : t('Usage');
+    return $text;
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_rendered.inc b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_rendered.inc
new file mode 100644
index 0000000..d677374
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_rendered.inc
@@ -0,0 +1,45 @@
+<?php
+
+/**
+ * @file
+ * Definition of views_handler_field_file_rendered.
+ */
+
+/**
+ * Field handler to render a file with a view mode using file_view_file().
+ *
+ * @ingroup views_field_handlers
+ */
+class views_handler_field_file_rendered extends views_handler_field_entity {
+  function option_definition() {
+    $options = parent::option_definition();
+    $options['file_view_mode'] = array('default' => 'default');
+    return $options;
+  }
+
+  /**
+   * Provide file_view_mode option for to file display.
+   */
+  function options_form(&$form, &$form_state) {
+    parent::options_form($form, $form_state);
+
+    $entity_info = entity_get_info('file');
+    $options = array('default' => t('Default'));
+    foreach ($entity_info['view modes'] as $file_view_mode => $file_view_mode_info) {
+      $options[$file_view_mode] = $file_view_mode_info['label'];
+    }
+
+    $form['file_view_mode'] = array(
+      '#title' => t('File view mode'),
+      '#description' => t('Select a view mode. Note that only the file will be rendered and not any of its fields.'),
+      '#type' => 'select',
+      '#default_value' => $this->options['file_view_mode'],
+      '#options' => $options,
+    );
+  }
+
+  function render($values) {
+    $file = $this->get_value($values);
+    return file_view_file($file, $this->options['file_view_mode']);
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_type.inc b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_type.inc
new file mode 100644
index 0000000..92e12fe
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/views/views_handler_field_file_type.inc
@@ -0,0 +1,48 @@
+<?php
+
+/**
+ * @file
+ * Definition of views_handler_field_file_type.
+ */
+
+/**
+ * Field handler to translate a file type into its readable form.
+ */
+class views_handler_field_file_type extends views_handler_field_file {
+  function option_definition() {
+    $options = parent::option_definition();
+    $options['machine_name'] = array('default' => FALSE);
+
+    return $options;
+  }
+
+  /**
+   * Provide machine_name option for to file type display.
+   */
+  function options_form(&$form, &$form_state) {
+    parent::options_form($form, $form_state);
+
+    $form['machine_name'] = array(
+      '#title' => t('Output machine name'),
+      '#description' => t('Display field as the file type machine name.'),
+      '#type' => 'checkbox',
+      '#default_value' => !empty($this->options['machine_name']),
+      '#fieldset' => 'more',
+    );
+  }
+
+  /**
+    * Render file type as human readable name, unless using machine_name option.
+    */
+  function render_name($data, $values) {
+    if ($this->options['machine_name'] != 1 && $data !== NULL && $data !== '') {
+      return t($this->sanitize_value(file_entity_type_get_name($data)));
+    }
+    return $this->sanitize_value($data);
+  }
+
+  function render($values) {
+    $value = $this->get_value($values);
+    return $this->render_link($this->render_name($value, $values), $values);
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/views/views_handler_filter_file_type.inc b/profiles/commons/modules/contrib/file_entity/views/views_handler_filter_file_type.inc
new file mode 100644
index 0000000..6bca816
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/views/views_handler_filter_file_type.inc
@@ -0,0 +1,23 @@
+<?php
+
+/**
+ * @file
+ * Definition of views_handler_filter_file_type.
+ */
+
+/**
+ * Filter by file type
+ */
+class views_handler_filter_file_type extends views_handler_filter_in_operator {
+  function get_value_options() {
+    if (!isset($this->value_options)) {
+      $this->value_title = t('File types');
+      $options = array();
+      foreach (file_entity_type_get_names() as $type => $name) {
+        $options[$type] = t($name);
+      }
+      asort($options);
+      $this->value_options = $options;
+    }
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/views/views_plugin_row_file_rss.inc b/profiles/commons/modules/contrib/file_entity/views/views_plugin_row_file_rss.inc
new file mode 100644
index 0000000..4a39024
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/views/views_plugin_row_file_rss.inc
@@ -0,0 +1,175 @@
+<?php
+
+/**
+ * @file
+ * Contains the file RSS row style plugin.
+ */
+
+/**
+ * Plugin which performs a file_view on the resulting object
+ * and formats it as an RSS item.
+ */
+class views_plugin_row_file_rss extends views_plugin_row {
+  // Basic properties that let the row style follow relationships.
+  var $base_table = 'file_managed';
+  var $base_field = 'fid';
+
+  // Stores the files loaded with pre_render.
+  var $files = array();
+
+  function option_definition() {
+    $options = parent::option_definition();
+
+    $options['item_length'] = array('default' => 'default');
+    $options['links'] = array('default' => FALSE, 'bool' => TRUE);
+
+    return $options;
+  }
+
+  /**
+   * Override init function to convert fulltext view-mode to full.
+   */
+  function init(&$view, &$display, $options = NULL) {
+    parent::init($view, $display, $options);
+
+    if ($this->options['item_length'] == 'fulltext') {
+      $this->options['item_length'] = 'full';
+    }
+  }
+
+  function options_form(&$form, &$form_state) {
+    parent::options_form($form, $form_state);
+
+    $form['item_length'] = array(
+      '#type' => 'select',
+      '#title' => t('Display type'),
+      '#options' => $this->options_form_summary_options(),
+      '#default_value' => $this->options['item_length'],
+    );
+    $form['links'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Display links'),
+      '#default_value' => $this->options['links'],
+    );
+  }
+
+  /**
+   * Return the main options, which are shown in the summary title.
+   */
+  function options_form_summary_options() {
+    $entity_info = entity_get_info('file');
+    $options = array();
+    if (!empty($entity_info['view modes'])) {
+      foreach ($entity_info['view modes'] as $mode => $settings) {
+        $options[$mode] = $settings['label'];
+      }
+    }
+    $options['title'] = t('Title only');
+    $options['default'] = t('Use site default RSS settings');
+    return $options;
+  }
+
+  function summary_title() {
+    $options = $this->options_form_summary_options();
+    return check_plain($options[$this->options['item_length']]);
+  }
+
+
+  function pre_render($values) {
+    $fids = array();
+    foreach ($values as $row) {
+      $fids[] = $row->{$this->field_alias};
+    }
+    if (!empty($fids)) {
+      $this->files = file_load_multiple($fids);
+    }
+  }
+
+  function render($row) {
+    // For the most part, this code is taken from node_feed() in node.module
+    global $base_url;
+
+    $fid = $row->{$this->field_alias};
+    if (!is_numeric($fid)) {
+      return;
+    }
+
+    $display_mode = $this->options['item_length'];
+    if ($display_mode == 'default') {
+      $display_mode = variable_get('feed_item_length', 'teaser');
+    }
+
+    // Load the specified file:
+    $file = $this->files[$fid];
+    if (empty($file)) {
+      return;
+    }
+
+    $item_text = '';
+
+    $uri = entity_uri('file', $file);
+    $user = user_load($file->uid);
+    $file->link = url($uri['path'], $uri['options'] + array('absolute' => TRUE));
+    $file->rss_namespaces = array();
+    $file->rss_elements = array(
+      array(
+        'key' => 'pubDate',
+        'value' => gmdate('r', $file->timestamp),
+      ),
+      array(
+        'key' => 'dc:creator',
+        'value' => $user->name,
+      ),
+      array(
+        'key' => 'guid',
+        'value' => $file->fid . ' at ' . $base_url,
+        'attributes' => array('isPermaLink' => 'false'),
+      ),
+    );
+
+    // The file gets built and modules add to or modify $file->rss_elements
+    // and $file->rss_namespaces.
+
+    $build_mode = $display_mode;
+
+    $build = file_view($file, $build_mode);
+    unset($build['#theme']);
+
+    if (!empty($file->rss_namespaces)) {
+      $this->view->style_plugin->namespaces = array_merge($this->view->style_plugin->namespaces, $file->rss_namespaces);
+    }
+    elseif (function_exists('rdf_get_namespaces')) {
+      // Merge RDF namespaces in the XML namespaces in case they are used
+      // further in the RSS content.
+      $xml_rdf_namespaces = array();
+      foreach (rdf_get_namespaces() as $prefix => $uri) {
+        $xml_rdf_namespaces['xmlns:' . $prefix] = $uri;
+      }
+      $this->view->style_plugin->namespaces += $xml_rdf_namespaces;
+    }
+
+    // Hide the links if desired.
+    if (!$this->options['links']) {
+      hide($build['links']);
+    }
+
+    if ($display_mode != 'title') {
+      // We render file contents and force links to be last.
+      $build['links']['#weight'] = 1000;
+      $item_text .= drupal_render($build);
+    }
+
+    $item = new stdClass();
+    $item->description = $item_text;
+    $item->title = $file->filename;
+    $item->link = $file->link;
+    $item->elements = $file->rss_elements;
+    $item->fid = $file->fid;
+
+    return theme($this->theme_functions(), array(
+      'view' => $this->view,
+      'options' => $this->options,
+      'row' => $item
+    ));
+  }
+}
diff --git a/profiles/commons/modules/contrib/file_entity/views/views_plugin_row_file_view.inc b/profiles/commons/modules/contrib/file_entity/views/views_plugin_row_file_view.inc
new file mode 100644
index 0000000..7b5fe82
--- /dev/null
+++ b/profiles/commons/modules/contrib/file_entity/views/views_plugin_row_file_view.inc
@@ -0,0 +1,65 @@
+<?php
+
+/**
+ * @file
+ * Contains the file view row style plugin.
+ */
+
+/**
+ * Plugin which performs a file_view on the resulting object.
+ *
+ * Most of the code on this object is in the theme function.
+ */
+class views_plugin_row_file_view extends views_plugin_row {
+  // Basic properties that let the row style follow relationships.
+  var $base_table = 'file_managed';
+  var $base_field = 'fid';
+
+  // Stores the files loaded with pre_render.
+  var $files = array();
+
+  function option_definition() {
+    $options = parent::option_definition();
+
+    $options['view_mode'] = array('default' => 'default');
+    $options['links'] = array('default' => TRUE);
+    return $options;
+  }
+
+  function options_form(&$form, &$form_state) {
+    parent::options_form($form, $form_state);
+
+    $form['view_mode'] = array(
+      '#type' => 'select',
+      '#options' => file_entity_view_mode_labels(),
+      '#title' => t('View mode'),
+      '#default_value' => $this->options['view_mode'],
+    );
+    $form['links'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Display links'),
+      '#default_value' => $this->options['links'],
+    );
+  }
+
+  function summary_title() {
+    $view_mode_label = file_entity_view_mode_label($this->options['view_mode'], t('Unknown'));
+    return check_plain($view_mode_label);
+  }
+
+  function pre_render($values) {
+    $fids = array();
+    foreach ($values as $row) {
+      $fids[] = $row->{$this->field_alias};
+    }
+    $this->files = file_load_multiple($fids);
+  }
+
+  function render($row) {
+    $file = $this->files[$row->{$this->field_alias}];
+    $file->view = $this->view;
+    $build = file_view($file, $this->options['view_mode']);
+
+    return drupal_render($build);
+  }
+}
diff --git a/profiles/commons/modules/contrib/i18nviews/i18nviews.info b/profiles/commons/modules/contrib/i18nviews/i18nviews.info
index 65dd342..ce4e439 100644
--- a/profiles/commons/modules/contrib/i18nviews/i18nviews.info
+++ b/profiles/commons/modules/contrib/i18nviews/i18nviews.info
@@ -27,9 +27,8 @@ files[] = includes/i18nviews_handler_filter_term_node_tid_depth.inc
 files[] = includes/i18nviews_plugin_argument_validate_i18n_taxonomy_term.inc
 files[] = includes/i18nviews_plugin_localization_i18nstrings.inc
 
-; Information added by drush on 2013-11-22
-version = "7.x-3.x-dev"
-core = "7.x"
+; Information added by drush on 2013-12-20
+version = ""
 project = "i18nviews"
-datestamp = "1385094730"
+datestamp = "1387568919"
 
diff --git a/profiles/commons/modules/contrib/lingotek/lingotek.admin.inc b/profiles/commons/modules/contrib/lingotek/lingotek.admin.inc
index d159bbe..1722880 100644
--- a/profiles/commons/modules/contrib/lingotek/lingotek.admin.inc
+++ b/profiles/commons/modules/contrib/lingotek/lingotek.admin.inc
@@ -963,16 +963,7 @@ function lingotek_admin_advanced_parsing_form($form, &$form_state, $show_fieldse
   $form['advanced-parsing'] = array(
     '#type' => $show_fieldset ? 'fieldset' : 'item',
     '#title' => t('Advanced Content Parsing'),
-    '#collapsible' => TRUE,
-    '#collapsed' => TRUE,
     '#group' => 'administrative_settings',
-    'actions' => array(
-      '#type' => 'actions',
-      'submit' => array(
-        '#type' => 'submit',
-        '#value' => t('Save')
-      )
-    ),
     '#submit' => array('lingotek_admin_advanced_parsing_form_submit')
   );
 
@@ -1005,12 +996,32 @@ function lingotek_admin_advanced_parsing_form($form, &$form_state, $show_fieldse
 
     $form['advanced-parsing']['#submit'][] = 'lingotek_handle_advanced_xml_upgrade';
   }
+
+  $form['advanced-parsing']['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+  );
+
+  $form['advanced-parsing']['reset'] = array(
+    '#type' => 'submit',
+    '#value' => t('Reset to Defaults'),
+    '#attributes' => array(
+      'onclick' => 'return confirm("' . t('Are you sure?\n\nAll of your configuration settings will be reset to system defaults.') . '")',
+      ),
+  );
+
   return $form;
 }
 
-function lingotek_admin_advanced_parsing_form_submit($form, &$form_state) {
-  system_settings_form_submit($form, $form_state);
-}
+function lingotek_admin_advanced_parsing_form_submit(&$form, &$form_state) {
+  if (isset($form_state['values']['op']) && $form_state['values']['op'] == 'Reset to Defaults') {
+    lingotek_set_default_advanced_xml(TRUE);
+    drupal_set_message(t('The configuration settings have been reset to system defaults.'));
+  }
+  else {
+    system_settings_form_submit($form, $form_state);
+  }
+ }
 
 /**
  * Lingotek prefs Form
@@ -1962,13 +1973,15 @@ function lingotek_admin_configuration_view($form_short_id = NULL, $show_fieldset
       $output['lingotek'][] = lingotek_wrap_in_fieldset($entity_settings, t('Translate @types', array('@type' => $entity_type['label'])));
     }
 
-    $arr['lingotek'][] = lingotek_wrap_in_fieldset(drupal_get_form('lingotek_admin_advanced_parsing_form', TRUE), 'Advanced Content Parsing');
-
     //$output['lingotek'][] = lingotek_wrap_in_fieldset($arr, 'Translate Content');
     
     $output['lingotek'][] = lingotek_wrap_in_fieldset(drupal_get_form('lingotek_admin_comment_translation_settings_form', $show_fieldset), 'Translate Comments');
     $output['lingotek'][] = lingotek_wrap_in_fieldset(drupal_get_form('lingotek_admin_additional_translation_settings_form', $show_fieldset), 'Translate Configuration');
     $output['lingotek'][] = lingotek_wrap_in_fieldset(drupal_get_form('lingotek_admin_profiles_form', $show_fieldset), 'Translation Profiles');
+    if ($is_enterprise) {
+      $output['lingotek'][] = lingotek_wrap_in_fieldset(drupal_get_form('lingotek_admin_advanced_parsing_form', TRUE), 'Content Parsing (Advanced)');
+    }
+   
     $output['lingotek'][] = lingotek_wrap_in_fieldset(drupal_get_form('lingotek_admin_prefs_form', $show_fieldset), 'Preferences');
 
     $logging_utilities = array(
diff --git a/profiles/commons/modules/contrib/lingotek/lingotek.info b/profiles/commons/modules/contrib/lingotek/lingotek.info
index b2e11bc..739f76c 100644
--- a/profiles/commons/modules/contrib/lingotek/lingotek.info
+++ b/profiles/commons/modules/contrib/lingotek/lingotek.info
@@ -47,9 +47,9 @@ files[] = lingotek_views_handler_workbench_link.inc
 
 stylesheets[all][] = style/base.css
 
-; Information added by  packaging script on 2013-11-18
-version = "7.x-4.09"
+; Information added by  packaging script on 2013-11-28
+version = "7.x-4.10"
 core = "7.x"
 project = "lingotek"
-datestamp = "1384818213"
+datestamp = "1385597617"
 
diff --git a/profiles/commons/modules/contrib/link/LICENSE.txt b/profiles/commons/modules/contrib/link/LICENSE.txt
old mode 100644
new mode 100755
diff --git a/profiles/commons/modules/contrib/link/link-rtl.css b/profiles/commons/modules/contrib/link/link-rtl.css
new file mode 100644
index 0000000..0359487
--- /dev/null
+++ b/profiles/commons/modules/contrib/link/link-rtl.css
@@ -0,0 +1,8 @@
+.link-field-column {
+  float: right;
+}
+
+.link-field-column.link-field-url .form-text {
+  direction: ltr;
+  text-align: left;
+}
diff --git a/profiles/commons/modules/contrib/link/link.devel_generate.inc b/profiles/commons/modules/contrib/link/link.devel_generate.inc
index 7be4a0d..af0e2d5 100644
--- a/profiles/commons/modules/contrib/link/link.devel_generate.inc
+++ b/profiles/commons/modules/contrib/link/link.devel_generate.inc
@@ -21,9 +21,12 @@ function link_devel_generate($object, $field, $instance, $bundle) {
  * Callback for hook_devel_generate().
  */
 function _link_devel_generate($object, $field, $instance, $bundle) {
-  return array(
+  $link = array(
     'url' => url('<front>', array('absolute' => TRUE)),
-    'title' => devel_create_greeking(mt_rand(1, 3), TRUE),
     'attributes' => _link_default_attributes(),
   );
+  if ($instance['settings']['title'] != 'none') {
+    $link['title'] = devel_create_greeking(mt_rand(1, 3), TRUE);
+  }
+  return $link;
 }
diff --git a/profiles/commons/modules/contrib/link/link.info b/profiles/commons/modules/contrib/link/link.info
index 57aedb3..34f535f 100644
--- a/profiles/commons/modules/contrib/link/link.info
+++ b/profiles/commons/modules/contrib/link/link.info
@@ -18,9 +18,9 @@ files[] = tests/link.validate.test
 files[] = views/link_views_handler_argument_target.inc
 files[] = views/link_views_handler_filter_protocol.inc
 
-; Information added by drupal.org packaging script on 2013-02-09
-version = "7.x-1.1"
+; Information added by  packaging script on 2013-11-24
+version = "7.x-1.2"
 core = "7.x"
 project = "link"
-datestamp = "1360444361"
+datestamp = "1385335705"
 
diff --git a/profiles/commons/modules/contrib/link/link.module b/profiles/commons/modules/contrib/link/link.module
index 241066d..4d821e4 100644
--- a/profiles/commons/modules/contrib/link/link.module
+++ b/profiles/commons/modules/contrib/link/link.module
@@ -10,7 +10,7 @@ define('LINK_INTERNAL', 'internal');
 define('LINK_FRONT', 'front');
 define('LINK_EMAIL', 'email');
 define('LINK_NEWS', 'news');
-define('LINK_DOMAINS', 'aero|arpa|asia|biz|com|cat|coop|edu|gov|info|int|jobs|mil|museum|name|nato|net|org|pro|travel|mobi|local');
+define('LINK_DOMAINS', 'aero|arpa|asia|biz|com|cat|coop|edu|gov|info|int|jobs|mil|museum|name|nato|net|org|pro|travel|mobi|local|xxx');
 
 define('LINK_TARGET_DEFAULT', 'default');
 define('LINK_TARGET_NEW_WINDOW', '_blank');
@@ -118,26 +118,20 @@ function link_field_instance_settings_form($field, $instance) {
 
   if (module_exists('token')) {
     // Add token module replacements fields
-    $form['tokens'] = array(
-      '#type' => 'fieldset',
-      '#collapsible' => TRUE,
-      '#collapsed' => TRUE,
-      '#title' => t('Placeholder tokens'),
-      '#description' => t("The following placeholder tokens can be used in both paths and titles. When used in a path or title, they will be replaced with the appropriate values."),
+    $form['enable_tokens'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Allow user-entered tokens'),
+      '#default_value' => isset($instance['settings']['enable_tokens']) ? $instance['settings']['enable_tokens'] : 1,
+      '#description' => t('Checking will allow users to enter tokens in URLs and Titles on the entity edit form. This does not affect the field settings on this page.'),
     );
+    
     $entity_info = entity_get_info($instance['entity_type']);
-    $form['tokens']['help'] = array(
+    $form['tokens_help'] = array(
       '#theme' => 'token_tree',
       '#token_types' => array($entity_info['token type']),
       '#global_types' => TRUE,
       '#click_insert' => TRUE,
-    );
-
-    $form['enable_tokens'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Allow user-entered tokens'),
-      '#default_value' => isset($instance['settings']['enable_tokens']) ? $instance['settings']['enable_tokens'] : 1,
-      '#description' => t('Checking will allow users to enter tokens in URLs and Titles on the entity edit form. This does not affect the field settings on this page.'),
+      '#dialog' => TRUE,
     );
   }
 
@@ -258,12 +252,16 @@ function link_field_validate($entity_type, $entity, $field, $instance, $langcode
   $optional_field_found = FALSE;
   if ($instance['settings']['validate_url'] !== 0 || is_null($instance['settings']['validate_url']) || !isset($instance['settings']['validate_url'])) {
     foreach ($items as $delta => $value) {
-      _link_validate($items[$delta], $delta, $field, $entity, $instance, $langcode, $optional_field_found);
+      _link_validate($items[$delta], $delta, $field, $entity, $instance, $langcode, $optional_field_found, $errors);
     }
   }
 
   if ($instance['settings']['url'] === 'optional' && $instance['settings']['title'] === 'optional' && $instance['required'] && !$optional_field_found) {
-    form_set_error($field['field_name'] . '][' . $langcode . '][0][title', t('At least one title or URL must be entered.'));
+    $errors[$field['field_name']][$langcode][0][] = array(
+      'error' => 'link_required',
+      'message' => t('At least one title or URL must be entered.'),
+      'error_element' => array('url' => FALSE, 'title' => TRUE),
+    );
   }
 }
 
@@ -321,6 +319,18 @@ function link_field_widget_form(&$form, &$form_state, $field, $instance, $langco
 }
 
 /**
+ * Implements hook_field_widget_error().
+ */
+function link_field_widget_error($element, $error, $form, &$form_state) {
+  if ($error['error_element']['title']) {
+    form_error($element['title'], $error['message']);
+  }
+  elseif ($error['error_element']['url']) {
+    form_error($element['url'], $error['message']);
+  }
+}
+
+/**
  * Unpacks the item attributes for use.
  */
 function _link_load($field, $item, $instance) {
@@ -367,20 +377,32 @@ function _link_process(&$item, $delta = 0, $field, $entity) {
 /**
  * Validates that the link field has been entered properly.
  */
-function _link_validate(&$item, $delta, $field, $entity, $instance, $langcode, &$optional_field_found) {
+function _link_validate(&$item, $delta, $field, $entity, $instance, $langcode, &$optional_field_found, &$errors) {
   if ($item['url'] && !(isset($instance['default_value'][$delta]['url']) && $item['url'] === $instance['default_value'][$delta]['url'] && !$instance['required'])) {
     // Validate the link.
     if (link_validate_url(trim($item['url'])) == FALSE) {
-      form_set_error($field['field_name'] . '][' . $langcode . '][' . $delta . '][url', t('The value provided for %field is not a valid URL.', array('%field' => $instance['label'])));
+      $errors[$field['field_name']][$langcode][$delta][] = array(
+        'error' => 'link_required',
+        'message' => t('The value provided for %field is not a valid URL.', array('%field' => $instance['label'])),
+        'error_element' => array('url' => TRUE, 'title' => FALSE),
+      );
     }
     // Require a title for the link if necessary.
     if ($instance['settings']['title'] == 'required' && strlen(trim($item['title'])) == 0) {
-      form_set_error($field['field_name'] . '][' . $langcode . '][' . $delta . '][title', t('Titles are required for all links.'));
+      $errors[$field['field_name']][$langcode][$delta][] = array(
+        'error' => 'link_required',
+        'message' => t('Titles are required for all links.'),
+        'error_element' => array('url' => FALSE, 'title' => TRUE),
+      );
     }
   }
   // Require a link if we have a title.
   if ($instance['settings']['url'] !== 'optional' && strlen(isset($item['title']) ? $item['title'] : NULL) > 0 && strlen(trim($item['url'])) == 0) {
-    form_set_error($field['field_name'] . '][' . $langcode . '][' . $delta . '][url', t('You cannot enter a title without a link url.'));
+    $errors[$field['field_name']][$langcode][$delta][] = array(
+      'error' => 'link_required',
+      'message' => t('You cannot enter a title without a link url.'),
+      'error_element' => array('url' => TRUE, 'title' => FALSE),
+    );
   }
   // In a totally bizzaro case, where URLs and titles are optional but the field is required, ensure there is at least one link.
   if ($instance['settings']['url'] === 'optional' && $instance['settings']['title'] === 'optional' && (strlen(trim($item['url'])) !== 0 || strlen(trim($item['title'])) !== 0)) {
@@ -388,7 +410,11 @@ function _link_validate(&$item, $delta, $field, $entity, $instance, $langcode, &
   }
   // Require entire field
   if ($instance['settings']['url'] === 'optional' && $instance['settings']['title'] === 'optional' && $instance['required'] == 1 && !$optional_field_found && isset($instance['id'])) {
-    form_set_error($instance['field_name'] . '][' . $langcode . '][0][title', t('At least one title or URL must be entered.'));
+    $errors[$field['field_name']][$langcode][$delta][] = array(
+      'error' => 'link_required',
+      'message' => t('At least one title or URL must be entered.'),
+      'error_element' => array('url' => FALSE, 'title' => TRUE),
+    );
   }
 }
 
@@ -439,11 +465,6 @@ function _link_sanitize(&$item, $delta, &$field, $instance, &$entity) {
   $url = link_cleanup_url($item['url']);
   $url_parts = _link_parse_url($url);
 
-  // We can't check_plain('<front>') because it'll break.
-  if ($type != LINK_FRONT) {
-    $url_parts['url'] = check_plain($url_parts['url']);
-  }
-
   if (!empty($url_parts['url'])) {
     $item['url'] = url($url_parts['url'],
       array(
@@ -568,15 +589,6 @@ function _link_sanitize(&$item, $delta, &$field, $instance, &$entity) {
 
   // Remove empty attributes.
   $item['attributes'] = array_filter($item['attributes']);
-
-  // Sets title to trimmed url if one exists
-  // @todo: Obsolete?
-  /*if(!empty($item['display_url']) && empty($item['title'])) {
-    $item['title'] = $item['display_url'];
-  }
-  elseif(!isset($item['title'])) {
-    $item['title'] = $item['url'];
-  }*/
 }
 
 /**
@@ -598,14 +610,7 @@ function _link_parse_url($url) {
   // Separate out the query string, if any.
   if (strpos($url, '?') !== FALSE) {
     $query = substr($url, strpos($url, '?') + 1);
-    parse_str($query, $query_array);
-    // See http://drupal.org/node/1710578
-    foreach ($query_array as $key=> &$value) {
-      if ($value === '' && FALSE === strpos($query, $key . '=')) {
-        $value = NULL;
-      }
-    }
-    $url_parts['query'] = $query_array;
+    $url_parts['query'] = _link_parse_str($query);
     $url = substr($url, 0, strpos($url, '?'));
   }
   $url_parts['url'] = $url;
@@ -613,36 +618,67 @@ function _link_parse_url($url) {
 }
 
 /**
+ * Bacause parse_str replaces the following characters in query parameters name
+ * in order to maintain compability with deprecated register_globals directive:
+ *
+ *   - chr(32) ( ) (space)
+ *   - chr(46) (.) (dot)
+ *   - chr(91) ([) (open square bracket)
+ *   - chr(128) - chr(159) (various)
+ *
+ * @param string $query
+ *   Query to parse.
+ *
+ * @return Array
+ *   Array of query parameters.
+ *
+ * @see http://php.net/manual/en/language.variables.external.php#81080
+ */
+function _link_parse_str($query) {
+  $query_array = array();
+
+  $pairs = explode('&', $query);
+  foreach ($pairs as $pair) {
+    $name_value = explode('=', $pair);
+    $name = urldecode($name_value[0]);
+    $value = isset($name_value[1]) ? urldecode($name_value[1]) : NULL;
+    $query_array[$name] = $value;
+  }
+
+  return $query_array;
+}
+
+/**
  * Implements hook_theme().
  */
 function link_theme() {
   return array(
     'link_formatter_link_default' => array(
-      'variables' => array('element' => NULL),
+      'variables' => array('element' => NULL, 'field' => NULL),
     ),
     'link_formatter_link_plain' => array(
-      'variables' => array('element' => NULL),
+      'variables' => array('element' => NULL, 'field' => NULL),
     ),
     'link_formatter_link_absolute' => array(
-      'variables' => array('element' => NULL),
+      'variables' => array('element' => NULL, 'field' => NULL),
     ),
     'link_formatter_link_domain' => array(
-      'variables' => array('element' => NULL, 'display' => NULL),
+      'variables' => array('element' => NULL, 'display' => NULL, 'field' => NULL),
     ),
     'link_formatter_link_title_plain' => array(
-      'variables' => array('element' => NULL),
+      'variables' => array('element' => NULL, 'field' => NULL),
     ),
     'link_formatter_link_url' => array(
-      'variables' => array('element' => NULL),
+      'variables' => array('element' => NULL, 'field' => NULL),
     ),
     'link_formatter_link_short' => array(
-      'variables' => array('element' => NULL),
+      'variables' => array('element' => NULL, 'field' => NULL),
     ),
     'link_formatter_link_label' => array(
       'variables' => array('element' => NULL, 'field' => NULL),
     ),
     'link_formatter_link_separate' => array(
-      'variables' => array('element' => NULL),
+      'variables' => array('element' => NULL, 'field' => NULL),
     ),
     'link_field' => array(
       'render element' => 'element',
@@ -668,7 +704,7 @@ function theme_link_field($vars) {
   if (isset($element['title'])) {
     $output .= '<div class="link-field-title link-field-column">' . drupal_render($element['title']) . '</div>';
   }
-  $output .= '<div class="link-field-url' . (isset($element['title']) ? ' link-field-column' : '') . '">'. drupal_render($element['url']) . '</div>';
+  $output .= '<div class="link-field-url' . (isset($element['title']) ? ' link-field-column' : '') . '">' . drupal_render($element['url']) . '</div>';
   $output .= '</div>';
   if (!empty($element['attributes']['target'])) {
     $output .= '<div class="link-attributes">' . drupal_render($element['attributes']['target']) . '</div>';
@@ -1169,7 +1205,7 @@ function link_validate_url($text) {
   $news_pattern = '/^news:(' . $newsgroup_name . '|' . $message_id . ')$/i';
 
   $user = '[a-zA-Z0-9' . $LINK_ICHARS . '_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\'\[\]]+';
-  $email_pattern = '/^mailto:' . $user . '@'.'(?:' . $domain . '|' . $ipv4 . '|' . $ipv6 . '|localhost)' . $query . '?$/';
+  $email_pattern = '/^mailto:' . $user . '@' . '(?:' . $domain . '|' . $ipv4 . '|' . $ipv6 . '|localhost)' . $query . '?$/';
 
   if (strpos($text, '<front>') === 0) {
     return LINK_FRONT;
@@ -1302,7 +1338,7 @@ function link_field_item_property_info() {
  * Implements hook_field_update_instance().
  */
 function link_field_update_instance($instance, $prior_instance) {
-  if (function_exists('i18n_string_update') && $prior_instance['settings']['title_value'] != $instance['settings']['title_value']) {
+  if (function_exists('i18n_string_update') && $instance['widget']['type'] == 'link_field' && $prior_instance['settings']['title_value'] != $instance['settings']['title_value']) {
     $i18n_string_name = "field:{$instance['field_name']}:{$instance['bundle']}:title_value";
     i18n_string_update($i18n_string_name, $instance['settings']['title_value']);
   }
@@ -1312,9 +1348,10 @@ function link_field_update_instance($instance, $prior_instance) {
  * Implements hook_i18n_string_list_TEXTGROUP_alter().
  */
 function link_i18n_string_list_field_alter(&$strings, $type = NULL, $object = NULL) {
-  if ($type == 'field_instance' && $object && $object['widget']['type'] == 'link_field') {
-    if (isset($object['settings']['title_value'])) {
-      $strings['field'][$object['field_name']][$object['bundle']]['title_value']['string'] = $object['settings']['title_value'];
-    }
+  if ($type != 'field_instance' || !is_array($object) || !isset($object['widget']['type'])) {
+    return;
+  }
+  if ($object['widget']['type'] == 'link_field' && isset($object['settings']['title_value'])) {
+    $strings['field'][$object['field_name']][$object['bundle']]['title_value']['string'] = $object['settings']['title_value'];
   }
 }
diff --git a/profiles/commons/modules/contrib/link/tests/link.crud_browser.test b/profiles/commons/modules/contrib/link/tests/link.crud_browser.test
index 9540601..19d9c59 100644
--- a/profiles/commons/modules/contrib/link/tests/link.crud_browser.test
+++ b/profiles/commons/modules/contrib/link/tests/link.crud_browser.test
@@ -104,18 +104,24 @@ class LinkUITest extends DrupalWebTestcase {
         'msg' => 'js label',
         'type' => self::LINK_INPUT_TYPE_BAD_TITLE
       ),
-       array(
+      array(
         'href' => 'http://example.com/' . $this->randomName(),
         'label' => $this->randomName() . '\' onmouseover="alert(\'hi\')',
         'msg' => 'js label',
         'type' => self::LINK_INPUT_TYPE_BAD_TITLE
       ),
-     array(
+      array(
         'href' => 'javascript:alert("http://example.com/' . $this->randomName() . '")',
         'label' => $this->randomName(),
         'msg' => 'js url',
         'type' => self::LINK_INPUT_TYPE_BAD_URL
       ),
+      array(
+        'href' => 'http://ecs-es.kelkoo.es/ctl/go/sitesearchGo?.ts=1338833010331&.sig=qP9GXeEFH6syBzwmzYkxmsvp1EI-',
+        'label' => 'http://ecs-es.kelkoo.es/ctl/go/sitesearchGo?.ts=1338833010331&.sig=qP9GXeEFH6syBzwmzYkxmsvp1EI-',
+        'msg' => 'Url with . in querystring',
+        'type' => self::LINK_INPUT_TYPE_GOOD,
+      ),
     );
     $test_case = array(
       'href' => 'www.example.com/'. $this->randomName(),
diff --git a/profiles/commons/modules/contrib/media/README.txt b/profiles/commons/modules/contrib/media/README.txt
new file mode 100644
index 0000000..6875a07
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/README.txt
@@ -0,0 +1,7 @@
+
+/**
+ *  @file
+ *  README for the Media Module.
+ */
+
+See http://drupal.org/node/356802
diff --git a/profiles/commons/modules/contrib/media/css/media.css b/profiles/commons/modules/contrib/media/css/media.css
new file mode 100644
index 0000000..2ea3699
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/css/media.css
@@ -0,0 +1,160 @@
+/**
+ * @file
+ * Styles for the media library.
+ *
+ * The display and layout of the Media browser assumes Drupal's Seven theme as
+ * the theme active when this is displayed.
+ */
+
+/* jQuery UI Resets */
+.ui-tabs {
+  padding: 0;
+}
+
+.ui-dialog.media-wrapper .ui-dialog-content {
+  padding: 0;
+}
+
+.ui-dialog.media-wrapper .ui-dialog-buttonpane {
+  display: none;
+}
+
+#media-browser-tabset .ui-widget-header {
+  background: none;
+}
+
+/* Remove the default border */
+.ui-widget-content {
+  border: none;
+}
+
+/* *********************************************************** */
+/* Browser layout themeing */
+
+/* Size the branding header appropriately */
+#media-browser-tabset #branding {
+  padding: 10px 10px 0px 10px;
+}
+
+#media-browser-tabset #branding h1 {
+  float: left;
+  height: 16px;
+  margin-top: 0px;
+}
+
+/* Float the tabs right to keep the UI consistent across themes */
+#media-tabs-wrapper {
+  float: right;
+}
+
+#media-browser-tabset ul.tabs {
+  padding: 0;
+  border: none;
+}
+
+/* Reset the height to match the browser */
+#media-browser-tabset ul.tabs.primary li a:link {
+  font-weight: bold;
+  margin-right: 0;
+}
+
+/* *********************************************************** */
+/* Media item display */
+
+.media-item {
+  background: #FFFFFF;
+  border: 1px solid #CCCCCC;
+  padding: 5px;
+   position: relative;
+}
+
+.media-item img {
+  margin-bottom: 10px;
+}
+
+.media-item .label-wrapper {
+  text-align: center;
+  position: absolute;
+  bottom: 0;
+  margin-left: auto;
+  margin-right: auto;
+  width: 90%;
+}
+
+.media-item .label-wrapper label {
+  font-size: 10px;
+  overflow: hidden;
+  text-overflow: ellipsis;
+  white-space: nowrap;
+}
+
+/* Media item lists */
+
+#media-browser-library-list {
+  margin: 0;
+  padding: 0;
+}
+
+.media-list-thumbnails li {
+  float: left;
+  list-style: none;
+  margin: 0 10px 10px 0;
+}
+
+.media-list-thumbnails li a {
+  text-decoration: none;
+}
+
+.media-list-thumbnails .media-item.selected {
+  background: #F4ECC7;
+  border-color: #058AC5;
+}
+
+.media-list-thumbnails .media-item:hover {
+  border-color: #058AC5;
+  cursor: pointer;
+}
+
+.media-list-thumbnails .media-item .label-wrapper label {
+  color: #058AC5;
+}
+
+.media-list-thumbnails .media-item .label-wrapper label:hover {
+  cursor: pointer;
+}
+
+.media-list-thumbnails .form-type-checkbox {
+  bottom: 135px;
+  left: 8px;
+  margin: 0;
+  padding: 0;
+  position: relative;
+}
+
+/* File field */
+
+.media-widget .preview {
+  display: inline-block;
+  vertical-align: middle;
+}
+
+.media-widget .preview a {
+  text-decoration: none;
+}
+
+.media-widget .preview .media-item {
+  margin-right: 10px;
+}
+
+.media-widget .preview .media-item:hover {
+  border-color: #058AC5;
+  cursor: pointer;
+}
+
+.media-widget .preview .media-item .label-wrapper label {
+  color: #058AC5;
+}
+
+.media-widget .preview .media-item .label-wrapper label:hover {
+  cursor: pointer;
+}
diff --git a/profiles/commons/modules/contrib/media/images/icons/default/application-octet-stream.png b/profiles/commons/modules/contrib/media/images/icons/default/application-octet-stream.png
new file mode 100644
index 0000000..0e6de2f
Binary files /dev/null and b/profiles/commons/modules/contrib/media/images/icons/default/application-octet-stream.png differ
diff --git a/profiles/commons/modules/contrib/media/images/icons/default/audio-mpeg.png b/profiles/commons/modules/contrib/media/images/icons/default/audio-mpeg.png
new file mode 100644
index 0000000..b876398
Binary files /dev/null and b/profiles/commons/modules/contrib/media/images/icons/default/audio-mpeg.png differ
diff --git a/profiles/commons/modules/contrib/media/images/icons/default/audio-x-generic.png b/profiles/commons/modules/contrib/media/images/icons/default/audio-x-generic.png
new file mode 100644
index 0000000..b876398
Binary files /dev/null and b/profiles/commons/modules/contrib/media/images/icons/default/audio-x-generic.png differ
diff --git a/profiles/commons/modules/contrib/media/images/icons/default/file-unknown.png b/profiles/commons/modules/contrib/media/images/icons/default/file-unknown.png
new file mode 100644
index 0000000..46125e7
Binary files /dev/null and b/profiles/commons/modules/contrib/media/images/icons/default/file-unknown.png differ
diff --git a/profiles/commons/modules/contrib/media/images/icons/default/image-x-generic.png b/profiles/commons/modules/contrib/media/images/icons/default/image-x-generic.png
new file mode 100644
index 0000000..c50e3c7
Binary files /dev/null and b/profiles/commons/modules/contrib/media/images/icons/default/image-x-generic.png differ
diff --git a/profiles/commons/modules/contrib/media/images/icons/default/video-x-generic.png b/profiles/commons/modules/contrib/media/images/icons/default/video-x-generic.png
new file mode 100644
index 0000000..58add03
Binary files /dev/null and b/profiles/commons/modules/contrib/media/images/icons/default/video-x-generic.png differ
diff --git a/profiles/commons/modules/contrib/media/includes/MediaBrowserPlugin.inc b/profiles/commons/modules/contrib/media/includes/MediaBrowserPlugin.inc
new file mode 100644
index 0000000..807a4e4
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/MediaBrowserPlugin.inc
@@ -0,0 +1,86 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaBrowserPlugin.
+ */
+
+/**
+ * Defines a Media browser plugin base class.
+ *
+ * MediaBrowserPlugin implementations need to implement at least the
+ * view() method.
+ */
+abstract class MediaBrowserPlugin implements MediaBrowserPluginInterface {
+  /**
+   * The plugin metadata array from hook_media_browser_plugin_info().
+   *
+   * @var array
+   */
+  protected $info;
+
+  /**
+   * The parameters for the current media browser from
+   * media_get_browser_params().
+   *
+   * @var array
+   */
+  protected $params;
+
+  /**
+   * Implements MediaBrowserPluginInterface::__construct().
+   */
+  public function __construct($info, $params) {
+    $this->info = $info;
+    $this->params = $params;
+  }
+
+  /**
+   * Implements MediaBrowserPluginInterface::access().
+   */
+  public function access($account = NULL) {
+    // Backwards compatible support for 'access callback' definitions.
+    if (isset($this->info['access callback'])) {
+      $access_callback = $this->info['access callback'];
+      $access_arguments = isset($this->info['access arguments']) ? $this->info['access arguments'] : array();
+      return function_exists($access_callback) && call_user_func_array($access_callback, $access_arguments);
+    }
+
+    return TRUE;
+  }
+
+  /**
+   * Provide a render array to display the plugin in a media browser.
+   *
+   * This render array will be a jQuery tab in the media browser.
+   *
+   * Some elements are special:
+   *  - #settings: Drupal.settings.media.browser.$key (where key is the array
+   *    key).
+   *  - #callback: If provided, will make the tab an "ajax" tab.
+   *  - #title: If provided, will be used as the tab's title. Otherwise the
+   *    'title' value from the plugin's hook_media_browser_plugin_info() will
+   *    be used.
+   *  - #weight: If provided, will be used to order the tabs between each other.
+   *    A lower weight will be displayed first while a higher weight will be
+   *    displayed later. If not provided, and there is a 'weight' value in the
+   *    plugin's hook_media_browser_plugin_info() then it will be used,
+   *    otherwise a default of 0 will be used.
+   *  - form: If the plugin is to display a native Drupal form, then the output
+   *    of drupal_get_form should be returned into the 'form' render key. If a
+   *    form's callback isn't normally loaded, module_load_include() should be
+   *    used to ensure that the form can be displayed.
+   *
+   * Example usage:
+   * @code
+   *   module_load_include('inc', 'mymodule', 'mymodule.pages');
+   *   $build['#attached']['js'][] = drupal_get_path('module', 'mymodule') . '/js/mymodule.media.browser.js';
+   *   $build['form'] = drupal_get_form('mymodule_media_form');
+   *   return $build;
+   * @endcode
+   *
+   * @return array
+   *   Renderable array.
+   */
+  abstract public function view();
+}
diff --git a/profiles/commons/modules/contrib/media/includes/MediaBrowserPluginInterface.inc b/profiles/commons/modules/contrib/media/includes/MediaBrowserPluginInterface.inc
new file mode 100644
index 0000000..3ff1134
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/MediaBrowserPluginInterface.inc
@@ -0,0 +1,44 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaBrowserPluginInterface.
+ */
+
+/**
+ * Defines a Media browser plugin.
+ *
+ * Extends the MediaBrowserPluginInterface with methods expected by all
+ * Media browser classes.
+ */
+interface MediaBrowserPluginInterface {
+  /**
+   * Set up the plugin class.
+   *
+   * @param array $info
+   *   An array of plugin info from hook_media_browser_plugin_info()
+   *   implementations.
+   * @param array $params
+   *   An array of parameters which came in is $_GET['params']. The expected
+   *   parameters are still being defined.
+   *   - 'types': array of media types to support
+   *   - 'multiselect': boolean; TRUE enables multiselect
+   */
+  public function __construct($info, $params);
+
+  /**
+   * Check if a user can access this plugin.
+   *
+   * @param object $account
+   *   An optional user account object from user_load(). Defaults to the current
+   *   global user.
+   *
+   * @return bool
+   *   TRUE if the user can access this plugin, or FALSE otherwise.
+   */
+  public function access($account = NULL);
+
+  // The view() method is an abstract function so it is defined in MediaBrowser
+  // Plugin.
+  // @todo public function view();
+}
diff --git a/profiles/commons/modules/contrib/media/includes/MediaBrowserUpload.inc b/profiles/commons/modules/contrib/media/includes/MediaBrowserUpload.inc
new file mode 100644
index 0000000..57721cb
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/MediaBrowserUpload.inc
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaBrowserUpload.
+ */
+
+/**
+ * Media browser plugin for showing the upload form.
+ *
+ * @deprecated
+ */
+class MediaBrowserUpload extends MediaBrowserPlugin {
+  /**
+   * Implements MediaBrowserPluginInterface::access().
+   */
+  public function access($account = NULL) {
+    return file_entity_access('create', NULL, $account);
+  }
+
+  /**
+   * Implements MediaBrowserPlugin::view().
+   */
+  public function view() {
+    module_load_include('inc', 'file_entity', 'file_entity.pages');
+
+    $build = array();
+    $build['form'] = drupal_get_form('file_entity_add_upload', $this->params);
+
+    return $build;
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/includes/MediaBrowserView.inc b/profiles/commons/modules/contrib/media/includes/MediaBrowserView.inc
new file mode 100644
index 0000000..0321a11
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/MediaBrowserView.inc
@@ -0,0 +1,56 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaBrowserView.
+ */
+
+/**
+ * Media browser plugin for displaying a specific view and display.
+ */
+class MediaBrowserView extends MediaBrowserPlugin {
+  /**
+   * The view object from views_get_view() for this plugin.
+   *
+   * @var view
+   */
+  protected $view;
+
+  /**
+   * Implements MediaBrowserPluginInterface::__construct().
+   */
+  public function __construct($info, $params) {
+    parent::__construct($info, $params);
+
+    // Set up the view object with the proper display.
+    if ($view = views_get_view($info['view_name'])) {
+      $display_id = !empty($info['view_display_id']) ? $info['view_display_id'] : NULL;
+      if ($view->set_display($display_id)) {
+        $this->view = $view;
+      }
+    }
+  }
+
+  /**
+   * Implements MediaBrowserPluginInterface::access().
+   */
+  public function access($account = NULL) {
+    return !empty($this->view) && $this->view->access($this->view->current_display, $account);
+  }
+
+  /**
+   * Implements MediaBrowserPlugin::view().
+   */
+  public function view() {
+    if (!empty($this->view)) {
+      $build['#markup'] = $this->view->preview();
+
+      // Allow the View title to override the plugin title.
+      if ($title = $this->view->get_title()) {
+        $build['#title'] = $title;
+      }
+
+      return $build;
+    }
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/includes/MediaEntityTranslationHandler.inc b/profiles/commons/modules/contrib/media/includes/MediaEntityTranslationHandler.inc
new file mode 100644
index 0000000..4e78ed1
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/MediaEntityTranslationHandler.inc
@@ -0,0 +1,63 @@
+<?php
+
+/**
+ * @file
+ * Media translation handler for the entity translation module.
+ */
+
+
+/**
+ * Media translation handler.
+ */
+class MediaEntityTranslationHandler extends EntityTranslationDefaultHandler {
+
+  /**
+   * Constructor function.
+   */
+  public function __construct($entity_type, $entity_info, $entity) {
+    parent::__construct('file', $entity_info, $entity);
+  }
+
+  /**
+   * Entity form handler.
+   *
+   * @see EntityTranslationDefaultHandler::entityForm()
+   */
+  public function entityForm(&$form, &$form_state) {
+    parent::entityForm($form, $form_state);
+
+    if (isset($form['actions']['delete_translation'])) {
+      $form['actions']['delete_translation']['#weight'] = 10;
+    }
+
+    if ($this->getPathScheme() == 'media') {
+      $language = $GLOBALS[LANGUAGE_TYPE_CONTENT];
+      $form_langcode = $this->getFormLanguage();
+      $source_langcode = $this->getSourceLanguage();
+      $translations = $this->getTranslations();
+
+      // If a translation in the current content language is missing we display
+      // a link to create it, unless we are not already doing it.
+      if ($language->language != $form_langcode && empty($source_langcode) && !isset($translations->data[$language->language])) {
+        $link = array(
+          'title' => t('Add @language translation', array('@language' => $language->name)),
+          'href' => $this->getEditPath() . '/add/' . $form_langcode . '/' . $language->language,
+          'localized_options' => array('attributes' => array('class' => array('ctools-use-modal'))),
+        );
+        $form['media_add_translation'] = array(
+          '#theme' => 'menu_local_action',
+          '#link' => $link,
+          '#weight' => -110,
+          '#prefix' => '<ul class="action-links">',
+          '#suffix' => '</ul>',
+        );
+      }
+
+      // Hide unsupported elements.
+      $form['source_language']['#access'] = FALSE;
+      if (isset($form['actions']['delete_translation'])) {
+        $form['actions']['delete_translation']['#access'] = FALSE;
+      }
+    }
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/includes/MediaReadOnlyStreamWrapper.inc b/profiles/commons/modules/contrib/media/includes/MediaReadOnlyStreamWrapper.inc
new file mode 100644
index 0000000..ee051fd
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/MediaReadOnlyStreamWrapper.inc
@@ -0,0 +1,476 @@
+<?php
+
+/**
+ * @file
+ * Implements a base class for Resource Stream Wrappers.
+ */
+
+/**
+ * A base class for Resource Stream Wrappers.
+ *
+ * This class provides a complete stream wrapper implementation. It passes
+ * incoming  URL's through an interpolation method then recursively calls
+ * the invoking PHP filesystem function.
+ *
+ * MediaReadOnlyStreamWrapper implementations need to override at least the
+ * interpolateUrl method to rewrite the URL before is it passed back into the
+ * calling function.
+ */
+abstract class MediaReadOnlyStreamWrapper implements DrupalStreamWrapperInterface {
+  protected $parameters = array();
+  protected $base_url = NULL;
+  private $_DEBUG_MODE = NULL;
+
+  /**
+   * Utility function to return paramenters.
+   */
+  public function get_parameters() {
+    return $this->parameters;
+  }
+
+  // As part of the inode protection mode returned by stat(), identifies the
+  // file as a regular file, as opposed to a directory, symbolic link, or other
+  // type of "file".
+  // @see http://linux.die.net/man/2/stat
+  const S_IFREG = 0100000;
+
+  /**
+   * Template for stat calls.
+   *
+   * All elements must be initialized.
+   */
+  protected $_stat = array(
+    0 => 0, // Device number
+    'dev' => 0,
+    1 => 0, // Inode number
+    'ino' => 0,
+    // Inode protection mode. file_unmanaged_delete() requires is_file() to
+    // return TRUE.
+    2 => self::S_IFREG,
+    'mode' => self::S_IFREG,
+    3 => 0, // Number of links.
+    'nlink' => 0,
+    4 => 0, // Userid of owner.
+    'uid' => 0,
+    5 => 0, // Groupid of owner.
+    'gid' => 0,
+    6 => -1, // Device type, if inode device *
+    'rdev' => -1,
+    7 => 0, // Size in bytes.
+    'size' => 0,
+    8 => 0, // Time of last access (Unix timestamp).
+    'atime' => 0,
+    9 => 0, // Time of last modification (Unix timestamp).
+    'mtime' => 0,
+    10 => 0, // Time of last inode change (Unix timestamp).
+    'ctime' => 0,
+    11 => -1, // Blocksize of filesystem IO.
+    'blksize' => -1,
+    12 => -1, // Number of blocks allocated.
+    'blocks' => -1,
+  );
+
+  /**
+   * Handles parameters on the URL string.
+   */
+  public function interpolateUrl() {
+    if ($parameters = $this->get_parameters()) {
+      return $this->base_url . '?' . http_build_query($parameters);
+    }
+  }
+
+  /**
+   * Returns a web accessible URL for the resource.
+   *
+   * This function should return a URL that can be embedded in a web page
+   * and accessed from a browser. For example, the external URL of
+   * "youtube://xIpLd0WQKCY" might be
+   * "http://www.youtube.com/watch?v=xIpLd0WQKCY".
+   *
+   * @return string
+   *   Returns a string containing a web accessible URL for the resource.
+   */
+  public function getExternalUrl() {
+    return $this->interpolateUrl();
+  }
+
+  /**
+   * Base implementation of getMimeType().
+   */
+  public static function getMimeType($uri, $mapping = NULL) {
+    return 'application/octet-stream';
+  }
+
+  /**
+   * Base implementation of realpath().
+   */
+  public function realpath() {
+    return $this->getExternalUrl();
+  }
+
+  /**
+   * Stream context resource.
+   *
+   * @var Resource
+   */
+  public $context;
+
+  /**
+   * A generic resource handle.
+   *
+   * @var Resource
+   */
+  public $handle = NULL;
+
+  /**
+   * Instance URI (stream).
+   *
+   * A stream is referenced as "scheme://target".
+   *
+   * @var String
+   */
+  protected $uri;
+
+  /**
+   * Base implementation of setUri().
+   */
+  public function setUri($uri) {
+    $this->uri = $uri;
+    $this->parameters = $this->_parse_url($uri);
+  }
+
+  /**
+   * Base implementation of getUri().
+   */
+  public function getUri() {
+    return $this->uri;
+  }
+
+  /**
+   * Report an error.
+   *
+   * @param string $message
+   *   The untranslated string to report.
+   * @param array $options
+   *   An optional array of options to send to t().
+   * @param bool $display
+   *   If TRUE, then we display the error to the user.
+   *
+   * @return bool
+   *   We return FALSE, since we sometimes pass that back from the reporting
+   *   function.
+   */
+  private function _report_error($message, $options = array(), $display = FALSE) {
+    watchdog('resource', $message, $options, WATCHDOG_ERROR);
+    if ($display) {
+      drupal_set_message(t($message, $options), 'error');
+    }
+    return FALSE;
+  }
+
+  /**
+   * Sets the debug mode.
+   */
+  private function _debug($message, $type = 'status') {
+    if ($this->_DEBUG_MODE) {
+      drupal_set_message($message, $type);
+    }
+  }
+
+  /**
+   * Returns an array of any parameters stored in the URL's path.
+   *
+   * @param string $url
+   *   The URL to parse, such as youtube://v/[video-code]/t/[tags+more-tags].
+   *
+   * @return array
+   *   An associative array of all the parameters in the path,
+   *   or FALSE if the $url is ill-formed.
+   */
+  protected function _parse_url($url) {
+    $path = explode('://', $url);
+    $parts = explode('/', $path[1]);
+    $params = array();
+    $count = 0;
+    $total = count($parts);
+    if (!$total || ($total % 2)) {
+      // If we have no parts, or an odd number of parts, it's malformed.
+      return FALSE;
+    }
+    while ($count < $total) {
+      // We iterate count for each step of the assignment to keep us honest.
+      $params[$parts[$count++]] = $parts[$count++];
+    }
+    return $params;
+  }
+
+  /**
+   * Support for fopen(), file_get_contents(), file_put_contents() etc.
+   *
+   * @param string $url
+   *   A string containing the path to the file to open.
+   * @param string $mode
+   *   The file mode ("r", "wb" etc.).
+   * @param bitmask $options
+   *   A bit mask of STREAM_USE_PATH and STREAM_REPORT_ERRORS.
+   * @param string &$opened_url
+   *   A string containing the path actually opened.
+   *
+   * @return bool
+   *   TRUE if file was opened successfully.
+   */
+  public function stream_open($url, $mode, $options, &$opened_url) {
+    $this->_debug(t('Stream open: %url', array('%url' => $url)));
+
+    // We only handle Read-Only mode by default.
+    if ($mode != 'r' && $mode != 'rb') {
+      return $this->_report_error('Attempted to open %url as mode: %mode.', array('%url' => $url, '%mode' => $mode), ($options & STREAM_REPORT_ERRORS));
+    }
+
+    // We parse a URL as youtube://v/dsyiufo34/t/cats+dogs to store
+    // the relevant code(s) in our private array of parameters.
+    $this->parameters = $this->_parse_url($url);
+
+    if ($this->parameters === FALSE) {
+      return $this->_report_error('Attempted to parse an ill-formed url: %url.', array('%url' => $url), ($options & STREAM_REPORT_ERRORS));
+    }
+
+    if ((bool) $this->parameters && ($options & STREAM_USE_PATH)) {
+      $opened_url = $url;
+    }
+
+    $this->_debug(t('Stream opened: %parameters', array('%parameters' => print_r($this->parameters, TRUE))));
+
+    return (bool) $this->parameters;
+  }
+
+  /**
+   * Undocumented PHP stream wrapper method.
+   */
+  function stream_lock($operation) {
+    return FALSE;
+  }
+
+  /**
+   * Support for fread(), file_get_contents() etc.
+   *
+   * @param int $count
+   *   Maximum number of bytes to be read.
+   *
+   * @return bool
+   *   The string that was read, or FALSE in case of an error.
+   */
+  public function stream_read($count) {
+    return FALSE;
+  }
+
+  /**
+   * Support for fwrite(), file_put_contents() etc.
+   *
+   * Since this is a read only stream wrapper this always returns false.
+   *
+   * @param string $data
+   *   The string to be written.
+   *
+   * @return bool
+   *   Returns FALSE.
+   */
+  public function stream_write($data) {
+    return FALSE;
+  }
+
+  /**
+   * Support for feof().
+   *
+   * @return bool
+   *   TRUE if end-of-file has been reached.
+   */
+  public function stream_eof() {
+    return FALSE;
+  }
+
+  /**
+   * Support for fseek().
+   *
+   * @todo document why this returns false.
+   *
+   * @param int $offset
+   *   The byte offset to got to.
+   * @param string $whence
+   *   SEEK_SET, SEEK_CUR, or SEEK_END.
+   *
+   * @return bool
+   *   TRUE on success
+   */
+  public function stream_seek($offset, $whence) {
+    return FALSE;
+  }
+
+  /**
+   * Support for fflush().
+   *
+   * @todo document why this returns false.
+   *
+   * @return bool
+   *   TRUE if data was successfully stored (or there was no data to store).
+   */
+  public function stream_flush() {
+    return FALSE;
+  }
+
+  /**
+   * Support for ftell().
+   *
+   * @todo document why this returns false.
+   *
+   * @return bool
+   *   The current offset in bytes from the beginning of file.
+   */
+  public function stream_tell() {
+    return FALSE;
+  }
+
+  /**
+   * Support for fstat().
+   *
+   * @return array
+   *   An array with file status, or FALSE in case of an error - see fstat()
+   *   for a description of this array.
+   */
+  public function stream_stat() {
+    return $this->_stat;
+  }
+
+  /**
+   * Support for fclose().
+   *
+   * @todo document why this returns TRUE.
+   *
+   * @return bool
+   *   TRUE if stream was successfully closed.
+   */
+  public function stream_close() {
+    return TRUE;
+  }
+
+  /**
+   * Support for stat().
+   *
+   * @param string $url
+   *   A string containing the url to get information about.
+   * @param bitmask $flags
+   *   A bit mask of STREAM_URL_STAT_LINK and STREAM_URL_STAT_QUIET.
+   *
+   * @return array
+   *   An array with file status, or FALSE in case of an error - see fstat()
+   *   for a description of this array.
+   */
+  public function url_stat($url, $flags) {
+    return $this->stream_stat();
+  }
+
+  /**
+   * Support for opendir().
+   *
+   * @param string $url
+   *   A string containing the url to the directory to open.
+   * @param int $options
+   *   Whether or not to enforce safe_mode (0x04).
+   *
+   * @return bool
+   *   TRUE on success.
+   */
+  public function dir_opendir($url, $options) {
+    return FALSE;
+  }
+
+  /**
+   * Support for readdir().
+   *
+   * @return bool
+   *   The next filename, or FALSE if there are no more files in the directory.
+   */
+  public function dir_readdir() {
+    return FALSE;
+  }
+
+  /**
+   * Support for rewinddir().
+   *
+   * @return bool
+   *   TRUE on success.
+   */
+  public function dir_rewinddir() {
+    return FALSE;
+  }
+
+  /**
+   * Support for closedir().
+   *
+   * @return bool
+   *   TRUE on success.
+   */
+  public function dir_closedir() {
+    return FALSE;
+  }
+
+  /**
+   * Undocumented.
+   *
+   * @todo document.
+   */
+  public function getDirectoryPath() {
+    return '';
+  }
+
+  /**
+   * DrupalStreamWrapperInterface requires that these methods be implemented,
+   * but none of them apply to a read-only stream wrapper. On failure they
+   * are expected to return FALSE.
+   */
+
+  /**
+   * Implements DrupalStreamWrapperInterface::unlink().
+   */
+  public function unlink($uri) {
+    // Although the remote file itself can't be deleted, return TRUE so that
+    // file_delete() can remove the file record from the Drupal database.
+    return TRUE;
+  }
+
+  /**
+   * Implements DrupalStreamWrapperInterface::rename().
+   */
+  public function rename($from_uri, $to_uri) {
+    return FALSE;
+  }
+
+  /**
+   * Implements DrupalStreamWrapperInterface::mkdir().
+   */
+  public function mkdir($uri, $mode, $options) {
+    return FALSE;
+  }
+
+  /**
+   * Implements DrupalStreamWrapperInterface::rmdir().
+   */
+  public function rmdir($uri, $options) {
+    return FALSE;
+  }
+
+  /**
+   * Implements DrupalStreamWrapperInterface::chmod().
+   */
+  public function chmod($mode) {
+    return FALSE;
+  }
+
+  /**
+   * Implements DrupalStreamWrapperInterface::dirname().
+   */
+  public function dirname($uri = NULL) {
+    return FALSE;
+  }
+
+}
diff --git a/profiles/commons/modules/contrib/media/includes/media.admin.inc b/profiles/commons/modules/contrib/media/includes/media.admin.inc
new file mode 100644
index 0000000..464ed02
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/media.admin.inc
@@ -0,0 +1,47 @@
+<?php
+
+/**
+ * @file
+ * Administration page callbacks for the Media module.
+ */
+
+/**
+ * Displays the media administration page.
+ */
+function media_admin_config_browser($form, &$form_state) {
+  $theme_options = array();
+  $theme_options[NULL] = t('Default administration theme');
+
+  foreach (list_themes() as $key => $theme) {
+    if ($theme->status) {
+      $theme_options[$key] = $theme->info['name'];
+    }
+  }
+
+  $form['media_dialog_theme'] = array(
+    '#type' => 'select',
+    '#title' => t('Media browser theme'),
+    '#options' => $theme_options,
+    '#description' => t("This theme will be used for all media related dialogs. It can be different from your site's theme because many site themes do not work well in the small windows which media uses."),
+    '#default_value' => variable_get('media_dialog_theme', ''),
+  );
+
+  $form['array_filter'] = array(
+    '#type' => 'value',
+    '#value' => TRUE,
+  );
+
+  $form['#submit'][] = 'media_admin_config_browser_pre_submit';
+
+  return system_settings_form($form);
+}
+
+/**
+ * Form submission handler for media_admin_config_browser().
+ */
+function media_admin_config_browser_pre_submit(&$form, &$form_state) {
+  if (!$form_state['values']['media_dialog_theme']) {
+    variable_del('media_dialog_theme');
+    unset($form_state['values']['media_dialog_theme']);
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/includes/media.browser.inc b/profiles/commons/modules/contrib/media/includes/media.browser.inc
new file mode 100644
index 0000000..626fc00
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/media.browser.inc
@@ -0,0 +1,367 @@
+<?php
+
+/**
+ * @file
+ * Summon plugins and render the media browser.
+ */
+
+/**
+ * Media browser page callback.
+ */
+function media_browser($selected = NULL) {
+  $output = array();
+  $output['#attached']['library'][] = array('media', 'media_browser_page');
+
+  $params = media_set_browser_params();
+
+  // If one or more files have been selected, the browser interaction is now
+  // complete. Return empty page content to the dialog which now needs to close,
+  // but populate Drupal.settings with information about the selected files.
+  if (isset($params['fid'])) {
+    $fids = is_array($params['fid']) ? $params['fid'] : array($params['fid']);
+    if (!is_numeric($fids[0])) {
+      throw new Exception('Error selecting media, fid param is not an fid or an array of fids');
+    }
+    $files = file_load_multiple($fids);
+    foreach ($files as $file) {
+      media_browser_build_media_item($file);
+    }
+    $setting = array('media' => array('selectedMedia' => array_values($files)));
+    drupal_add_js($setting, 'setting');
+    return $output;
+  }
+
+  $plugins = media_get_browser_plugin_info();
+
+  // Allow parameters to provide a list of enabled or disabled media browser
+  // plugins.
+  if (!empty($params['enabledPlugins'])) {
+    $plugins = array_intersect_key($plugins, array_fill_keys($params['enabledPlugins'], 1));
+  }
+  elseif (!empty($params['disabledPlugins'])) {
+    $plugins = array_diff_key($plugins, array_fill_keys($params['disabledPlugins'], 1));
+  }
+
+  // Render plugins.
+  $plugin_output = array();
+  foreach ($plugins as $key => $plugin_info) {
+    // Support the old CTools style handler definition.
+    if (!isset($plugin_info['class']) && !empty($plugin_info['handler'])) {
+      if (is_string($plugin_info['handler'])) {
+        $plugin_info['class'] = $plugin_info['handler'];
+      }
+      elseif (isset($plugin_info['handler']['class'])) {
+        $plugin_info['class'] = $plugin_info['handler']['class'];
+      }
+    }
+
+    if (empty($plugin_info['class']) || !class_exists($plugin_info['class'])) {
+      continue;
+    }
+
+    $plugin = new $plugin_info['class']($plugin_info, $params);
+    if ($plugin->access()) {
+      $plugin_output[$key] = $plugin->view();
+      if (!empty($plugin_output[$key]) && is_array($plugin_output[$key])) {
+        $plugin_output[$key] += array(
+          '#title' => $plugin_info['title'],
+          '#weight' => isset($plugin_info['weight']) ? $plugin_info['weight'] : 0,
+        );
+      }
+      else {
+        unset($plugin_output[$key]);
+        continue;
+      }
+    }
+    else {
+      continue;
+    }
+
+    // We need to get a submit and cancel button on each tab. If the plugin
+    // is not returning a form element we need to add a submit button.
+    // This is a fairly broad assumption.
+    if (empty($plugin_output[$key]['#form']) && !empty($plugin_output[$key]['#markup'])) {
+      $fake_buttons = '<div class="form-actions form-wrapper">';
+      $fake_buttons .= l(t('Submit'), '', array(
+        'attributes' => array(
+          'class' => array('button', 'button-yes', 'fake-submit', $key),
+        ),
+      ));
+      $fake_buttons .= l(t('Cancel'), '', array(
+        'attributes' => array(
+          'class' => array('button', 'button-no', 'fake-cancel', $key),
+        ),
+      ));
+      $fake_buttons .= '</div>';
+      $plugin_output[$key]['#markup'] .= $fake_buttons;
+    }
+
+    // I'm not sure if it is ever the case that a plugin form will ever have
+    // the correct cancel button so we add it here. Put it inline with the
+    // current submit button. This is a fairly broad assumption.
+    if (!empty($plugin_output[$key]['form']['actions']) && !isset($plugin_output[$key]['form']['actions']['cancel'])) {
+      $plugin_output[$key]['form']['actions']['cancel'] = array(
+        '#type' => 'link',
+        '#title' => t('Cancel'),
+        '#href' => '',
+        '#attributes' => array(
+          'class' => array(
+            'button',
+            'button-no',
+            'fake-cancel',
+            $key,
+          ),
+        ),
+        '#weight' => 100,
+      );
+    }
+  }
+
+  // Allow modules to change the tab names or whatever else they want to change
+  // before we render.  Perhaps this should be an alter on the theming function
+  // that we should write to be making the tabs.
+  drupal_alter('media_browser_plugins', $plugin_output);
+
+  $tabs = array();
+  $settings = array('media' => array('browser' => array()));
+
+  foreach (element_children($plugin_output, TRUE) as $key) {
+    // Add any JavaScript settings from the browser tab.
+    if (!empty($plugin_output[$key]['#settings'])) {
+      $settings['media']['browser'][$key] = $plugin_output[$key]['#settings'];
+    }
+
+    // If this is a "ajax" style tab, add the href, otherwise an id. jQuery UI
+    // will use an href value to load content from that url
+    $tabid = 'media-tab-' . check_plain($key);
+    if (!empty($plugin_output[$key]['#callback'])) {
+      $href = $plugin_output[$key]['#callback'];
+    }
+    else {
+      $attributes = array(
+        'class' => array('media-browser-tab'),
+        'id' => $tabid,
+        'data-tabid' => $key,
+      );
+      // Create a div for each tab's content.
+      $plugin_output[$key] += array(
+        '#prefix' => '<div '. drupal_attributes($attributes) . ">\n",
+        '#suffix' => "</div>\n",
+      );
+    }
+
+    $attributes = array(
+      'href' => '#' . $tabid,
+      'data-tabid' => $key,
+      'title' => $plugin_output[$key]['#title'],
+    );
+    $tabs[]['element'] = array(
+      '#markup' => '<li><a' . drupal_attributes($attributes) . '>' . check_plain($plugin_output[$key]['#title']) . "</a></li>\n",
+    );
+  }
+
+  drupal_add_js($settings, 'setting');
+
+  $output['title'] = array(
+    '#markup' => t('Select a file')
+  );
+
+  $output['tabset']['tabs'] = array(
+    '#theme' => 'menu_local_tasks',
+    '#attributes' => array('class' => array('tabs', 'primary')),
+    '#primary' => $tabs,
+  );
+
+  $output['tabset']['panes'] = $plugin_output;
+
+  return $output;
+}
+
+/**
+ * Provides a singleton of the params passed to the media browser.
+ *
+ * This is useful in situations like form alters because callers can pass
+ * id="wysiywg_form" or whatever they want, and a form alter could pick this up.
+ * We may want to change the hook_media_browser_plugin_view() implementations to
+ * use this function instead of being passed params for consistency.
+ *
+ * It also offers a chance for some meddler to meddle with them.
+ *
+ * @see media_browser()
+ */
+function media_set_browser_params() {
+  $params = &drupal_static(__FUNCTION__, array());
+
+  if (empty($params)) {
+    // Build out browser settings. Permissions- and security-related behaviors
+    // should not rely on these parameters, since they come from the HTTP query.
+    // @TODO make sure we treat parameters as user input.
+    $params = drupal_get_query_parameters() + array(
+      'types' => array(),
+      'multiselect' => FALSE,
+    );
+
+    // Transform text 'true' and 'false' to actual booleans.
+    foreach ($params as $k => $v) {
+      if ($v === 'true') {
+        $params[$k] = TRUE;
+      }
+      elseif ($v === 'false') {
+        $params[$k] = FALSE;
+      }
+    }
+
+    array_walk_recursive($params, 'media_recursive_check_plain');
+
+    // Allow modules to alter the parameters.
+    drupal_alter('media_browser_params', $params);
+  }
+
+  return $params;
+}
+
+
+/**
+ * For sanity in grammar.
+ *
+ * @see media_set_browser_params()
+ */
+function media_get_browser_params() {
+  return media_set_browser_params();
+}
+
+/**
+ * Attaches media browser javascript to an element.
+ *
+ * @param array $element
+ *   The element array to attach to.
+ */
+function media_attach_browser_js(&$element) {
+  $javascript = media_browser_js();
+  foreach ($javascript as $key => $definitions) {
+    foreach ($definitions as $definition) {
+      $element['#attached'][$key][] = $definition;
+    }
+  }
+}
+
+/**
+ * Helper function to define browser javascript.
+ */
+function media_browser_js() {
+  $settings = array(
+    'browserUrl' => url('media/browser', array(
+        'query' => array('render' => 'media-popup'),
+      )
+    ),
+    'styleSelectorUrl' => url('media/-media_id-/format-form', array(
+        'query' => array('render' => 'media-popup'),
+      )
+    ),
+  );
+
+  $js = array(
+    'library' => array(
+      array('media', 'media_browser'),
+    ),
+    'js' => array(
+      array(
+        'data' => array('media' => $settings),
+        'type' => 'setting',
+      ),
+    ),
+  );
+  return $js;
+}
+
+/**
+ * Menu callback for testing the media browser.
+ */
+function media_browser_testbed($form) {
+  media_attach_browser_js($form);
+
+  $form['test_element'] = array(
+    '#type' => 'media',
+    '#media_options' => array(
+      'global' => array(
+        'types' => array('video', 'audio'),
+      ),
+    ),
+  );
+
+  $launcher = '<a href="#" id="launcher"> Launch Media Browser</a>';
+
+  $form['options'] = array(
+    '#type' => 'textarea',
+    '#title' => 'Options (JSON)',
+    '#rows' => 10,
+  );
+
+  $form['launcher'] = array(
+    '#markup' => $launcher,
+  );
+
+  $form['result'] = array(
+    '#type' => 'textarea',
+    '#title' => 'Result',
+  );
+
+  $js = <<<EOF
+    Drupal.behaviors.mediaTest = {
+    attach: function(context, settings) {
+      var delim = "---";
+      var recentOptions = [];
+      var recentOptionsCookie = jQuery.cookie("recentOptions");
+      if (recentOptionsCookie) {
+        recentOptions = recentOptionsCookie.split("---");
+      }
+
+      var recentSelectBox = jQuery('<select id="recent_options" style="width:100%"></select>').change(function() { jQuery('#edit-options').val(jQuery(this).val())});
+
+      jQuery('.form-item-options').append('<label for="recent_options">Recent</a>');
+      jQuery('.form-item-options').append(recentSelectBox);
+      jQuery('.form-item-options').append(jQuery('<a href="#">Reset</a>').click(function() {alert('reset'); jQuery.cookie("recentOptions", null); window.location.reload(); }));
+
+      jQuery.each(recentOptions, function (idx, val) {
+        recentSelectBox.append(jQuery('<option></option>').val(val).html(val));
+      });
+
+
+      jQuery('#launcher').click(function () {
+        jQuery('#edit-result').val('');
+        var options = {};
+        var optionsTxt = jQuery('#edit-options').val();
+        if (optionsTxt) {
+          // Store it in the recent box
+          recentOptionsCookie += "---" + optionsTxt
+          jQuery.cookie("recentOptions", recentOptionsCookie, { expires: 7 });
+          recentSelectBox.append(jQuery('<option></option>').val(optionsTxt).html(optionsTxt));
+          options = eval('(' + optionsTxt + ')');
+        }
+        Drupal.media.popups.mediaBrowser(Drupal.behaviors.mediaTest.mediaSelected, options);
+        return false;
+      });
+    },
+
+    mediaSelected: function(selectedMedia) {
+      var result = JSON.stringify(selectedMedia);
+        jQuery('#edit-result').val(result);
+    }
+  }
+
+EOF;
+
+  drupal_add_js($js, array('type' => 'inline'));
+  return $form;
+}
+
+/**
+ * Adds properties to the file.
+ *
+ * Additional properties on this file are needed by the media browser JS code.
+ */
+function media_browser_build_media_item($file) {
+  $preview = media_get_thumbnail_preview($file);
+  $file->preview = drupal_render($preview);
+  $file->url = file_create_url($file->uri);
+}
diff --git a/profiles/commons/modules/contrib/media/includes/media.fields.inc b/profiles/commons/modules/contrib/media/includes/media.fields.inc
new file mode 100644
index 0000000..29b63a9
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/media.fields.inc
@@ -0,0 +1,217 @@
+<?php
+
+/**
+ * @file
+ * Provide the media file selector widget and media field formatters to the
+ * Fields API.
+ */
+
+/**
+ * Implements hook_field_widget_info().
+ */
+function media_field_widget_info() {
+  return array(
+    'media_generic' => array(
+      'label' => t('Media file selector'),
+      'field types' => array('file', 'image'),
+      'settings' => array(
+        'progress_indicator' => 'throbber',
+        'allowed_types' => array('image'),
+        'browser_plugins' => array(),
+        'allowed_schemes' => array('public', 'private'),
+      ),
+      'behaviors' => array(
+        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
+        'default value' => FIELD_BEHAVIOR_NONE,
+      ),
+    ),
+  );
+}
+
+/**
+ * Implements hook_field_formatter_info().
+ *
+ * Provides legacy support for the "Large filetype icon" file field formatter.
+ * This was originally used when media entities contained file fields. The
+ * current file entity architecture no longer needs this, but people may
+ * have used this formatter for other file fields on their website.
+ *
+ * @todo Some day, remove this.
+ */
+function media_field_formatter_info() {
+  $formatters = array(
+    'media_large_icon' => array(
+      'label' => t('Large filetype icon'),
+      'field types' => array('file'),
+    ),
+  );
+  return $formatters;
+}
+
+/**
+ * Implements hook_field_formatter_view().
+ *
+ * Legacy support for the "Large filetype icon" file field formatter.
+ * @see media_field_formatter_info()
+ */
+function media_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
+  $element = array();
+
+  if ($display['type'] == 'media_large_icon') {
+    // Use the media_thumbnail image style so that the output in media browser
+    // is consistent.
+    foreach ($items as $delta => $item) {
+      $element[$delta] = array(
+        '#theme' => 'media_formatter_large_icon',
+        '#file' => (object) $item,
+      );
+    }
+  }
+
+  return $element;
+}
+
+/**
+ * Implements hook_field_widget_settings_form().
+ */
+function media_field_widget_settings_form($field, $instance) {
+  $widget = $instance['widget'];
+  $settings = $widget['settings'];
+  $form = array();
+
+  $streams = file_get_stream_wrappers(STREAM_WRAPPERS_VISIBLE);
+
+  $form['allowed_types'] = array(
+    '#type' => 'checkboxes',
+    '#title' => t('Allowed remote media types'),
+    '#options' => file_entity_type_get_names(),
+    '#default_value' => $settings['allowed_types'],
+    '#description' => t('Media types which are allowed for this field when using remote streams.'),
+    '#weight' => 1,
+    '#access' => count(file_get_stream_wrappers(STREAM_WRAPPERS_VISIBLE | STREAM_WRAPPERS_LOCAL)) != count($streams),
+  );
+
+  $options = array();
+  foreach ($streams as $scheme => $data) {
+    $options[$scheme] = t('@scheme (@name)', array('@scheme' => $scheme . '://', '@name' => $data['name']));
+  }
+  $form['allowed_schemes'] = array(
+    '#type' => 'checkboxes',
+    '#title' => t('Allowed URI schemes'),
+    '#options' => $options,
+    '#default_value' => $settings['allowed_schemes'],
+    '#description' => t('URI schemes include public:// and private:// which are the Drupal files directories, and may also refer to remote sites.'),
+    '#weight' => 2,
+  );
+
+  $plugins = media_get_browser_plugin_info();
+  $form['browser_plugins'] = array(
+    '#type' => 'checkboxes',
+    '#title' => t('Enabled browser plugins'),
+    '#options' => array(),
+    '#default_value' => $settings['browser_plugins'],
+    '#description' => t('If no plugins are selected, they will all be available.'),
+  );
+  foreach ($plugins as $key => $plugin) {
+    $form['browser_plugins']['#options'][$key] = !empty($plugin['title']) ? $plugin['title'] : $key;
+  }
+
+  return $form;
+}
+
+/**
+ * Implements hook_field_widget_form().
+ */
+function media_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
+  $field_settings = $instance['settings'];
+  $widget_settings = $instance['widget']['settings'];
+
+  // @todo The Field API supports automatic serialization / unserialization, so
+  //   this should no longer be needed. After verifying with a module that uses
+  //   the 'data' column, remove this.
+  // @see media_field_widget_value()
+  $current_value = array();
+  if (isset($items[$delta])) {
+    $current_value = $items[$delta];
+    // @todo $items[$delta] is sometimes a loaded media entity (an object)
+    //   rather than an array. This conflicts with Field API expectations (for
+    //   example, it results in fatal errors when previewing a node with a
+    //   multi-valued media field), so should be fixed. In the meantime, don't
+    //   assume that $current_value is an array.
+    if (is_array($current_value) && isset($current_value['data']) && is_string($current_value['data'])) {
+      $current_value['data'] = unserialize($current_value['data']);
+    }
+  }
+
+  $element += array(
+    // @todo This should be a fieldset, but throws a warning about
+    // element_children.
+    '#type' => 'media',
+    '#collapsed' => TRUE,
+    '#default_value' => $current_value,
+    '#required' => $instance['required'],
+    '#media_options' => array(
+      'global' => array(
+        'types' => array_filter($widget_settings['allowed_types']),
+        'enabledPlugins' => array_filter($instance['widget']['settings']['browser_plugins']),
+        'schemes' => $widget_settings['allowed_schemes'],
+        'file_directory' => isset($field_settings['file_directory']) ? $field_settings['file_directory'] : '',
+        'file_extensions' => isset($field_settings['file_extensions']) ? $field_settings['file_extensions'] : variable_get('file_entity_default_allowed_extensions', 'jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm'),
+        'max_filesize' => isset($field_settings['max_filesize']) ? $field_settings['max_filesize'] : 0,
+        'uri_scheme' => !empty($field['settings']['uri_scheme']) ? $field['settings']['uri_scheme'] : file_default_scheme(),
+      ),
+    ),
+  );
+
+  if ($field['cardinality'] != 1) {
+    $element['#title'] = check_plain($instance['label']);
+    $element['#title_display'] = 'invisible';
+  }
+
+  if ($field['type'] == 'file') {
+    $element['display'] = array(
+      '#type' => 'value',
+      '#value' => 1,
+    );
+  }
+
+  // Add image field specific validators.
+  if ($field['type'] == 'image') {
+    if ($field_settings['min_resolution'] || $field_settings['max_resolution']) {
+      $element['#media_options']['global']['min_resolution'] = $field_settings['min_resolution'];
+      $element['#media_options']['global']['max_resolution'] = $field_settings['max_resolution'];
+    }
+  }
+
+  return $element;
+}
+
+/**
+ * Widget value.
+ *
+ * @todo Is this function ever called? If not, remove it. The Field API now
+ *   supports automatic serialization / unserialization, so this should no
+ *   longer be needed. After verifying with a module that uses the 'data'
+ *   column, remove this.
+ *
+ * @see media_field_widget_form()
+ */
+function media_field_widget_value($element, $input, $form_state) {
+  $return = $input;
+
+  if (!is_array($return)) {
+    $return = array();
+  }
+
+  if (isset($return['data'])) {
+    $return['data'] = serialize($return['data']);
+  }
+
+  $return += array(
+    'fid' => 0,
+    'title' => '',
+    'data' => NULL,
+  );
+
+  return $return;
+}
diff --git a/profiles/commons/modules/contrib/media/includes/media.pages.inc b/profiles/commons/modules/contrib/media/includes/media.pages.inc
new file mode 100644
index 0000000..b22a8b1
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/media.pages.inc
@@ -0,0 +1,33 @@
+<?php
+
+/**
+ * @file
+ * Common pages for the Media module.
+ */
+
+/**
+ * CTools modal callback for editing a file.
+ */
+function media_file_edit_modal($form, &$form_state, $file, $js) {
+  ctools_include('modal');
+  ctools_include('ajax');
+
+  $form_state['ajax'] = $js;
+  form_load_include($form_state, 'inc', 'file_entity', 'file_entity.pages');
+
+  $output = ctools_modal_form_wrapper('file_entity_edit', $form_state);
+
+  if ($js) {
+    $commands = $output;
+
+    if ($form_state['executed']) {
+      $commands = array(ctools_modal_command_dismiss(t('File saved')));
+    }
+
+    print ajax_render($commands);
+    exit();
+  }
+
+  // Otherwise, just return the output.
+  return $output;
+}
diff --git a/profiles/commons/modules/contrib/media/includes/media.theme.inc b/profiles/commons/modules/contrib/media/includes/media.theme.inc
new file mode 100644
index 0000000..9f2ff31
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/media.theme.inc
@@ -0,0 +1,95 @@
+<?php
+
+/**
+ * @file
+ * Media Theming
+ *
+ * Theming functions for the Media module.
+ */
+
+/**
+ * Add messages to the page.
+ */
+function template_preprocess_media_dialog_page(&$variables) {
+  $variables['messages'] = theme('status_messages');
+}
+
+/**
+ * Adds a wrapper around a preview of a media file.
+ */
+function theme_media_thumbnail($variables) {
+  $label = '';
+  $element = $variables['element'];
+
+ // Wrappers to go around the thumbnail.
+  $attributes = array(
+    'title' => $element['#name'],
+    'class' => 'media-item',
+    'data-fid' => $element['#file']->fid,
+  );
+  $prefix = '<div ' . drupal_attributes($attributes) . '><div class="media-thumbnail">';
+  $suffix = '</div></div>';
+
+  // Arguments for the thumbnail link.
+  $thumb = $element['#children'];
+  $target = 'file/' . $element['#file']->fid . '/edit';
+  $options = array(
+    'query' => drupal_get_destination(),
+    'html' => TRUE,
+    'attributes' => array('title' => t('Click to edit details')),
+  );
+
+  // Element should be a field renderable array. This should be improved.
+  if (!empty($element['#show_names']) && $element['#name']) {
+    $label = '<div class="label-wrapper"><label class="media-filename">' . $element['#name'] . '</label></div>';
+  }
+
+  $output = $prefix;
+  if (!empty($element['#add_link'])) {
+    $output .= l($thumb, $target, $options);
+  }
+  else {
+    $output .= $thumb;
+  }
+  $output .= $label . $suffix;
+  return $output;
+}
+
+/**
+ * Preprocess the media thumbnail.
+ */
+function template_preprocess_media_thumbnail(&$variables) {
+  // Set the name for the thumbnail to be the filename.  This is done here so
+  // that other modules can hijack the name displayed if it should not be the
+  // filename.
+  $variables['element']['#name'] = isset($variables['element']['#file']->filename) ? check_plain($variables['element']['#file']->filename) : NULL;
+}
+
+/**
+ * Field formatter for displaying a file as a large icon.
+ */
+function theme_media_formatter_large_icon($variables) {
+  $file = $variables['file'];
+  $icon_dir = variable_get('media_icon_base_directory', 'public://media-icons') . '/' . variable_get('media_icon_set', 'default');
+  $icon = file_icon_path($file, $icon_dir);
+  $variables['path'] = $icon;
+
+  // theme_image() requires the 'alt' attribute passed as its own variable.
+  // @see http://drupal.org/node/999338
+  if (!isset($variables['alt']) && isset($variables['attributes']['alt'])) {
+    $variables['alt'] = $variables['attributes']['alt'];
+  }
+
+  // Add image height and width for the image theme functions.
+  if ($info = image_get_info($icon)) {
+    $variables += $info;
+  }
+
+  if ($variables['style_name']) {
+    $output = theme('image_style', $variables);
+  }
+  else {
+    $output = theme('image', $variables);
+  }
+  return $output;
+}
diff --git a/profiles/commons/modules/contrib/media/includes/media_views_plugin_display_media_browser.inc b/profiles/commons/modules/contrib/media/includes/media_views_plugin_display_media_browser.inc
new file mode 100644
index 0000000..eba27ba
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/media_views_plugin_display_media_browser.inc
@@ -0,0 +1,19 @@
+<?php
+/**
+ * @file
+ * Contains the media browser tab display plugin.
+ */
+
+/**
+ * Display plugin to provide a view as a tab in the media browser.
+ *
+ * This is currently just a stub--there's nothing special we need to set up for
+ * rendering a view as a tab in the media browser. It would be possible to
+ * provide a special method that returns the plugin info for
+ * media_media_browser_plugin_info() and the render array for
+ * media_media_browser_plugin_view().
+ *
+ * @ingroup views_display_plugins
+ */
+class media_views_plugin_display_media_browser extends views_plugin_display {
+}
diff --git a/profiles/commons/modules/contrib/media/includes/media_views_plugin_style_media_browser.inc b/profiles/commons/modules/contrib/media/includes/media_views_plugin_style_media_browser.inc
new file mode 100644
index 0000000..4131116
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/includes/media_views_plugin_style_media_browser.inc
@@ -0,0 +1,55 @@
+<?php
+
+/**
+ * @file
+ * The media browser style plugin.
+ */
+
+/**
+ * Media Views style plugin.
+ *
+ * Style plugin to render media items as an interactive grid for the media
+ * browser.
+ *
+ * @ingroup views_style_plugins
+ */
+class media_views_plugin_style_media_browser extends views_plugin_style_list {
+
+  // Stores the files loaded with pre_render.
+  public $files = array();
+
+  /**
+   * Set default options.
+   */
+  function option_definition() {
+    $options = parent::option_definition();
+
+    $options['type'] = array('default' => 'ul');
+    $options['class'] = array('default' => 'media-list-thumbnails');
+    $options['wrapper_class'] = array('default' => '');
+
+    return $options;
+  }
+
+  /**
+   * Prevents a problem with views when get_row_class() is not set.
+   */
+  public function get_row_class($row_index) {
+  }
+
+  /**
+   * Add the base field (fid) to the query.
+   */
+  public function query() {
+    if (method_exists($this->view->query, 'add_field')) {
+      // Normal file_managed based view.
+      $this->view->query->add_field($this->view->base_table, $this->view->base_field);
+    }
+    if (method_exists($this->view->query, 'addField')) {
+      // Search API based view.
+      $this->view->query->addField('fid');
+    }
+    parent::query();
+  }
+
+}
diff --git a/profiles/commons/modules/contrib/media/js/media.admin.js b/profiles/commons/modules/contrib/media/js/media.admin.js
new file mode 100644
index 0000000..058e931
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/js/media.admin.js
@@ -0,0 +1,77 @@
+/**
+ * @file
+ * Javascript for the interface at admin/content/media and also for interfaces
+ * related to setting up media fields and for media type administration.
+ *
+ * Basically, if it's on the /admin path, it's probably here.
+ */
+
+(function ($) {
+
+/**
+ * Functionality for the administrative file listings.
+ */
+Drupal.behaviors.mediaAdmin = {
+  attach: function (context) {
+    // Show a javascript confirmation dialog if a user has files selected and
+    // they try to switch between the "Thumbnail" and "List" local tasks.
+    $('.tabs.secondary a').once('media-admin').bind('click', function () {
+      if ($(':checkbox:checked', $('.file-entity-admin-file-form')).length != 0) {
+        return confirm(Drupal.t('If you switch views, you will lose your selection.'));
+      }
+    });
+
+    if ($('.media-display-thumbnails').length && !$('.media-thumbnails-select').length) {
+      // Implements 'select all/none' for thumbnail view.
+      // @TODO: Support grabbing more than one page of thumbnails.
+      var allLink = $('<a href="#">' + Drupal.t('all') + '</a>')
+        .click(function () {
+          $('.media-display-thumbnails', $(this).parents('form')).find(':checkbox').attr('checked', true).change();
+          return false;
+        });
+      var noneLink = $('<a href="#">' + Drupal.t('none') + '</a>')
+        .click(function () {
+          $('.media-display-thumbnails', $(this).parents('form')).find(':checkbox').attr('checked', false).change();
+          return false;
+        });
+      $('<div class="media-thumbnails-select" />')
+        .append('<strong>' + Drupal.t('Select') + ':</strong> ')
+        .append(allLink)
+        .append(', ')
+        .append(noneLink)
+        .prependTo('.media-display-thumbnails')
+      // If the media item is clicked anywhere other than on the image itself
+      // check the checkbox. For the record, JS thinks this is wonky.
+      $('.media-item').bind('click', function (e) {
+        if ($(e.target).is('img, a')) {
+          return;
+        }
+        var checkbox = $(this).parent().find(':checkbox');
+        if (checkbox.is(':checked')) {
+          checkbox.attr('checked', false).change();
+        } else {
+          checkbox.attr('checked', true).change();
+        }
+      });
+
+      // Add an extra class to selected thumbnails.
+      $('.media-display-thumbnails :checkbox').each(function () {
+        var checkbox = $(this);
+        if (checkbox.is(':checked')) {
+          $(checkbox.parents('li').find('.media-item')).addClass('selected');
+        }
+
+        checkbox.bind('change.media', function () {
+          if (checkbox.is(':checked')) {
+            $(checkbox.parents('li').find('.media-item')).addClass('selected');
+          }
+          else {
+            $(checkbox.parents('li').find('.media-item')).removeClass('selected');
+          }
+        });
+      });
+    }
+  }
+};
+
+})(jQuery);
diff --git a/profiles/commons/modules/contrib/media/js/media.browser.js b/profiles/commons/modules/contrib/media/js/media.browser.js
new file mode 100644
index 0000000..236df27
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/js/media.browser.js
@@ -0,0 +1,149 @@
+/**
+ * @file
+ * Provides default functions for the media browser
+ */
+
+(function ($) {
+namespace('Drupal.media.browser');
+
+Drupal.media.browser.selectedMedia = [];
+Drupal.media.browser.activeTab = 0;
+Drupal.media.browser.mediaAdded = function () {};
+Drupal.media.browser.selectionFinalized = function (selectedMedia) {
+  // This is intended to be overridden if a callee wants to be triggered
+  // when the media selection is finalized from inside the browser.
+  // This is used for the file upload form for instance.
+};
+
+Drupal.behaviors.MediaBrowser = {
+  attach: function (context) {
+    if (Drupal.settings.media && Drupal.settings.media.selectedMedia) {
+      Drupal.media.browser.selectMedia(Drupal.settings.media.selectedMedia);
+      // Fire a confirmation of some sort.
+      Drupal.media.browser.finalizeSelection();
+    }
+
+    // Instantiate the tabs.
+    $('#media-browser-tabset').tabs();
+
+    $('.ui-tabs-nav li').mouseup(function() {
+      Drupal.media.browser.activeTab = $(this).index();
+    });
+
+    $('.media-browser-tab').each( Drupal.media.browser.validateButtons );
+
+    Drupal.media.browser.selectActiveTab();
+    Drupal.media.browser.selectErrorTab();
+
+  }
+  // Wait for additional params to be passed in.
+};
+
+Drupal.media.browser.launch = function () {
+
+};
+
+Drupal.media.browser.validateButtons = function() {
+  // The media browser runs in an IFRAME. The Drupal.media.popups.mediaBrowser()
+  // function sets up the IFRAME and "OK" and "Cancel" buttons that are outside
+  // of the IFRAME, so that their click handlers can destroy the IFRAME while
+  // retaining information about what media items were selected. However,
+  // Drupal UI convention is to place all action buttons on the same "line"
+  // at the bottom of the form, so if the form within the IFRAME contains a
+  // "Submit" button or other action buttons, then the "OK" and "Cancel"
+  // buttons below the IFRAME break this convention and confuse the user.
+  // Therefore, we add "Submit" and "Cancel" buttons inside the IFRAME, and
+  // have their click action trigger the click action of the corresonding
+  // "OK" and "Cancel" buttons that are outside the IFRAME. media.css contains
+  // CSS rules that hide the outside buttons.
+
+  // If a submit button is present, another round-trip to the server is needed
+  // before the user's selection is finalized. For these cases, when the form's
+  // real Submit button is clicked, the server either returns another form for
+  // the user to fill out, or else a completion page that contains or sets the
+  // Drupal.media.browser.selectedMedia variable. If the latter, then
+  // Drupal.media.popups.mediaBrowser.mediaBrowserOnLoad() auto-triggers the
+  // "OK" button action to finalize the selection and remove the IFRAME.
+
+  // We need to check for the fake submit/cancel buttons that are used on
+  // non-form based pane content. On these items we need to bind the clicks
+  // so that media can be selected or the window can be closed. This is still a
+  // hacky approach, but it is a step in the right direction.
+
+  $('a.button.fake-submit', this).once().bind('click', Drupal.media.browser.submit);
+  $('a.button.fake-cancel', this).once().bind('click', Drupal.media.browser.submit);
+};
+
+Drupal.media.browser.submit = function () {
+  // @see Drupal.media.browser.validateButtons().
+  var buttons = $(parent.window.document.body).find('#mediaBrowser').parent('.ui-dialog').find('.ui-dialog-buttonpane button');
+  if ($(this).hasClass('fake-cancel')) {
+    buttons[1].click();
+  }
+  else {
+    buttons[0].click();
+  }
+
+  // Return false to prevent the fake link "click" from continuing.
+  return false;
+}
+
+Drupal.media.browser.selectMedia = function (selectedMedia) {
+  Drupal.media.browser.selectedMedia = selectedMedia;
+};
+
+Drupal.media.browser.finalizeSelection = function () {
+  if (!Drupal.media.browser.selectedMedia) {
+    throw new exception(Drupal.t('Cannot continue, nothing selected'));
+  }
+  else {
+    Drupal.media.browser.selectionFinalized(Drupal.media.browser.selectedMedia);
+  }
+};
+
+Drupal.media.browser.selectErrorTab = function() {
+  // Find the ID of a tab with an error in it
+  var errorTabID = $('#media-browser-tabset')
+    .find('.error')
+    .parents('.media-browser-tab')
+    .attr('id');
+
+  if (errorTabID !== undefined) {
+    // Find the Tab Link with errorTabID
+    var tab = $('a[href="#' + errorTabID + '"]');
+    // Find the index of the tab
+    var index = $('#media-browser-tabset a').index(tab);
+    // Select the tab
+    Drupal.media.browser.selectTab(index);
+  }
+}
+
+Drupal.media.browser.selectActiveTab = function() {
+  // Find the index of the last active tab.
+  setTimeout(function() {
+    Drupal.media.browser.selectTab(Drupal.media.browser.activeTab);
+  }, 10);
+};
+
+/**
+ * Helper function to change the media browser jQuery UI tabs
+ * since it requires two different methods dependingon the version.
+ */
+Drupal.media.browser.selectTab = function(index) {
+  var ver = jQuery.ui.version.split('.');
+  if (ver[0] == '1' && parseInt(ver[1]) <= 8) {
+    // jQuery UI <= 1.8
+    $('#media-browser-tabset').tabs('select', index);
+  }
+  else {
+    // jQuery UI 1.9+
+    $('#media-browser-tabset').tabs('option', 'active', index);
+  }
+
+  $('.media-modal-frame').width('100%');
+
+  // Update the active tab variable.
+  Drupal.media.browser.activeTab = index;
+};
+
+}(jQuery));
diff --git a/profiles/commons/modules/contrib/media/js/media.core.js b/profiles/commons/modules/contrib/media/js/media.core.js
new file mode 100644
index 0000000..f99971c
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/js/media.core.js
@@ -0,0 +1,19 @@
+
+/**
+ * Creates a namespace.
+ *
+ * @return
+ *   The created namespace object.
+ */
+function namespace () {
+  var a=arguments, o=null, i, j, d;
+  for (i=0; i<a.length; i=i+1) {
+    d=a[i].split(".");
+    o=window;
+    for (j=0; j<d.length; j=j+1) {
+      o[d[j]]=o[d[j]] || {};
+      o=o[d[j]];
+    }
+  }
+  return o;
+};
diff --git a/profiles/commons/modules/contrib/media/js/media.js b/profiles/commons/modules/contrib/media/js/media.js
new file mode 100644
index 0000000..04585bd
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/js/media.js
@@ -0,0 +1,97 @@
+
+/**
+ *  @file
+ *  This file handles the JS for Media Module functions.
+ */
+
+(function ($) {
+
+/**
+ * Loads media browsers and callbacks, specifically for media as a field.
+ */
+Drupal.behaviors.mediaElement = {
+  attach: function (context, settings) {
+    // Options set from media.fields.inc for the types, etc to show in the browser.
+
+    // For each widget (in case of multi-entry)
+    $('.media-widget', context).once('mediaBrowserLaunch', function () {
+      var options = settings.media.elements[this.id];
+      globalOptions = {};
+      if (options.global != undefined) {
+        var globalOptions = options.global;
+      }
+      //options = Drupal.settings.media.fields[this.id];
+      var fidField = $('.fid', this);
+      var previewField = $('.preview', this);
+      var editButton = $('.edit', this);
+      var removeButton = $('.remove', this);
+
+      // Hide the edit and remove buttons if there is no file data yet.
+      if (fidField.val() == 0) {
+        if (editButton.length) {
+          editButton.hide();
+        }
+        removeButton.hide();
+      }
+
+      // When someone clicks the link to pick media (or clicks on an existing thumbnail)
+      $('.launcher', this).bind('click', function (e) {
+        // Launch the browser, providing the following callback function
+        // @TODO: This should not be an anomyous function.
+        Drupal.media.popups.mediaBrowser(function (mediaFiles) {
+          if (mediaFiles.length < 0) {
+            return;
+          }
+          var mediaFile = mediaFiles[0];
+          // Set the value of the filefield fid (hidden) and trigger a change.
+          fidField.val(mediaFile.fid);
+          fidField.trigger('change');
+          // Set the preview field HTML.
+          previewField.html(mediaFile.preview);
+        }, globalOptions);
+        e.preventDefault();
+      });
+
+      // When someone clicks the Remove button.
+      $('.remove', this).bind('click', function (e) {
+        // Set the value of the filefield fid (hidden) and trigger change.
+        fidField.val(0);
+        fidField.trigger('change');
+        // Set the preview field HTML.
+        previewField.html('');
+        e.preventDefault();
+      });
+
+      // Show or hide the edit/remove buttons if the field has a file or not.
+      $('.fid', this).bind('change', function() {
+        if (fidField.val() == 0) {
+          if (editButton.length) {
+            editButton.hide();
+          }
+          removeButton.hide();
+        }
+        else {
+          if (editButton.length) {
+            var url = Drupal.settings.basePath + 'file/' + fidField.val() + '/edit';
+            $.ajax({
+              url: location.protocol + '//' + location.host + url,
+              type: 'HEAD',
+              success: function(data) {
+                editButton.attr('href', editButton.attr('href').replace(/media\/\d+\/edit/, 'media/' + fidField.val() + '/edit'));
+                // Re-process the edit link through CTools modal behaviors.
+                editButton.unbind('click');
+                editButton.removeClass('ctools-use-modal-processed');
+                // @todo Maybe add support for Drupal.detachBehaviors in Drupal.behaviors.ZZCToolsModal?
+                Drupal.attachBehaviors(editButton.parent(), Drupal.settings);
+                editButton.show();
+              }
+            });
+          }
+          removeButton.show();
+        }
+      });
+    });
+  }
+};
+
+})(jQuery);
diff --git a/profiles/commons/modules/contrib/media/js/media.popups.js b/profiles/commons/modules/contrib/media/js/media.popups.js
new file mode 100644
index 0000000..46af675
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/js/media.popups.js
@@ -0,0 +1,393 @@
+
+/**
+ * @file: Popup dialog interfaces for the media project.
+ *
+ * Drupal.media.popups.mediaBrowser
+ *   Launches the media browser which allows users to pick a piece of media.
+ *
+ * Drupal.media.popups.mediaStyleSelector
+ *  Launches the style selection form where the user can choose
+ *  what format / style they want their media in.
+ *
+ */
+
+(function ($) {
+namespace('Drupal.media.popups');
+
+/**
+ * Media browser popup. Creates a media browser dialog.
+ *
+ * @param {function}
+ *          onSelect Callback for when dialog is closed, received (Array
+ *          media, Object extra);
+ * @param {Object}
+ *          globalOptions Global options that will get passed upon initialization of the browser.
+ *          @see Drupal.media.popups.mediaBrowser.getDefaults();
+ *
+ * @param {Object}
+ *          pluginOptions Options for specific plugins. These are passed
+ *          to the plugin upon initialization.  If a function is passed here as
+ *          a callback, it is obviously not passed, but is accessible to the plugin
+ *          in Drupal.settings.variables.
+ *
+ *          Example
+ *          pluginOptions = {library: {url_include_patterns:'/foo/bar'}};
+ *
+ * @param {Object}
+ *          widgetOptions Options controlling the appearance and behavior of the
+ *          modal dialog.
+ *          @see Drupal.media.popups.mediaBrowser.getDefaults();
+ */
+Drupal.media.popups.mediaBrowser = function (onSelect, globalOptions, pluginOptions, widgetOptions) {
+  var options = Drupal.media.popups.mediaBrowser.getDefaults();
+  options.global = $.extend({}, options.global, globalOptions);
+  options.plugins = pluginOptions;
+  options.widget = $.extend({}, options.widget, widgetOptions);
+
+  // Create it as a modal window.
+  var browserSrc = options.widget.src;
+  if ($.isArray(browserSrc) && browserSrc.length) {
+    browserSrc = browserSrc[browserSrc.length - 1];
+  }
+  // Params to send along to the iframe.  WIP.
+  var params = {};
+  $.extend(params, options.global);
+  params.plugins = options.plugins;
+
+  browserSrc += '&' + $.param(params);
+  var mediaIframe = Drupal.media.popups.getPopupIframe(browserSrc, 'mediaBrowser');
+  // Attach the onLoad event
+  mediaIframe.bind('load', options, options.widget.onLoad);
+  /**
+   * Setting up the modal dialog
+   */
+
+  var ok = 'OK';
+  var cancel = 'Cancel';
+  var notSelected = 'You have not selected anything!';
+
+  if (Drupal && Drupal.t) {
+    ok = Drupal.t(ok);
+    cancel = Drupal.t(cancel);
+    notSelected = Drupal.t(notSelected);
+  }
+
+  // @todo: let some options come through here. Currently can't be changed.
+  var dialogOptions = options.dialog;
+
+  dialogOptions.buttons[ok] = function () {
+    var selected = this.contentWindow.Drupal.media.browser.selectedMedia;
+    if (selected.length < 1) {
+      alert(notSelected);
+      return;
+    }
+    onSelect(selected);
+    $(this).dialog("close");
+  };
+
+  dialogOptions.buttons[cancel] = function () {
+    $(this).dialog("close");
+  };
+
+  var dialog = mediaIframe.dialog(dialogOptions);
+
+  // Remove the title bar.
+  dialog.parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
+
+  Drupal.media.popups.sizeDialog(dialog);
+  Drupal.media.popups.resizeDialog(dialog);
+  Drupal.media.popups.scrollDialog(dialog);
+  Drupal.media.popups.overlayDisplace(dialog.parents(".ui-dialog"));
+
+  return mediaIframe;
+};
+
+Drupal.media.popups.mediaBrowser.mediaBrowserOnLoad = function (e) {
+  var options = e.data;
+  if (this.contentWindow.Drupal.media == undefined) return;
+
+  if (this.contentWindow.Drupal.media.browser.selectedMedia.length > 0) {
+    var ok = (Drupal && Drupal.t) ? Drupal.t('OK') : 'OK';
+    var ok_func = $(this).dialog('option', 'buttons')[ok];
+    ok_func.call(this);
+    return;
+  }
+};
+
+Drupal.media.popups.mediaBrowser.getDefaults = function () {
+  return {
+    global: {
+      types: [], // Types to allow, defaults to all.
+      activePlugins: [] // If provided, a list of plugins which should be enabled.
+    },
+    widget: { // Settings for the actual iFrame which is launched.
+      src: Drupal.settings.media.browserUrl, // Src of the media browser (if you want to totally override it)
+      onLoad: Drupal.media.popups.mediaBrowser.mediaBrowserOnLoad // Onload function when iFrame loads.
+    },
+    dialog: Drupal.media.popups.getDialogOptions()
+  };
+};
+
+Drupal.media.popups.mediaBrowser.finalizeSelection = function () {
+  var selected = this.contentWindow.Drupal.media.browser.selectedMedia;
+  if (selected.length < 1) {
+    alert(notSelected);
+    return;
+  }
+  onSelect(selected);
+  $(this).dialog("close");
+}
+
+/**
+ * Style chooser Popup. Creates a dialog for a user to choose a media style.
+ *
+ * @param mediaFile
+ *          The mediaFile you are requesting this formatting form for.
+ *          @todo: should this be fid?  That's actually all we need now.
+ *
+ * @param Function
+ *          onSubmit Function to be called when the user chooses a media
+ *          style. Takes one parameter (Object formattedMedia).
+ *
+ * @param Object
+ *          options Options for the mediaStyleChooser dialog.
+ */
+Drupal.media.popups.mediaStyleSelector = function (mediaFile, onSelect, options) {
+  var defaults = Drupal.media.popups.mediaStyleSelector.getDefaults();
+  // @todo: remove this awful hack :(
+  defaults.src = defaults.src.replace('-media_id-', mediaFile.fid) + '&fields=' + JSON.stringify(mediaFile.fields);
+  options = $.extend({}, defaults, options);
+  // Create it as a modal window.
+  var mediaIframe = Drupal.media.popups.getPopupIframe(options.src, 'mediaStyleSelector');
+  // Attach the onLoad event
+  mediaIframe.bind('load', options, options.onLoad);
+
+  /**
+   * Set up the button text
+   */
+  var ok = 'OK';
+  var cancel = 'Cancel';
+  var notSelected = 'Very sorry, there was an unknown error embedding media.';
+
+  if (Drupal && Drupal.t) {
+    ok = Drupal.t(ok);
+    cancel = Drupal.t(cancel);
+    notSelected = Drupal.t(notSelected);
+  }
+
+  // @todo: let some options come through here. Currently can't be changed.
+  var dialogOptions = Drupal.media.popups.getDialogOptions();
+
+  dialogOptions.buttons[ok] = function () {
+
+    var formattedMedia = this.contentWindow.Drupal.media.formatForm.getFormattedMedia();
+    if (!formattedMedia) {
+      alert(notSelected);
+      return;
+    }
+    onSelect(formattedMedia);
+    $(this).dialog("close");
+  };
+
+  dialogOptions.buttons[cancel] = function () {
+    $(this).dialog("close");
+  };
+
+  var dialog = mediaIframe.dialog(dialogOptions);
+
+  // Remove the title bar.
+  dialog.parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
+
+  Drupal.media.popups.sizeDialog(dialog);
+  Drupal.media.popups.resizeDialog(dialog);
+  Drupal.media.popups.scrollDialog(dialog);
+  Drupal.media.popups.overlayDisplace(dialog.parents(".ui-dialog"));
+
+  return mediaIframe;
+};
+
+Drupal.media.popups.mediaStyleSelector.mediaBrowserOnLoad = function (e) {
+};
+
+Drupal.media.popups.mediaStyleSelector.getDefaults = function () {
+  return {
+    src: Drupal.settings.media.styleSelectorUrl,
+    onLoad: Drupal.media.popups.mediaStyleSelector.mediaBrowserOnLoad
+  };
+};
+
+
+/**
+ * Style chooser Popup. Creates a dialog for a user to choose a media style.
+ *
+ * @param mediaFile
+ *          The mediaFile you are requesting this formatting form for.
+ *          @todo: should this be fid?  That's actually all we need now.
+ *
+ * @param Function
+ *          onSubmit Function to be called when the user chooses a media
+ *          style. Takes one parameter (Object formattedMedia).
+ *
+ * @param Object
+ *          options Options for the mediaStyleChooser dialog.
+ */
+Drupal.media.popups.mediaFieldEditor = function (fid, onSelect, options) {
+  var defaults = Drupal.media.popups.mediaFieldEditor.getDefaults();
+  // @todo: remove this awful hack :(
+  defaults.src = defaults.src.replace('-media_id-', fid);
+  options = $.extend({}, defaults, options);
+  // Create it as a modal window.
+  var mediaIframe = Drupal.media.popups.getPopupIframe(options.src, 'mediaFieldEditor');
+  // Attach the onLoad event
+  // @TODO - This event is firing too early in IE on Windows 7,
+  // - so the height being calculated is too short for the content.
+  mediaIframe.bind('load', options, options.onLoad);
+
+  /**
+   * Set up the button text
+   */
+  var ok = 'OK';
+  var cancel = 'Cancel';
+  var notSelected = 'Very sorry, there was an unknown error embedding media.';
+
+  if (Drupal && Drupal.t) {
+    ok = Drupal.t(ok);
+    cancel = Drupal.t(cancel);
+    notSelected = Drupal.t(notSelected);
+  }
+
+  // @todo: let some options come through here. Currently can't be changed.
+  var dialogOptions = Drupal.media.popups.getDialogOptions();
+
+  dialogOptions.buttons[ok] = function () {
+    var formattedMedia = this.contentWindow.Drupal.media.formatForm.getFormattedMedia();
+    if (!formattedMedia) {
+      alert(notSelected);
+      return;
+    }
+    onSelect(formattedMedia);
+    $(this).dialog("close");
+  };
+
+  dialogOptions.buttons[cancel] = function () {
+    $(this).dialog("close");
+  };
+
+  var dialog = mediaIframe.dialog(dialogOptions);
+
+  // Remove the title bar.
+  dialog.parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
+
+  Drupal.media.popups.sizeDialog(dialog);
+  Drupal.media.popups.resizeDialog(dialog);
+  Drupal.media.popups.scrollDialog(dialog);
+  Drupal.media.popups.overlayDisplace(dialog);
+
+  return mediaIframe;
+};
+
+Drupal.media.popups.mediaFieldEditor.mediaBrowserOnLoad = function (e) {
+
+};
+
+Drupal.media.popups.mediaFieldEditor.getDefaults = function () {
+  return {
+    // @todo: do this for real
+    src: '/media/-media_id-/edit?render=media-popup',
+    onLoad: Drupal.media.popups.mediaFieldEditor.mediaBrowserOnLoad
+  };
+};
+
+
+/**
+ * Generic functions to both the media-browser and style selector
+ */
+
+/**
+ * Returns the commonly used options for the dialog.
+ */
+Drupal.media.popups.getDialogOptions = function () {
+  return {
+    buttons: {},
+    dialogClass: 'media-wrapper',
+    modal: true,
+    draggable: false,
+    resizable: false,
+    width: 'auto',
+    height: 'auto',
+    position: 'center',
+    zIndex: 10000,
+    close: function (event, ui) {
+      $(event.target).remove();
+    }
+  };
+};
+
+/**
+ * Get an iframe to serve as the dialog's contents. Common to both plugins.
+ */
+Drupal.media.popups.getPopupIframe = function (src, id, options) {
+  var defaults = {width: '100%', scrolling: 'auto'};
+  var options = $.extend({}, defaults, options);
+
+  return $('<iframe class="media-modal-frame"/>')
+  .attr('src', src)
+  .attr('width', options.width)
+  .attr('id', id)
+  .attr('scrolling', options.scrolling);
+};
+
+Drupal.media.popups.overlayDisplace = function (dialog) {
+  if (parent.window.Drupal.overlay && jQuery.isFunction(parent.window.Drupal.overlay.getDisplacement)) {
+    var overlayDisplace = parent.window.Drupal.overlay.getDisplacement('top');
+    if (dialog.offset().top < overlayDisplace) {
+      dialog.css('top', overlayDisplace);
+    }
+  }
+}
+
+/**
+ * Size the dialog when it is first loaded and keep it centered when scrolling.
+ *
+ * @param jQuery dialogElement
+ *  The element which has .dialog() attached to it.
+ */
+Drupal.media.popups.sizeDialog = function (dialogElement) {
+  var windowWidth = $(window).width();
+  var dialogWidth = windowWidth * 0.8;
+  var windowHeight = $(window).height();
+  var dialogHeight = windowHeight * 0.8;
+
+  dialogElement.dialog("option", "width", dialogWidth);
+  dialogElement.dialog("option", "height", dialogHeight);
+  dialogElement.dialog("option", "position", 'center');
+
+  $('.media-modal-frame').width('100%');
+}
+
+/**
+ * Resize the dialog when the window changes.
+ *
+ * @param jQuery dialogElement
+ *  The element which has .dialog() attached to it.
+ */
+Drupal.media.popups.resizeDialog = function (dialogElement) {
+  $(window).resize(function() {
+    Drupal.media.popups.sizeDialog(dialogElement);
+  });
+}
+
+/**
+ * Keeps the dialog centered when the window is scrolled.
+ *
+ * @param jQuery dialogElement
+ *  The element which has .dialog() attached to it.
+ */
+Drupal.media.popups.scrollDialog = function (dialogElement) {
+  // Keep the dialog window centered when scrolling.
+  $(window).scroll(function() {
+    dialogElement.dialog("option", "position", 'center');
+  });
+}
+
+})(jQuery);
diff --git a/profiles/commons/modules/contrib/media/js/plugins/media.views.js b/profiles/commons/modules/contrib/media/js/plugins/media.views.js
new file mode 100644
index 0000000..b5024b3
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/js/plugins/media.views.js
@@ -0,0 +1,143 @@
+/**
+ * @file
+ * Handles the JS for the views file browser.
+ *
+ * Note that this does not currently support multiple file selection
+ */
+
+(function ($) {
+
+namespace('Drupal.media.browser.views');
+Drupal.behaviors.mediaViews = {
+  attach: function (context, settings) {
+
+    // Make sure when pressing enter on text inputs, the form isn't submitted
+    $('.ctools-auto-submit-full-form .views-exposed-form input:text, input:text.ctools-auto-submit', context)
+      .filter(':not(.ctools-auto-submit-exclude)')
+      .bind('keydown keyup', function (e) {
+        if(e.keyCode === 13) {
+          e.stopImmediatePropagation();
+          e.preventDefault();
+        }
+      });
+    // Disable the links on media items list
+    $('.view-content ul.media-list-thumbnails a').click(function() {
+      return false;
+    });
+
+    // We loop through the views listed in Drupal.settings.media.browser.views
+    // and set them up individually.
+    var views_ids = [];
+    for(var key in Drupal.settings.media.browser.views){
+      views_ids.push(key);
+    }
+
+    for (var i = 0; i < views_ids.length; i++) {
+      var views_id = views_ids[i];
+      for (var j= 0; j < Drupal.settings.media.browser.views[views_id].length; j++) {
+        var views_display_id = Drupal.settings.media.browser.views[views_id][j],
+          view = $('.view-id-' + views_id + '.view-display-id-' + views_display_id);
+        if (view.length) {
+          Drupal.media.browser.views.setup(view);
+        }
+      }
+    }
+
+    // Reset the state on tab-changes- bind on the 'select' event on the tabset
+    $('#media-browser-tabset').bind('tabsselect', function(event, ui) {
+      var view = $('.view', ui.panel);
+      if (view.length) {
+        Drupal.media.browser.views.select(view);
+      }
+    });
+
+  }
+}
+
+/**
+ * Event-function that is called with a view, when the tab containing that
+ * view is selected.
+ */
+Drupal.media.browser.views.select = function(view) {
+  // Reset the list of selected files
+  Drupal.media.browser.selectMedia([]);
+
+  // Reset all 'selected'-status.
+  $('.view-content .media-item', view).removeClass('selected');
+}
+
+/**
+ * Setup function. Called once for every Media Browser view.
+ *
+ * Sets up event-handlers for selecting items in the view.
+ */
+Drupal.media.browser.views.setup = function(view) {
+  // Ensure we only setup each view once..
+  if ($(view).hasClass('media-browser-views-processed')) {
+    return;
+  }
+
+  // Reset the list of selected files
+  Drupal.media.browser.selectMedia([]);
+
+  // Catch the click on a media item
+  $('.view-content .media-item', view).bind('click', function () {
+    var fid = $(this).closest('.media-item[data-fid]').data('fid'),
+      selectedFiles = new Array();
+
+    // Remove all currently selected files
+    $('.view-content .media-item', view).removeClass('selected');
+
+    // Mark it as selected
+    $(this).addClass('selected');
+
+    // Multiselect!
+    if (Drupal.settings.media.browser.params.multiselect) {
+      // Loop through the already selected files
+      for (index in Drupal.media.browser.selectedMedia) {
+        var currentFid = Drupal.media.browser.selectedMedia[index].fid;
+
+        // If the current file exists in the list of already selected
+        // files, we deselect instead of selecting
+        if (currentFid == fid) {
+          $(this).removeClass('selected');
+          // If we change the fid, the later matching won't
+          // add it back again because it can't find it.
+          fid = NaN;
+
+          // The previously selected file wasn't clicked, so we retain it
+          // as an active file
+        }
+        else {
+          // Add to list of already selected files
+          selectedFiles.push(Drupal.media.browser.selectedMedia[index]);
+
+          // Mark it as selected
+          $('.view-content *[data-fid=' + currentFid + '].media-item', view).addClass('selected');
+        }
+      }
+    }
+
+    // Because the files are added using drupal_add_js() and due to the fact
+    // that drupal_get_js() runs a drupal_array_merge_deep() which re-numbers
+    // numeric key values, we have to search in Drupal.settings.media.files
+    // for the matching file ID rather than referencing it directly.
+    for (index in Drupal.settings.media.files) {
+      if (Drupal.settings.media.files[index].fid == fid) {
+        selectedFiles.push(Drupal.settings.media.files[index]);
+
+        // If multiple tabs contains the same file, it will be present in the
+        // files-array multiple times, so we break out early so we don't have
+        // it in the selectedFiles array multiple times.
+        // This would interfer with multi-selection, so...
+        break;
+      }
+    }
+    Drupal.media.browser.selectMedia(selectedFiles);
+  });
+
+  // Add the processed class, so we dont accidentally process the same element twice..
+  $(view).addClass('media-browser-views-processed');
+}
+
+}(jQuery));
diff --git a/profiles/commons/modules/contrib/media/js/util/ba-debug.min.js b/profiles/commons/modules/contrib/media/js/util/ba-debug.min.js
new file mode 100644
index 0000000..1c50e7f
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/js/util/ba-debug.min.js
@@ -0,0 +1,12 @@
+/*
+ * debug - v0.3 - 6/8/2009
+ * http://benalman.com/projects/javascript-debug-console-log/
+ *
+ * Copyright (c) 2009 "Cowboy" Ben Alman
+ * Licensed under the MIT license
+ * http://benalman.com/about/license/
+ *
+ * With lots of help from Paul Irish!
+ * http://paulirish.com/
+ */
+window.debug=(function(){var c=this,e=Array.prototype.slice,b=c.console,i={},f,g,j=9,d=["error","warn","info","debug","log"],m="assert clear count dir dirxml group groupEnd profile profileEnd time timeEnd trace".split(" "),k=m.length,a=[];while(--k>=0){(function(n){i[n]=function(){j!==0&&b&&b[n]&&b[n].apply(b,arguments)}})(m[k])}k=d.length;while(--k>=0){(function(n,o){i[o]=function(){var q=e.call(arguments),p=[o].concat(q);a.push(p);h(p);if(!b||!l(n)){return}b.firebug?b[o].apply(c,q):b[o]?b[o](q):b.log(q)}})(k,d[k])}function h(n){if(f&&(g||!b||!b.log)){f.apply(c,n)}}i.setLevel=function(n){j=typeof n==="number"?n:9};function l(n){return j>0?j>n:d.length+j<=n}i.setCallback=function(){var o=e.call(arguments),n=a.length,p=n;f=o.shift()||null;g=typeof o[0]==="boolean"?o.shift():false;p-=typeof o[0]==="number"?o.shift():n;while(p<n){h(a[p++])}};return i})();
\ No newline at end of file
diff --git a/profiles/commons/modules/contrib/media/js/util/json2.js b/profiles/commons/modules/contrib/media/js/util/json2.js
new file mode 100644
index 0000000..39d8f37
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/js/util/json2.js
@@ -0,0 +1,481 @@
+/*
+    http://www.JSON.org/json2.js
+    2009-09-29
+
+    Public Domain.
+
+    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
+
+    See http://www.JSON.org/js.html
+
+
+    This code should be minified before deployment.
+    See http://javascript.crockford.com/jsmin.html
+
+    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
+    NOT CONTROL.
+
+
+    This file creates a global JSON object containing two methods: stringify
+    and parse.
+
+        JSON.stringify(value, replacer, space)
+            value       any JavaScript value, usually an object or array.
+
+            replacer    an optional parameter that determines how object
+                        values are stringified for objects. It can be a
+                        function or an array of strings.
+
+            space       an optional parameter that specifies the indentation
+                        of nested structures. If it is omitted, the text will
+                        be packed without extra whitespace. If it is a number,
+                        it will specify the number of spaces to indent at each
+                        level. If it is a string (such as '\t' or '&nbsp;'),
+                        it contains the characters used to indent at each level.
+
+            This method produces a JSON text from a JavaScript value.
+
+            When an object value is found, if the object contains a toJSON
+            method, its toJSON method will be called and the result will be
+            stringified. A toJSON method does not serialize: it returns the
+            value represented by the name/value pair that should be serialized,
+            or undefined if nothing should be serialized. The toJSON method
+            will be passed the key associated with the value, and this will be
+            bound to the value
+
+            For example, this would serialize Dates as ISO strings.
+
+                Date.prototype.toJSON = function (key) {
+                    function f(n) {
+                        // Format integers to have at least two digits.
+                        return n < 10 ? '0' + n : n;
+                    }
+
+                    return this.getUTCFullYear()   + '-' +
+                         f(this.getUTCMonth() + 1) + '-' +
+                         f(this.getUTCDate())      + 'T' +
+                         f(this.getUTCHours())     + ':' +
+                         f(this.getUTCMinutes())   + ':' +
+                         f(this.getUTCSeconds())   + 'Z';
+                };
+
+            You can provide an optional replacer method. It will be passed the
+            key and value of each member, with this bound to the containing
+            object. The value that is returned from your method will be
+            serialized. If your method returns undefined, then the member will
+            be excluded from the serialization.
+
+            If the replacer parameter is an array of strings, then it will be
+            used to select the members to be serialized. It filters the results
+            such that only members with keys listed in the replacer array are
+            stringified.
+
+            Values that do not have JSON representations, such as undefined or
+            functions, will not be serialized. Such values in objects will be
+            dropped; in arrays they will be replaced with null. You can use
+            a replacer function to replace those with JSON values.
+            JSON.stringify(undefined) returns undefined.
+
+            The optional space parameter produces a stringification of the
+            value that is filled with line breaks and indentation to make it
+            easier to read.
+
+            If the space parameter is a non-empty string, then that string will
+            be used for indentation. If the space parameter is a number, then
+            the indentation will be that many spaces.
+
+            Example:
+
+            text = JSON.stringify(['e', {pluribus: 'unum'}]);
+            // text is '["e",{"pluribus":"unum"}]'
+
+
+            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
+            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'
+
+            text = JSON.stringify([new Date()], function (key, value) {
+                return this[key] instanceof Date ?
+                    'Date(' + this[key] + ')' : value;
+            });
+            // text is '["Date(---current time---)"]'
+
+
+        JSON.parse(text, reviver)
+            This method parses a JSON text to produce an object or array.
+            It can throw a SyntaxError exception.
+
+            The optional reviver parameter is a function that can filter and
+            transform the results. It receives each of the keys and values,
+            and its return value is used instead of the original value.
+            If it returns what it received, then the structure is not modified.
+            If it returns undefined then the member is deleted.
+
+            Example:
+
+            // Parse the text. Values that look like ISO date strings will
+            // be converted to Date objects.
+
+            myData = JSON.parse(text, function (key, value) {
+                var a;
+                if (typeof value === 'string') {
+                    a =
+/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
+                    if (a) {
+                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
+                            +a[5], +a[6]));
+                    }
+                }
+                return value;
+            });
+
+            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
+                var d;
+                if (typeof value === 'string' &&
+                        value.slice(0, 5) === 'Date(' &&
+                        value.slice(-1) === ')') {
+                    d = new Date(value.slice(5, -1));
+                    if (d) {
+                        return d;
+                    }
+                }
+                return value;
+            });
+
+
+    This is a reference implementation. You are free to copy, modify, or
+    redistribute.
+*/
+
+/*jslint evil: true, strict: false */
+
+/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
+    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
+    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
+    lastIndex, length, parse, prototype, push, replace, slice, stringify,
+    test, toJSON, toString, valueOf
+*/
+
+
+// Create a JSON object only if one does not already exist. We create the
+// methods in a closure to avoid creating global variables.
+
+if (!this.JSON) {
+    this.JSON = {};
+}
+
+(function () {
+
+    function f(n) {
+        // Format integers to have at least two digits.
+        return n < 10 ? '0' + n : n;
+    }
+
+    if (typeof Date.prototype.toJSON !== 'function') {
+
+        Date.prototype.toJSON = function (key) {
+
+            return isFinite(this.valueOf()) ?
+                   this.getUTCFullYear()   + '-' +
+                 f(this.getUTCMonth() + 1) + '-' +
+                 f(this.getUTCDate())      + 'T' +
+                 f(this.getUTCHours())     + ':' +
+                 f(this.getUTCMinutes())   + ':' +
+                 f(this.getUTCSeconds())   + 'Z' : null;
+        };
+
+        String.prototype.toJSON =
+        Number.prototype.toJSON =
+        Boolean.prototype.toJSON = function (key) {
+            return this.valueOf();
+        };
+    }
+
+    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
+        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
+        gap,
+        indent,
+        meta = {    // table of character substitutions
+            '\b': '\\b',
+            '\t': '\\t',
+            '\n': '\\n',
+            '\f': '\\f',
+            '\r': '\\r',
+            '"' : '\\"',
+            '\\': '\\\\'
+        },
+        rep;
+
+
+    function quote(string) {
+
+// If the string contains no control characters, no quote characters, and no
+// backslash characters, then we can safely slap some quotes around it.
+// Otherwise we must also replace the offending characters with safe escape
+// sequences.
+
+        escapable.lastIndex = 0;
+        return escapable.test(string) ?
+            '"' + string.replace(escapable, function (a) {
+                var c = meta[a];
+                return typeof c === 'string' ? c :
+                    '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
+            }) + '"' :
+            '"' + string + '"';
+    }
+
+
+    function str(key, holder) {
+
+// Produce a string from holder[key].
+
+        var i,          // The loop counter.
+            k,          // The member key.
+            v,          // The member value.
+            length,
+            mind = gap,
+            partial,
+            value = holder[key];
+
+// If the value has a toJSON method, call it to obtain a replacement value.
+
+        if (value && typeof value === 'object' &&
+                typeof value.toJSON === 'function') {
+            value = value.toJSON(key);
+        }
+
+// If we were called with a replacer function, then call the replacer to
+// obtain a replacement value.
+
+        if (typeof rep === 'function') {
+            value = rep.call(holder, key, value);
+        }
+
+// What happens next depends on the value's type.
+
+        switch (typeof value) {
+        case 'string':
+            return quote(value);
+
+        case 'number':
+
+// JSON numbers must be finite. Encode non-finite numbers as null.
+
+            return isFinite(value) ? String(value) : 'null';
+
+        case 'boolean':
+        case 'null':
+
+// If the value is a boolean or null, convert it to a string. Note:
+// typeof null does not produce 'null'. The case is included here in
+// the remote chance that this gets fixed someday.
+
+            return String(value);
+
+// If the type is 'object', we might be dealing with an object or an array or
+// null.
+
+        case 'object':
+
+// Due to a specification blunder in ECMAScript, typeof null is 'object',
+// so watch out for that case.
+
+            if (!value) {
+                return 'null';
+            }
+
+// Make an array to hold the partial results of stringifying this object value.
+
+            gap += indent;
+            partial = [];
+
+// Is the value an array?
+
+            if (Object.prototype.toString.apply(value) === '[object Array]') {
+
+// The value is an array. Stringify every element. Use null as a placeholder
+// for non-JSON values.
+
+                length = value.length;
+                for (i = 0; i < length; i += 1) {
+                    partial[i] = str(i, value) || 'null';
+                }
+
+// Join all of the elements together, separated with commas, and wrap them in
+// brackets.
+
+                v = partial.length === 0 ? '[]' :
+                    gap ? '[\n' + gap +
+                            partial.join(',\n' + gap) + '\n' +
+                                mind + ']' :
+                          '[' + partial.join(',') + ']';
+                gap = mind;
+                return v;
+            }
+
+// If the replacer is an array, use it to select the members to be stringified.
+
+            if (rep && typeof rep === 'object') {
+                length = rep.length;
+                for (i = 0; i < length; i += 1) {
+                    k = rep[i];
+                    if (typeof k === 'string') {
+                        v = str(k, value);
+                        if (v) {
+                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
+                        }
+                    }
+                }
+            } else {
+
+// Otherwise, iterate through all of the keys in the object.
+
+                for (k in value) {
+                    if (Object.hasOwnProperty.call(value, k)) {
+                        v = str(k, value);
+                        if (v) {
+                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
+                        }
+                    }
+                }
+            }
+
+// Join all of the member texts together, separated with commas,
+// and wrap them in braces.
+
+            v = partial.length === 0 ? '{}' :
+                gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' +
+                        mind + '}' : '{' + partial.join(',') + '}';
+            gap = mind;
+            return v;
+        }
+    }
+
+// If the JSON object does not yet have a stringify method, give it one.
+
+    if (typeof JSON.stringify !== 'function') {
+        JSON.stringify = function (value, replacer, space) {
+
+// The stringify method takes a value and an optional replacer, and an optional
+// space parameter, and returns a JSON text. The replacer can be a function
+// that can replace values, or an array of strings that will select the keys.
+// A default replacer method can be provided. Use of the space parameter can
+// produce text that is more easily readable.
+
+            var i;
+            gap = '';
+            indent = '';
+
+// If the space parameter is a number, make an indent string containing that
+// many spaces.
+
+            if (typeof space === 'number') {
+                for (i = 0; i < space; i += 1) {
+                    indent += ' ';
+                }
+
+// If the space parameter is a string, it will be used as the indent string.
+
+            } else if (typeof space === 'string') {
+                indent = space;
+            }
+
+// If there is a replacer, it must be a function or an array.
+// Otherwise, throw an error.
+
+            rep = replacer;
+            if (replacer && typeof replacer !== 'function' &&
+                    (typeof replacer !== 'object' ||
+                     typeof replacer.length !== 'number')) {
+                throw new Error('JSON.stringify');
+            }
+
+// Make a fake root object containing our value under the key of ''.
+// Return the result of stringifying the value.
+
+            return str('', {'': value});
+        };
+    }
+
+
+// If the JSON object does not yet have a parse method, give it one.
+
+    if (typeof JSON.parse !== 'function') {
+        JSON.parse = function (text, reviver) {
+
+// The parse method takes a text and an optional reviver function, and returns
+// a JavaScript value if the text is a valid JSON text.
+
+            var j;
+
+            function walk(holder, key) {
+
+// The walk method is used to recursively walk the resulting structure so
+// that modifications can be made.
+
+                var k, v, value = holder[key];
+                if (value && typeof value === 'object') {
+                    for (k in value) {
+                        if (Object.hasOwnProperty.call(value, k)) {
+                            v = walk(value, k);
+                            if (v !== undefined) {
+                                value[k] = v;
+                            } else {
+                                delete value[k];
+                            }
+                        }
+                    }
+                }
+                return reviver.call(holder, key, value);
+            }
+
+
+// Parsing happens in four stages. In the first stage, we replace certain
+// Unicode characters with escape sequences. JavaScript handles many characters
+// incorrectly, either silently deleting them, or treating them as line endings.
+
+            cx.lastIndex = 0;
+            if (cx.test(text)) {
+                text = text.replace(cx, function (a) {
+                    return '\\u' +
+                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
+                });
+            }
+
+// In the second stage, we run the text against regular expressions that look
+// for non-JSON patterns. We are especially concerned with '()' and 'new'
+// because they can cause invocation, and '=' because it can cause mutation.
+// But just to be safe, we want to reject all unexpected forms.
+
+// We split the second stage into 4 regexp operations in order to work around
+// crippling inefficiencies in IE's and Safari's regexp engines. First we
+// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
+// replace all simple value tokens with ']' characters. Third, we delete all
+// open brackets that follow a colon or comma or that begin the text. Finally,
+// we look to see that the remaining characters are only whitespace or ']' or
+// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.
+
+            if (/^[\],:{}\s]*$/.
+test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').
+replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
+replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
+
+// In the third stage we use the eval function to compile the text into a
+// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
+// in JavaScript: it can begin a block or an object literal. We wrap the text
+// in parens to eliminate the ambiguity.
+
+                j = eval('(' + text + ')');
+
+// In the optional fourth stage, we recursively walk the new structure, passing
+// each name/value pair to a reviver function for possible transformation.
+
+                return typeof reviver === 'function' ?
+                    walk({'': j}, '') : j;
+            }
+
+// If the text is not JSON parseable, then a SyntaxError is thrown.
+
+            throw new SyntaxError('JSON.parse');
+        };
+    }
+}());
diff --git a/profiles/commons/modules/contrib/media/media-views-view-media-browser.tpl.php b/profiles/commons/modules/contrib/media/media-views-view-media-browser.tpl.php
new file mode 100644
index 0000000..b37f0cf
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/media-views-view-media-browser.tpl.php
@@ -0,0 +1,23 @@
+<?php
+/**
+ * @file media-views-view-media-browser.tpl.php
+ * View template to display a grid of media previews in the media browser.
+ *
+ * @see views-view-list.tpl.php
+ * @see template_preprocess_media_views_view_media_browser()
+ * @ingroup views_templates
+ */
+?>
+
+<?php print $wrapper_prefix; ?>
+  <div class="clearfix">
+    <?php print $list_type_prefix; ?>
+      <?php foreach ($rows as $id => $row): ?>
+        <li id="media-item-<?php print $row->fid; ?>" class="<?php print $classes_array[$id]; ?>">
+          <?php print $row->preview; ?>
+        </li>
+      <?php endforeach; ?>
+    <?php print $list_type_suffix; ?>
+    <div id="status"></div>
+  </div>
+<?php print $wrapper_suffix; ?>
diff --git a/profiles/commons/modules/contrib/media/media.api.php b/profiles/commons/modules/contrib/media/media.api.php
new file mode 100644
index 0000000..4ff1c4f
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/media.api.php
@@ -0,0 +1,104 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by the Media module.
+ */
+
+/**
+ * Parses a url or embedded code into a unique URI.
+ *
+ * @param string $url
+ *   The original URL or embed code to parse.
+ *
+ * @return array
+ *   The unique URI for the file, based on its stream wrapper, or NULL.
+ *
+ * @see media_parse_to_file()
+ * @see media_add_from_url_validate()
+ */
+function hook_media_parse($url) {
+  // Only parse URLs from our website of choice: examplevideo.com
+  if (substr($url, 0, 27) == 'http://www.examplevideo.com') {
+    // Each video has a 5 digit ID, i.e. http://www.examplevideo.com/12345
+    // Grab the ID and use it in our URI.
+    $id = substr($url, 28, 33);
+    return file_stream_wrapper_uri_normalize('examplevideo://video/' . $id);
+  }
+}
+
+/**
+ * Returns a list of plugins for the media browser.
+ *
+ * @return array
+ *   A nested array of plugin information, keyed by plugin name. Each plugin
+ *   info array may have the following keys:
+ *   - title: (required) A name for the tab in the media browser.
+ *   - class: (required) The class name of the handler. This class must
+ *     implement a view() method, and may (should) extend the
+ *     @link MediaBrowserPlugin MediaBrowserPlugin @endlink class.
+ *   - weight: (optional) Integer to determine the tab order. Defaults to 0.
+ *   - access callback: (optional) A callback for user access checks.
+ *   - access arguments: (optional) An array of arguments for the user access
+ *   check.
+ *
+ * Additional custom keys may be provided for use by the handler.
+ *
+ * @see hook_media_browser_plugin_info_alter()
+ * @see media_get_browser_plugin_info()
+ */
+function hook_media_browser_plugin_info() {
+  $info['media_upload'] = array(
+    'title' => t('Upload'),
+    'class' => 'MediaBrowserUpload',
+    'weight' => -10,
+    'access callback' => 'user_access',
+    'access arguments' => array('create files'),
+  );
+
+  return $info;
+}
+
+/**
+ * Alter the list of plugins for the media browser.
+ *
+ * @param array $info
+ *   The associative array of media browser plugin definitions from
+ *   hook_media_browser_plugin_info().
+ *
+ * @see hook_media_browser_plugin_info()
+ * @see media_get_browser_plugin_info()
+ */
+function hook_media_browser_plugin_info_alter(&$info) {
+  $info['media_upload']['title'] = t('Upload 2.0');
+  $info['media_upload']['class'] = 'MediaBrowserUploadImproved';
+}
+
+/**
+ * Alter the plugins before they are rendered.
+ *
+ * @param array $plugin_output
+ *   The associative array of media browser plugin information from
+ *   media_get_browser_plugin_info().
+ *
+ * @see hook_media_browser_plugin_info()
+ * @see media_get_browser_plugin_info()
+ */
+function hook_media_browser_plugins_alter(&$plugin_output) {
+  $plugin_output['upload']['form']['upload']['#title'] = t('Upload 2.0');
+  $plugin_output['media_internet']['form']['embed_code']['#size'] = 100;
+}
+
+/**
+ * Alter a singleton of the params passed to the media browser.
+ *
+ * @param array $stored_params
+ *   An array of parameters provided when a media_browser is launched.
+ *
+ * @see media_browser()
+ * @see media_set_browser_params()
+ */
+function hook_media_browser_params_alter(&$stored_params) {
+  $stored_params['types'][] = 'document';
+  unset($stored_params['enabledPlugins'][0]);
+}
diff --git a/profiles/commons/modules/contrib/media/media.info b/profiles/commons/modules/contrib/media/media.info
new file mode 100644
index 0000000..bdf2067
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/media.info
@@ -0,0 +1,33 @@
+name = Media
+description = Provides the core Media API
+package = Media
+core = 7.x
+
+dependencies[] = file_entity
+dependencies[] = image
+dependencies[] = views
+
+test_dependencies[] = token
+
+files[] = includes/MediaReadOnlyStreamWrapper.inc
+files[] = includes/MediaBrowserPluginInterface.inc
+files[] = includes/MediaBrowserPlugin.inc
+files[] = includes/MediaBrowserUpload.inc
+files[] = includes/MediaBrowserView.inc
+files[] = includes/MediaEntityTranslationHandler.inc
+files[] = includes/media_views_plugin_display_media_browser.inc
+files[] = includes/media_views_plugin_style_media_browser.inc
+files[] = media.test
+
+configure = admin/config/media/browser
+
+; We have to add a fake version so Git checkouts do not fail Media dependencies
+version = 7.x-2.x-dev
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-2.0-alpha3+33-dev"
+core = "7.x"
+project = "media"
+datestamp = "1387568918"
+
diff --git a/profiles/commons/modules/contrib/media/media.install b/profiles/commons/modules/contrib/media/media.install
new file mode 100644
index 0000000..c9f9762
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/media.install
@@ -0,0 +1,1164 @@
+<?php
+
+/**
+ * @file
+ * Install, update and uninstall functions for the Media module.
+ */
+
+/**
+ * Implements hook_install().
+ */
+function media_install() {
+  // Create initial display settings.
+  module_load_include('inc', 'file_entity', 'file_entity.file_api');
+  $default_image_styles = array(
+    'preview' => 'media_thumbnail',
+    'teaser' => 'medium',
+    'full' => 'large',
+  );
+  // Only needed by sites that updated from Media 1.x.
+  // @see media_entity_info_alter()
+  if (variable_get('media_show_deprecated_view_modes')) {
+    $default_image_styles['media_original'] = '';
+  }
+
+  foreach ($default_image_styles as $view_mode => $image_style) {
+    $existing_display = file_displays_load('image', $view_mode);
+
+    if (empty($existing_display)) {
+      $display_name = 'image__' . $view_mode . '__file_image';
+      $display = array(
+        'api_version' => 1,
+        'name' => $display_name,
+        'status' => 1,
+        'weight' => 5,
+        'settings' => array('image_style' => $image_style),
+        'export_type' => NULL,
+      );
+      file_display_save((object) $display);
+    }
+  }
+
+  // Make sure that we set the icon base directory variable if it is not
+  // already set.
+  $base = variable_get('media_icon_base_directory', NULL);
+  if (!isset($base)) {
+    $default_base = 'public://media-icons';
+    variable_set('media_icon_base_directory', $default_base);
+  }
+  try {
+    _media_install_copy_icons();
+  }
+  catch (Exception $e) {
+    watchdog_exception('media', $e);
+  }
+}
+
+/**
+ * Copy the media file icons to files directory for use with image styles.
+ */
+function _media_install_copy_icons() {
+  $destination = variable_get('media_icon_base_directory', 'public://media-icons') . '/' . variable_get('media_icon_set', 'default');
+  if (!file_prepare_directory($destination, FILE_CREATE_DIRECTORY)) {
+    throw new Exception("Unable to create directory $destination.");
+  }
+  // @todo If we ever add another default icon set, this should copy all images from one directory up.
+  $source = drupal_get_path('module', 'media') . '/images/icons/' . variable_get('media_icon_set', 'default');
+  $files = file_scan_directory($source, '/.*\.(png|jpg)$/');
+  foreach ($files as $file) {
+    $result = file_unmanaged_copy($file->uri, $destination, FILE_EXISTS_REPLACE);
+    if (!$result) {
+      throw new Exception("Unable to copy {$file->uri} to $destination.");
+    }
+  }
+}
+
+/**
+ * Implements hook_uninstall().
+ */
+function media_uninstall() {
+  // Remove variables.
+  variable_del('media_icon_base_directory');
+  variable_del('media_icon_set');
+  variable_del('media_show_deprecated_view_modes');
+}
+
+/**
+ * Implements hook_update_dependencies().
+ */
+function media_update_dependencies() {
+  // media_update_7200() needs to convert old 'media' permissions to new 'file'
+  // permissions, so it must run before file_entity_7208 which updates existing
+  // 'file' permissions to be split per file type.
+  $dependencies['file_entity'][7208] = array(
+    'media' => 7200,
+  );
+  // This update function requires field_update_7002() to run before it since
+  // the field_bundle_settings variable has been split into separate variables
+  // per entity type and bundle.
+  $dependencies['media'][7016] = array(
+    'field' => 7002,
+    'rules' => 7205,
+  );
+  // Those updates require {file_type} table created.
+  $dependencies['media'][7204] = array(
+    'file_entity' => 7201,
+  );
+  // Require {file_type}.mimetypes column before updating them.
+  $dependencies['media'][7208] = array(
+    'file_entity' => 7210,
+  );
+  $dependencies['media'][7212] = array(
+    'file_entity' => 7210,
+  );
+  return $dependencies;
+}
+
+/**
+ * Implements hook_requirements().
+ */
+function media_requirements($phase) {
+  $t = get_t();
+  // Make sure that file_entity module is 2.x version.
+  // We can't add this check in .info file because drupal.org testbot cant
+  // handle it. See #1734648.
+  $requirements = array();
+
+  if ($phase == 'update') {
+    $info = system_get_info('module', 'file_entity');
+    if (strpos($info['version'], '7.x-2') === FALSE) {
+      $requirements['file_entity'] = array(
+        'title' => $t('File entity 2.x'),
+        'value' => $t('Wrong version'),
+        'severity' => REQUIREMENT_ERROR,
+        'description' => $t('Media 2.x requires <a href="@url">File entity 2.x</a>. Please download the correct version and make sure you have deleted the file_entity folder inside the media module directory.', array('@url' => 'http://drupal.org/project/file_entity')),
+      );
+    }
+  }
+
+  return $requirements;
+}
+
+/**
+ * Deprecated update function.
+ */
+function media_update_7000() {
+}
+
+/**
+ * Deprecated update function.
+ */
+function media_update_7001() {
+}
+
+/**
+ * Create the media_type table from the media_types variable.
+ */
+function media_update_7002() {
+  $schema['media_type'] = array(
+    'description' => 'Stores the settings for media types.',
+    'fields' => array(
+      'name' => array(
+        'description' => 'The machine name of the media type.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'label' => array(
+        'description' => 'The label of the media type.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '',
+      ),
+      'base' => array(
+        'description' => 'If this is a base type (i.e. cannot be deleted)',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+        'size' => 'tiny',
+      ),
+      'weight' => array(
+        'description' => 'Weight of media type. Determines which one wins when claiming a piece of media (first wins)',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+        'size' => 'normal',
+      ),
+      'type_callback' => array(
+        'description' => 'Callback to determine if provided media is of this type.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => FALSE,
+        'default' => '',
+      ),
+      'type_callback_args' => array(
+        'type' => 'text',
+        'not null' => FALSE,
+        'size' => 'big',
+        'serialize' => TRUE,
+        'description' => 'A serialized array of name value pairs that will be passed to the callback function',
+      ),
+    ),
+    'primary key' => array('name'),
+  );
+  db_create_table('media_type', $schema['media_type']);
+
+  drupal_load('module', 'media');
+  $old_types = variable_get('media_types');
+  foreach ($old_types as $type) {
+    // Was an error in the original creation.
+    if (isset($type->callbacks)) {
+      unset($type->callbacks);
+    }
+    $type->name = $type->machine_name;
+    unset($type->machine_name);
+    db_merge('media_type')
+      ->key(array('name' => $type->name))
+      ->fields((array) $type)
+      ->execute();
+  }
+  variable_del('media_types');
+}
+
+/**
+ * We now prefix media namespaced variables with media__, so fix old variables.
+ */
+function media_update_7003() {
+  drupal_load('module', 'media');
+  foreach (media_variable_default() as $variable => $value) {
+    if (($test = variable_get('media_' . $variable, TRUE)) == variable_get('media_' . $variable, FALSE)) {
+      media_variable_set($variable, $test);
+      variable_del('media_' . $variable);
+    }
+  }
+}
+
+/**
+ * Empty update function to trigger a menu rebuild.
+ */
+function media_update_7004() {
+}
+
+/**
+ * Deprecated update function.
+ */
+function media_update_7005() {
+}
+
+/**
+ * Rename the file table to file_managed in case head2head was used.
+ */
+function media_update_7006() {
+  if (db_table_exists('file') && !db_table_exists('file_managed')) {
+    db_rename_table('file', 'file_managed');
+  }
+}
+
+/**
+ * Deprecated update function.
+ */
+function media_update_7007() {
+}
+
+/**
+ * Empty function.
+ */
+function media_update_7008() {
+}
+
+/**
+ * Deprecated update function.
+ */
+function media_update_7009() {
+}
+
+/**
+ * Deprecated update function.
+ */
+function media_update_7010() {
+}
+
+/**
+ * Empty update function.
+ */
+function media_update_7011() {
+}
+
+/**
+ * Empty update function.
+ */
+function media_update_7012() {
+}
+
+/**
+ * Work around a core bug where text format cacheability is not updated.
+ *
+ * @see http://drupal.org/node/993230
+ */
+function media_update_7013() {
+  $formats = filter_formats();
+  foreach ($formats as $format) {
+    $format->filters = filter_list_format($format->format);
+    // filter_format_save() expects filters to be an array, however
+    // filter_list_format() gives us objects.
+    foreach ($format->filters as $key => $value) {
+      $format->filters[$key] = (array) $value;
+    }
+    filter_format_save($format);
+  }
+}
+
+/**
+ * Rename the media__dialog_get_theme_name variable to media__dialog_theme.
+ */
+function media_update_7014() {
+  if ($old_value = variable_get('media__dialog_get_theme_name')) {
+    variable_del('media__dialog_get_theme_name');
+    variable_set('media__dialog_theme', $old_value);
+  }
+}
+
+/**
+ * Empty update function to trigger a registry rebuild.
+ */
+function media_update_7015() {
+}
+
+/**
+ * Convert Media entities to File entities.
+ *
+ * This update function requires field_update_7002() to run before it since
+ * the field_bundle_settings variable has been split into separate variables
+ * per entity type and bundle.
+ *
+ * @see http://drupal.org/node/1418708
+ * @see http://drupal.org/node/1211008
+ */
+function media_update_7016() {
+  // Allow File Entity module to take over the {file_managed}.type field. It
+  // will create new indexes as it needs to, but it doesn't know about old ones,
+  // so delete them.
+  if (db_index_exists('file_managed', 'file_type')) {
+    db_drop_index('file_managed', 'file_type');
+  }
+  module_enable(array('file_entity'));
+
+  // Move all field instances from Media entity to File entity.
+  $instances = field_read_instances(array('entity_type' => 'media'), array('include_inactive' => TRUE, 'include_deleted' => TRUE));
+  foreach ($instances as $instance) {
+    // Skip the old self-referencing file field. It will be deleted later in
+    // this function.
+    if ($instance['field_name'] === 'file') {
+      continue;
+    }
+
+    // @todo Convert this to use _update_7000_field_read_fields()
+    $fields = field_read_fields(array('id' => $instance['field_id']), array('include_inactive' => TRUE, 'include_deleted' => TRUE));
+    $field = $fields[$instance['field_id']];
+
+    // There is no API for updating the entity_type foreign key within field
+    // data storage. We can do a direct db_update() for when the default SQL
+    // storage back-end is being used, but must skip updating fields that use a
+    // different storage type.
+    if ($field['storage']['type'] !== 'field_sql_storage' || !module_exists('field_sql_storage') || !$field['storage']['active']) {
+      $messages[] = t('Cannot update field %id (%field_name) because it does not use the field_sql_storage storage type.', array(
+        '%id' => $field['id'],
+        '%field_name' => $field['field_name'],
+      ));
+      continue;
+    }
+
+    // Update the data tables.
+    $table_name = _field_sql_storage_tablename($field);
+    $revision_name = _field_sql_storage_revision_tablename($field);
+    db_update($table_name)
+      ->fields(array('entity_type' => 'file'))
+      ->condition('entity_type', 'media')
+      ->condition('bundle', $instance['bundle'])
+      ->execute();
+    db_update($revision_name)
+      ->fields(array('entity_type' => 'file'))
+      ->condition('entity_type', 'media')
+      ->condition('bundle', $instance['bundle'])
+      ->execute();
+
+    // Once all the data has been updated, update the {field_config_instance}
+    // record.
+    db_update('field_config_instance')
+      ->fields(array('entity_type' => 'file'))
+      ->condition('id', $instance['id'])
+      ->execute();
+  }
+
+  // Update the field_bundle_settings configuration variable: move media bundle
+  // settings to file bundles, and move settings of the old self-referencing
+  // file field to the new file pseudo-field.
+  foreach ($instances as $instance) {
+    if ($instance['field_name'] === 'file' && !$instance['deleted']) {
+      $file_settings = field_bundle_settings('file', $instance['bundle']);
+      $media_settings = field_bundle_settings('media', $instance['bundle']);
+      $file_settings = array_merge($file_settings, $media_settings);
+      if (isset($instance['widget']['weight'])) {
+        $file_settings['extra_fields']['form']['file']['weight'] = $instance['widget']['weight'];
+      }
+      if (isset($instance['display'])) {
+        foreach ($instance['display'] as $view_mode => $display) {
+          if (isset($display['weight'])) {
+            $file_settings['extra_fields']['display']['file'][$view_mode]['weight'] = $display['weight'];
+          }
+          if (isset($display['type'])) {
+            $file_settings['extra_fields']['display']['file'][$view_mode]['visible'] = ($display['type'] != 'hidden');
+          }
+        }
+      }
+      field_bundle_settings('file', $instance['bundle'], $file_settings);
+    }
+  }
+  // Delete old media bundle settings.
+  db_delete('variable')
+    ->condition('name', db_like('field_bundle_settings_media__') . '%', 'LIKE')
+    ->execute();
+
+  // Copy field formatter settings of old self-referencing file field to file
+  // pseudo-field formatter settings.
+  $file_displays = variable_get('file_displays', array());
+  foreach ($instances as $instance) {
+    if ($instance['field_name'] === 'file' && !$instance['deleted']) {
+      if (isset($instance['display'])) {
+        foreach ($instance['display'] as $view_mode => $display) {
+          if (isset($display['type']) && $display['type'] != 'hidden') {
+            $file_formatter = 'file_field_' . $display['type'];
+            $file_displays[$instance['bundle']][$view_mode][$file_formatter]['status'] = TRUE;
+            if (isset($display['settings'])) {
+              $file_displays[$instance['bundle']][$view_mode][$file_formatter]['settings'] = $display['settings'];
+            }
+          }
+        }
+      }
+    }
+  }
+  variable_set('file_displays', $file_displays);
+
+  // Delete the old self-referencing file field instances. If all instances are
+  // deleted, field_delete_instance() will delete the field too.
+  foreach ($instances as $instance) {
+    if ($instance['field_name'] === 'file' && !$instance['deleted']) {
+      field_delete_instance($instance);
+    }
+  }
+
+  field_cache_clear();
+}
+
+/**
+ * Move file display configuration.
+ *
+ * Move file display configurations from the 'file_displays' variable to the
+ * {file_display} table.
+ */
+function media_update_7017() {
+  // If the {file_display} table doesn't exist, then the File Entity module's
+  // update functions will automatically take care of migrating the
+  // configurations. However, if file_entity_update_7001() has already run
+  // prior to media_update_7016(), run it again in order to capture those
+  // configurations too.
+  if (db_table_exists('file_display') && function_exists('file_entity_update_7001')) {
+    module_load_include('install', 'file_entity', 'file_entity');
+    file_entity_update_7001();
+  }
+}
+
+/**
+ * Empty update function to trigger a menu rebuild.
+ */
+function media_update_7018() {
+}
+
+/**
+ * Update old view mode formaters.
+ *
+ * Update old per-view-mode media field formatters to the generic media
+ * formatter with a setting.
+ */
+function media_update_7019() {
+  $instances = array();
+  $fields = field_read_fields(array('type' => 'media'), array('include_inactive' => TRUE));
+  foreach ($fields as $field) {
+    $instances = array_merge($instances, field_read_instances(array('field_id' => $field['id']), array('include_inactive' => TRUE)));
+  }
+  foreach ($instances as $instance) {
+    $update_instance = FALSE;
+    foreach ($instance['display'] as $view_mode => $display) {
+      if (in_array($display['type'], array('media_link', 'media_preview', 'media_small', 'media_large', 'media_original'))) {
+        $update_instance = TRUE;
+        $instance['display'][$view_mode]['type'] = 'media';
+        $instance['display'][$view_mode]['settings'] = array('file_view_mode' => $display['type']);
+      }
+    }
+    if ($update_instance) {
+      field_update_instance($instance);
+    }
+  }
+}
+
+/**
+ * Delete the wysiwyg_allowed_types variable if it is the same as default.
+ */
+function media_update_7020() {
+  if (variable_get('media__wysiwyg_allowed_types') == array('image', 'video')) {
+    variable_del('media__wysiwyg_allowed_types');
+  }
+}
+
+/**
+ * Replace 'view media' perm from all users having the role with 'view file'.
+ */
+function media_update_7200() {
+  $perms = user_permission_get_modules();
+  if (!isset($perms['view files'])) {
+    throw new DrupalUpdateException('The File Entity module needs to be upgraded before continuing.');
+  }
+  else {
+    $roles = user_roles(FALSE, 'view media');
+    $permissions = array(
+      'view media' => FALSE,
+      'view files' => TRUE,
+    );
+    foreach ($roles as $rid => $role) {
+      user_role_change_permissions($rid, $permissions);
+    }
+    $roles = user_roles(FALSE, 'edit media');
+    $permissions = array(
+      'edit media' => FALSE,
+      'edit any files' => TRUE,
+    );
+    if (function_exists('file_entity_list_permissions')) {
+      unset($permissions['edit any files']);
+
+      foreach (file_entity_permissions_get_configured_types() as $type) {
+        $permissions += file_entity_list_permissions($type);
+      }
+    }
+    foreach ($roles as $rid => $role) {
+      user_role_change_permissions($rid, $permissions);
+    }
+    $roles = user_roles(FALSE, 'administer media');
+    $permissions = array(
+      'administer media' => FALSE,
+      'administer files' => TRUE,
+    );
+    foreach ($roles as $rid => $role) {
+      user_role_change_permissions($rid, $permissions);
+    }
+  }
+}
+
+/**
+ * Handle existing media fields.
+ *
+ * Enable the new Media Field module if this site uses "media" fields. File
+ * fields are now preferred for storing media.
+ */
+function media_update_7201() {
+  $fields = field_info_fields();
+  foreach ($fields as $field) {
+    if ($field['type'] == 'media') {
+      // This update function may run even if Media is not enabled. Don't enable
+      // Media Field if its dependencies aren't already enabled.
+      module_enable(array('mediafield'), FALSE);
+
+      // Update entries in file_usage so that they are associated with Media
+      // Field rather than Media.
+      // @TODO This update function may conflict with
+      // http://drupal.org/node/1268116
+      db_update('file_usage')
+        ->condition('module', 'media')
+        ->fields(array('module' => 'mediafield'))
+        ->execute();
+
+      return t('The "Media" field type has been moved to the new "Media Field" module. This site uses media fields, so the Media Field module has been enabled.');
+    }
+  }
+  return t('The "Media" field type has been moved to the new "Media Field" module. File fields can be used to store media.');
+}
+
+/**
+ * Enable the Views module if it is not already enabled.
+ */
+function media_update_7202() {
+  module_enable(array('views'));
+  if (!module_exists('views')) {
+    throw new DrupalUpdateException('The <a href="https://drupal.org/project/views">Views module</a> must be downloaded and available for Media updates to proceed.');
+  }
+}
+
+/**
+ * Empty update function to trigger cache clear.
+ */
+function media_update_7203() {
+  // Do nothing.
+}
+
+/**
+ * Update old Media view modes to the new File Entity ones.
+ */
+function media_update_7204() {
+  $view_mode_updates = array(
+    'media_preview' => 'preview',
+    'media_small' => 'teaser',
+    'media_large' => 'full',
+  );
+
+  // Update the media__wysiwyg_default_view_mode variable.
+  $wysiwyg_default_view_mode = variable_get('media__wysiwyg_default_view_mode');
+  if (isset($wysiwyg_default_view_mode) && isset($view_mode_updates[$wysiwyg_default_view_mode])) {
+    $wysiwyg_default_view_mode = $view_mode_updates[$wysiwyg_default_view_mode];
+    variable_set('media__wysiwyg_default_view_mode', $wysiwyg_default_view_mode);
+  }
+
+  // Update view mode references in the 'field_bundle_settings' variable.
+  $field_bundle_settings = variable_get('field_bundle_settings');
+  if (!empty($field_bundle_settings['file'])) {
+    foreach ($field_bundle_settings['file'] as $file_type => $info) {
+      // Per-bundle information about the view modes.
+      foreach ($view_mode_updates as $old_view_mode => $new_view_mode) {
+        if (isset($info['view_modes'][$old_view_mode])) {
+          $field_bundle_settings['file'][$file_type]['view_modes'][$new_view_mode] = $info['view_modes'][$old_view_mode];
+          unset($field_bundle_settings['file'][$file_type]['view_modes'][$old_view_mode]);
+        }
+        // The File Entity module defaults to not use custom settings for the
+        // new view modes, but the Media module used to default to using custom
+        // settings, so if this variable is not defined, use the prior default.
+        if (!isset($field_bundle_settings['file'][$file_type]['view_modes'][$new_view_mode]['custom_settings'])) {
+          $field_bundle_settings['file'][$file_type]['view_modes'][$new_view_mode]['custom_settings'] = TRUE;
+        }
+      }
+
+      // Settings for the "extra fields" configured on the Manage Display page.
+      if (!empty($info['extra_fields']['display'])) {
+        foreach ($info['extra_fields']['display'] as $extra_field_name => $extra_field_info) {
+          foreach ($view_mode_updates as $old_view_mode => $new_view_mode) {
+            if (isset($extra_field_info[$old_view_mode])) {
+              $field_bundle_settings['file'][$file_type]['extra_fields']['display'][$extra_field_name][$new_view_mode] = $extra_field_info[$old_view_mode];
+              unset($field_bundle_settings['file'][$file_type]['extra_fields']['display'][$extra_field_name][$old_view_mode]);
+            }
+          }
+        }
+      }
+    }
+  }
+  variable_set('field_bundle_settings', $field_bundle_settings);
+
+  // Move settings for fields attached to files from the old view modes to the
+  // new ones.
+  $instances = field_read_instances(array('entity_type' => 'file'));
+  foreach ($instances as $instance) {
+    $updated = FALSE;
+    foreach ($view_mode_updates as $old_view_mode => $new_view_mode) {
+      if (isset($instance['display'][$old_view_mode])) {
+        $instance['display'][$new_view_mode] = $instance['display'][$old_view_mode];
+        unset($instance['display'][$old_view_mode]);
+        $updated = TRUE;
+      }
+    }
+    if ($updated) {
+      field_update_instance($instance);
+    }
+  }
+
+  // Move "Manage file display" settings from old view modes to new ones.
+  $file_display_names = db_query('SELECT name FROM {file_display}')->fetchCol();
+  foreach ($file_display_names as $old_file_display_name) {
+    list($file_type, $view_mode, $formatter) = explode('__', $old_file_display_name, 3);
+    if (isset($view_mode_updates[$view_mode])) {
+      $view_mode = $view_mode_updates[$view_mode];
+      $new_file_display_name = implode('__', array($file_type, $view_mode, $formatter));
+      db_delete('file_display')->condition('name', $new_file_display_name)->execute();
+      db_update('file_display')->fields(array('name' => $new_file_display_name))->condition('name', $old_file_display_name)->execute();
+    }
+  }
+
+  // Update file/image/media fields that use a formatter that reference an old
+  // file view modes to reference the new ones.
+  foreach (field_read_instances() as $instance) {
+    if (!empty($instance['display'])) {
+      $updated = FALSE;
+      foreach ($instance['display'] as $instance_view_mode => $display) {
+        if (isset($display['settings']['file_view_mode']) && isset($view_mode_updates[$display['settings']['file_view_mode']])) {
+          $instance['display'][$instance_view_mode]['settings']['file_view_mode'] = $view_mode_updates[$display['settings']['file_view_mode']];
+          $updated = TRUE;
+        }
+      }
+      if ($updated) {
+        field_update_instance($instance);
+      }
+    }
+  }
+
+  // Update formatter settings that reference the old view modes within saved
+  // Views.
+  if (db_table_exists('views_display')) {
+    $result = db_select('views_display', 'v')->fields('v', array('vid', 'id', 'display_options'))->execute();
+    foreach ($result as $record) {
+      if (!empty($record->display_options)) {
+        $display_options = unserialize($record->display_options);
+        if (_media_update_7204_update_views_display_options($display_options, $view_mode_updates)) {
+          db_update('views_display')
+            ->fields(array('display_options' => serialize($display_options)))
+            ->condition('vid', $record->vid)
+            ->condition('id', $record->id)
+            ->execute();
+        }
+      }
+    }
+  }
+
+  // Update formatter settings that reference the old view modes within unsaved
+  // Views in the CTools object cache. Objects in the CTools cache are instances
+  // of classes, so the Views module must be enabled to unserialize it
+  // correctly.
+  if (db_table_exists('ctools_object_cache') && module_exists('views')) {
+    $result = db_select('ctools_object_cache', 'c')->fields('c', array('sid', 'name', 'obj', 'data'))->condition('obj', 'view')->execute();
+    foreach ($result as $record) {
+      $view = unserialize($record->data);
+      if (!empty($view->display)) {
+        $updated = FALSE;
+        foreach ($view->display as $display_name => $display) {
+          if (!empty($display->display_options) && _media_update_7204_update_views_display_options($display->display_options, $view_mode_updates)) {
+            $updated = TRUE;
+          }
+        }
+        if ($updated) {
+          db_update('ctools_object_cache')
+            ->fields(array('data' => serialize($view)))
+            ->condition('sid', $record->sid)
+            ->condition('name', $record->name)
+            ->condition('obj', $record->obj)
+            ->execute();
+        }
+      }
+    }
+  }
+
+  // Clear caches that might contain stale Views displays.
+  if (module_exists('views')) {
+    cache_clear_all('*', 'cache_views', TRUE);
+    cache_clear_all('*', 'cache_views_data', TRUE);
+  }
+  if (module_exists('block')) {
+    cache_clear_all('*', 'cache_block', TRUE);
+  }
+  cache_clear_all('*', 'cache_page', TRUE);
+
+  // We still have the old media_link and media_original view modes that must be
+  // supported for now.
+  // @TODO: Make this apply only to updates from Media 1.x.
+  // @see media_entity_info_alter()
+  variable_set('media__show_deprecated_view_modes', TRUE);
+}
+
+/**
+ * Drop the unused {media_list_type} table.
+ */
+function media_update_7205() {
+  if (db_table_exists('media_list_type')) {
+    db_drop_table('media_list_type');
+    return t('Dropped the unused {media_list_type} table.');
+  }
+}
+
+/**
+ * Move default file display configurations to the database.
+ */
+function media_update_7206() {
+  module_load_include('inc', 'file_entity', 'file_entity.file_api');
+  module_load_include('inc', 'ctools', 'includes/export');
+  $default_image_styles = array(
+    'preview' => 'square_thumbnail',
+    'teaser' => 'medium',
+    'full' => 'large',
+  );
+
+  // Only needed by sites that updated from Media 1.x.
+  // @see media_entity_info_alter()
+  if (variable_get('media__show_deprecated_view_modes')) {
+    $default_image_styles['media_original'] = '';
+  }
+
+  // Clear out the ctools cache so that the old default implementations
+  // are removed.
+  ctools_export_load_object_reset('file_display');
+  foreach ($default_image_styles as $view_mode => $image_style) {
+    $existing_displays = file_displays_load('image', $view_mode, TRUE);
+    // Only insert default config into the database if no existing
+    // configuration is found.
+    if (!isset($existing_displays['file_image'])) {
+      $display_name = 'image__' . $view_mode . '__file_image';
+      $display = array(
+        'api_version' => 1,
+        'name' => $display_name,
+        'status' => 1,
+        'weight' => 5,
+        'settings' => array('image_style' => $image_style),
+        'export_type' => NULL,
+      );
+      file_display_save((object) $display);
+    }
+  }
+}
+
+/**
+ * Trigger cache clear.
+ *
+ * Empty update function to trigger cache clear after changing access callbacks
+ * to file_entity_access.
+ */
+function media_update_7207() {
+  // Do nothing.
+}
+
+/**
+ * Drop the media_types table and migrate files to file_entity types.
+ */
+function media_update_7208() {
+  // Reset static cache to ensure our new file types are recognized
+  drupal_static_reset('ctools_export_load_object_table_exists');
+
+  if (!db_table_exists('media_type')) {
+    // No types to migrate.
+    return;
+  }
+  // @see http://drupal.org/node/1292382
+  if (!function_exists('file_type_get_enabled_types')) {
+    throw new DrupalUpdateException('The File Entity module needs to be upgraded before continuing.');
+  }
+  else {
+    $existing_types = db_select('media_type', 'mt')
+      ->orderBy('weight')
+      ->fields('mt')
+      ->execute()
+      // Will key by the name field.
+      ->fetchAllAssoc('name');
+    foreach ($existing_types as &$type) {
+      $type->type_callback_args = unserialize($type->type_callback_args);
+    }
+
+    include_once DRUPAL_ROOT . '/includes/file.mimetypes.inc';
+    $mapping = file_mimetype_mapping();
+    // We do not migrate this type, since there is no way to handle its weight.
+    unset($existing_types['default']);
+    foreach ($existing_types as $type) {
+      $extensions = isset($type->type_callback_args['extensions']) ? $type->type_callback_args['extensions'] : array();
+      $mimetypes = isset($type->type_callback_args['mimetypes']) ? $type->type_callback_args['mimetypes'] : array();
+      // Add mimetypes by extensions.
+      foreach ($extensions as $extension) {
+        if (isset($mapping['extensions'][$extension])) {
+          $type->mimetypes[] = $mapping['mimetypes'][$mapping['extensions'][$extension]];
+        }
+      }
+      // Add rest mimetypes.
+      foreach ($mimetypes as $mimetype) {
+        // Mimetype is a regex pattern.
+        foreach ($mapping['mimetypes'] as $mapping_mimetype) {
+          if (preg_match($mimetype, $mapping_mimetype) && !in_array($mapping_mimetype, $type->mimetypes)) {
+            $type->mimetypes[] = $mapping_mimetype;
+          }
+        }
+      }
+      $type->streams = isset($type->type_callback_args['streams']) ? $type->type_callback_args['streams'] : array();
+      $type->type = $type->name;
+      // Merge existing type with new ones.
+      if ($new_type = file_type_load($type->name)) {
+        $new_type->mimetypes = array_merge($type->mimetypes, $new_type->mimetypes);
+        $new_type->streams = array_merge($type->streams, $new_type->streams);
+      }
+      else {
+        $new_type = $type;
+      }
+      file_type_save($new_type);
+    }
+    db_drop_table('media_type');
+
+    // Special treatment for old media application type to new file_entity
+    // document one. Add some more mimetypes to document.
+    $document_type = file_type_load('document');
+    if (!$document_type) {
+      return;
+    }
+    foreach ($mapping['mimetypes'] as $mimetype) {
+      $is_document = strpos($mimetype, 'document') !== FALSE || strpos($mimetype, 'application/vnd.ms-') !== FALSE;
+      if ($is_document && !in_array($mimetype, $document_type->mimetypes)) {
+        $document_type->mimetypes[] = $mimetype;
+      }
+    }
+    file_type_save($document_type);
+  }
+}
+
+/**
+ * Enable the hidden media_migrate_file_types module to provide a UI to update
+ * {file_managed}.type with the new file types provided by file_entity.
+ */
+function media_update_7209() {
+  drupal_load('module', 'media_migrate_file_types');
+
+  if (_media_migrate_file_types_get_migratable_file_types()) {
+    module_enable('media_migrate_file_types');
+  }
+}
+
+/**
+ * Delete deceprated media__type_icon_directory variable.
+ */
+function media_update_7210() {
+  variable_del('media__type_icon_directory');
+}
+
+/**
+ * Flush old version of the image style to make the thumbnails appear correctly.
+ */
+function media_update_7211() {
+  $style = image_style_load('square_thumbnail');
+
+  if ($style) {
+    $style['name'] = 'media_thumbnail';
+    image_style_save($style);
+  }
+
+  // Replace any instances in display settings
+  module_load_include('inc', 'file_entity', 'file_entity.file_api');
+  $entity_info = entity_get_info('file');
+  $view_modes = array('default' => array('label' => t('Default'))) + $entity_info['view modes'];
+  foreach ($view_modes as $view_mode => $view_mode_info) {
+    $displays = file_displays_load('image', $view_mode);
+    foreach ($displays as $display) {
+      if ($display->settings['image_style'] == 'square_thumbnail') {
+        $display->settings['image_style'] = 'media_thumbnail';
+        file_display_save($display);
+      }
+    }
+  }
+
+  return t('Flushed image style and updated display styles.');
+}
+
+/**
+ * Utility function for update 7204. Updates display options within Views.
+ */
+function _media_update_7204_update_views_display_options(&$display_options, $view_mode_updates) {
+  $updated = FALSE;
+
+  // Update fields that use a formatter with a file_view_mode formatter setting.
+  if (!empty($display_options['fields'])) {
+    foreach ($display_options['fields'] as $field_name => $field_display) {
+      if (isset($field_display['settings']['file_view_mode']) && isset($view_mode_updates[$field_display['settings']['file_view_mode']])) {
+        $display_options['fields'][$field_name]['settings']['file_view_mode'] = $view_mode_updates[$field_display['settings']['file_view_mode']];
+        $updated = TRUE;
+      }
+    }
+  }
+
+  // Update Views that display files directly using a row plugin with a view
+  // mode setting.
+  if (isset($display_options['row_plugin']) && $display_options['row_plugin'] === 'file' && isset($display_options['row_options']['view_mode']) && isset($view_mode_updates[$display_options['row_options']['view_mode']])) {
+    $display_options['row_options']['view_mode'] = $view_mode_updates[$display_options['row_options']['view_mode']];
+    $updated = TRUE;
+  }
+  return $updated;
+}
+
+/**
+ * Re-create application file type for legacy reasons.
+ */
+function media_update_7212() {
+  module_load_include('inc', 'file_entity', 'file_entity.file_api');
+  if (!file_type_load('application')) {
+    $application = (object) array(
+      'api_version' => 1,
+      'type' => 'application',
+      'label' => t('Application'),
+      'description' => t('Multipurpose type - kept to support older sites.'),
+      'mimetypes' => array(),
+      'streams' => array(
+        'public',
+      ),
+    );
+
+    file_type_save($application);
+    $application = file_type_load('application');
+    file_type_disable($application);
+  }
+}
+
+/**
+ * Remove the obsolete file_extensions variable.
+ */
+function media_update_7213() {
+  $media_file_extensions = explode(' ', variable_get('media__file_extensions'));
+  $file_entity_file_extensions = explode(' ', variable_get('file_entity_default_allowed_extensions', 'jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm'));
+
+  // Preserve any custom file extensions.
+  if (array_diff($media_file_extensions, $file_entity_file_extensions)) {
+    $combined_file_extensions = array_unique(array_merge($file_entity_file_extensions, $media_file_extensions));
+    variable_set('file_entity_default_allowed_extensions', implode(' ' , $combined_file_extensions));
+  }
+
+  variable_del('media__file_extensions');
+}
+
+/**
+ * Drop the legacy {media_filter_usage} table.
+ */
+function media_update_7214() {
+  if (db_table_exists('media_filter_usage')) {
+    db_drop_table('media_filter_usage');
+  }
+}
+
+/**
+ * Skipped to run media_update_7217().
+ */
+function media_update_7216() {
+  // Do nothing.
+}
+
+/**
+ * Copy file type icons to public files directory.
+ */
+function media_update_7217() {
+  // Remove any trailing slashes from the icon base directory variable.
+  $dir = variable_get('media__icon_base_directory');
+  if (!empty($dir)) {
+    $dir = rtrim($dir, '/');
+    variable_set('media__icon_base_directory', $dir);
+  }
+
+  try {
+    _media_install_copy_icons();
+  }
+  catch (Exception $e) {
+    throw new DrupalUpdateException($e->getMessage());
+  }
+}
+
+/**
+ * Drop the legacy {cache_media_xml} table.
+ */
+function media_update_7218() {
+  if (db_table_exists('cache_media_xml')) {
+    db_drop_table('cache_media_xml');
+  }
+
+  variable_del('media__xml_cache_expire');
+}
+
+/**
+ * Enable the Media WYSIWYG submodule.
+ */
+function media_update_7219() {
+  if (module_exists('wysiwyg')) {
+    module_enable(array('media_wysiwyg'));
+  }
+}
+
+/**
+ * Delete the deprecated media__file_list_size variable.
+ */
+function media_update_7220() {
+  variable_del('media__file_list_size');
+}
+
+/**
+ * Enable the Media Bulk Upload submodule.
+ */
+function media_update_7221() {
+  if (module_exists('multiform') && module_exists('plupload')) {
+    module_enable(array('media_bulk_upload'));
+  }
+}
+
+/**
+ * Delete the deprecated media__display_types_migration_mess variable.
+ */
+function media_update_7222() {
+  variable_del('media__display_types_migration_mess');
+}
+
+/**
+ * Delete legacy variables.
+ */
+function media_update_7223() {
+  variable_del('media__max_filesize');
+  variable_del('media__debug');
+  variable_del('media__xml_cache_expire');
+  variable_del('media__show_file_type_rebuild_nag');
+  variable_del('media__field_select_media_text');
+  variable_del('media__field_remove_media_text');
+  variable_del('media__browser_library_empty_message');
+  variable_del('media__browser_pager_limit');
+  variable_del('media__browser_viewtype_default');
+}
+
+/**
+ * Rename variables, removing variable namespace.
+ */
+function media_update_7224() {
+  // Create an array of variables sans 'media' prefix.
+  $variables = array('wysiwyg_title', 'wysiwyg_icon_title', 'wysiwyg_default_view_mode', 'wysiwyg_upload_directory', 'wysiwyg_allowed_types', 'wysiwyg_allowed_attributes', 'wysiwyg_browser_plugins', 'dialog_theme', 'import_batch_size', 'fromurl_supported_schemes', 'icon_base_directory', 'icon_set', 'show_deprecated_view_modes');
+
+  foreach ($variables as $variable) {
+    // Find the value of the old variable.
+    $value = variable_get('media__' . $variable);
+
+    // Port the value of the variable if it was set.
+    if (!is_null($value)) {
+      variable_set('media_' . $variable, $value);
+    }
+
+    // Remove the old variable.
+    variable_del('media__' . $variable);
+  }
+}
+
+/**
+ * Migrate variables to appropriate submodules.
+ */
+function media_update_7225() {
+  $data = array(
+    'media_wysiwyg' => array(
+      'wysiwyg_title',
+      'wysiwyg_icon_title',
+      'wysiwyg_default_view_mode',
+      'wysiwyg_upload_directory',
+      'wysiwyg_allowed_types',
+      'wysiwyg_allowed_attributes',
+      'wysiwyg_browser_plugins',
+    ),
+    'media_internet' => array(
+      'fromurl_supported_schemes',
+    ),
+    'media_bulk_upload' => array(
+      'import_batch_size',
+    ),
+  );
+
+  foreach ($data as $module => $variables) {
+    foreach ($variables as $variable) {
+      // Only port variables to submodules if the submodule exists.
+      if (module_exists($module)) {
+        // Find the value of the old variable.
+        $value = variable_get('media_' . $variable);
+
+        // Port the value of the variable if it was set.
+        if (!is_null($value)) {
+          variable_set($module . '_' . $variable, $value);
+        }
+      }
+
+      // Remove the old variable.
+      variable_del('media_' . $variable);
+    }
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/media.media.inc b/profiles/commons/modules/contrib/media/media.media.inc
new file mode 100644
index 0000000..4a20dee
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/media.media.inc
@@ -0,0 +1,136 @@
+<?php
+
+/**
+ * @file
+ * Media module integration for the Media module.
+ */
+
+/**
+ * Implements hook_media_browser_plugin_info().
+ */
+function media_media_browser_plugin_info() {
+  $info['upload'] = array(
+    'title' => t('Upload'),
+    'weight' => -10,
+    'class' => 'MediaBrowserUpload',
+  );
+
+  // Add a plugin for each View display using the 'media_browser' display type.
+  $view_weight = 10;
+  foreach (views_get_enabled_views() as $view) {
+    foreach ($view->display as $display) {
+      if ($display->display_plugin == 'media_browser') {
+        $title = $display->display_title;
+        if (!empty($display->display_options['title'])) {
+          $title = $display->display_options['title'];
+        }
+        $info["{$view->name}--{$display->id}"] = array(
+          'title' => $title,
+          // @TODO make this configurable.
+          'weight' => $view_weight++,
+          'class' => 'MediaBrowserView',
+          'view_name' => $view->name,
+          'view_display_id' => $display->id,
+        );
+      }
+    }
+  }
+
+  return $info;
+}
+
+/**
+ * Implements hook_query_media_browser_alter().
+ */
+function media_query_media_browser_alter($query) {
+  // Ensure that the query is against the file_managed table.
+  $tables = $query->getTables();
+  if (empty($tables['file_managed'])) {
+    throw new Exception(t('Media browser being queried without the file_managed table.'));
+  }
+  $alias = $tables['file_managed']['alias'];
+
+  $params = drupal_get_query_parameters();
+  // How do we validate these?  I don't know.
+  // I think PDO should protect them, but I'm not 100% certain.
+  array_walk_recursive($params, 'media_recursive_check_plain');
+
+  $types = !empty($params['types']) ? $params['types'] : NULL;
+  $url_include_patterns = !empty($params['url_include_patterns']) ? $params['url_include_patterns'] : NULL;
+  $url_exclude_patterns = !empty($params['url_exclude_patterns']) ? $params['url_exclude_patterns'] : NULL;
+  $allowed_schemes = !empty($params['schemes']) ? array_filter($params['schemes']) : array();
+  $extensions = !empty($params['file_extensions']) ? array_filter(explode(' ', $params['file_extensions'])) : array();
+
+  $or_condition = db_or();
+
+  if (!empty($allowed_schemes)) {
+    // Include local files with the allowed extensions and types.
+    $local_wrappers = array_intersect_key(media_get_local_stream_wrappers(), $allowed_schemes);
+    if (!empty($extensions) && !empty($local_wrappers)) {
+      // Extension filtering.
+      $local_condition = db_or();
+      foreach (array_keys($local_wrappers) as $scheme) {
+        foreach ($extensions as $extension) {
+          $local_condition->condition($alias . '.uri', db_like($scheme . '://') . '%' . db_like('.' . $extension), 'LIKE');
+        }
+      }
+      $or_condition->condition($local_condition);
+    }
+    if (!empty($types) && !empty($local_wrappers)) {
+      // Type filtering.
+      $local_condition = db_or();
+      foreach (array_keys($local_wrappers) as $scheme) {
+        $local_condition->condition($alias . '.type', $types, 'IN');
+      }
+      $or_condition->condition($local_condition);
+    }
+
+    // Include remote files with the allowed file types.
+    // We cant filter extensions here, because remote file filenames usually
+    // are a url or a parameter of a query.
+    $remote_wrappers = array_intersect_key(media_get_remote_stream_wrappers(), $allowed_schemes);
+    if (!empty($types) && !empty($remote_wrappers)) {
+      $remote_condition = db_and();
+      $wrapper_condition = db_or();
+      foreach (array_keys($remote_wrappers) as $scheme) {
+        $wrapper_condition->condition($alias . '.uri', db_like($scheme . '://') . '%', 'LIKE');
+      }
+      $remote_condition->condition($wrapper_condition);
+      $remote_condition->condition($alias . '.type', $types, 'IN');
+      $or_condition->condition($remote_condition);
+    }
+  }
+  else {
+    if (!empty($types)) {
+      $query->condition($alias . '.type', $types, 'IN');
+    }
+    if (!empty($extensions)) {
+      foreach ($extensions as $extension) {
+        $or_condition->condition($alias . '.uri', db_like('.' . $extension), 'LIKE');
+      }
+    }
+  }
+
+  if ($or_condition->count()) {
+    $query->condition($or_condition);
+  }
+
+  if ($url_include_patterns) {
+    $query->condition($alias . '.uri', '%' . db_like($url_include_patterns) . '%', 'LIKE');
+    // Insert stream related restrictions here.
+  }
+  if ($url_exclude_patterns) {
+    $query->condition($alias . '.uri', '%' . db_like($url_exclude_patterns) . '%', 'NOT LIKE');
+  }
+
+  if (!user_access('administer files')) {
+    $query->condition($alias . '.uri', db_like('private://') . '%', 'NOT LIKE');
+  }
+
+  // @todo This is possibly redundant since it's already filtered in the view.
+  $query->condition($alias . '.status', FILE_STATUS_PERMANENT);
+
+  foreach (array_keys(file_entity_get_hidden_stream_wrappers()) as $name) {
+    $query->condition($alias . '.uri', db_like($name . '://') . '%', 'NOT LIKE');
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/media.module b/profiles/commons/modules/contrib/media/media.module
new file mode 100644
index 0000000..197f62c
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/media.module
@@ -0,0 +1,1008 @@
+<?php
+
+/**
+ * @file
+ * Media API
+ *
+ * The core Media API.
+ * See http://drupal.org/project/media for more details.
+ */
+
+// Code relating to using media as a field.
+require_once dirname(__FILE__) . '/includes/media.fields.inc';
+
+/**
+ * Implements hook_hook_info().
+ */
+function media_hook_info() {
+  $hooks = array(
+    'media_parse',
+    'media_browser_plugin_info',
+    'media_browser_plugin_info_alter',
+    'media_browser_plugins_alter',
+    'media_browser_params_alter',
+    'query_media_browser_alter',
+  );
+
+  return array_fill_keys($hooks, array('group' => 'media'));
+}
+
+/**
+ * Implements hook_help().
+ */
+function media_help($path, $arg) {
+  switch ($path) {
+    case 'admin/help#media':
+      $output = '';
+      $output .= '<h3>' . t('About') . '</h3>';
+      $output .= '<p>' . t('The Media module is a File Browser to the Internet, media provides a framework for managing files and multimedia assets, regardless of whether they are hosted on your own site or a 3rd party site. It replaces the Drupal core upload field with a unified User Interface where editors and administrators can upload, manage, and reuse files and multimedia assets. Media module also provides rich integration with WYSIWYG module to let content creators access media assets in rich text editor. Javascript is required to use the Media module.  For more information check <a href="@media_faq">Media Module page</a>', array('@media_faq' => 'http://drupal.org/project/media')) . '.</p>';
+      $output .= '<h3>' . t('Uses') . '</h3>';
+      $output .= '<dl>';
+      $output .= '<dt>' . t('Media Repository') . '</dt>';
+      $output .= '<dd>' . t('Media module allows you to maintain a <a href="@mediarepo">media asset repository</a> where in you can add, remove, reuse your media assets. You can add the media file using upload form or from a url and also do bulk operations on the media assets.', array('@mediarepo' => url('admin/content/media'))) . '</dd>';
+      $output .= '<dt>' . t('Attaching media assets to content types') . '</dt>';
+      $output .= '<dd>' . t('Media assets can be attached to content types as fields. To add a media field to a <a href="@content-type">content type</a>, go to the content type\'s <em>manage fields</em> page, and add a new field of type <em>Multimedia Asset</em>.', array('@content-type' => url('admin/structure/types'))) . '</dd>';
+      $output .= '<dt>' . t('Using media assets in WYSIWYG') . '</dt>';
+      $output .= '<dd>' . t('Media module provides rich integration with WYSIWYG editors, using Media Browser plugin you can select media asset from library to add to the rich text editor moreover you can add media asset from the media browser itself using either upload method or add from url method. To configure media with WYSIWYG you need two steps of configuration:');
+      $output .= '<ul><li>' . t('Enable WYSIWYG plugin on your desired <a href="@wysiwyg-profile">WYSIWYG profile</a>. Please note that you will need to have <a href="@wysiwyg">WYSIWYG</a> module enabled.', array('@wysiwyg-profile' => url('admin/config/content/wysiwyg'), '@wysiwyg' => 'http://drupal.org/project/wysiwyg')) . '</li>';
+      $output .= '<li>' . t('Enable the <em>Convert Media tags to markup</em> filter on the <a href="@input-format">Input format</a> you are using with the WYSIWYG profile.', array('@input-format' => url('admin/config/content/formats'))) . '</li></ul></dd>';
+      return $output;
+  }
+}
+
+/**
+ * Implements hook_entity_info_alter().
+ */
+function media_entity_info_alter(&$entity_info) {
+  // For sites that updated from Media 1.x, continue to provide these deprecated
+  // view modes.
+  // @see http://drupal.org/node/1051090
+  if (variable_get('media_show_deprecated_view_modes', FALSE)) {
+    $entity_info['file']['view modes'] += array(
+      'media_link' => array(
+        'label' => t('Link'),
+        'custom settings' => TRUE,
+      ),
+      'media_original' => array(
+        'label' => t('Original'),
+        'custom settings' => TRUE,
+      ),
+    );
+  }
+
+  if (module_exists('entity_translation')) {
+    $entity_info['file']['translation']['entity_translation']['class'] = 'MediaEntityTranslationHandler';
+    $entity_info['file']['translation']['entity_translation']['path schemes']['media'] = array('edit path' => 'media/%file/edit/%ctools_js');
+  }
+}
+
+/**
+ * Implements hook_menu().
+ */
+function media_menu() {
+  // For managing different types of media and the fields associated with them.
+  $items['admin/config/media/browser'] = array(
+    'title' => 'Media browser settings',
+    'description' => 'Configure the behavior and display of the media browser.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('media_admin_config_browser'),
+    'access arguments' => array('administer media browser'),
+    'file' => 'includes/media.admin.inc',
+  );
+
+  // Administrative screens for managing media.
+  $items['admin/content/file/thumbnails'] = array(
+    'title' => 'Thumbnails',
+    'description' => 'Manage files used on your site.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('file_entity_admin_file'),
+    'access arguments' => array('administer files'),
+    'type' => MENU_LOCAL_TASK,
+    'file' => 'file_entity.admin.inc',
+    'file path' => drupal_get_path('module', 'file_entity'),
+    'weight' => 10,
+  );
+
+  $items['media/browser'] = array(
+    'title' => 'Media browser',
+    'description' => 'Media Browser for picking media and uploading new media',
+    'page callback' => 'media_browser',
+    'access callback' => 'file_entity_access',
+    'access arguments' => array('create'),
+    'type' => MENU_CALLBACK,
+    'file' => 'includes/media.browser.inc',
+    'theme callback' => 'media_dialog_get_theme_name',
+  );
+
+  // A testbed to try out the media browser with different launch commands.
+  $items['media/browser/testbed'] = array(
+    'title' => 'Media Browser test',
+    'description' => 'Make it easier to test media browser',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('media_browser_testbed'),
+    'access arguments' => array('administer files'),
+    'type' => MENU_CALLBACK,
+    'file' => 'includes/media.browser.inc',
+  );
+
+  // We could re-use the file/%file/edit path for the modal callback, but
+  // it is just easier to use our own namespace here.
+  $items['media/%file/edit/%ctools_js'] = array(
+    'title' => 'Edit',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('media_file_edit_modal', 1, 3),
+    'access callback' => 'file_entity_access',
+    'access arguments' => array('update', 1),
+    'file' => 'includes/media.pages.inc',
+    'type' => MENU_CALLBACK,
+  );
+
+  return $items;
+}
+
+/**
+ * Implements hook_menu_local_tasks_alter().
+ */
+function media_menu_local_tasks_alter(&$data, $router_item, $root_path) {
+  // Add action link to 'file/add' on 'admin/content/file/thumbnails' page.
+  if ($root_path == 'admin/content/file/thumbnails') {
+    $item = menu_get_item('file/add');
+    if (!empty($item['access'])) {
+      $data['actions']['output'][] = array(
+        '#theme' => 'menu_local_action',
+        '#link' => $item,
+        '#weight' => $item['weight'],
+      );
+    }
+  }
+}
+
+/**
+ * Implements hook_admin_paths().
+ */
+function media_admin_paths() {
+  $paths['media/*/edit/*'] = TRUE;
+
+  // If the media browser theme is set to the admin theme, ensure it gets set
+  // as an admin path as well.
+  $dialog_theme = variable_get('media_dialog_theme', '');
+  if (empty($dialog_theme) || $dialog_theme == variable_get('admin_theme')) {
+    $paths['media/browser'] = TRUE;
+    $paths['media/browser/*'] = TRUE;
+  }
+
+  return $paths;
+}
+
+/**
+ * Implements hook_permission().
+ */
+function media_permission() {
+  return array(
+    'administer media browser' => array(
+      'title' => t('Administer media browser'),
+      'description' => t('Access media browser settings.'),
+    ),
+  );
+}
+
+/**
+ * Implements hook_theme().
+ */
+function media_theme() {
+  return array(
+    // A preview of the uploaded file.
+    'media_thumbnail' => array(
+      'render element' => 'element',
+      'file' => 'includes/media.theme.inc',
+    ),
+
+    // Dialog page.
+    'media_dialog_page' => array(
+      'render element' => 'page',
+      'template' => 'templates/media-dialog-page',
+      'file' => 'includes/media.theme.inc',
+    ),
+
+    // Media form API element type.
+    'media_element' => array(
+      'render element' => 'element',
+      'file' => 'includes/media.theme.inc',
+    ),
+
+    // Display a file as a large icon.
+    'media_formatter_large_icon' => array(
+      'variables' => array('file' => NULL, 'attributes' => array(), 'style_name' => 'media_thumbnail'),
+      'file' => 'includes/media.theme.inc',
+    ),
+  );
+}
+
+/**
+ * Implements hook_image_default_styles().
+ */
+function media_image_default_styles() {
+  $styles = array();
+  $styles['media_thumbnail'] = array(
+    'label' => 'Media thumbnail (100x100)',
+    'effects' => array(
+      array(
+        'name' => 'image_scale_and_crop',
+        'data' => array('width' => 100, 'height' => 100),
+        'weight' => 0,
+      ),
+    ),
+  );
+  return $styles;
+}
+
+/**
+ * Implements hook_page_alter().
+ *
+ * This is used to use our alternate template when ?render=media-popup is passed
+ * in the URL.
+ */
+function media_page_alter(&$page) {
+  if (isset($_GET['render']) && $_GET['render'] == 'media-popup') {
+    $page['#theme'] = 'media_dialog_page';
+
+    // Disable administration modules from adding output to the popup.
+    // @see http://drupal.org/node/914786
+    module_invoke_all('suppress', TRUE);
+
+    foreach (element_children($page) as $key) {
+      if ($key != 'content') {
+        unset($page[$key]);
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_form_FIELD_UI_FIELD_SETTINGS_FORM_alter().
+ *
+ * @todo: Respect field settings in 7.x-2.x and handle them in the media widget
+ * UI.
+ */
+function media_form_field_ui_field_settings_form_alter(&$form, &$form_state) {
+  // On file fields that use the media widget we need remove specific fields.
+  if ($form['field']['type']['#value'] == 'file') {
+    $fields = field_info_instances($form['#entity_type'], $form['#bundle']);
+    if ($fields[$form['field']['field_name']['#value']]['widget']['type'] == 'media_generic') {
+      $form['field']['settings']['display_field']['#access'] = FALSE;
+      $form['field']['settings']['display_default']['#access'] = FALSE;
+    }
+  }
+}
+
+/**
+ * Implements hook_form_FIELD_UI_FIELD_EDIT_FORM_alter().
+ *
+ * @todo: Respect field settings in 7.x-2.x and handle them in the media widget
+ * UI.
+ */
+function media_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
+  // On file fields that use the media widget we need remove specific fields.
+  if ($form['#field']['type'] == 'file' && $form['instance']['widget']['type']['#value'] == 'media_generic') {
+    $form['field']['settings']['display_field']['#access'] = FALSE;
+    $form['field']['settings']['display_default']['#access'] = FALSE;
+    $form['instance']['settings']['description_field']['#access'] = FALSE;
+    $form['instance']['settings']['file_extensions']['#title'] = t('Allowed file extensions for uploaded files');
+    $form['instance']['settings']['file_extensions']['#maxlength'] = 255;
+  }
+
+  // On image fields using the media widget we remove the alt/title fields.
+  if ($form['#field']['type'] == 'image' && $form['instance']['widget']['type']['#value'] == 'media_generic') {
+    $form['instance']['settings']['alt_field']['#access'] = FALSE;
+    $form['instance']['settings']['title_field']['#access'] = FALSE;
+    $form['instance']['settings']['file_extensions']['#title'] = t('Allowed file extensions for uploaded files');
+    // Do not increase maxlength of file extensions for image fields, since
+    // presumably they will not need a long list of extensions.
+  }
+  if ($form['#instance']['entity_type'] == 'file') {
+    $form['instance']['settings']['wysiwyg_override'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Override in WYSIWYG'),
+      '#description' => t('If checked, then this field may be overridden in the WYSIWYG editor.'),
+      '#default_value' => isset($form['#instance']['settings']['wysiwyg_override']) ? $form['#instance']['settings']['wysiwyg_override'] : TRUE,
+    );
+  }
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function media_form_file_entity_edit_alter(&$form, &$form_state) {
+  // Make adjustments to the file edit form when used in a CTools modal.
+  if (!empty($form_state['ajax'])) {
+    // Remove the preview and the delete button.
+    $form['preview']['#access'] = FALSE;
+    $form['actions']['delete']['#access'] = FALSE;
+
+    // Convert the cancel link to a button which triggers a modal close.
+    $form['actions']['cancel']['#attributes']['class'][] = 'button';
+    $form['actions']['cancel']['#attributes']['class'][] = 'button-no';
+    $form['actions']['cancel']['#attributes']['class'][] = 'ctools-close-modal';
+  }
+}
+
+/**
+ * Implements hook_form_alter().
+ */
+function media_form_alter(&$form, &$form_state, $form_id) {
+  // If we're in the media browser, set the #media_browser key to true
+  // so that if an ajax request gets sent to a different path, the form
+  // still uses the media_browser_form_submit callback.
+  if (current_path() == 'media/browser' && $form_id != 'views_exposed_form') {
+    $form_state['#media_browser'] = TRUE;
+  }
+
+  // If the #media_browser key isset and is true we are using the browser
+  // popup, so add the media_browser submit handler.
+  if (!empty($form_state['#media_browser'])) {
+    $form['#submit'][] = 'media_browser_form_submit';
+  }
+}
+
+/**
+ * Submit handler; direction form submissions in the media browser.
+ */
+function media_browser_form_submit($form, &$form_state) {
+  $url = NULL;
+  $parameters = array();
+
+  // Single upload.
+  if (!empty($form_state['file'])) {
+    $file = $form_state['file'];
+    $url = 'media/browser';
+    $parameters = array('query' => array('render' => 'media-popup', 'fid' => $file->fid));
+  }
+
+  // If $url is set, we had some sort of upload, so redirect the form.
+  if (!empty($url)) {
+    $form_state['redirect'] = array($url, $parameters);
+  }
+}
+
+/**
+ * Implements hook_library().
+ */
+function media_library() {
+  $path = drupal_get_path('module', 'media');
+  $info = system_get_info('module', 'media');
+
+  $common = array(
+    'website' => 'http://drupal.org/project/media',
+    'version' => !empty($info['version']) ? $info['version'] : '7.x-2.x',
+  );
+
+  // Contains libraries common to other media modules.
+  $libraries['media_base'] = array(
+    'title' => 'Media base',
+    'js' => array(
+      $path . '/js/media.core.js' => array('group' => JS_LIBRARY, 'weight' => -5),
+      $path . '/js/util/json2.js' => array('group' => JS_LIBRARY),
+      $path . '/js/util/ba-debug.min.js' => array('group' => JS_LIBRARY),
+    ),
+    'css' => array(
+      $path . '/css/media.css',
+    ),
+  );
+
+  // Includes resources needed to launch the media browser.  Should be included
+  // on pages where the media browser needs to be launched from.
+  $libraries['media_browser'] = array(
+    'title' => 'Media Browser popup libraries',
+    'js' => array(
+      $path . '/js/media.popups.js' => array('group' => JS_DEFAULT),
+    ),
+    'dependencies' => array(
+      array('system', 'ui.resizable'),
+      array('system', 'ui.draggable'),
+      array('system', 'ui.dialog'),
+      array('media', 'media_base'),
+    ),
+  );
+
+  // Resources needed in the media browser itself.
+  $libraries['media_browser_page'] = array(
+    'title' => 'Media browser',
+    'js' => array(
+      $path . '/js/media.browser.js'  => array('group' => JS_DEFAULT),
+    ),
+    'dependencies' => array(
+      array('system', 'ui.tabs'),
+      array('system', 'ui.draggable'),
+      array('system', 'ui.dialog'),
+      array('media', 'media_base'),
+    ),
+  );
+
+  foreach ($libraries as &$library) {
+    $library += $common;
+  }
+  return $libraries;
+}
+
+/**
+ * Theme callback used to identify when we are in a popup dialog.
+ *
+ * Generally the default theme will look terrible in the media browser. This
+ * will default to the administration theme, unless set otherwise.
+ */
+function media_dialog_get_theme_name() {
+  return variable_get('media_dialog_theme', variable_get('admin_theme'));
+}
+
+/**
+ * This will parse a url or embedded code into a unique URI.
+ *
+ * The function will call all modules implementing hook_media_parse($url),
+ * which should return either a string containing a parsed URI or NULL.
+ *
+ * @NOTE The implementing modules may throw an error, which will not be caught
+ * here; it's up to the calling function to catch any thrown errors.
+ *
+ * @NOTE In emfield, we originally also accepted an array of regex patterns
+ * to match against. However, that module used a registration for providers,
+ * and simply stored the match in the database keyed to the provider object.
+ * However, other than the stream wrappers, there is currently no formal
+ * registration for media handling. Additionally, few, if any, stream wrappers
+ * will choose to store a straight match from the parsed URL directly into
+ * the URI. Thus, we leave both the matching and the final URI result to the
+ * implementing module in this implementation.
+ *
+ * An alternative might be to do the regex pattern matching here, and pass a
+ * successful match back to the implementing module. However, that would
+ * require either an overloaded function or a new hook, which seems like more
+ * overhead than it's worth at this point.
+ *
+ * @TODO Once hook_module_implements_alter() is in core (see the issue at
+ * http://drupal.org/node/692950) we may want to implement media_media_parse()
+ * to ensure we were passed a valid URL, rather than an unsupported or
+ * malformed embed code that wasn't caught earlier. It will needed to be
+ * weighted so it's called after all other streams have a go, as the fallback,
+ * and will need to throw an error.
+ *
+ * @param string $url
+ *   The original URL or embed code to parse.
+ *
+ * @return string
+ *   The unique URI for the file, based on its stream wrapper, or NULL.
+ *
+ * @see media_parse_to_file()
+ * @see media_add_from_url_validate()
+ */
+function media_parse_to_uri($url) {
+  // Trim any whitespace before parsing.
+  $url = trim($url);
+  foreach (module_implements('media_parse') as $module) {
+    $success = module_invoke($module, 'media_parse', $url);
+    if (isset($success)) {
+      return $success;
+    }
+  }
+}
+
+/**
+ * Parse a URL or embed code and return a file object.
+ *
+ * If a remote stream doesn't claim the parsed URL in media_parse_to_uri(),
+ * then we'll copy the file locally.
+ *
+ * @NOTE The implementing modules may throw an error, which will not be caught
+ * here; it's up to the calling function to catch any thrown errors.
+ *
+ * @see media_parse_to_uri()
+ * @see media_add_from_url_submit()
+ */
+function media_parse_to_file($url) {
+  try {
+    $uri = media_parse_to_uri($url);
+  }
+  catch (Exception $e) {
+    // Pass the error along.
+    throw $e;
+    return;
+  }
+
+  if (isset($uri)) {
+    // Attempt to load an existing file from the unique URI.
+    $select = db_select('file_managed', 'f')
+    ->extend('PagerDefault')
+    ->fields('f', array('fid'))
+    ->condition('uri', $uri);
+
+    $fid = $select->execute()->fetchCol();
+    if (!empty($fid)) {
+      $file = file_load(array_pop($fid));
+      return $file;
+    }
+  }
+
+  if (isset($uri)) {
+    // The URL was successfully parsed to a URI, but does not yet have an
+    // associated file: save it!
+    $file = file_uri_to_object($uri);
+    file_save($file);
+  }
+  else {
+    // The URL wasn't parsed. We'll try to save a remote file.
+    // Copy to temporary first.
+    $source_uri = file_stream_wrapper_uri_normalize('temporary://' . basename($url));
+    if (!@copy(@$url, $source_uri)) {
+      throw new Exception('Unable to add file ' . $url);
+      return;
+    }
+    $source_file = file_uri_to_object($source_uri);
+    $scheme = variable_get('file_default_scheme', 'public') . '://';
+    $uri = file_stream_wrapper_uri_normalize($scheme . $source_file->filename);
+    // Now to its new home.
+    $file = file_move($source_file, $uri, FILE_EXISTS_RENAME);
+  }
+
+  return $file;
+}
+
+/**
+ * Utility function to recursively run check_plain on an array.
+ *
+ * @todo There is probably something in core I am not aware of that does this.
+ */
+function media_recursive_check_plain(&$value, $key) {
+  $value = check_plain($value);
+}
+
+/**
+ * Implements hook_element_info().
+ */
+function media_element_info() {
+  $types = array();
+  $types['media'] = array(
+    '#input' => TRUE,
+    '#process' => array('media_element_process'),
+    // '#value_callback' => 'media_element_value',
+    '#element_validate' => array('media_element_validate'),
+    '#theme_wrappers' => array('container'),
+    '#progress_indicator' => 'throbber',
+    '#extended' => FALSE,
+    '#required' => FALSE,
+    '#media_options' => array(
+      'global' => array(
+        // Example: array('image', 'audio');
+        'types' => array(),
+        // Example: array('http', 'ftp', 'flickr');
+        'schemes' => array(),
+      ),
+    ),
+    '#attributes' => array(
+      'class' => array('media-widget', 'form-item'),
+    ),
+    '#attached' => array(
+      'library' => array(
+        array('media', 'media_browser'),
+      ),
+    ),
+  );
+  return $types;
+}
+
+/**
+ * Process callback for the media form element.
+ */
+function media_element_process(&$element, &$form_state, $form) {
+  $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : 0;
+  $file = $fid ? file_load($fid) : FALSE;
+
+  // Add the CTools modal JavaScript for the edit button if necessary.
+  ctools_include('modal');
+  ctools_include('ajax');
+  ctools_modal_add_js();
+
+  // Set some default element properties.
+  $element['#file'] = $file;
+
+  $element['title'] = array(
+    '#type' => 'item',
+    '#title' => $element['#title'],
+    '#description' => $element['#description'],
+    '#required' => $element['#required'],
+    '#weight' => -100,
+  );
+  if (isset($element['#title_display'])) {
+    $element['title']['#title_display'] = $element['#title_display'];
+  }
+
+  // @todo This should load from the JS in case of a failed form submission.
+  $element['preview'] = array(
+    '#prefix' => '<div class="preview launcher">',
+    '#suffix' => '</div>',
+    '#weight' => 0,
+    'content' => $file ? media_get_thumbnail_preview($file) : array(),
+  );
+
+  // @todo: Perhaps this language logic should be handled by JS since the state
+  // changes on client side after choosing an item.
+  $element['select'] = array(
+    '#type' => 'link',
+    '#href' => '',
+    '#title' => t('Select'),
+    '#attributes' => array('class' => array('button', 'launcher')),
+    '#options' => array('fragment' => FALSE, 'external' => TRUE),
+    '#weight' => 10,
+  );
+  // @todo Figure out how to update the preview image after the Edit modal is
+  // closed.
+  $element['edit'] = array(
+    '#type' => 'link',
+    '#href' => 'media/' . $fid . '/edit/nojs',
+    '#title' => t('Edit'),
+    '#attributes' => array(
+      'class' => array(
+        // Required for CTools modal to work.
+        'ctools-use-modal', 'use-ajax',
+        'ctools-modal-media-file-edit', 'button', 'edit',
+      ),
+    ),
+    '#weight' => 20,
+    '#access' => $file ? file_entity_access('update', $file) : TRUE, // only do perm check for existing files
+  );
+  $element['remove'] = array(
+    '#type' => 'link',
+    '#href' => '',
+    '#title' => t('Remove'),
+    '#attributes' => array('class' => array('button', 'remove')),
+    '#options' => array('fragment' => FALSE, 'external' => TRUE),
+    '#weight' => 30,
+  );
+
+  $element['fid'] = array(
+    '#type' => 'hidden',
+    '#value' => $fid,
+    '#attributes' => array('class' => array('fid')),
+    '#weight' => 100,
+  );
+
+  // Media browser attach code.
+  $element['#attached']['js'][] = drupal_get_path('module', 'media') . '/js/media.js';
+
+  $setting = array();
+  $setting['media']['elements'][$element['#id']] = $element['#media_options'];
+
+  $element['#attached']['js'][] = array(
+    'type' => 'setting',
+    'data' => $setting,
+  );
+
+  // @todo: Might need to think about this. All settings would likely apply to
+  // all media in a multi-value, but what about passing the existing fid?
+  module_load_include('inc', 'media', 'includes/media.browser');
+  media_attach_browser_js($element);
+
+  return $element;
+  // @todo: make this work for file and image fields.
+}
+
+/**
+ * Validate media form elements.
+ *
+ * The file type is validated during the upload process, but this is necessary
+ * necessary in order to respect the #required property.
+ */
+function media_element_validate(&$element, &$form_state) {
+  if ($element['#required']) {
+    $has_value = FALSE;
+    $widget_parents = $element['#array_parents'];
+    array_pop($widget_parents);
+    $items = drupal_array_get_nested_value($form_state['values'], $widget_parents);
+    foreach ($items as $value) {
+      if (is_array($value) && !empty($value['fid'])) {
+        $has_value = TRUE;
+      }
+    }
+    if (!$has_value) {
+      form_error($element, t('%element_title field is required.', array('%element_title' => $element['#title'])));
+    }
+  }
+}
+
+/**
+ * Media thumbnail render function.
+ *
+ * Returns a renderable array with the necessary classes to support a media
+ * thumbnail. Also provides default fallback images if no image is available.
+ *
+ * @param object $file
+ *   A Drupal file object.
+ *
+ * @return array
+ *   Renderable array.
+ */
+function media_get_thumbnail_preview($file, $link = NULL) {
+  // If a file has an invalid type, allow file_view_file() to work.
+  if (!file_type_is_enabled($file->type)) {
+    $file->type = file_get_type($file);
+  }
+
+  $preview = file_view_file($file, 'preview');
+  $preview['#show_names'] = TRUE;
+  $preview['#add_link'] = $link;
+  $preview['#theme_wrappers'][] = 'media_thumbnail';
+  $preview['#attached']['css'][] = drupal_get_path('module', 'media') . '/css/media.css';
+  return $preview;
+}
+
+/**
+ * Check that the media is one of the selected types.
+ *
+ * @param object $file
+ *   A Drupal file object.
+ * @param array $types
+ *   An array of media type names
+ *
+ * @return array
+ *   If the file type is not allowed, it will contain an error message.
+ *
+ * @see hook_file_validate()
+ */
+function media_file_validate_types(stdClass $file, $types) {
+  $errors = array();
+  if (!in_array(file_get_type($file), $types)) {
+    $errors[] = t('Only the following types of files are allowed to be uploaded: %types-allowed', array('%types-allowed' => implode(', ', $types)));
+  }
+
+  return $errors;
+}
+
+/**
+ * Implements hook_file_displays_alter().
+ */
+function media_file_displays_alter(&$displays, $file, $view_mode) {
+  if ($view_mode == 'preview' && empty($displays)) {
+    // We re in the media browser and this file has no formatters enabled.
+    // Instead of letting it go through theme_file_link(), pass it through
+    // theme_media_formatter_large_icon() to get our cool file icon instead.
+    $displays['file_field_media_large_icon'] = array(
+      'weight' => 0,
+      'status' => 1,
+      'settings' => NULL,
+    );
+  }
+
+  // Override the fields of the file when requested by the WYSIWYG.
+  if (isset($file->override) && isset($file->override['fields'])) {
+    $instance = field_info_instances('file', $file->type);
+    foreach ($file->override['fields'] as $field_name => $value) {
+      if (!isset($instance[$field_name]['settings']) || !isset($instance[$field_name]['settings']['wysiwyg_override']) || $instance[$field_name]['settings']['wysiwyg_override']) {
+        $file->{$field_name} = $value;}
+    }
+  }
+
+  // Alt and title are special.
+  // @see file_entity_file_load
+  $alt = variable_get('file_entity_alt', '[file:field_file_image_alt_text]');
+  $title = variable_get('file_entity_title', '[file:field_file_image_title_text]');
+
+  $replace_options = array(
+    'clear' => TRUE,
+    'sanitize' => FALSE,
+  );
+
+  // Load alt and title text from fields.
+  if (!empty($alt)) {
+    $file->alt = token_replace($alt, array('file' => $file), $replace_options);
+  }
+  if (!empty($title)) {
+    $file->title = token_replace($title, array('file' => $file), $replace_options);
+  }
+}
+
+/**
+ * Implements hook_file_default_displays_alter().
+ */
+function media_file_default_displays_alter(&$file_displays) {
+  // Image previews should be displayed using the media image style.
+  if (isset($file_displays['image__preview__file_field_image'])) {
+    $file_displays['image__preview__file_field_image']->settings['image_style'] = 'media_thumbnail';
+  }
+
+  // Video previews should be displayed using a large filetype icon.
+  if (isset($file_displays['video__preview__file_field_file_default'])) {
+    $file_displays['video__preview__file_field_file_default']->status = FALSE;
+  }
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'video__preview__file_field_media_large_icon';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = '';
+  $file_displays['video__preview__file_field_media_large_icon'] = $file_display;
+
+  // Audio previews should be displayed using a large filetype icon.
+  if (isset($file_displays['audio__preview__file_field_file_default'])) {
+    $file_displays['audio__preview__file_field_file_default']->status = FALSE;
+  }
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'audio__preview__file_field_media_large_icon';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = '';
+  $file_displays['audio__preview__file_field_media_large_icon'] = $file_display;
+
+  // Document previews should be displayed using a large filetype icon.
+  if (isset($file_displays['document__preview__file_field_file_default'])) {
+    $file_displays['document__preview__file_field_file_default']->status = FALSE;
+  }
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'document__preview__file_field_media_large_icon';
+  $file_display->weight = 50;
+  $file_display->status = TRUE;
+  $file_display->settings = '';
+  $file_displays['document__preview__file_field_media_large_icon'] = $file_display;
+}
+
+/**
+ * Implements hook_ctools_plugin_api().
+ *
+ * Lets CTools know which plugin APIs are implemented by Media module.
+ */
+function media_ctools_plugin_api($module, $api) {
+  if ($module == 'file_entity' && $api == 'file_default_displays') {
+    return array(
+      'version' => 1,
+    );
+  }
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ *
+ * This alter enhances the default admin/content/file page, addding JS and CSS.
+ * It also makes modifications to the thumbnail view by replacing the existing
+ * checkboxes and table with thumbnails.
+ */
+function media_form_file_entity_admin_file_alter(&$form, $form_state) {
+  if (!empty($form_state['values']['operation'])) {
+    // The form is being rebuilt because an operation requiring confirmation
+    // We don't want to be messing with it in this case.
+    return;
+  }
+
+  // Add the "Add file" local action, and notify users if they have files
+  // selected and they try to switch between the "Thumbnail" and "List" local
+  // tasks.
+  $path = drupal_get_path('module', 'media');
+  require_once $path . '/includes/media.browser.inc';
+  $form['#attributes']['class'][] = 'file-entity-admin-file-form';
+  $form['#attached']['js'][] = $path . '/js/media.admin.js';
+  $form['#attached']['css'][] = $path . '/css/media.css';
+  media_attach_browser_js($form);
+
+  // By default, this form contains a table select element called "files". For
+  // the 'thumbnails' tab, Media generates a thumbnail for each file and
+  // replaces the tableselect with a grid of thumbnails.
+  if (arg(3) == 'thumbnails') {
+    if (empty($form['admin']['files'])) {
+      // Display empty text if there are no files.
+      $form['admin']['files'] = array(
+        '#markup' => '<p>' . $form['files']['#empty'] . '</p>',
+      );
+    }
+    else {
+      $files = file_load_multiple(array_keys($form['admin']['files']['#options']));
+
+      $form['admin']['files'] = array(
+        '#tree' => TRUE,
+        '#prefix' => '<div class="media-display-thumbnails media-clear clearfix"><ul id="media-browser-library-list" class="media-list-thumbnails">',
+        '#suffix' => '</ul></div>',
+      );
+
+      foreach ($files as $file) {
+        $preview = media_get_thumbnail_preview($file, TRUE);
+        $form['admin']['files'][$file->fid] = array(
+          '#type' => 'checkbox',
+          '#title' => '',
+          '#prefix' => '<li>' . drupal_render($preview),
+          '#suffix' => '</li>',
+        );
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_views_api().
+ */
+function media_views_api() {
+  return array(
+    'api' => 3,
+    'path' => drupal_get_path('module', 'media'),
+  );
+}
+
+/**
+ * Implements hook_views_default_views().
+ */
+function media_views_default_views() {
+  return media_load_all_exports('media', 'views', 'view.inc', 'view');
+}
+
+/**
+ * Fetches an array of exportables from files.
+ *
+ * @param string $module
+ *   The module invoking this request. (Can be called by other modules.)
+ * @param string $directory
+ *   The subdirectory in the custom module.
+ * @param string $extension
+ *   The file extension.
+ * @param string $name
+ *   The name of the variable found in each file. Defaults to the same as
+ *   $extension.
+ *
+ * @return array
+ *   Array of $name objects.
+ */
+function media_load_all_exports($module, $directory, $extension, $name = NULL) {
+  if (!$name) {
+    $name = $extension;
+  }
+
+  $return = array();
+  // Find all the files in the directory with the correct extension.
+  $files = file_scan_directory(drupal_get_path('module', $module) . "/$directory", "/.$extension/");
+  foreach ($files as $path => $file) {
+    require $path;
+    if (isset($$name)) {
+      $return[$$name->name] = $$name;
+    }
+  }
+
+  return $return;
+}
+
+/**
+ * Returns metadata describing Media browser plugins.
+ *
+ * @see hook_media_browser_plugin_info()
+ * @see hook_media_browser_plugin_info_alter()
+ */
+function media_get_browser_plugin_info() {
+  $info = &drupal_static(__FUNCTION__);
+
+  if (!isset($info)) {
+    $cid = 'media:browser:plugin:info:' . $GLOBALS['language']->language;
+    if ($cache = cache_get($cid)) {
+      $info = $cache->data;
+    }
+    else {
+      $info = module_invoke_all('media_browser_plugin_info');
+      drupal_alter('media_browser_plugin_info', $info);
+      cache_set($cid, $info);
+    }
+  }
+
+  return $info;
+}
+
+/**
+ * Helper function to get a list of local stream wrappers.
+ */
+function media_get_local_stream_wrappers() {
+  return file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL_NORMAL);
+}
+
+/**
+ * Helper function to get a list of remote stream wrappers.
+ */
+function media_get_remote_stream_wrappers() {
+  $wrappers = file_get_stream_wrappers();
+  $wrappers = array_diff_key($wrappers, file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL_NORMAL));
+  $wrappers = array_diff_key($wrappers, file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL_HIDDEN));
+  return $wrappers;
+}
diff --git a/profiles/commons/modules/contrib/media/media.test b/profiles/commons/modules/contrib/media/media.test
new file mode 100644
index 0000000..5f2edaa
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/media.test
@@ -0,0 +1,24 @@
+<?php
+
+/**
+ * @file
+ * Tests for media.module.
+ */
+
+/**
+ * Defines base class for media test cases.
+ */
+class MediaTestHelper extends DrupalWebTestCase {
+
+  /**
+   * Enable media and file entity modules for testing.
+   */
+  public function setUp() {
+    $modules = func_get_args();
+    if (isset($modules[0]) && is_array($modules[0])) {
+      $modules = $modules[0];
+    }
+    $modules[] = 'media';
+    parent::setUp($modules);
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/media.views.inc b/profiles/commons/modules/contrib/media/media.views.inc
new file mode 100644
index 0000000..9d116bf
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/media.views.inc
@@ -0,0 +1,131 @@
+<?php
+
+/**
+ * @file
+ * Provide Views data and handlers for media.module
+ */
+
+/**
+ * Implements hook_views_plugins().
+ *
+ * Generate a list of which base-tables to enabled the plugins for.
+ */
+function media_views_plugins() {
+  $plugins = array();
+
+  // Always allow the actual file-table
+  $base = array('file_managed');
+
+  if (module_exists('search_api')) {
+    // If the Search API module exists, also allow indices of the file-entity
+    // that has the fid field indexed.
+    $indices = search_api_index_load_multiple(NULL);
+    foreach ($indices as $machine_name => $index) {
+      if ($index->item_type == 'file' && isset($index->options['fields']['fid'])) {
+        $base[] = 'search_api_index_' . $machine_name;
+      }
+    }
+  }
+
+  // Display plugin.
+  $plugins['display']['media_browser'] = array(
+    'title' => t('Media browser tab'),
+    'help' => t('Display as a tab in the media browser.'),
+    'handler' => 'media_views_plugin_display_media_browser',
+    'theme' => 'views_view',
+    'base' => $base,
+    'use ajax' => TRUE,
+    'use pager' => TRUE,
+    'accept attachments' => TRUE,
+  );
+
+  // Style plugin.
+  $plugins['style']['media_browser'] = array(
+    'title' => t('Media browser'),
+    'help' => t('Displays rows as an HTML list.'),
+    'handler' => 'media_views_plugin_style_media_browser',
+    'theme' => 'media_views_view_media_browser',
+    'base' => $base,
+    'uses row plugin' => FALSE,
+    'uses row class' => FALSE,
+    'uses options' => FALSE,
+    'uses fields' => FALSE,
+    'type' => 'normal',
+    'help topic' => 'style-media-browser',
+  );
+  return $plugins;
+}
+
+/**
+ * Display the view as a media browser.
+ */
+function template_preprocess_media_views_view_media_browser(&$vars) {
+  module_load_include('inc', 'media', 'includes/media.browser');
+  // Load file objects for each View result.
+  $fids = array();
+  foreach ($vars['rows'] as $index => $row) {
+    // The Search API module returns the row in a slightly different format,
+    // so convert it to the format that the normal file_managed table returns.
+    if (!empty($row->entity->fid)) {
+      $vars['rows'][$index]->fid = $row->entity->fid;
+    }
+    $fids[$index] = $row->fid;
+  }
+  $files = file_load_multiple($fids);
+
+  // Render the preview for each file.
+  foreach ($vars['rows'] as $index => $row) {
+    $file = $files[$row->fid];
+    // Add url/preview to the file object.
+    media_browser_build_media_item($file);
+    $vars['rows'][$index] = $file;
+    $vars['rows'][$index]->preview = $file->preview;
+  }
+
+  // Add the files to JS so that they are accessible inside the browser.
+  drupal_add_js(array('media' => array('files' => array_values($files))), 'setting');
+
+  // Add the browser parameters to the settings and that this display exists.
+  drupal_add_js(array(
+    'media' => array(
+      'browser' => array(
+        'params' => media_get_browser_params(),
+        'views' => array(
+          $vars['view']->name => array(
+            $vars['view']->current_display,
+          ),
+        ),
+      ),
+    ),
+  ), 'setting');
+
+  // Add classes and wrappers from the style plugin.
+  $handler = $vars['view']->style_plugin;
+
+  $class = explode(' ', $handler->options['class']);
+  $class = array_map('drupal_clean_css_identifier', $class);
+
+  $wrapper_class = explode(' ', $handler->options['wrapper_class']);
+  $wrapper_class = array_map('drupal_clean_css_identifier', $wrapper_class);
+
+  $vars['class'] = implode(' ', $class);
+  $vars['wrapper_class'] = implode(' ', $wrapper_class);
+  $vars['wrapper_prefix'] = '<div class="' . implode(' ', $wrapper_class) . '">';
+  $vars['wrapper_suffix'] = '</div>';
+  $vars['list_type_prefix'] = '<' . $handler->options['type'] . ' id="media-browser-library-list" class="' . implode(' ', $class) . '">';
+  $vars['list_type_suffix'] = '</' . $handler->options['type'] . '>';
+
+  // Run theming variables through a standard Views preprocess function.
+  template_preprocess_views_view_unformatted($vars);
+
+  // Add media browser javascript and CSS.
+  drupal_add_js(drupal_get_path('module', 'media') . '/js/plugins/media.views.js');
+}
+
+/**
+ * Implements hook_views_invalidate_cache().
+ */
+function media_views_invalidate_cache() {
+  cache_clear_all('media:browser:plugin', 'cache', TRUE);
+  drupal_static_reset('media_get_browser_plugin_info');
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_bulk_upload/includes/MediaBrowserBulkUpload.inc b/profiles/commons/modules/contrib/media/modules/media_bulk_upload/includes/MediaBrowserBulkUpload.inc
new file mode 100644
index 0000000..9dbc983
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_bulk_upload/includes/MediaBrowserBulkUpload.inc
@@ -0,0 +1,30 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaBrowserBulkUpload.
+ */
+
+/**
+ * Media browser plugin for showing the bulk upload form.
+ *
+ * @deprecated
+ */
+class MediaBrowserBulkUpload extends MediaBrowserUpload {
+  /**
+   * Overrides MediaBrowserPlugin::view().
+   */
+  public function view() {
+    module_load_include('inc', 'file_entity', 'file_entity.pages');
+
+    $build = array();
+    if ($this->params['multiselect']) {
+      $build['form'] = drupal_get_form('file_entity_add_upload_multiple', $this->params);
+    }
+    else {
+      $build['form'] = drupal_get_form('file_entity_add_upload', $this->params);
+    }
+
+    return $build;
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_bulk_upload/includes/media_bulk_upload.admin.inc b/profiles/commons/modules/contrib/media/modules/media_bulk_upload/includes/media_bulk_upload.admin.inc
new file mode 100644
index 0000000..bc0b77f
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_bulk_upload/includes/media_bulk_upload.admin.inc
@@ -0,0 +1,155 @@
+<?php
+
+/**
+ * @file
+ * This file contains the admin functions for the Media Bulk Upload module.
+ */
+
+/**
+ * Form callback for mass import.
+ */
+function media_bulk_upload_import($form, &$form_state) {
+  if (!isset($form_state['storage']['files'])) {
+    $form_state['storage']['step'] = 'choose';
+    $form_state['storage']['next_step'] = 'preview';
+    $form['directory'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Directory'),
+      '#description' => t('Enter the absolute directory on the web server to look for files. Subdirectories inside this directory will not be scanned.'),
+      '#required' => TRUE,
+    );
+
+    $form['pattern'] = array(
+      '#type' => 'textarea',
+      '#title' => t('Pattern'),
+      '#description' => t("Only files matching these patterns will be imported. Enter one pattern per line. The '*' character is a wildcard. Example patterns are %png_example to import all PNG files.", array('%png_example' => '*.png')),
+      '#default_value' => '*',
+      '#required' => TRUE,
+    );
+
+    $form['actions'] = array('#type' => 'actions');
+    $form['actions']['submit'] = array(
+      '#type' => 'submit',
+      '#value' => t('Preview'),
+    );
+    $form['actions']['cancel'] = array(
+      '#type' => 'link',
+      '#title' => t('Cancel'),
+      '#href' => isset($_GET['destination']) ? $_GET['destination'] : 'admin/content/file',
+    );
+  }
+  else {
+    $form['preview'] = array(
+      '#markup' => theme('item_list', array('items' => $form_state['storage']['files'])),
+    );
+
+    $form = confirm_form($form, t('Import these files?'), 'admin/content/file/import');
+  }
+  return $form;
+
+}
+
+/**
+ * Validate handler for media_import().
+ */
+function media_bulk_upload_import_validate($form, &$form_state) {
+  if ($form_state['values']['op'] != t('Confirm')) {
+    $directory = $form_state['values']['directory'];
+    $pattern = $form_state['values']['pattern'];
+    if (!is_dir($directory)) {
+      form_set_error('directory', t('The provided directory does not exist.'));
+    }
+    if (!is_readable($directory)) {
+      form_set_error('directory', t('The provided directory is not readable.'));
+    }
+
+    $pattern_quoted = preg_quote($pattern, '/');
+    $pattern_quoted = preg_replace('/(\r\n?|\n)/', '|', $pattern_quoted);
+    $pattern_quoted = strtr($pattern_quoted, array(
+      '\\|' => '|',
+      '\\*' => '.*',
+      '\\?' => '.?',
+    ));
+    $files = file_scan_directory($directory, '/^(' . $pattern_quoted . ')$/', array('recurse' => FALSE));
+    $files = array_keys($files);
+    if (empty($files)) {
+      form_set_error('pattern', t('No files were found in %directory matching the regular expression %pattern', array('%directory' => $directory, '%pattern' => $pattern_quoted)));
+    }
+    $form_state['storage']['files'] = $files;
+  }
+}
+
+/**
+ * Submit handler for media_import().
+ */
+function media_bulk_upload_import_submit($form, &$form_state) {
+  if ($form_state['values']['op'] == t('Confirm')) {
+    $files = $form_state['storage']['files'];
+    $batch = array(
+      'title' => t('Importing'),
+      'operations' => array(
+        array('media_bulk_upload_import_batch_import_files', array($files)),
+      ),
+      'finished' => 'media_bulk_upload_import_batch_import_complete',
+      'file' => drupal_get_path('module', 'media_bulk_upload') . '/includes/media_bulk_upload.admin.inc',
+    );
+    batch_set($batch);
+    return;
+
+  }
+  $form_state['rebuild'] = TRUE;
+}
+
+/**
+ * BatchAPI callback op for media import.
+ */
+function media_bulk_upload_import_batch_import_files($files, &$context) {
+  if (!isset($context['sandbox']['files'])) {
+    // This runs the first time the batch runs.
+    // This is stupid, but otherwise, I don't think it will work...
+    $context['results'] = array('success' => array(), 'errors' => array());
+    $context['sandbox']['max'] = count($files);
+    $context['sandbox']['files'] = $files;
+  }
+  $files =& $context['sandbox']['files'];
+
+  // Take a cut of files.  Let's do 10 at a time.
+  $import_batch_size = variable_get('media_bulk_upload_import_batch_size', 20);
+  $length = (count($files) > $import_batch_size) ? $import_batch_size : count($files);
+  $to_process = array_splice($files, 0, $length);
+  $image_in_message = '';
+
+  foreach ($to_process as $file) {
+    try {
+      $file_obj = media_parse_to_file($file);
+      $context['results']['success'][] = $file;
+      if (!$image_in_message) {
+        // @todo Is this load step really necessary? When there's time, test
+        //   this, and either remove it, or comment why it's needed.
+        $loaded_file = file_load($file_obj->fid);
+        $image_in_message = file_view_file($loaded_file, 'preview');
+      }
+    }
+    catch (Exception $e) {
+      $context['results']['errors'][] = $file . " Reason: " . $e->getMessage();
+    }
+  }
+
+  $context['message'] = "Importing " . theme('item_list', array('items' => $to_process));
+  // Show the image that is being imported.
+  $context['message'] .= drupal_render($image_in_message);
+
+  $context['finished'] = ($context['sandbox']['max'] - count($files)) / $context['sandbox']['max'];
+}
+
+/**
+ * BatchAPI complete callback for media import.
+ */
+function media_bulk_upload_import_batch_import_complete($success, $results, $operations) {
+  if ($results['errors']) {
+    drupal_set_message(theme('item_list', array('items' => $results['errors'])), 'error');
+  }
+  if ($results['success']) {
+    drupal_set_message(theme('item_list', array('items' => $results['success'])));
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_bulk_upload/includes/media_bulk_upload.pages.inc b/profiles/commons/modules/contrib/media/modules/media_bulk_upload/includes/media_bulk_upload.pages.inc
new file mode 100644
index 0000000..50d0b56
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_bulk_upload/includes/media_bulk_upload.pages.inc
@@ -0,0 +1,66 @@
+<?php
+
+/**
+ * @file
+ * Common pages for the Media Bulk Upload module.
+ */
+
+/**
+ * Menu callback; Edit multiple files on the same page using multiform module.
+ *
+ * @todo When http://drupal.org/node/1227706 is fixed, filter the $files
+ * array using file_access($file, 'edit').
+ *
+ * @see media_bulk_upload_file_operation_edit_multiple()
+ */
+function media_bulk_upload_file_page_edit_multiple($files) {
+  if (empty($files)) {
+    return MENU_ACCESS_DENIED;
+  }
+
+  $forms = array();
+  foreach ($files as $file) {
+    // To maintain unique form_ids, append the file id.
+    $forms[] = array('media_edit_' . $file->fid, $file);
+  }
+
+  $form = call_user_func_array('multiform_get_form', $forms);
+  $form['#attributes']['class'][] = 'media-bulk-upload-multiedit-form';
+
+  // Add the title to each 'subform'.
+  foreach (element_children($form['multiform']) as $key) {
+    $fid = $form['multiform'][$key]['fid']['#value'];
+    $file = $files[$fid];
+    $title = t('<em>Edit @type</em> @title', array('@type' => $file->type, '@title' => $file->filename));
+    $form['multiform'][$key]['#prefix'] = '<h2>' . $title . '</h2>';
+    $form['multiform'][$key]['actions']['#access'] = FALSE;
+  }
+
+  if (isset($form['buttons']['Delete'])) {
+    $form['buttons']['Delete']['#access'] = FALSE;
+  }
+
+  // Add a cancel button at the bottom of the form.
+  $form['buttons']['cancel'] = array(
+    '#type' => 'link',
+    '#title' => t('Cancel'),
+    '#weight' => 50,
+  );
+  if (isset($_GET['destination'])) {
+    $form['buttons']['cancel']['#href'] = $_GET['destination'];
+  }
+  else if (user_access('administer files')) {
+    $form['buttons']['cancel']['#href'] = 'admin/content/file';
+  }
+  else {
+    $form['buttons']['cancel']['#href'] = '<front>';
+  }
+
+  // Override the page title since each file form sets a title.
+  drupal_set_title(t('Edit multiple files'));
+
+  // Allow other modules to alter the form.
+  drupal_alter('media_bulk_upload_edit_multiple_form', $form);
+
+  return $form;
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_bulk_upload/media_bulk_upload.info b/profiles/commons/modules/contrib/media/modules/media_bulk_upload/media_bulk_upload.info
new file mode 100644
index 0000000..5171c67
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_bulk_upload/media_bulk_upload.info
@@ -0,0 +1,18 @@
+name = Media Bulk Upload
+description = Adds support for uploading multiple files at a time.
+package = Media
+core = 7.x
+
+dependencies[] = media
+dependencies[] = multiform
+dependencies[] = plupload
+
+files[] = includes/MediaBrowserBulkUpload.inc
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-2.0-alpha3+33-dev"
+core = "7.x"
+project = "media"
+datestamp = "1387568918"
+
diff --git a/profiles/commons/modules/contrib/media/modules/media_bulk_upload/media_bulk_upload.install b/profiles/commons/modules/contrib/media/modules/media_bulk_upload/media_bulk_upload.install
new file mode 100644
index 0000000..a7b0741
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_bulk_upload/media_bulk_upload.install
@@ -0,0 +1,14 @@
+<?php
+
+/**
+ * @file
+ * Install, update and uninstall functions for the Media Bulk Upload module.
+ */
+
+/**
+ * Implements hook_uninstall().
+ */
+function media_bulk_upload_uninstall() {
+  // Remove variables.
+  variable_del('media_bulk_upload_import_batch_size');
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_bulk_upload/media_bulk_upload.module b/profiles/commons/modules/contrib/media/modules/media_bulk_upload/media_bulk_upload.module
new file mode 100644
index 0000000..f0c7aed
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_bulk_upload/media_bulk_upload.module
@@ -0,0 +1,197 @@
+<?php
+
+/**
+ * @file
+ * Primarily Drupal hooks.
+ */
+
+/**
+ * Implements hook_menu().
+ */
+function media_bulk_upload_menu() {
+  $items['admin/content/file/import'] = array(
+    'title' => 'Import files',
+    'description' => 'Import files into your media library.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('media_bulk_upload_import'),
+    'access arguments' => array('import media'),
+    'type' => MENU_LOCAL_ACTION,
+    'file' => 'includes/media_bulk_upload.admin.inc',
+    'weight' => 10,
+  );
+  $items['admin/content/file/thumbnails/import'] = $items['admin/content/file/import'];
+
+  // @todo Investigate passing file IDs in query string rather than a menu
+  // argument and then deprecate media_multi_load().
+  $items['admin/content/file/edit-multiple/%media_bulk_upload_multi'] = array(
+    'title' => 'Edit multiple files',
+    'page callback' => 'media_bulk_upload_file_page_edit_multiple',
+    'page arguments' => array(4),
+    'access callback' =>  '_media_bulk_upload_file_entity_access_recursive',
+    'access arguments' => array(4, 'update'),
+    'file' => 'includes/media_bulk_upload.pages.inc',
+  );
+
+  return $items;
+}
+
+/**
+ * Implements hook_permission().
+ */
+function media_bulk_upload_permission() {
+  return array(
+    'import media' => array(
+      'title' => t('Import media files from the local filesystem'),
+      'description' => t('Simple file importer'),
+    ),
+  );
+}
+
+/**
+ * Implements hook_media_browser_plugin_info_alter().
+ */
+function media_bulk_upload_media_browser_plugin_info_alter(&$info) {
+  $info['upload']['class'] = 'MediaBrowserBulkUpload';
+}
+
+/**
+ * Implements hook_file_operations().
+ */
+function media_bulk_upload_file_operations() {
+  return array(
+    'edit_multiple' => array(
+      'label' => t('Edit selected files'),
+      'callback' => 'media_bulk_upload_file_operation_edit_multiple',
+    ),
+  );
+}
+
+/**
+ * Implements hook_form_alter().
+ */
+function media_bulk_upload_form_alter(&$form, &$form_state, $form_id) {
+  // If we're in the media browser, set the #media_browser key to true
+  // so that if an ajax request gets sent to a different path, the form
+  // still uses the media_browser_form_submit callback.
+  if (current_path() == 'media/browser' && $form_id != 'views_exposed_form') {
+    $form_state['#media_browser'] = TRUE;
+  }
+
+  // If the #media_browser key isset and is true we are using the browser
+  // popup, so add the media_browser submit handler.
+  if (!empty($form_state['#media_browser'])) {
+    $form['#submit'][] = 'media_bulk_upload_browser_form_submit';
+  }
+}
+
+/**
+ * Submit handler; direction form submissions in the media browser.
+ */
+function media_bulk_upload_browser_form_submit($form, &$form_state) {
+  $url = NULL;
+  $parameters = array();
+
+  // Multi upload.
+  if (!empty($form_state['files'])) {
+    $files = $form_state['files'];
+    $url = 'media/browser';
+    $parameters = array('query' => array('render' => 'media-popup', 'fid' => array_keys($files)));
+  }
+
+  // If $url is set, we had some sort of upload, so redirect the form.
+  if (!empty($url)) {
+    $form_state['redirect'] = array($url, $parameters);
+  }
+}
+
+/**
+ * Return a URL for editing an files.
+ *
+ * Works with an array of fids or a single fid.
+ *
+ * @param mixed $fids
+ *   An array of file IDs or a single file ID.
+ */
+function media_bulk_upload_file_edit_url($fids) {
+  if (!is_array($fids)) {
+    $fids = array($fids);
+  }
+
+  if (count($fids) > 1) {
+    return 'admin/content/file/edit-multiple/' . implode(' ', $fids);
+  }
+  else {
+    return 'file/' . reset($fids) . '/edit';
+  }
+}
+
+/**
+ * Callback for the edit operation.
+ *
+ * Redirects the user to the edit multiple files page.
+ *
+ * @param array $fids
+ *   An array of file IDs.
+ *
+ * @see media_file_page_edit_multiple()
+ */
+function media_bulk_upload_file_operation_edit_multiple($fids) {
+  // The thumbnail browser returns TRUE/FALSE for each item, so use array keys.
+  $fids = array_keys(array_filter($fids));
+  drupal_goto(media_bulk_upload_file_edit_url($fids), array('query' => drupal_get_destination()));
+}
+
+/**
+ * Implements hook_forms().
+ */
+function media_bulk_upload_forms($form_id, $args) {
+  $forms = array();
+  // To support the multiedit form, each form has to have a unique ID.
+  // So we name all the forms media_edit_N where the first requested form is
+  // media_edit_0, 2nd is media_edit_1, etc.
+  module_load_include('inc', 'file_entity', 'file_entity.pages');
+  if ($form_id != 'media_edit' && (strpos($form_id, 'media_edit') === 0)) {
+    $forms[$form_id] = array(
+      'callback' => 'file_entity_edit',
+    );
+  }
+  return $forms;
+}
+
+/**
+ * Access callback for the media-multi form.
+ *
+ * @param $files
+ *   An array of files being editing on the multiform.
+ * @param $op
+ *   A string containing the operation requested, such as 'update'.
+ * @return
+ *   TRUE if the current user has access to edit all of the files, otherwise FALSE.
+ */
+function _media_bulk_upload_file_entity_access_recursive($files, $op) {
+  // Check that the current user can access each file.
+  if (!empty($files)) {
+    foreach ($files as $file) {
+      if (!file_entity_access($op, $file)) {
+        return FALSE;
+      }
+    }
+    return TRUE;
+  }
+  return FALSE;
+}
+
+/**
+ * Load callback for %media_multi placeholder in menu paths.
+ *
+ * @param string $fids
+ *   Separated by space (e.g., "3 6 12 99"). This often appears as "+" within
+ *   URLs (e.g., "3+6+12+99"), but Drupal automatically decodes paths when
+ *   intializing $_GET['q'].
+ *
+ * @return array
+ *   An array of corresponding file entities.
+ */
+function media_bulk_upload_multi_load($fids) {
+  return file_load_multiple(explode(' ', $fids));
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaBrowserInternet.inc b/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaBrowserInternet.inc
new file mode 100644
index 0000000..919108f
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaBrowserInternet.inc
@@ -0,0 +1,27 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaBrowserInternet.
+ */
+
+/**
+ * Media browser plugin for Media Internet sources.
+ */
+class MediaBrowserInternet extends MediaBrowserPlugin {
+  /**
+   * Implements MediaBrowserPluginInterface::access().
+   */
+  public function access($account = NULL) {
+    return media_internet_access($account);
+  }
+
+  /**
+   * Implements MediaBrowserPlugin::view().
+   */
+  public function view() {
+    module_load_include('inc', 'media_internet', 'media_internet.pages');
+    $build['form'] = drupal_get_form('media_internet_add', $this->params['types'], $this->params['multiselect']);
+    return $build;
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaInternetBaseHandler.inc b/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaInternetBaseHandler.inc
new file mode 100644
index 0000000..abd71d5
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaInternetBaseHandler.inc
@@ -0,0 +1,77 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaInternetBaseHandler.
+ */
+
+/**
+ * A base class for managing the addition of Internet media.
+ *
+ * Classes extending this class manage the addition of Internet media. To
+ * achieve this, the class should parse user-submitted embed code, claim it
+ * when appropriate and save it as a managed file.
+ */
+abstract class MediaInternetBaseHandler {
+
+  /**
+   * The constructor for the MediaInternetBaseHandler class. This method is also called
+   * from the classes that extend this class and override this method.
+   */
+  public function __construct($embedCode) {
+    $this->embedCode = $embedCode;
+  }
+
+  /**
+   * Determines if this handler should claim the item.
+   *
+   * @param string $embed_code
+   *   A string of user-submitted embed code.
+   *
+   * @return boolean
+   *   Pass TRUE to claim the item.
+   */
+  abstract public function claim($embed_code);
+
+  /**
+   * Returns a file object which can be used for validation.
+   *
+   * @return StdClass
+   */
+  abstract public function getFileObject();
+
+  /**
+   * If required, implementors can validate the embedCode.
+   */
+  public function validate() {
+  }
+
+  /**
+   * Before the file has been saved, implementors may do additional operations.
+   *
+   * @param object $file_obj
+   */
+  public function preSave(&$file_obj) {
+  }
+
+  /**
+   * Saves a file to the file_managed table (with file_save).
+   *
+   * @return StdClass
+   */
+  public function save() {
+    $file_obj = $this->getFileObject();
+    $this->preSave($file_obj);
+    file_save($file_obj);
+    $this->postSave($file_obj);
+    return $file_obj;
+  }
+
+  /**
+   * After the file has been saved, implementors may do additional operations.
+   *
+   * @param object $file_obj
+   */
+  public function postSave(&$file_obj) {
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaInternetFileHandler.inc b/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaInternetFileHandler.inc
new file mode 100644
index 0000000..c5b65cf
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaInternetFileHandler.inc
@@ -0,0 +1,67 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaInternetFileHandler.
+ */
+
+/**
+ * A class for managing the addition of Internet files.
+ */
+class MediaInternetFileHandler extends MediaInternetBaseHandler {
+
+  public $fileObject;
+
+  public function preSave(&$file_obj) {
+    // Coppies the remote file locally.
+    $remote_uri = $file_obj->uri;
+    //@TODO: we should follow redirection here an save the final filename, not just the basename.
+    $local_filename = basename($remote_uri);
+    $local_filename = file_munge_filename($local_filename, variable_get('file_entity_default_allowed_extensions', 'jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm'), FALSE);
+    $local_uri = file_stream_wrapper_uri_normalize('temporary://' . $local_filename);
+    if (!@copy($remote_uri, $local_uri)) {
+      throw new Exception('Unable to add file ' . $remote_uri);
+      return;
+    }
+    // Make the current fileObject point to the local_uri, not the remote one.
+    $file_obj = file_uri_to_object($local_uri);
+  }
+
+  public function postSave(&$file_obj) {
+    $scheme = variable_get('file_default_scheme', 'public') . '://';
+    module_load_include('inc', 'file_entity', 'file_entity.pages');
+    $destination_uri = file_entity_upload_destination_uri(array());
+    $uri = file_stream_wrapper_uri_normalize($destination_uri . '/' . $file_obj->filename);
+    // Now to its new home.
+    $file_obj = file_move($file_obj, $uri, FILE_EXISTS_RENAME);
+  }
+
+  public function getFileObject() {
+    if (!$this->fileObject) {
+      $this->fileObject = file_uri_to_object($this->embedCode);
+    }
+    return $this->fileObject;
+  }
+
+  public function claim($embedCode) {
+    // Claim only valid URLs using a supported scheme.
+    if (!valid_url($embedCode, TRUE) || !in_array(file_uri_scheme($embedCode), variable_get('media_fromurl_supported_schemes', array('http', 'https', 'ftp', 'smb', 'ftps')))) {
+      return FALSE;
+    }
+
+    // This handler is intended for regular files, so don't claim URLs
+    // containing query strings or fragments.
+    if (preg_match('/[\?\#]/', $embedCode)) {
+      return FALSE;
+    }
+
+    // Since this handler copies the remote file to the local web server, do not
+    // claim a URL with an extension disallowed for media uploads.
+    $regex = '/\.(' . preg_replace('/ +/', '|', preg_quote(variable_get('file_entity_default_allowed_extensions', 'jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm'))) . ')$/i';
+    if (!preg_match($regex, basename($embedCode))) {
+      return FALSE;
+    }
+
+    return TRUE;
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaInternetNoHandlerException.inc b/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaInternetNoHandlerException.inc
new file mode 100644
index 0000000..5a199cc
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaInternetNoHandlerException.inc
@@ -0,0 +1,13 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaInternetNoHandlerException.
+ */
+
+/**
+ * A custom exception class for handling embed code with no handler.
+ */
+class MediaInternetNoHandlerException extends Exception {
+
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaInternetValidationException.inc b/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaInternetValidationException.inc
new file mode 100644
index 0000000..36322b3
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_internet/includes/MediaInternetValidationException.inc
@@ -0,0 +1,13 @@
+<?php
+
+/**
+ * @file
+ * Definition of MediaInternetValidationException.
+ */
+
+/**
+ * A custom exception class for handling file validation errors.
+ */
+class MediaInternetValidationException extends Exception {
+
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.api.php b/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.api.php
new file mode 100644
index 0000000..75548f6
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.api.php
@@ -0,0 +1,25 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by the media_internet module.
+ */
+
+/**
+ * Implements hook_media_internet_providers().
+ *
+ * Implementors return an multidim array, keyed by a class name with the
+ * following elements:
+ * - title
+ * - image (optional)
+ * - hidden: bool If the logo should be shown on form. (optional)
+ * - weight (optional)
+ */
+function hook_media_internet_providers() {
+  return array(
+    'youtube' => array(
+      'title' => 'youtube',
+      'image' => 'youtube.jpg',
+    ),
+  );
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.info b/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.info
new file mode 100644
index 0000000..74b43d9
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.info
@@ -0,0 +1,20 @@
+name = Media Internet Sources
+description = Provides an API for accessing media on various internet services
+package = Media
+core = 7.x
+
+dependencies[] = media
+
+files[] = includes/MediaBrowserInternet.inc
+files[] = includes/MediaInternetBaseHandler.inc
+files[] = includes/MediaInternetFileHandler.inc
+files[] = includes/MediaInternetNoHandlerException.inc
+files[] = includes/MediaInternetValidationException.inc
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-2.0-alpha3+33-dev"
+core = "7.x"
+project = "media"
+datestamp = "1387568918"
+
diff --git a/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.install b/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.install
new file mode 100644
index 0000000..03264d4
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.install
@@ -0,0 +1,21 @@
+<?php
+
+/**
+ * @file
+ * Install, update and uninstall functions for the Media Internet module.
+ */
+
+/**
+ * Implements hook_uninstall().
+ */
+function media_internet_uninstall() {
+  // Remove variables.
+  variable_del('media_internet_fromurl_supported_schemes');
+}
+
+/**
+ * Rebuild the registry in order to accommodate moved classes.
+ */
+function media_internet_update_7000() {
+  registry_rebuild();
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.media.inc b/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.media.inc
new file mode 100644
index 0000000..33f9539
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.media.inc
@@ -0,0 +1,35 @@
+<?php
+
+/**
+ * @file
+ * Media module integration for the Media internet module.
+ */
+
+/**
+ * Implements hook_media_browser_plugin_info().
+ */
+function media_internet_media_browser_plugin_info() {
+  $info['media_internet'] = array(
+    'title' => t('Web'),
+    'class' => 'MediaBrowserInternet',
+  );
+
+  return $info;
+}
+
+/**
+ * Implements hook_media_internet_providers().
+ *
+ * Provides a very basic handler which copies files from remote sources to the
+ * local files directory.
+ */
+function media_internet_media_internet_providers() {
+  return array(
+    'MediaInternetFileHandler' => array(
+      'title' => 'Files',
+      'hidden' => TRUE,
+      // Make it go last.
+      'weight' => 10000,
+    ),
+  );
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.module b/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.module
new file mode 100644
index 0000000..90c1231
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.module
@@ -0,0 +1,103 @@
+<?php
+
+/**
+ * Implements hook_hook_info().
+ */
+function media_internet_hook_info() {
+  $hooks = array(
+    'media_internet_providers',
+  );
+
+  return array_fill_keys($hooks, array('group' => 'media'));
+}
+
+/**
+ * Implements hook_menu().
+ */
+function media_internet_menu() {
+  $items['file/add/web'] = array(
+    'title' => 'Web',
+    'description' => 'Add internet files to your media library.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('media_internet_add'),
+    'access callback' => 'media_internet_access',
+    'type' => MENU_LOCAL_TASK,
+    'file' => 'media_internet.pages.inc',
+  );
+
+  return $items;
+}
+
+/**
+ * Access callback for the media_internet media browser plugin.
+ */
+function media_internet_access($account = NULL) {
+  return user_access('administer files', $account) || user_access('add media from remote sources', $account);
+}
+
+/**
+ * Implement hook_permission().
+ */
+function media_internet_permission() {
+  return array(
+    'add media from remote sources' => array(
+      'title' => t('Add media from remote services'),
+      'description' => t('Add media from remote sources such as other websites, YouTube, etc'),
+    ),
+  );
+}
+
+/**
+ * Gets the list of providers.
+ *
+ * A "Provider" is a bit of meta-data like a title and a logo and a class which
+ * can handle saving remote files.  Each provider is able to parse an embed code or URL
+ * and store it as a file object in file_managed.
+ */
+function media_internet_get_providers() {
+  $providers = &drupal_static(__FUNCTION__);
+
+  if (!isset($providers)) {
+    $cid = 'media:internet:providers';
+    if ($cache = cache_get($cid)) {
+      $providers = $cache->data;
+    }
+    else {
+      $providers = array();
+      foreach (module_implements('media_internet_providers') as $module) {
+        foreach (module_invoke($module, 'media_internet_providers') as $key => $provider) {
+          // Store the module here too for convinience.
+          $providers[$key] = $provider;
+          $providers[$key]['module'] = $module;
+          if (!isset($providers[$key]['weight'])) {
+            $providers[$key]['weight'] = 0;
+          }
+        }
+      }
+      uasort($providers, 'drupal_sort_weight');
+      cache_set($cid, $providers);
+    }
+  }
+
+  return $providers;
+}
+
+/**
+ * Finds the appropriate provider for a given URL or embed_string
+ *
+ * Each provider has a claim() method which it uses to tell media_internet
+ * that it should handle this input.  We cycle through all providers to find
+ * the right one.
+ *
+ * @todo: Make this into a normal hook or something because we have to instantiate
+ * each class to test and that's not right.
+ */
+function media_internet_get_provider($embed_string) {
+  foreach (media_internet_get_providers() as $class_name => $nothing) {
+    $p = new $class_name($embed_string);
+    if ($p->claim($embed_string)) {
+      return $p;
+    }
+  }
+  throw new MediaInternetNoHandlerException(t('Unable to handle the provided embed string or URL.'));
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.pages.inc b/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.pages.inc
new file mode 100644
index 0000000..2ec2307
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_internet/media_internet.pages.inc
@@ -0,0 +1,185 @@
+<?php
+
+/**
+ * @file
+ * Supports the addition of Internet media.
+ */
+
+/**
+ * Provides a form for adding media items from 3rd party sources.
+ *
+ * @todo Convert the form arguments to just one array of options/parameters.
+ */
+function media_internet_add($form, &$form_state = array(), $types = NULL) {
+  $form['embed_code'] = array(
+    '#type' => 'textfield',
+    '#title' => t('File URL'),
+    '#description' => t('Enter a URL to a file.'),
+    '#attributes' => array('class' => array('media-add-from-url')),
+    // There is no standard specifying a maximum length for a URL. Internet
+    // Explorer supports up to 2083 (http://support.microsoft.com/kb/208427)
+    // so we assume publicly available media URLs are within this limit.
+    '#maxlength' => 2083,
+    '#required' => TRUE,
+  );
+
+  // Create an array to hold potential Internet media providers.
+  $providers = array();
+
+  // Determine if there are any visible providers.
+  foreach (media_internet_get_providers() as $key => $provider) {
+    if (empty($provider['hidden']) || $provider['hidden'] != TRUE) {
+      $providers[] = array(
+        'data' => check_plain($provider['title']),
+        'class' => array(drupal_html_class($provider['title'])),
+      );
+    }
+  }
+
+  // Notify the user of any available providers.
+  if ($providers) {
+    // If any providers are enabled it is assumed that some kind of embed is supported.
+    $form['embed_code']['#title'] = t('File URL or media resource');
+    $form['embed_code']['#description'] = t('Enter a URL to a file or media resource. Many media providers also support identifying media via the embed code used to embed the media into external websites.');
+
+    // Providers are displayed in an unordered list below the embed input.
+    // Providers can easily style their own listing by targeting the unique
+    // class assigned to each list item.
+    $form['providers'] = array(
+      '#theme' => 'item_list',
+      '#title' => t('Supported providers'),
+      '#items' => $providers,
+      '#attributes' => array(
+        'class' => array('media-internet-providers'),
+      ),
+    );
+  }
+
+  $form['#validators'] = array();
+  if ($types) {
+    $form['#validators']['media_file_validate_types'] = array($types);
+  }
+
+  $form['actions'] = array(
+    '#type' => 'actions',
+  );
+  $form['actions']['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Submit'),
+  );
+
+  return $form;
+}
+
+/**
+ * Allow stream wrappers to have their chance at validation.
+ *
+ * Any module that implements hook_media_parse will have an
+ * opportunity to validate this.
+ *
+ * @see media_parse_to_uri()
+ */
+function media_internet_add_validate($form, &$form_state) {
+  // Supporting providers can now claim this input. It might be a URL, but it
+  // might be an embed code as well.
+  $embed_code = $form_state['values']['embed_code'];
+
+  try {
+    $provider = media_internet_get_provider($embed_code);
+    $provider->validate();
+  }
+  catch (MediaInternetNoHandlerException $e) {
+    form_set_error('embed_code', $e->getMessage());
+    return;
+  }
+  catch (MediaInternetValidationException $e) {
+    form_set_error('embed_code', $e->getMessage());
+    return;
+  }
+
+  $validators = $form['#validators'];
+  $file = $provider->getFileObject();
+
+  if ($validators) {
+    try {
+      $file = $provider->getFileObject();
+    }
+    catch (Exception $e) {
+      form_set_error('embed_code', $e->getMessage());
+      return;
+    }
+
+    // Check for errors. @see media_add_upload_validate calls file_save_upload().
+    // this code is ripped from file_save_upload because we just want the validation part.
+    // Call the validation functions specified by this function's caller.
+    $errors = file_validate($file, $validators);
+
+    if (!empty($errors)) {
+      $message = t('%url could not be added.', array('%url' => $embed_code));
+      if (count($errors) > 1) {
+        $message .= theme('item_list', array('items' => $errors));
+      }
+      else {
+        $message .= ' ' . array_pop($errors);
+      }
+      form_set_error('embed_code', $message);
+      return FALSE;
+    }
+  }
+
+  // @TODO: Validate that if we have no $uri that this is a valid file to
+  // save. For instance, we may only be interested in images, and it would
+  // be helpful to let the user know they passed the HTML page containing
+  // the image accidentally. That would also save us from saving the file
+  // in the submit step.
+
+  // This is kinda a hack of the same.
+
+  // This should use the file_validate routines that the upload form users.
+  // We need to fix the media_parse_to_file routine to allow for a validation.
+}
+
+/**
+ * Upload a file from a URL.
+ *
+ * This will copy a file from a remote location and store it locally.
+ *
+ * @see media_parse_to_uri()
+ * @see media_parse_to_file()
+ */
+function media_internet_add_submit($form, &$form_state) {
+  $embed_code = $form_state['values']['embed_code'];
+
+  try {
+    // Save the remote file
+    $provider = media_internet_get_provider($embed_code);
+    // Providers decide if they need to save locally or somewhere else.
+    // This method returns a file object
+    $file = $provider->save();
+  }
+  catch (Exception $e) {
+    form_set_error('embed_code', $e->getMessage());
+    return;
+  }
+
+  if (!$file->fid) {
+    form_set_error('embed_code', t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $embed_code)));
+    return;
+  }
+  else {
+    $form_state['file'] = $file;
+  }
+
+  // Redirect to the file edit page after submission.
+  if (file_entity_access('update', $file)) {
+    $destination = array('destination' => 'admin/content/file');
+    if (isset($_GET['destination'])) {
+      $destination = drupal_get_destination();
+      unset($_GET['destination']);
+    }
+    $form_state['redirect'] = array('file/' . $file->fid . '/edit', array('query' => $destination));
+  }
+  else {
+    $form_state['redirect'] = 'admin/content/file';
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_migrate_file_types/includes/media_migrate_file_types.pages.inc b/profiles/commons/modules/contrib/media/modules/media_migrate_file_types/includes/media_migrate_file_types.pages.inc
new file mode 100644
index 0000000..d7ad4d6
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_migrate_file_types/includes/media_migrate_file_types.pages.inc
@@ -0,0 +1,199 @@
+<?php
+
+/**
+ * @file
+ * Common pages for the Media Migrate File Types module.
+ */
+
+/**
+ * File type migration page.
+ *
+ * Allows site administrator to execute migration of old/disabled/deleted
+ * file types to new ones.
+ */
+function media_migrate_file_types_upgrade_file_types($form, &$form_state) {
+  $migratable_types = _media_migrate_file_types_get_migratable_file_types();
+
+  // Silently return if there are no file types that need migration.
+  if (empty($migratable_types)) {
+    return array(
+      'message' => array(
+        '#markup' => t('There are no file types that need migration. The Media Medigrate File Types module can now be safely <a href="@modules">disabled</a>.', array('@modules' => url('admin/modules'))),
+      ),
+    );
+  }
+
+  $form['message'] = array(
+    'message' => array(
+      '#markup' => t('This page allows you to migrate deprecated and/or disabled file types to new ones. It will migrate files from old type to new one and optionally migrate fields and delete old type.'),
+    ),
+  );
+
+  $form['migrate_fields'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Migrate fields'),
+    '#default_value' => TRUE,
+    '#description' => t('Migrate fields and their values from old file types to new ones.'),
+  );
+  $form['delete_old_type'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Delete old type'),
+    '#default_value' => FALSE,
+    '#description' => t('Delete old file type if migration was successful and delete operation is possible (type is not exported in code).'),
+  );
+  $form['migrate_mimes'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Migrate type mime-type'),
+    '#default_value' => TRUE,
+    '#description' => t('Move mime-type from old type to new one.'),
+  );
+
+  $form['upgradable_types'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Upgradable file types'),
+  );
+
+  $options = array('- ' . t('Do not upgrade') . ' -');
+  foreach (file_type_get_enabled_types() as $type) {
+    $options[$type->type] = $type->label;
+  }
+
+  foreach ($migratable_types as $machine_name) {
+    $type = file_type_load($machine_name);
+    if (!$type) {
+      $type = new stdClass;
+      $type->label = $type->type = $machine_name;
+    }
+    $form['upgradable_types'][$machine_name] = array(
+      '#type' => 'select',
+      '#title' => $type->label,
+      '#options' => $options,
+      '#description' => t(
+        'Select file type which you want to migrate @type to. Select %no_upgrade if type should stay as it is.',
+        array('@type' => $type->label, '%no_upgrade' => '- ' . t('Do not upgrade') . ' -')),
+    );
+  }
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Start migraton'),
+  );
+
+  return $form;
+}
+
+/**
+ * File type migration page submit handler.
+ */
+function media_migrate_file_types_upgrade_file_types_submit($form, &$form_state) {
+  $migratable_types = _media_migrate_file_types_get_migratable_file_types();
+  $migrate = FALSE;
+  foreach ($migratable_types as $type) {
+    if ($form_state['values'][$type]) {
+      $migrate = TRUE;
+      break;
+    }
+  }
+
+  // Return silently if no types were selected for migration.
+  if (!$migrate) {
+    return;
+  }
+
+  // Use confirmation page/form.
+  $query = $form_state['values'];
+  unset($query['op']);
+  unset($query['submit']);
+  unset($query['form_id']);
+  unset($query['form_token']);
+  unset($query['form_build_id']);
+
+  $form_state['redirect'] = array(
+    'admin/structure/file-types/upgrade/confirm',
+    array('query' => $query),
+  );
+}
+
+/**
+ * File types migration confirmation page.
+ */
+function media_migrate_file_types_upgrade_file_types_confirm($form, &$form_state) {
+  return confirm_form(
+    $form,
+    t('Do you really want to migrate selected file types?'),
+    'admin/structure/file-types/upgrade',
+    NULL,
+    t('Migrate')
+  );
+}
+
+/**
+ * File types migration confirmation page submit. Executes actual migration.
+ */
+function media_migrate_file_types_upgrade_file_types_confirm_submit($form, &$form_state) {
+  $migratable_types = _media_migrate_file_types_get_migratable_file_types();
+  foreach ($migratable_types as $type) {
+    if ($_GET[$type] && $bundle_new = file_type_load($_GET[$type])) {
+      // Old bundle might be deleted so let's fake some values.
+      $bundle_old = file_type_load($type);
+      if (empty($bundle_old)) {
+        $bundle_old = new stdClass;
+        $bundle_old->type = $type;
+        $bundle_old->mimetypes = array();
+        $bundle_old->export_type = 2;
+      }
+
+      // Migrate fields to new bundle.
+      if ($_GET['migrate_fields']) {
+        $old_fields = db_select('field_config_instance', 'fc')->fields('fc', array('field_name'))->condition('entity_type',  'file')->condition('bundle', $bundle_old->type)->execute()->fetchCol();
+        $new_fields = db_select('field_config_instance', 'fc')->fields('fc', array('field_name'))->condition('entity_type',  'file')->condition('bundle', $bundle_new->type)->execute()->fetchCol();
+        $fields_to_move = array_diff($old_fields, $new_fields);
+        $fields_to_drop = array_diff($old_fields, $fields_to_move);
+
+        db_update('field_config_instance')
+          ->fields(array('bundle' => $bundle_new->type))
+          ->condition('entity_type',  'file')
+          ->condition('bundle', $bundle_old->type)
+          ->condition('field_name', $fields_to_move, 'IN')
+          ->execute();
+
+        db_delete('field_config_instance')
+          ->condition('entity_type',  'file')
+          ->condition('bundle', $bundle_old->type)
+          ->condition('field_name', $fields_to_drop, 'IN')
+          ->execute();
+
+        field_cache_clear();
+        module_invoke_all('field_attach_rename_bundle', 'file', $bundle_old->type, $bundle_new->type);
+      }
+
+      // Migrate mimetypes to new bundle.
+      if ($_GET['migrate_mimes']) {
+        $changed = FALSE;
+        foreach ($bundle_old->mimetypes as $mime) {
+          if (!file_entity_match_mimetypes($bundle_new->mimetypes, $mime)) {
+            $bundle_new->mimetypes[] = $mime;
+            $changed = TRUE;
+          }
+        }
+
+        if ($changed) {
+          file_type_save($bundle_new);
+        }
+      }
+
+      // Delete old bundle.
+      if ($_GET['delete_old_type'] && $bundle_old->export_type == 1) {
+        file_type_delete($bundle_old);
+      }
+
+      // Migrate files.
+      db_update('file_managed')
+        ->fields(array('type' => $bundle_new->type))
+        ->condition('type', $bundle_old->type)
+        ->execute();
+    }
+  }
+
+  $form_state['redirect'] = 'admin/structure/file-types';
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_migrate_file_types/media_migrate_file_types.info b/profiles/commons/modules/contrib/media/modules/media_migrate_file_types/media_migrate_file_types.info
new file mode 100644
index 0000000..552bfaa
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_migrate_file_types/media_migrate_file_types.info
@@ -0,0 +1,17 @@
+name = Media Migrate File Types
+description = Provides a UI for updating legacy media types with the new file types provided by File Entity.
+package = Media
+core = 7.x
+hidden = TRUE
+
+dependencies[] = media
+
+configure = admin/structure/file-types/upgrade
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-2.0-alpha3+33-dev"
+core = "7.x"
+project = "media"
+datestamp = "1387568918"
+
diff --git a/profiles/commons/modules/contrib/media/modules/media_migrate_file_types/media_migrate_file_types.module b/profiles/commons/modules/contrib/media/modules/media_migrate_file_types/media_migrate_file_types.module
new file mode 100644
index 0000000..c9c6d46
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_migrate_file_types/media_migrate_file_types.module
@@ -0,0 +1,73 @@
+<?php
+
+/**
+ * @file
+ * Primarily Drupal hooks.
+ */
+
+/*
+ * Implements hook_system_info_alter()
+ */
+function media_migrate_file_types_system_info_alter(&$info, $file, $type) {
+  if ($type == 'module' && $file->name == 'media_migrate_file_types') {
+    $info['hidden'] = FALSE;
+  }
+}
+
+/**
+ * Implements hook_menu().
+ */
+function media_migrate_file_types_menu() {
+  $items['admin/structure/file-types/upgrade'] = array(
+    'title' => 'Upgrade types',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('media_migrate_file_types_upgrade_file_types'),
+    'access arguments' => array('administer file types'),
+    'file' => 'includes/media_migrate_file_types.pages.inc',
+    'type' => MENU_CALLBACK,
+  );
+  $items['admin/structure/file-types/upgrade/confirm'] = array(
+    'title' => 'Upgrade types',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('media_migrate_file_types_upgrade_file_types_confirm'),
+    'access arguments' => array('administer file types'),
+    'file' => 'includes/media_migrate_file_types.pages.inc',
+    'type' => MENU_CALLBACK,
+  );
+
+  return $items;
+}
+
+/**
+ * Implements hook_help().
+ */
+function media_migrate_file_types_help($path, $arg) {
+  switch ($path) {
+    case 'admin/structure/file-types':
+      if (_media_migrate_file_types_get_migratable_file_types()) {
+        drupal_set_message(t('There are disabled/deleted file types that can be migrated to their new alternatives. Visit <a href="!url">migration page</a> to get more information.', array('!url' => url('admin/structure/file-types/upgrade'))));
+      }
+      break;
+  }
+}
+
+/**
+ * Checks if there are any files that belong to disabled or deleted file
+ * types.
+ *
+ * @return Array of file types (machine names) that are candidates for
+ *   migration.
+ */
+function _media_migrate_file_types_get_migratable_file_types() {
+  $query = db_select('file_managed', 'f')
+    ->fields('f', array('type'))
+    ->distinct();
+  $types = $query->execute()->fetchCol();
+
+  $enabled_types = array();
+  foreach (file_type_get_enabled_types() as $type) {
+    $enabled_types[] = $type->type;
+  }
+
+  return array_diff($types, $enabled_types);
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/css/media_wysiwyg.css b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/css/media_wysiwyg.css
new file mode 100644
index 0000000..7b6f019
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/css/media_wysiwyg.css
@@ -0,0 +1,20 @@
+/**
+ * @file
+ * Styles for the format form.
+ *
+ * The display and layout of the Media browser assumes Drupal's Seven theme as
+ * the theme active when this is displayed.
+ */
+
+#media-wysiwyg-format-form {
+  margin: 20px;
+}
+
+#media-wysiwyg-format-form .media-item {
+  float: left;
+  margin-right: 10px;
+}
+
+#media-wysiwyg-format-form .form-item-format label {
+  display: inline;
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/images/wysiwyg-media.gif b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/images/wysiwyg-media.gif
new file mode 100644
index 0000000..495e71d
Binary files /dev/null and b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/images/wysiwyg-media.gif differ
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/includes/media_wysiwyg.file_usage.inc b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/includes/media_wysiwyg.file_usage.inc
new file mode 100644
index 0000000..cbc1e84
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/includes/media_wysiwyg.file_usage.inc
@@ -0,0 +1,179 @@
+<?php
+
+/**
+ * @file
+ * Functions related to the tracking the file usage of embedded media.
+ */
+
+/**
+ * Implements hook_field_attach_insert().
+ *
+ * Track file usage for media files included in formatted text. Note that this
+ * is heavy-handed, and should be replaced when Drupal's filter system is
+ * context-aware.
+ */
+function media_wysiwyg_field_attach_insert($entity_type, $entity) {
+  _media_wysiwyg_filter_add_file_usage_from_fields($entity_type, $entity);
+}
+
+/**
+ * Implements hook_field_attach_update().
+ *
+ * @see media_field_attach_insert().
+ */
+function media_wysiwyg_field_attach_update($entity_type, $entity) {
+  _media_wysiwyg_filter_add_file_usage_from_fields($entity_type, $entity);
+}
+
+/**
+ * Add file usage from file references in an entity's text fields.
+ */
+function _media_wysiwyg_filter_add_file_usage_from_fields($entity_type, $entity) {
+  // Track the total usage for files from all fields combined.
+  $entity_files = media_wysiwyg_entity_field_count_files($entity_type, $entity);
+
+  list($entity_id, $entity_vid, $entity_bundle) = entity_extract_ids($entity_type, $entity);
+
+  // When an entity has revisions and then is saved again NOT as new version the
+  // previous revision of the entity has be loaded to get the last known good
+  // count of files. The saved data is compared against the last version
+  // so that a correct file count can be created for that (the current) version
+  // id. This code may assume some things about entities that are only true for
+  // node objects. This should be reviewed.
+  // @TODO this conditional can probably be condensed
+  if (empty($entity->revision) && empty($entity->old_vid) && empty($entity->is_new) && ! empty($entity->original)) {
+    $old_files = media_wysiwyg_entity_field_count_files($entity_type, $entity->original);
+    foreach ($old_files as $fid => $old_file_count) {
+      // Were there more files on the node just prior to saving?
+      if (empty($entity_files[$fid])) {
+        $entity_files[$fid] = 0;
+      }
+      if ($old_file_count > $entity_files[$fid]) {
+        $deprecate = $old_file_count - $entity_files[$fid];
+        // Now deprecate this usage
+        $file = file_load($fid);
+        if ($file) {
+          file_usage_delete($file, 'media', $entity_type, $entity_id, $deprecate);
+        }
+        // Usage is deleted, nothing more to do with this file
+        unset($entity_files[$fid]);
+      }
+      // There are the same number of files, nothing to do
+      elseif ($entity_files[$fid] ==  $old_file_count) {
+        unset($entity_files[$fid]);
+      }
+      // There are more files now, adjust the difference for the greater number.
+      // file_usage incrementing will happen below.
+      else {
+        // We just need to adjust what the file count will account for the new
+        // images that have been added since the increment process below will
+        // just add these additional ones in
+        $entity_files[$fid] = $entity_files[$fid] - $old_file_count;
+      }
+    }
+  }
+
+  // Each entity revision counts for file usage. If versions are not enabled
+  // the file_usage table will have no entries for this because of the delete
+  // query above.
+  foreach ($entity_files as $fid => $entity_count) {
+    if ($file = file_load($fid)) {
+      file_usage_add($file, 'media', $entity_type, $entity_id, $entity_count);
+    }
+  }
+}
+
+/**
+ * Parse file references from an entity's text fields and return them as an array.
+ */
+function media_wysiwyg_filter_parse_from_fields($entity_type, $entity) {
+  $file_references = array();
+
+  foreach (media_wysiwyg_filter_fields_with_text_filtering($entity_type, $entity) as $field_name) {
+    if ($field_items = field_get_items($entity_type, $entity, $field_name)) {
+      foreach ($field_items as $field_item) {
+        preg_match_all(MEDIA_WYSIWYG_TOKEN_REGEX, $field_item['value'], $matches);
+        foreach ($matches[0] as $tag) {
+          $tag = str_replace(array('[[', ']]'), '', $tag);
+          $tag_info = drupal_json_decode($tag);
+          if (isset($tag_info['fid']) && $tag_info['type'] == 'media') {
+            $file_references[] = $tag_info;
+          }
+        }
+
+        preg_match_all(MEDIA_WYSIWYG_TOKEN_REGEX, $field_item['value'], $matches_alt);
+        foreach ($matches_alt[0] as $tag) {
+          $tag = urldecode($tag);
+          $tag_info = drupal_json_decode($tag);
+          if (isset($tag_info['fid']) && $tag_info['type'] == 'media') {
+            $file_references[] = $tag_info;
+          }
+        }
+      }
+    }
+  }
+
+  return $file_references;
+}
+
+/**
+ * Utility function to get the file count in this entity
+ *
+ * @param type $entity
+ * @param type $entity_type
+ * @return int
+ */
+function media_wysiwyg_entity_field_count_files($entity_type, $entity) {
+  $entity_files = array();
+  foreach (media_wysiwyg_filter_parse_from_fields($entity_type, $entity) as $file_reference) {
+    if (empty($entity_files[$file_reference['fid']])) {
+      $entity_files[$file_reference['fid']] = 1;
+    }
+    else {
+      $entity_files[$file_reference['fid']]++;
+    }
+  }
+  return $entity_files;
+}
+
+/**
+ * Implements hook_entity_delete().
+ */
+function media_wysiwyg_entity_delete($entity, $type) {
+  list($entity_id) = entity_extract_ids($type, $entity);
+
+  db_delete('file_usage')
+    ->condition('module', 'media')
+    ->condition('type', $type)
+    ->condition('id', $entity_id)
+    ->execute();
+}
+
+/**
+ * Implements hook_field_attach_delete_revision().
+ *
+ * @param type $entity_type
+ * @param type $entity
+ */
+function media_wysiwyg_field_attach_delete_revision($entity_type, $entity) {
+  list($entity_id) = entity_extract_ids($entity_type, $entity);
+  $files = media_wysiwyg_entity_field_count_files($entity_type, $entity);
+  foreach ($files as $fid => $count) {
+    if ($file = file_load($fid)) {
+      file_usage_delete($file, 'media', $entity_type , $entity_id, $count);
+    }
+  }
+}
+
+/**
+ * Implements hook_entity_dependencies().
+ */
+function media_wysiwyg_entity_dependencies($entity, $entity_type) {
+  // Go through all the entity's text fields and add a dependency on any files
+  // that are referenced there.
+  $dependencies = array();
+  foreach (media_wysiwyg_filter_parse_from_fields($entity_type, $entity) as $file_reference) {
+    $dependencies[] = array('type' => 'file', 'id' => $file_reference['fid']);
+  }
+  return $dependencies;
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/includes/media_wysiwyg.filter.inc b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/includes/media_wysiwyg.filter.inc
new file mode 100644
index 0000000..8cc99c9
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/includes/media_wysiwyg.filter.inc
@@ -0,0 +1,356 @@
+<?php
+
+/**
+ * @file
+ * Functions related to the WYSIWYG editor and the media input filter.
+ */
+
+define('MEDIA_WYSIWYG_TOKEN_REGEX', '/\[\[.*?\]\]/s');
+
+/**
+ * Filter callback for media markup filter.
+ *
+ * @TODO check for security probably pass text through filter_xss
+ */
+function media_wysiwyg_filter($text) {
+  $text = preg_replace_callback(MEDIA_WYSIWYG_TOKEN_REGEX, 'media_wysiwyg_token_to_markup', $text);
+  return $text;
+}
+
+/**
+ * Parses the contents of a CSS declaration block.
+ *
+ * @param string $declarations
+ *   One or more CSS declarations delimited by a semicolon. The same as a CSS
+ *   declaration block (see http://www.w3.org/TR/CSS21/syndata.html#rule-sets),
+ *   but without the opening and closing curly braces. Also the same as the
+ *   value of an inline HTML style attribute.
+ *
+ * @return array
+ *   A keyed array. The keys are CSS property names, and the values are CSS
+ *   property values.
+ */
+function media_wysiwyg_parse_css_declarations($declarations) {
+  $properties = array();
+  foreach (array_map('trim', explode(";", $declarations)) as $declaration) {
+    if ($declaration != '') {
+      list($name, $value) = array_map('trim', explode(':', $declaration, 2));
+      $properties[strtolower($name)] = $value;
+    }
+  }
+  return $properties;
+}
+
+/**
+ * Replace callback to convert a media file tag into HTML markup.
+ *
+ * @param string $match
+ *   Takes a match of tag code
+ * @param bool $wysiwyg
+ *   Set to TRUE if called from within the WYSIWYG text area editor.
+ *
+ * @return string
+ *   The HTML markup representation of the tag, or an empty string on failure.
+ *
+ * @see media_wysiwyg_get_file_without_label()
+ * @see hook_media_wysiwyg_token_to_markup_alter()
+ */
+function media_wysiwyg_token_to_markup($match, $wysiwyg = FALSE) {
+  $settings = array();
+  $match = str_replace("[[", "", $match);
+  $match = str_replace("]]", "", $match);
+  $tag = $match[0];
+
+  try {
+    if (!is_string($tag)) {
+      throw new Exception('Unable to find matching tag');
+    }
+
+    $tag_info = drupal_json_decode($tag);
+
+    if (!isset($tag_info['fid'])) {
+      throw new Exception('No file Id');
+    }
+
+    // Ensure the 'link_text' key is always defined.
+    if (!isset($tag_info['link_text'])) {
+      $tag_info['link_text'] = NULL;
+    }
+
+    // Ensure a valid view mode is being requested.
+    if (!isset($tag_info['view_mode'])) {
+      $tag_info['view_mode'] = variable_get('media_wysiwyg_wysiwyg_default_view_mode', 'full');
+    }
+    elseif ($tag_info['view_mode'] != 'default') {
+      $file_entity_info = entity_get_info('file');
+      if (!in_array($tag_info['view_mode'], array_keys($file_entity_info['view modes']))) {
+        // Media 1.x defined some old view modes that have been superseded by
+        // more semantically named ones in File Entity. The media_update_7203()
+        // function updates field settings that reference the old view modes,
+        // but it's impractical to update all text content, so adjust
+        // accordingly here.
+        static $view_mode_updates = array(
+          'media_preview' => 'preview',
+          'media_small' => 'teaser',
+          'media_large' => 'full',
+        );
+        if (isset($view_mode_updates[$tag_info['view_mode']])) {
+          $tag_info['view_mode'] = $view_mode_updates[$tag_info['view_mode']];
+        }
+        else {
+          throw new Exception('Invalid view mode');
+        }
+      }
+    }
+
+    $file = file_load($tag_info['fid']);
+    if (!$file) {
+      throw new Exception('Could not load media object');
+    }
+    $tag_info['file'] = $file;
+
+    // The class attributes is a string, but drupal requires it to be
+    // an array, so we fix it here.
+    if (!empty($tag_info['attributes']['class'])) {
+      $tag_info['attributes']['class'] = explode(" ", $tag_info['attributes']['class']);
+    }
+
+    // Grab the potentially overrided fields from the file.
+    $fields = media_wysiwyg_filter_field_parser($tag_info);
+
+    $attributes = is_array($tag_info['attributes']) ? $tag_info['attributes'] : array();
+    $attribute_whitelist = variable_get('media_wysiwyg_wysiwyg_allowed_attributes', _media_wysiwyg_wysiwyg_allowed_attributes_default());
+    $settings['attributes'] = array_intersect_key($attributes, array_flip($attribute_whitelist));
+    $settings['fields'] = $fields;
+
+    if (!empty($tag_info['attributes']) && is_array($tag_info['attributes'])) {
+      $settings['attributes'] = array_intersect_key($tag_info['attributes'], array_flip($attribute_whitelist));
+      $settings['fields'] = $fields;
+
+      // Many media formatters will want to apply width and height independently
+      // of the style attribute or the corresponding HTML attributes, so pull
+      // these two out into top-level settings. Different WYSIWYG editors have
+      // different behavior with respect to whether they store user-specified
+      // dimensions in the HTML attributes or the style attribute - check both.
+      // Per http://www.w3.org/TR/html5/the-map-element.html#attr-dim-width, the
+      // HTML attributes are merely hints: CSS takes precedence.
+      if (isset($settings['attributes']['style'])) {
+        $css_properties = media_wysiwyg_parse_css_declarations($settings['attributes']['style']);
+        foreach (array('width', 'height') as $dimension) {
+          if (isset($css_properties[$dimension]) && substr($css_properties[$dimension], -2) == 'px') {
+            $settings[$dimension] = substr($css_properties[$dimension], 0, -2);
+          }
+          elseif (isset($settings['attributes'][$dimension])) {
+            $settings[$dimension] = $settings['attributes'][$dimension];
+          }
+        }
+      }
+    }
+  }
+  catch (Exception $e) {
+    watchdog('media', 'Unable to render media from %tag. Error: %error', array('%tag' => $tag, '%error' => $e->getMessage()));
+    return '';
+  }
+
+  // If the tag has link text stored with it, override the filename with it for
+  // the rest of this function, so that if the file is themed as a link, the
+  // desired text will be used (see, for example, theme_file_link()).
+  // @todo: Try to find a less hacky way to do this.
+  if (isset($tag_info['link_text'])) {
+    // The link text will have characters such as "&" encoded for HTML, but the
+    // filename itself needs the raw value when it is used to build the link,
+    // in order to avoid double encoding.
+    $file->filename = decode_entities($tag_info['link_text']);
+  }
+
+  if ($wysiwyg) {
+    $settings['wysiwyg'] = $wysiwyg;
+    // If sending markup to a WYSIWYG, we need to pass the file infomation so
+    // that a inline macro can be generated when the WYSIWYG is detached.
+    // The WYSIWYG plugin is expecting this information in the format of a
+    // urlencoded JSON string stored in the data-file_info attribute of the
+    // element.
+    $element = media_wysiwyg_get_file_without_label($file, $tag_info['view_mode'], $settings);
+    $data = drupal_json_encode(array(
+      'type' => 'media',
+      'fid' => $file->fid,
+      'view_mode' => $tag_info['view_mode'],
+      'link_text' => $tag_info['link_text'],
+    ));
+    $element['#attributes']['data-file_info'] = urlencode($data);
+    $element['#attributes']['class'][] = 'media-element';
+  }
+  else {
+    // Display the field elements.
+    $element = array();
+    $element['content']['file'] = media_wysiwyg_get_file_without_label($file, $tag_info['view_mode'], $settings);
+    // Overwrite or set the file #alt attribute if it has been set in this
+    // instance.
+    if (!empty($element['content']['file']['#attributes']['alt'])) {
+      $element['content']['file']['#alt'] = $element['content']['file']['#attributes']['alt'];
+    }
+    // Overwrite or set the file #title attribute if it has been set in this
+    // instance.
+    if (!empty($element['content']['file']['#attributes']['title'])) {
+      $element['content']['file']['#title'] = $element['content']['file']['#attributes']['title'];
+    }
+    field_attach_prepare_view('file', array($file->fid => $file), $tag_info['view_mode']);
+    entity_prepare_view('file', array($file->fid => $file));
+    $element['content'] += field_attach_view('file', $file, $tag_info['view_mode']);
+    if (count(element_children($element['content'])) > 1) {
+      // Add surrounding divs to group them together.
+      // We dont want divs when there are no additional fields to allow files
+      // to display inline with text, without breaking p tags.
+      $element['content']['#type'] = 'container';
+      $element['content']['#attributes']['class'] = array(
+        'media',
+        'media-element-container',
+        'media-' . $element['content']['file']['#view_mode']
+      );
+    }
+  }
+  drupal_alter('media_wysiwyg_token_to_markup', $element, $tag_info, $settings);
+  return drupal_render($element);
+}
+
+
+
+/**
+ * Parse the field array from the collapsed AJAX string.
+ */
+function media_wysiwyg_filter_field_parser($tag_info) {
+  $fields = array();
+  if (isset($tag_info['fields'])) {
+    foreach($tag_info['fields'] as $field_name => $field_value) {
+      if (strpos($field_name, 'field_') === 0) {
+        $parsed_field = explode('[', str_replace(']', '', $field_name));
+        if(isset($parsed_field[2])) {
+          if(isset($parsed_field[3])) {
+            $fields[$parsed_field[0]][$parsed_field[1]][$parsed_field[2]][$parsed_field[3]] = $field_value;
+          } else {
+            $fields[$parsed_field[0]][$parsed_field[1]][$parsed_field[2]] = $field_value;
+          }
+        } else {
+          $fields[$parsed_field[0]][$parsed_field[1]] = $field_value;
+        }
+      }
+    }
+  }
+  return $fields;
+}
+/**
+ * Builds a map of media tags in the element.
+ *
+ * Builds a map of the media tags in an element that are being rendered to their
+ * rendered HTML. The map is stored in JS, so we can transform them when the
+ * editor is being displayed.
+ */
+function media_wysiwyg_pre_render_text_format($element) {
+  // filter_process_format() copies properties to the expanded 'value' child
+  // element.
+  if (!isset($element['format'])) {
+    return $element;
+  }
+
+  $field = &$element['value'];
+  $settings = array(
+    'field' => $field['#id'],
+  );
+
+  $tagmap = _media_wysiwyg_generate_tagMap($field['#value']);
+
+  if (isset($tagmap)) {
+    drupal_add_js(array('tagmap' => $tagmap), 'setting');
+  }
+  return $element;
+}
+
+/**
+ * Creates map of inline media tags.
+ *
+ * Generates an array of [inline tags] => <html> to be used in filter
+ * replacement and to add the mapping to JS.
+ *
+ * @param string $text
+ *   The String containing text and html markup of textarea
+ *
+ * @return array
+ *   An associative array with tag code as key and html markup as the value.
+ *
+ * @see media_process_form()
+ * @see media_token_to_markup()
+ */
+function _media_wysiwyg_generate_tagMap($text) {
+  // Making $tagmap static as this function is called many times and
+  // adds duplicate markup for each tag code in Drupal.settings JS,
+  // so in media_process_form it adds something like tagCode:<markup>,
+  // <markup> and when we replace in attach see two duplicate images
+  // for one tagCode. Making static would make function remember value
+  // between function calls. Since media_process_form is multiple times
+  // with same form, this function is also called multiple times.
+  static $tagmap = array();
+  preg_match_all("/\[\[.*?\]\]/s", $text, $matches, PREG_SET_ORDER);
+  foreach ($matches as $match) {
+    // We see if tagContent is already in $tagMap, if not we add it
+    // to $tagmap.  If we return an empty array, we break embeddings of the same
+    // media multiple times.
+    if (empty($tagmap[$match[0]])) {
+      // @TODO: Total HACK, but better than nothing.
+      // We should find a better way of cleaning this up.
+      if ($markup_for_media = media_wysiwyg_token_to_markup($match, TRUE)) {
+        $tagmap[$match[0]] = $markup_for_media;
+      }
+      else {
+        $missing = file_create_url(drupal_get_path('module', 'media') . '/images/icons/default/image-x-generic.png');
+        $tagmap[$match[0]] = '<div><img src="' . $missing . '" width="100px" height="100px"/></div>';
+      }
+    }
+  }
+  return $tagmap;
+}
+
+/**
+ * Return a list of view modes allowed for a file embedded in the WYSIWYG.
+ *
+ * @param object $file
+ *   A file entity.
+ *
+ * @return array
+ *   An array of view modes that can be used on the file when embedded in the
+ *   WYSIWYG.
+ */
+function media_wysiwyg_get_wysiwyg_allowed_view_modes($file) {
+  $enabled_view_modes = &drupal_static(__FUNCTION__, array());
+
+  // @todo Add more caching for this.
+  if (!isset($enabled_view_modes[$file->type])) {
+    $enabled_view_modes[$file->type] = array();
+
+    // Add the default view mode by default.
+    $enabled_view_modes[$file->type]['default'] = array('label' => t('Default'), 'custom settings' => TRUE);
+
+    $entity_info = entity_get_info('file');
+    $view_mode_settings = field_view_mode_settings('file', $file->type);
+    foreach ($entity_info['view modes'] as $view_mode => $view_mode_info) {
+      // Do not show view modes that don't have their own settings and will
+      // only fall back to the default view mode.
+      if (empty($view_mode_settings[$view_mode]['custom_settings'])) {
+        continue;
+      }
+
+      // Don't present the user with an option to choose a view mode in which
+      // the file is hidden.
+      $extra_fields = field_extra_fields_get_display('file', $file->type, $view_mode);
+      if (empty($extra_fields['file']['visible'])) {
+        continue;
+      }
+
+      // Add the view mode to the list of enabled view modes.
+      $enabled_view_modes[$file->type][$view_mode] = $view_mode_info;
+    }
+  }
+
+  $view_modes = $enabled_view_modes[$file->type];
+  drupal_alter('media_wysiwyg_wysiwyg_allowed_view_modes', $view_modes, $file);
+  return $view_modes;
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/includes/media_wysiwyg.pages.inc b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/includes/media_wysiwyg.pages.inc
new file mode 100644
index 0000000..bd11072
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/includes/media_wysiwyg.pages.inc
@@ -0,0 +1,112 @@
+<?php
+
+/**
+ * @file
+ * Common pages for the Media WYSIWYG module.
+ */
+
+/**
+ * Form callback used when embedding media.
+ *
+ * Allows the user to pick a format for their media file.
+ * Can also have additional params depending on the media type.
+ */
+function media_wysiwyg_format_form($form, $form_state, $file) {
+  $form = array();
+  $form['#media'] = $file;
+
+  // Allow for overrides to the fields.
+  $query_fields = isset($_GET['fields']) ? drupal_json_decode($_GET['fields']) : array();
+  $fields = media_wysiwyg_filter_field_parser(array('fields' => $query_fields), $file);
+
+  $view_modes = media_wysiwyg_get_wysiwyg_allowed_view_modes($file);
+  $formats = $options = array();
+  foreach ($view_modes as $view_mode => $view_mode_info) {
+    // @TODO: Display more verbose information about which formatter and what it
+    // does.
+    $options[$view_mode] = $view_mode_info['label'];
+    $element = media_wysiwyg_get_file_without_label($file, $view_mode, array('wysiwyg' => TRUE));
+
+    // Make a pretty name out of this.
+    $formats[$view_mode] = drupal_render($element);
+  }
+
+  // Add the previews back into the form array so they can be altered.
+  $form['#formats'] = &$formats;
+
+  if (!count($formats)) {
+    throw new Exception('Unable to continue, no available formats for displaying media.');
+    return;
+  }
+
+  // Allow for overrides to the display format.
+  $default_view_mode = is_array($query_fields) && isset($query_fields['format']) ? $query_fields['format'] : variable_get('media_wysiwyg_wysiwyg_default_view_mode', 'full');
+  if (!isset($formats[$default_view_mode])) {
+    $default_view_mode = key($formats);
+  }
+
+  // Add the previews by reference so that they can easily be altered by
+  // changing $form['#formats'].
+  $settings['media']['formatFormFormats'] = &$formats;
+  $form['#attached']['js'][] = array('data' => $settings, 'type' => 'setting');
+
+  // Add the required libraries, JavaScript and CSS for the form.
+  $form['#attached']['library'][] = array('media', 'media_base');
+  $form['#attached']['library'][] = array('system', 'form');
+  $form['#attached']['css'][] = drupal_get_path('module', 'media_wysiwyg') . '/css/media_wysiwyg.css';
+  $form['#attached']['js'][] = drupal_get_path('module', 'media_wysiwyg') . '/js/media_wysiwyg.format_form.js';
+
+  $form['title'] = array(
+    '#markup' => t('Embedding %filename', array('%filename' => $file->filename)),
+  );
+
+  $preview = media_get_thumbnail_preview($file);
+
+  $form['preview'] = array(
+    '#type' => 'markup',
+    '#title' => check_plain(basename($file->uri)),
+    '#markup' => drupal_render($preview),
+  );
+
+  // These will get passed on to WYSIWYG.
+  $form['options'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('options'),
+  );
+
+  $form['options']['format'] = array(
+    '#type' => 'select',
+    '#title' => t('Display as'),
+    '#options' => $options,
+    '#default_value' => $default_view_mode,
+    '#description' => t('Choose the type of display you would like for this
+      file. Please be aware that files may display differently than they do when
+      they are inserted into an editor.')
+  );
+
+  // Add fields from the file, so that we can override them if neccesary.
+  $form['options']['fields'] = array();
+  foreach ($fields as $field_name => $field_value) {
+    $file->{$field_name} = $field_value;
+  }
+  field_attach_form('file', $file, $form['options']['fields'], $form_state);
+  $instance = field_info_instances('file', $file->type);
+  foreach ($instance as $field_name => $field_value) {
+    if (isset($instance[$field_name]['settings']) && isset($instance[$field_name]['settings']['wysiwyg_override']) && !$instance[$field_name]['settings']['wysiwyg_override']) {
+      unset($form['options']['fields'][$field_name]);
+    }
+  }
+
+  // Similar to a form_alter, but we want this to run first so that
+  // media.types.inc can add the fields specific to a given type (like alt tags
+  // on media). If implemented as an alter, this might not happen, making other
+  // alters not be able to work on those fields.
+  // @todo: We need to pass in existing values for those attributes.
+  drupal_alter('media_wysiwyg_format_form_prepare', $form, $form_state, $file);
+
+  if (!element_children($form['options'])) {
+    $form['options']['#attributes'] = array('style' => 'display:none');
+  }
+
+  return $form;
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/includes/media_wysiwyg.uuid.inc b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/includes/media_wysiwyg.uuid.inc
new file mode 100644
index 0000000..3d228e3
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/includes/media_wysiwyg.uuid.inc
@@ -0,0 +1,88 @@
+<?php
+
+/**
+ * @file
+ * Functions related to adding UUID support to embedded media.
+ */
+
+/**
+ * Implements hook_entity_uuid_load().
+ */
+function media_wysiwyg_entity_uuid_load(&$entities, $entity_type) {
+  // Go through all the entity's text fields and replace file IDs in media
+  // tokens with the corresponding UUID.
+  foreach ($entities as $entity) {
+    media_wysiwyg_filter_replace_tokens_in_all_text_fields($entity_type, $entity, 'media_wysiwyg_token_fid_to_uuid');
+  }
+}
+
+/**
+ * Implements hook_entity_uuid_presave().
+ */
+function media_wysiwyg_entity_uuid_presave(&$entity, $entity_type) {
+  // Go through all the entity's text fields and replace UUIDs in media tokens
+  // with the corresponding file ID.
+  media_wysiwyg_filter_replace_tokens_in_all_text_fields($entity_type, $entity, 'media_wysiwyg_token_uuid_to_fid');
+}
+
+/**
+ * Replaces media tokens in an entity's text fields, using the specified callback function.
+ */
+function media_wysiwyg_filter_replace_tokens_in_all_text_fields($entity_type, $entity, $callback) {
+  $text_field_names = media_wysiwyg_filter_fields_with_text_filtering($entity_type, $entity);
+  foreach ($text_field_names as $field_name) {
+    if (!empty($entity->{$field_name})) {
+      $field = field_info_field($field_name);
+      $all_languages = field_available_languages($entity_type, $field);
+      $field_languages = array_intersect($all_languages, array_keys($entity->{$field_name}));
+      foreach ($field_languages as $language) {
+        if (!empty($entity->{$field_name}[$language])) {
+          foreach ($entity->{$field_name}[$language] as &$item) {
+            $item['value'] = preg_replace_callback(MEDIA_WYSIWYG_TOKEN_REGEX, $callback, $item['value']);
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Callback to replace file IDs with UUIDs in a media token.
+ */
+function media_wysiwyg_token_fid_to_uuid($matches) {
+  return _media_wysiwyg_token_uuid_replace($matches, 'entity_get_uuid_by_id');
+}
+
+/**
+ * Callback to replace UUIDs with file IDs in a media token.
+ */
+function media_wysiwyg_token_uuid_to_fid($matches) {
+  return _media_wysiwyg_token_uuid_replace($matches, 'entity_get_id_by_uuid');
+}
+
+/**
+ * Helper function to replace UUIDs with file IDs or vice versa.
+ *
+ * @param array $matches
+ *   An array of matches for media tokens, from a preg_replace_callback()
+ *   callback function.
+ * @param string $entity_uuid_function
+ *   Either 'entity_get_uuid_by_id' (to replace file IDs with UUIDs in the
+ *   token) or 'entity_get_id_by_uuid' (to replace UUIDs with file IDs).
+ *
+ * @return string
+ *   A string representing the JSON-encoded token, with the appropriate
+ *   replacement between file IDs and UUIDs.
+ */
+function _media_wysiwyg_token_uuid_replace($matches, $entity_uuid_function) {
+  $tag = $matches[0];
+  $tag = str_replace(array('[[', ']]'), '', $tag);
+  $tag_info = drupal_json_decode($tag);
+  if (isset($tag_info['fid'])) {
+    if ($new_ids = $entity_uuid_function('file', array($tag_info['fid']))) {
+      $new_id = reset($new_ids);
+      $tag_info['fid'] = $new_id;
+    }
+  }
+  return '[[' . drupal_json_encode($tag_info) . ']]';
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/js/media_wysiwyg.filter.js b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/js/media_wysiwyg.filter.js
new file mode 100644
index 0000000..7de50af
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/js/media_wysiwyg.filter.js
@@ -0,0 +1,208 @@
+/**
+ *  @file
+ *  File with utilities to handle media in html editing.
+ */
+(function ($) {
+
+  Drupal.media = Drupal.media || {};
+  /**
+   * Utility to deal with media tokens / placeholders.
+   */
+  Drupal.media.filter = {
+    /**
+     * Replaces media tokens with the placeholders for html editing.
+     * @param content
+     */
+    replaceTokenWithPlaceholder: function(content) {
+      Drupal.media.filter.ensure_tagmap()
+      var tagmap = Drupal.settings.tagmap,
+        matches = content.match(/\[\[.*?\]\]/g),
+        media_definition;
+
+      if (matches) {
+        for (var macro in tagmap) {
+          // We cant use indexOf because of IE.
+          var index = $.inArray(macro, matches);
+          if (index !== -1) {
+            var media_json = macro.replace('[[', '').replace(']]', '');
+
+            // Make sure that the media JSON is valid.
+            try {
+              media_definition = JSON.parse(media_json);
+            }
+            catch (err) {
+              media_definition = null;
+            }
+            if (media_definition) {
+              // Apply attributes.
+              var element = Drupal.media.filter.create_element(tagmap[macro], media_definition);
+              var markup = Drupal.media.filter.outerHTML(element);
+
+              content = content.replace(macro, markup);
+            }
+          }
+        }
+      }
+      return content;
+    },
+
+    /**
+     * Replaces the placeholders for html editing with the media tokens to store.
+     * @param content
+     */
+    replacePlaceholderWithToken: function(content) {
+      Drupal.media.filter.ensure_tagmap();
+      // Convert all xhtml markup to html for reliable matching/replacing.
+      content = content.replace(/[\s]\/\>/g, '>');
+
+      // Re-build the macros in case any element has changed in the editor.
+      $('.media-element', content).each(function(i, element) {
+        var markup = Drupal.media.filter.outerHTML($(element));
+          macro = Drupal.media.filter.create_macro($(element));
+
+        // Store the macro => html for more efficient rendering in
+        // replaceTokenWithPlaceholder().
+        Drupal.settings.tagmap[macro] = markup;
+        // Replace the media element with its macro.
+        content = content.replace(markup, macro);
+      });
+
+      return content;
+    },
+
+    /**
+     * Serializes file information as a url-encoded JSON object and stores it as a
+     * data attribute on the html element.
+     *
+     * @param html (string)
+     *    A html element to be used to represent the inserted media element.
+     * @param info (object)
+     *    A object containing the media file information (fid, view_mode, etc).
+     */
+    create_element: function (html, info) {
+      if ($('<div></div>').append(html).text().length === html.length) {
+        // Element is not an html tag. Surround it in a span element
+        // so we can pass the file attributes.
+        html = '<span>' + html + '</span>';
+      }
+      var element = $(html);
+
+      // Move attributes from the file info array to the placeholder element.
+      if (info.attributes) {
+        $.each(Drupal.settings.media.wysiwyg_allowed_attributes, function(i, a) {
+          if (info.attributes[a]) {
+            element.attr(a, info.attributes[a]);
+          }
+        });
+        delete(info.attributes);
+      }
+
+      // Important to url-encode the file information as it is being stored in an
+      // html data attribute.
+      info.type = info.type || "media";
+      element.attr('data-file_info', encodeURI(JSON.stringify(info)));
+
+      // Adding media-element class so we can find markup element later.
+      var classes = ['media-element'];
+
+      if(info.view_mode){
+        classes.push('file-' + info.view_mode.replace(/_/g, '-'));
+      }
+      element.addClass(classes.join(' '));
+
+      return element;
+    },
+
+    /**
+     * Create a macro representation of the inserted media element.
+     *
+     * @param element (jQuery object)
+     *    A media element with attached serialized file info.
+     */
+    create_macro: function (element) {
+      var file_info = Drupal.media.filter.extract_file_info(element);
+      if (file_info) {
+        return '[[' + JSON.stringify(file_info) + ']]';
+      }
+      return false;
+    },
+
+    /**
+     * Extract the file info from a WYSIWYG placeholder element as JSON.
+     *
+     * @param element (jQuery object)
+     *    A media element with attached serialized file info.
+     */
+    extract_file_info: function (element) {
+      var file_json = $.data(element, 'file_info') || element.data('file_info'),
+        file_info,
+        value;
+
+      try {
+        file_info = JSON.parse(decodeURIComponent(file_json));
+      }
+      catch (err) {
+        file_info = null;
+      }
+
+      if (file_info) {
+        file_info.attributes = {};
+
+        // Extract whitelisted attributes.
+        $.each(Drupal.settings.media.wysiwyg_allowed_attributes, function(i, a) {
+          if (value = element.attr(a)) {
+            file_info.attributes[a] = value;
+          }
+        });
+        delete(file_info.attributes['data-file_info']);
+      }
+
+      return file_info;
+    },
+
+    /**
+     * Gets the HTML content of an element.
+     *
+     * @param element (jQuery object)
+     */
+    outerHTML: function (element) {
+      return element[0].outerHTML || $('<div>').append(element.eq(0).clone()).html();
+    },
+
+    /**
+     * Gets the wrapped HTML content of an element to insert into the wysiwyg.
+     *
+     * It also registers the element in the tag map so that the token
+     * replacement works.
+     *
+     * @param element (jQuery object) The element to insert.
+     *
+     * @see Drupal.media.filter.replacePlaceholderWithToken()
+     */
+    getWysiwygHTML: function (element) {
+      // Create the markup and the macro.
+      var markup = Drupal.media.filter.outerHTML(element),
+        macro = Drupal.media.filter.create_macro(element);
+
+      // Store macro/markup in the tagmap.
+      Drupal.media.filter.ensure_tagmap();
+      var i = 1;
+      for (var key in Drupal.settings.tagmap) {
+        i++;
+      }
+      Drupal.settings.tagmap[macro] = markup;
+
+      // Return the html code to insert in an editor and use it with
+      // replacePlaceholderWithToken()
+      return markup;
+    },
+
+    /**
+     * Ensures the tag map has been initialized and returns it.
+     */
+    ensure_tagmap: function () {
+      Drupal.settings.tagmap = Drupal.settings.tagmap || {};
+      return Drupal.settings.tagmap;
+    }
+  }
+})(jQuery);
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/js/media_wysiwyg.format_form.js b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/js/media_wysiwyg.format_form.js
new file mode 100644
index 0000000..23413a8
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/js/media_wysiwyg.format_form.js
@@ -0,0 +1,57 @@
+
+/**
+ *  @file
+ *  Attach behaviors to formatter radio select when selecting a media's display
+ *  formatter.
+ */
+
+(function ($) {
+namespace('Drupal.media.formatForm');
+
+Drupal.media.mediaFormatSelected = {};
+
+Drupal.behaviors.mediaFormatForm = {
+  attach: function (context, settings) {
+
+    // Add "Submit" and "Cancel" buttons inside the IFRAME that trigger the
+    // behavior of the hidden "OK" and "Cancel" buttons that are outside the
+    // IFRAME. See Drupal.media.browser.validateButtons() for more details.
+
+    // @note I think this should be handled in media.browser.js in
+    //       Drupal.media.browser.validateButtons but I'm not sure how crufty
+    //       this particular functionality is. We should evaluate if it is still
+    //       needed.
+
+    // @TODO can these be added to the content being displayed via form_alter?
+
+    // Adding the buttons should only be done once in order to prevent multiple
+    // buttons from being added if part of the form is updated via AJAX
+    $('#media-wysiwyg-format-form').once('format', function() {
+      $('<a class="button fake-ok">' + Drupal.t('Submit') + '</a>').appendTo($('#media-wysiwyg-format-form')).bind('click', Drupal.media.formatForm.submit);
+      $('<a class="button fake-cancel">' + Drupal.t('Cancel') + '</a>').appendTo($('#media-wysiwyg-format-form')).bind('click', Drupal.media.formatForm.submit);
+    });
+  }
+};
+
+Drupal.media.formatForm.getOptions = function () {
+  // Get all the values
+  var ret = {}; $.each($('#media-wysiwyg-format-form fieldset#edit-options *').serializeArray(), function (i, field) { ret[field.name] = field.value; });
+  return ret;
+};
+
+Drupal.media.formatForm.getFormattedMedia = function () {
+  var formatType = $("select#edit-format option:selected").val();
+  return { type: formatType, options: Drupal.media.formatForm.getOptions(), html: Drupal.settings.media.formatFormFormats[formatType] };
+};
+
+Drupal.media.formatForm.submit = function () {
+  // @see Drupal.behaviors.mediaFormatForm.attach().
+  var buttons = $(parent.window.document.body).find('#mediaStyleSelector').parent('.ui-dialog').find('.ui-dialog-buttonpane button');
+  if ($(this).hasClass('fake-cancel')) {
+    buttons[1].click();
+  } else {
+    buttons[0].click();
+  }
+}
+
+})(jQuery);
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/js/wysiwyg-media.js b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/js/wysiwyg-media.js
new file mode 100644
index 0000000..ac5bf4d
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/js/wysiwyg-media.js
@@ -0,0 +1,185 @@
+
+/**
+ *  @file
+ *  Attach Media WYSIWYG behaviors.
+ */
+
+(function ($) {
+
+Drupal.media = Drupal.media || {};
+
+/**
+ * Register the plugin with WYSIWYG.
+ */
+Drupal.wysiwyg.plugins.media = {
+
+  /**
+   * Determine whether a DOM element belongs to this plugin.
+   *
+   * @param node
+   *   A DOM element
+   */
+  isNode: function(node) {
+    return $(node).is('img.media-element');
+  },
+  /**
+   * Execute the button.
+   *
+   * @param data
+   *   An object containing data about the current selection:
+   *   - format: 'html' when the passed data is HTML content, 'text' when the
+   *     passed data is plain-text content.
+   *   - node: When 'format' is 'html', the focused DOM element in the editor.
+   *   - content: The textual representation of the focused/selected editor
+   *     content.
+   * @param settings
+   *   The plugin settings, as provided in the plugin's PHP include file.
+   * @param instanceId
+   *   The ID of the current editor instance.
+   */
+  invoke: function (data, settings, instanceId) {
+    if (data.format == 'html') {
+      var insert = new InsertMedia(instanceId);
+      if (this.isNode(data.node)) {
+        // Change the view mode for already-inserted media.
+        var media_file = Drupal.media.filter.extract_file_info($(data.node));
+        insert.onSelect([media_file]);
+      }
+      else {
+        // Insert new media.
+        insert.prompt(settings.global);
+      }
+    }
+  },
+
+  /**
+   * Attach function, called when a rich text editor loads.
+   * This finds all [[tags]] and replaces them with the html
+   * that needs to show in the editor.
+   *
+   * This finds all JSON macros and replaces them with the HTML placeholder
+   * that will show in the editor.
+   */
+  attach: function (content, settings, instanceId) {
+    content = Drupal.media.filter.replaceTokenWithPlaceholder(content);
+    return content;
+  },
+
+  /**
+   * Detach function, called when a rich text editor detaches
+   */
+  detach: function (content, settings, instanceId) {
+    content = Drupal.media.filter.replacePlaceholderWithToken(content);
+    return content;
+  }
+};
+/**
+ * Defining InsertMedia object to manage the sequence of actions involved in
+ * inserting a media element into the WYSIWYG.
+ * Keeps track of the WYSIWYG instance id.
+ */
+var InsertMedia = function (instance_id) {
+  this.instanceId = instance_id;
+  return this;
+};
+
+InsertMedia.prototype = {
+  /**
+   * Prompt user to select a media item with the media browser.
+   *
+   * @param settings
+   *    Settings object to pass on to the media browser.
+   *    TODO: Determine if this is actually necessary.
+   */
+  prompt: function (settings) {
+    Drupal.media.popups.mediaBrowser($.proxy(this, 'onSelect'), settings);
+  },
+
+  /**
+   * On selection of a media item, display item's display configuration form.
+   */
+  onSelect: function (media_files) {
+    this.mediaFile = media_files[0];
+    Drupal.media.popups.mediaStyleSelector(this.mediaFile, $.proxy(this, 'insert'), {});
+  },
+
+  /**
+   * When display config has been set, insert the placeholder markup into the
+   * wysiwyg and generate its corresponding json macro pair to be added to the
+   * tagmap.
+   */
+  insert: function (formatted_media) {
+    var element = Drupal.media.filter.create_element(formatted_media.html, {
+          fid: this.mediaFile.fid,
+          view_mode: formatted_media.type,
+          attributes: formatted_media.options,
+          fields: formatted_media.options
+        });
+    // Get the markup and register it for the macro / placeholder handling.
+    var markup = Drupal.media.filter.getWysiwygHTML(element);
+
+    // Insert placeholder markup into wysiwyg.
+    Drupal.wysiwyg.instances[this.instanceId].insert(markup);
+  }
+};
+
+/** Helper functions */
+
+/**
+ * Ensures the tag map has been initialized.
+ */
+function ensure_tagmap () {
+  return Drupal.media.filter.ensure_tagmap();
+}
+
+/**
+ * Serializes file information as a url-encoded JSON object and stores it as a
+ * data attribute on the html element.
+ *
+ * @param html (string)
+ *    A html element to be used to represent the inserted media element.
+ * @param info (object)
+ *    A object containing the media file information (fid, view_mode, etc).
+ *
+ * @deprecated
+ */
+function create_element (html, info) {
+  return Drupal.media.filter.create_element(html, info);
+}
+
+/**
+ * Create a macro representation of the inserted media element.
+ *
+ * @param element (jQuery object)
+ *    A media element with attached serialized file info.
+ *
+ * @deprecated
+ */
+function create_macro (element) {
+  return Drupal.media.filter.create_macro(element);
+}
+
+/**
+ * Extract the file info from a WYSIWYG placeholder element as JSON.
+ *
+ * @param element (jQuery object)
+ *    A media element with attached serialized file info.
+ *
+ * @deprecated
+ */
+function extract_file_info (element) {
+  return Drupal.media.filter.extract_file_info(element);
+}
+
+/**
+ * Gets the HTML content of an element.
+ *
+ * @param element (jQuery object)
+ *
+ * @deprecated
+ */
+function outerHTML (element) {
+  return Drupal.media.filter.outerHTML(element);
+}
+
+})(jQuery);
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.api.php b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.api.php
new file mode 100644
index 0000000..28d4caf
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.api.php
@@ -0,0 +1,71 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by the Media WYSIWYG module.
+ */
+
+/**
+ * Alter a list of view modes allowed for a file embedded in the WYSIWYG.
+ *
+ * @param array $view_modes
+ *   An array of view modes that can be used on the file when embedded in the
+ *   WYSIWYG.
+ * @param object $file
+ *   A file entity.
+ *
+ * @see media_get_wysiwyg_allowed_view_modes()
+ */
+function hook_media_wysiwyg_wysiwyg_allowed_view_modes_alter(&$view_modes, $file) {
+  $view_modes['default']['label'] = t('Display an unmodified version of the file');
+  unset($view_modes['preview']);
+}
+
+/**
+ * Alter the WYSIWYG view mode selection form.
+ *
+ * Similar to a form_alter, but runs first so that modules can add
+ * fields specific to a given file type (like alt tags on images) before alters
+ * begin to work on the fields.
+ *
+ * @param array $form
+ *   An associative array containing the structure of the form.
+ * @param array $form_state
+ *   An associative array containing the current state of the form.
+ * @param object $file
+ *   A file entity.
+ *
+ * @see media_format_form()
+ */
+function hook_media_wysiwyg_format_form_prepare_alter(&$form, &$form_state, $file) {
+  $form['preview']['#access'] = FALSE;
+
+  $file = $form['#media'];
+  $form['heading']['#markup'] = t('Embedding %filename of type %filetype', array('%filename' => $file->filename, '%filetype' => $file->type));
+}
+
+/**
+ * Alter the output generated by Media filter tags.
+ *
+ * @param array $element
+ *   The renderable array of output generated for the filter tag.
+ * @param array $tag_info
+ *   The filter tag converted into an associative array by
+ *   media_token_to_markup() with the following elements:
+ *   - 'fid': The ID of the media file being rendered.
+ *   - 'file': The object from file_load() of the media file being rendered.
+ *   - 'view_mode': The view mode being used to render the file.
+ *   - 'attributes': An additional array of attributes that could be output
+ *     with media_get_file_without_label().
+ * @param array $settings
+ *   An additional array of settings.
+ *   - 'wysiwyg': A boolean if the output is for the WYSIWYG preview or FALSE
+ *     if for normal rendering.
+ *
+ * @see media_token_to_markup()
+ */
+function hook_media_wysiwyg_token_to_markup_alter(&$element, $tag_info, $settings) {
+  if (empty($settings['wysiwyg'])) {
+    $element['#attributes']['alt'] = t('This media has been output using the @mode view mode.', array('@mode' => $tag_info['view_mode']));
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.info b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.info
new file mode 100644
index 0000000..391688d
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.info
@@ -0,0 +1,23 @@
+name = Media WYSIWYG
+description = Adds support for embedding media using client-side WYSIWYG editors.
+package = Media
+core = 7.x
+
+dependencies[] = media
+dependencies[] = wysiwyg
+
+test_dependencies[] = token
+
+files[] = media_wysiwyg.test
+files[] = tests/media_wysiwyg.file_usage.test
+files[] = tests/media_wysiwyg.macro.test
+
+configure = admin/config/media/browser
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-2.0-alpha3+33-dev"
+core = "7.x"
+project = "media"
+datestamp = "1387568918"
+
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.install b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.install
new file mode 100644
index 0000000..6d2d5e4
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.install
@@ -0,0 +1,20 @@
+<?php
+
+/**
+ * @file
+ * Install, update and uninstall functions for the Media WYSIWYG module.
+ */
+
+/**
+ * Implements hook_uninstall().
+ */
+function media_wysiwyg_uninstall() {
+  // Remove variables.
+  variable_del('media_wysiwyg_wysiwyg_title');
+  variable_del('media_wysiwyg_wysiwyg_icon_title');
+  variable_del('media_wysiwyg_wysiwyg_default_view_mode');
+  variable_del('media_wysiwyg_wysiwyg_upload_directory');
+  variable_del('media_wysiwyg_wysiwyg_allowed_types');
+  variable_del('media_wysiwyg_wysiwyg_allowed_attributes');
+  variable_del('media_wysiwyg_wysiwyg_browser_plugins');
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.module b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.module
new file mode 100644
index 0000000..fc97230
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.module
@@ -0,0 +1,273 @@
+<?php
+
+/**
+ * @file
+ * Primarily Drupal hooks.
+ */
+
+// Functions for tracking the file usage of [[inline tags]].
+require_once dirname(__FILE__) . '/includes/media_wysiwyg.file_usage.inc';
+
+// Functions for working with [[inline tags]] and wysiwyg editors.
+require_once dirname(__FILE__) . '/includes/media_wysiwyg.filter.inc';
+
+// Functions for UUID support to embedded media.
+require_once dirname(__FILE__) . '/includes/media_wysiwyg.uuid.inc';
+
+/**
+ * Implements hook_hook_info().
+ */
+function media_wysiwyg_hook_info() {
+  $hooks = array(
+    'media_wysiwyg_token_to_markup_alter',
+    'media_wysiwyg_allowed_view_modes_alter',
+    'media_wysiwyg_format_form_prepare_alter',
+  );
+
+  return array_fill_keys($hooks, array('group' => 'media_wysiwyg'));
+}
+
+/**
+ * Implements hook_menu().
+ */
+function media_wysiwyg_menu() {
+  $items['media/%file/format-form'] = array(
+    'title' => 'Style selector',
+    'description' => 'Choose a format for a piece of media',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('media_wysiwyg_format_form', 1),
+    'access callback' => 'file_entity_access',
+    'access arguments' => array('view', 1),
+    'file' => 'includes/media_wysiwyg.pages.inc',
+    'theme callback' => 'media_dialog_get_theme_name',
+    'type' => MENU_CALLBACK,
+  );
+
+  return $items;
+}
+
+/**
+ * Implements hook_element_info_alter().
+ */
+function media_wysiwyg_element_info_alter(&$types) {
+  $types['text_format']['#pre_render'][] = 'media_wysiwyg_pre_render_text_format';
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function media_wysiwyg_form_wysiwyg_profile_form_alter(&$form, &$form_state) {
+  // Add warnings if the media filter is disabled for the WYSIWYG's text format.
+  $form['buttons']['drupal']['media']['#element_validate'][] = 'media_wysiwyg_wysiwyg_button_element_validate';
+  $form['buttons']['drupal']['media']['#after_build'][] = 'media_wysiwyg_wysiwyg_button_element_validate';
+  form_load_include($form_state, 'inc', 'media_wysiwyg', 'wysiwyg_plugins/media');
+}
+
+/**
+ * Element validate callback for the media WYSIWYG button.
+ */
+function media_wysiwyg_wysiwyg_button_element_validate($element, &$form_state) {
+  if (!empty($element['#value'])) {
+    $format = filter_format_load($form_state['build_info']['args'][0]->format);
+    $filters = filter_list_format($format->format);
+    if (empty($filters['media_filter']->status)) {
+      form_error($element, t('The <em>Convert Media tags to markup</em> filter must be enabled for the <a href="@format-link">@format format</a> in order to use the Media browser WYSIWYG button.', array(
+        '@format-link' => url('admin/config/content/formats/' . $format->format, array('query' => array('destination' => $_GET['q']))),
+        '@format' => $format->name,
+      )));
+    }
+  }
+
+  return $element;
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function media_wysiwyg_form_media_admin_config_browser_alter(&$form, &$form_state) {
+  $form['wysiwyg'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('WYSIWYG configuration'),
+    '#collapsible' => TRUE,
+    '#collapsed' => FALSE,
+  );
+  $form['wysiwyg']['media_wysiwyg_wysiwyg_browser_plugins'] = array(
+    '#type' => 'checkboxes',
+    '#title' => t('Enabled browser plugins'),
+    '#options' => array(),
+    '#required' => FALSE,
+    '#default_value' => variable_get('media_wysiwyg_wysiwyg_browser_plugins', array()),
+    '#description' => t('If no plugins are selected, they will all be available.'),
+  );
+
+  $plugins = media_get_browser_plugin_info();
+
+  foreach ($plugins as $key => $plugin) {
+    $form['wysiwyg']['media_wysiwyg_wysiwyg_browser_plugins']['#options'][$key] = !empty($plugin['title']) ? $plugin['title'] : $key;
+  }
+
+  $form['wysiwyg']['media_wysiwyg_wysiwyg_upload_directory'] = array(
+    '#type' => 'textfield',
+    '#title' => t("File directory for uploaded media"),
+    '#default_value' => variable_get('media_wysiwyg_wysiwyg_upload_directory', ''),
+    '#description' => t('Optional subdirectory within the upload destination where files will be stored. Do not include preceding or trailing slashes.'),
+  );
+
+  if (module_exists('token')) {
+    $form['wysiwyg']['media_wysiwyg_wysiwyg_upload_directory']['#description'] .= t('This field supports tokens.');
+    $form['wysiwyg']['tokens'] = array(
+      '#theme' => 'token_tree',
+      '#dialog' => TRUE,
+    );
+  }
+
+  $form['wysiwyg']['media_wysiwyg_wysiwyg_allowed_types'] = array(
+    '#type' => 'checkboxes',
+    '#title' => t('Allowed types in WYSIWYG'),
+    '#options' => file_entity_type_get_names(),
+    '#default_value' => variable_get('media_wysiwyg_wysiwyg_allowed_types', array('audio', 'image', 'video', 'document')),
+  );
+
+  $form['#submit'][] = 'media_wysiwyg_admin_config_browser_pre_submit';
+}
+
+/**
+ * Manipulate values before form is submitted.
+ */
+function media_wysiwyg_admin_config_browser_pre_submit(&$form, &$form_state) {
+  $wysiwyg_browser_plugins = array_unique(array_values($form_state['values']['media_wysiwyg_wysiwyg_browser_plugins']));
+  if (empty($wysiwyg_browser_plugins[0])) {
+    variable_del('media_wysiwyg_wysiwyg_browser_plugins');
+    unset($form_state['values']['media_wysiwyg_wysiwyg_browser_plugins']);
+  }
+}
+
+/**
+ * Implements hook_filter_info().
+ */
+function media_wysiwyg_filter_info() {
+  $filters['media_filter'] = array(
+    'title' => t('Convert Media tags to markup'),
+    'description' => t('This filter will convert [[{type:media... ]] tags into markup. This must be enabled for the Media WYSIWYG integration to work with this input format.'),
+    'process callback' => 'media_wysiwyg_filter',
+    'weight' => 2,
+    // @TODO not implemented
+    'tips callback' => 'media_filter_tips',
+  );
+
+  return $filters;
+}
+
+/**
+ * Implements hook_wysiwyg_include_directory().
+ */
+function media_wysiwyg_wysiwyg_include_directory($type) {
+  switch ($type) {
+    case 'plugins':
+      return 'wysiwyg_plugins';
+
+      break;
+  }
+}
+
+/**
+ * Returns the default set of allowed attributes for use with WYSIWYG.
+ *
+ * @return array
+ *   An array of whitelisted attributes.
+ */
+function _media_wysiwyg_wysiwyg_allowed_attributes_default() {
+  return array(
+    'alt',
+    'title',
+    'height',
+    'width',
+    'hspace',
+    'vspace',
+    'border',
+    'align',
+    'style',
+    'class',
+    'id',
+    'usemap',
+    'data-picture-group',
+    'data-picture-align',
+  );
+}
+
+/**
+ * Returns a drupal_render() array for just the file portion of a file entity.
+ *
+ * Optional custom settings can override how the file is displayed.
+ */
+function media_wysiwyg_get_file_without_label($file, $view_mode, $settings = array()) {
+  $file->override = $settings;
+
+  $element = file_view_file($file, $view_mode);
+
+  // The formatter invoked by file_view_file() can use $file->override to
+  // customize the returned render array to match the requested settings. To
+  // support simple formatters that don't do this, set the element attributes to
+  // what was requested, but not if the formatter applied its own logic for
+  // element attributes.
+  if (isset($settings['attributes'])) {
+    if (empty($element['#attributes'])) {
+      $element['#attributes'] = $settings['attributes'];
+    }
+
+    // While this function may be called for any file type, images are a common
+    // use-case, and image theme functions have their own structure for render
+    // arrays.
+    if (isset($element['#theme'])) {
+      // theme_image() and theme_image_style() require the 'alt' attributes to
+      // be passed separately from the 'attributes' array. (see
+      // http://drupal.org/node/999338). Until that's fixed, implement this
+      // special-case logic. Image formatters using other theme functions are
+      // responsible for their own 'alt' attribute handling. See
+      // theme_media_formatter_large_icon() for an example.
+      if (in_array($element['#theme'], array('image', 'image_style'))) {
+        if (empty($element['#alt']) && isset($settings['attributes']['alt'])) {
+          $element['#alt'] = $settings['attributes']['alt'];
+        }
+      }
+      // theme_image_formatter() and any potential replacements, such as
+      // theme_colorbox_image_formatter(), also require attribute handling.
+      elseif (strpos($element['#theme'], 'image_formatter') !== FALSE) {
+        // theme_image_formatter() requires the attributes to be
+        // set on the item rather than the element itself.
+        if (empty($element['#item']['attributes'])) {
+          $element['#item']['attributes'] = $settings['attributes'];
+        }
+
+        // theme_image_formatter() also requires alt, title, height, and
+        // width attributes to be set on the item rather than within its
+        // attributes array.
+        foreach (array('alt', 'title', 'width', 'height') as $attr) {
+          if (isset($settings['attributes'][$attr])) {
+            $element['#item'][$attr] = $settings['attributes'][$attr];
+          }
+        }
+      }
+    }
+  }
+
+  return $element;
+}
+
+/**
+ * Returns an array containing the names of all fields that perform text filtering.
+ */
+function media_wysiwyg_filter_fields_with_text_filtering($entity_type, $entity) {
+  list($entity_id, $revision_id, $bundle) = entity_extract_ids($entity_type, $entity);
+  $fields = field_info_instances($entity_type, $bundle);
+
+  // Get all of the fields on this entity that allow text filtering.
+  $fields_with_text_filtering = array();
+  foreach ($fields as $field_name => $field) {
+    if (!empty($field['settings']['text_processing'])) {
+      $fields_with_text_filtering[] = $field_name;
+    }
+  }
+
+  return $fields_with_text_filtering;
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.test b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.test
new file mode 100644
index 0000000..cdb672a
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.test
@@ -0,0 +1,101 @@
+<?php
+
+/**
+ * @file
+ * Tests for media.module.
+ */
+
+/**
+ * Defines base class for media test cases.
+ */
+class MediaWYSIWYGTestHelper extends DrupalWebTestCase {
+
+  /**
+   * Enable media and file entity modules for testing.
+   */
+  public function setUp() {
+    $modules = func_get_args();
+    if (isset($modules[0]) && is_array($modules[0])) {
+      $modules = $modules[0];
+    }
+    $modules[] = 'media_wysiwyg';
+    parent::setUp($modules);
+  }
+
+  /**
+    * Generates markup to be inserted for a file.
+    *
+    * This is a PHP version of InsertMedia.insert() from js/wysiwyg-media.js.
+    *
+    * @param int $fid
+    *   Drupal file id
+    * @param int $count
+    *   Quantity of markup to insert
+    * @param array $attributes
+    *   Extra attributes to insert.
+    * @param array $fields
+    *   Extra field values to insert.
+    *
+    * @return string
+    *   Filter markup.
+    */
+  protected function generateJsonTokenMarkup($fid, $count = 1, array $attributes = array(), array $fields = array()) {
+    $markup = '';
+    // Merge default atttributes.
+    $attributes += array(
+      'height' => 100,
+      'width' => 100,
+      'classes' => 'media-element file_preview',
+    );
+
+    // Build the data that is used in a media tag.
+    $data = array(
+      'fid' => $fid,
+      'type' => 'media',
+      'view_mode' => 'preview',
+      'attributes' => $attributes,
+      'fields' => $fields,
+    );
+
+    // Create the file usage markup.
+    for ($i = 1; $i <= $count; $i++) {
+      $markup .= '<p>[[' . drupal_json_encode($data) . ']]</p>';
+    }
+
+    return $markup;
+  }
+
+  /**
+   * Utility function to create a test node.
+   *
+   * @param int $fid
+   *   Create the node with media markup in the body field
+    * @param array $attributes
+    *   Extra attributes to insert to the file.
+    * @param array $fields
+    *   Extra field values to insert.
+   *
+   * @return int
+   *   Returns the node id
+   */
+  protected function createNode($fid = FALSE, array $attributes = array(), array $fields = array()) {
+    $markup = '';
+    if (! empty($fid)) {
+      $markup = $this->generateJsonTokenMarkup($fid, 1, $attributes, $fields);
+    }
+
+    // Create an article node with file markup in the body field.
+    $edit = array(
+      'title' => $this->randomName(8),
+      'body[und][0][value]' => $markup,
+    );
+    // Save the article node. First argument is the URL, then the value array
+    // and the third is the label the button that should be "clicked".
+    $this->drupalPost('node/add/article', $edit, t('Save'));
+
+    // Get the article node that was saved by the unique title.
+    $node = $this->drupalGetNodeByTitle($edit['title']);
+    return $node->nid;
+  }
+
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.variable.inc b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.variable.inc
new file mode 100644
index 0000000..206905a
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/media_wysiwyg.variable.inc
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * @file
+ * Declare Media WYSIWYG variables.
+ */
+
+/**
+ * Implements hook_variable_group_info().
+ */
+function media_wysiwyg_variable_group_info() {
+  $groups['media_wysiwyg'] = array(
+    'title' => t('Media WYSIWYG'),
+    'description' => t('Settings for Media WYSIWYG integration.'),
+    'access' => 'administer media browser',
+    'path' => 'admin/config/media/browser',
+  );
+
+  return $groups;
+}
+
+/**
+* Implements hook_variable_info().
+*/
+function media_wysiwyg_variable_info($options) {
+  $variables['media_wysiwyg_wysiwyg_title'] = array(
+    'type' => 'string',
+    'title' => t('WYSIWYG Title', array(), $options),
+    'default' => t('Media browser', array(), $options),
+    'description' => t('The WYSIWYG media plugin title.', array(), $options),
+    'group' => 'media_wysiwyg',
+  );
+  $variables['media_wysiwyg_wysiwyg_icon_title'] = array(
+    'type' => 'string',
+    'title' => t('WYSIWYG Icon Title', array(), $options),
+    'default' => t('Add media', array(), $options),
+    'description' => t('The WYSIWYG media button title to display on hover.', array(), $options),
+    'group' => 'media_wysiwyg',
+  );
+
+  return $variables;
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/tests/media_wysiwyg.file_usage.test b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/tests/media_wysiwyg.file_usage.test
new file mode 100644
index 0000000..bd82ecf
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/tests/media_wysiwyg.file_usage.test
@@ -0,0 +1,237 @@
+<?php
+
+/**
+ * @file
+ * Tests for the file usage in entity fields with the Media filter markup.
+ */
+
+class MediaWYSIWYGFileUsageTest extends MediaWYSIWYGTestHelper {
+
+  /**
+   * Provide test information.
+   */
+  public static function getInfo() {
+    return array(
+      'name' => t('File usage tracking'),
+      'description' => t('Tests tracking of usage for files in text fields.'),
+      'group' => t('Media WYSIWYG'),
+    );
+  }
+
+  /**
+   * Enable media and file entity modules for testing.
+   */
+  public function setUp() {
+    parent::setUp();
+
+    // Create and log in a user.
+    $account = $this->drupalCreateUser(array('administer nodes', 'create article content'));
+    $this->drupalLogin($account);
+  }
+
+  /**
+   * Tests the tracking of file usages for files submitted via the WYSIWYG editor.
+   */
+  public function testFileUsageIncrementing() {
+    // Create a file.
+    $files = $this->drupalGetTestFiles('image');
+    $file = file_save($files[0]);
+    $fid = $file->fid;
+
+    // There should be zero usages of this file prior to node creation,
+    $file_uses = file_usage_list($file);
+    $this->assertEqual(empty($file_uses), TRUE, t('Created a new file with zero uses.'));
+
+    // Create a node to test with.
+    $nid = $this->createNode($fid);
+
+    // Get the new file usage count.
+    $file_uses = file_usage_list($file);
+
+    $this->assertEqual($file_uses['media']['node'][$nid], 1, t('File usage increases when added to a new node.'));
+
+    // Create a new revision that has the file on it. File usage will be 2.
+    $node = node_load($nid);
+    $node->revision = TRUE;
+    node_save($node);
+
+    $node = node_load($nid);
+    $file_uses = file_usage_list($file);
+    $revisions = count(node_revision_list($node));
+    // Keep track of this VID to test deletion later on.
+    $delete_one = $node->vid;
+
+    $this->assertEqual($revisions, 2, t('Node save created a second revision'));
+    $this->assertEqual($file_uses['media']['node'][$nid], 2, t('File usage incremented with a new node revision.'));
+
+    // Create a new revision that has two instances of the file. File usage will
+    // be 4.
+    $node = node_load($nid);
+    $node->body[LANGUAGE_NONE][0]['value'] = $this->generateJsonTokenMarkup($fid, 2);
+    $node->revision = TRUE;
+    node_save($node);
+
+    $node = node_load($nid);
+    $file_uses = file_usage_list($file);
+    $revisions = count(node_revision_list($node));
+    // Keep track of this VID to test deletion later on.
+    $delete_two = $node->vid;
+
+    $this->assertEqual($revisions, 3, t('Node save created a third revision.'));
+    $this->assertEqual($file_uses['media']['node'][$nid], 4, t('File usage incremented with multiple files and a new node revision.'));
+
+    // Create a new revision that has no file on it. File usage will be 4.
+    $node = node_load($nid);
+    $node->body[LANGUAGE_NONE][0]['value'] = '';
+    $node->revision = TRUE;
+    node_save($node);
+
+    $node = node_load($nid);
+    $file_uses = file_usage_list($file);
+    $revisions = count(node_revision_list($node));
+    // Keep track of this VID to test deletion later on.
+    $delete_zero = $node->vid;
+
+    $this->assertEqual($revisions, 4, t('Node save created a fourth revision.'));
+    $this->assertEqual($file_uses['media']['node'][$nid], 4, t('File usage does not change with a new revision of the node without the file'));
+
+    // Create a new revision that has the file on it. File usage will be 5.
+    $node = node_load($nid);
+    $node->body[LANGUAGE_NONE][0]['value'] = $this->generateJsonTokenMarkup($fid, 1);
+    $node->revision = TRUE;
+    node_save($node);
+
+    $node = node_load($nid);
+    $file_uses = file_usage_list($file);
+    $revisions = count(node_revision_list($node));
+
+    $this->assertEqual($revisions, 5, t('Node save created a new revision.'));
+    $this->assertEqual($file_uses['media']['node'][$nid], 5, t('File usage incremented with a single file on a new node revision.'));
+
+    // Delete a revision that has the file on it once. File usage will be 4.
+    node_revision_delete($delete_one);
+    $node = node_load($nid);
+    $file_uses = file_usage_list($file);
+    $this->assertEqual($file_uses['media']['node'][$nid], 4, t('Deleting revision with file decreases file usage'));
+
+    // Delete a revision that has no file on it. File usage will be 4.
+    node_revision_delete($delete_zero);
+    $node = node_load($nid);
+    $file_uses = file_usage_list($file);
+    $this->assertEqual($file_uses['media']['node'][$nid], 4, t('Deleting revision without a file does not change file usage.'));
+
+    // Delete a revision that has the file on it twice. File usage will be 2.
+    node_revision_delete($delete_two);
+    $node = node_load($nid);
+    $file_uses = file_usage_list($file);
+    $this->assertEqual($file_uses['media']['node'][$nid], 2, t('Deleting revision with file decreases file usage'));
+
+    // Create a new revision with the file on it twice. File usage will be 4.
+    $node = node_load($nid);
+    $node->body[LANGUAGE_NONE][0]['value'] = $this->generateJsonTokenMarkup($fid, 2);
+    $node->revision = TRUE;
+    node_save($node);
+
+    $node = node_load($nid);
+    $file_uses = file_usage_list($file);
+
+    $this->assertEqual($file_uses['media']['node'][$nid], 4,  t('File usage incremented with files on a new node revision.'));
+
+    // Re-save current revision with file on it once instead of twice. File
+    // usage will be 3.
+    $node = node_load($nid);
+    $node->body[LANGUAGE_NONE][0]['value'] = $this->generateJsonTokenMarkup($fid, 1);
+    $saved_vid = $node->vid;
+    node_save($node);
+
+    $node = node_load($nid);
+    $file_uses = file_usage_list($file);
+
+    $this->assertEqual($node->vid, $saved_vid, t('Resaved node revision does not create new revision.'));
+    $this->assertEqual($file_uses['media']['node'][$nid], 3, t('Resaved node revision with fewer files reduces file usage.'));
+
+    // Delete the node. File usage will be 0.
+    $node = node_load($nid);
+    node_delete($nid);
+
+    $node = node_load($nid);
+    $file_uses = file_usage_list($file);
+
+    $this->assertEqual(empty($node), TRUE, t('Node has been deleted.'));
+    $this->assertEqual(empty($file_uses), TRUE, t('Deleting the node removes all file uses.'));
+  }
+
+  /**
+   * Tests the behavior of node and file deletion.
+   */
+  public function testFileUsageIncrementingDelete() {
+    // Create a node with file markup in the body field with a new file.
+    $files = $this->drupalGetTestFiles('image');
+    $file = file_save($files[1]);
+    $fid = $file->fid;
+    $file_uses = file_usage_list($file);
+
+    $this->assertEqual(empty($file_uses), TRUE, t('Created a new file with zero uses.'));
+
+    // Create a new node with file markup.
+    $nid = $this->createNode($fid);
+    $file_uses = file_usage_list($file);
+
+    $this->assertEqual($file_uses['media']['node'][$nid], 1, t('Incremented file usage on node save.'));
+
+    // Try to delete the file. file_delete() should return file_usage().
+    $deleted = file_delete($file);
+    $this->assertTrue(is_array($deleted), t('File cannot be deleted while in use by a node.'));
+
+    // Delete the node.
+    node_delete($nid);
+    $node = node_load($nid);
+    $file_uses = file_usage_list($file);
+
+    $this->assertEqual(empty($node), TRUE, t('Node has been deleted.'));
+    $this->assertEqual(empty($file_uses), TRUE, t('File has zero usage after node is deleted.'));
+
+    $deleted = file_delete($file);
+    $this->assertTrue($deleted, t('File can be deleted with no usage.'));
+
+    $file = file_load($fid);
+    $this->assertTrue(empty($file), t('File no longer exists after delete.'));
+  }
+
+
+  /**
+   * Tests if node still remains updatable if file was deleted.
+   */
+  public function testFileUsageForcedDelete() {
+    // Create a node with file markup in the body field with a new file.
+    $files = $this->drupalGetTestFiles('image');
+    $file = file_save($files[1]);
+    $fid = $file->fid;
+    $file_uses = file_usage_list($file);
+
+    $this->assertEqual(empty($file_uses), TRUE, t('Created a new file with zero uses.'));
+
+    // Create a new node with file markup.
+    $nid = $this->createNode($fid);
+    $file_uses = file_usage_list($file);
+
+    $this->assertEqual($file_uses['media']['node'][$nid], 1, t('Incremented file usage on node save.'));
+
+    // Force the file to delete.
+    $deleted = file_delete($file, TRUE);
+    $this->assertTrue($deleted, t('File was deleted although in use sice we forced it.'));
+
+    // Try to update the node that uses broken file.
+    $account = $this->drupalCreateUser(array('edit any article content'));
+    $node = node_load($nid);
+    $this->drupalLogin($account);
+    $this->drupalGet('node/' . $nid . '/edit');
+    $this->assertRaw(check_plain($node->body['und'][0]['value']), t('Reference to deleted file found in node body.'));
+    $edit = array(
+      'body[und][0][value]' => '',
+    );
+    $this->drupalPost(NULL, $edit, t('Save'));
+    $type = node_type_load($node->type);
+    $this->assertRaw(t('@type %title has been updated.', array('@type' => $type->name, '%title' => $node->title)), t('Node without reference to deleted file saved successfully.'));
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/tests/media_wysiwyg.macro.test b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/tests/media_wysiwyg.macro.test
new file mode 100644
index 0000000..7ac1bc4
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/tests/media_wysiwyg.macro.test
@@ -0,0 +1,95 @@
+<?php
+
+/**
+ * @file
+ * Tests for ensuring media macros render properly.
+ */
+
+/**
+ * Defines media macro test cases.
+ */
+class MediaWYSIWYGWYSIWYGOverridesTest extends MediaWYSIWYGTestHelper {
+
+  /**
+   * Provide test information.
+   */
+  public static function getInfo() {
+    return array(
+      'name' => t('Media WYSIWYG WYSIWYG overrides'),
+      'description' => t('Tests that overridden attributes display correct.'),
+      'group' => t('Media WYSIWYG'),
+      'dependencies' => array('token'),
+    );
+  }
+
+  public function setUp() {
+    parent::setUp('token');
+
+    // Create and log in a user.
+    $account = $this->drupalCreateUser(array('create article content', 'administer filters', 'use text format filtered_html'));
+    $this->drupalLogin($account);
+
+    // Enable the media filter for full html.
+    $edit = array(
+      'filters[media_filter][status]' => TRUE,
+      'filters[filter_html][status]' => FALSE,
+    );
+    $this->drupalPost('admin/config/content/formats/filtered_html', $edit, t('Save configuration'));
+  }
+
+  /**
+   * Test image media overrides.
+   */
+  public function testAttributeOverrides() {
+    $files = $this->drupalGetTestFiles('image');
+    $file = file_save($files[0]);
+
+    // Create a node to test with.
+    $nid = $this->createNode($file->fid);
+
+    $this->drupalGet('node/' . $nid);
+    $this->assertRaw('width="100"', t('Image displays with default width attribute.'));
+    $this->assertRaw('height="100"', t('Image displays with default height attribute.'));
+
+    // Create a node with a style attribute.
+    $attributes = array(
+      'style' => 'float: left; width: 50px;',
+    );
+    $nid = $this->createNode($file->fid, $attributes);
+    $this->drupalGet('node/' . $nid);
+    $this->assertRaw(drupal_attributes($attributes), t('Image displays with overriden attributes.'));
+
+    // Create a node with overriden alt/title attributes.
+    $attributes = array(
+      'alt' => $this->randomName(),
+      'title' => $this->randomName(),
+    );
+    $nid = $this->createNode($file->fid, $attributes);
+    $this->drupalGet('node/' . $nid);
+    $this->assertRaw(drupal_attributes($attributes), t('Image displays with alt/title set as attributes.'));
+
+    // Create a node with overriden alt/title fields.
+    $fields = $attributes = array();
+    $attributes['alt'] = $fields['field_file_image_alt_text[und][0][value]'] = $this->randomName();
+    $attributes['title'] = $fields['field_file_image_title_text[und][0][value]'] = $this->randomName();
+
+    $nid = $this->createNode($file->fid, array(), $fields);
+    $this->drupalGet('node/' . $nid);
+    // Ensure that the alt/title from attributes display.
+    $this->assertRaw(drupal_attributes($attributes), t('Image displays with alt/title set as fields.'));
+
+    // Create a node with overriden alt/title fields as well as attributes.
+    $attributes = array(
+      'alt' => $this->randomName(),
+      'title' => $this->randomName(),
+    );
+    $fields = array(
+      'field_file_image_alt_text[und][0][value]' => $this->randomName(),
+      'field_file_image_title_text[und][0][value]' => $this->randomName(),
+    );
+    $nid = $this->createNode($file->fid, $attributes, $fields);
+    $this->drupalGet('node/' . $nid);
+    // Ensure that the alt/title from attributes display rather the field ones.
+    $this->assertRaw(drupal_attributes($attributes), t('Image displays with alt/title set as attributes overriding field values.'));
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg/wysiwyg_plugins/media.inc b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/wysiwyg_plugins/media.inc
new file mode 100644
index 0000000..8540cf9
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg/wysiwyg_plugins/media.inc
@@ -0,0 +1,73 @@
+<?php
+
+/**
+ * @file
+ * Define the WYSIWYG browser plugin.
+ */
+
+/**
+ * Implements WYSIWYG's hook_INCLUDE_plugin().
+ */
+function media_wysiwyg_media_plugin() {
+  // Include the required browser JS.
+  // @todo: wyswiyg should allow libraries and multiple js files
+  // to be defined by this hook.
+  // @see http://drupal.org/node/1039076
+  media_wysiwyg_include_browser_js();
+
+  // Add the filter handling.
+  drupal_add_js(drupal_get_path('module', 'media_wysiwyg') . '/js/media_wysiwyg.filter.js');
+
+  // Plugin definition.
+  $plugins['media'] = array(
+    'title' => variable_get('media_wysiwyg_wysiwyg_title', t('Media browser')),
+    'vendor url' => 'http://drupal.org/project/media',
+    'icon path' => drupal_get_path('module', 'media_wysiwyg') . '/images',
+    'icon file' => 'wysiwyg-media.gif',
+    'icon title' => variable_get('media_wysiwyg_wysiwyg_icon_title', t('Add media')),
+    // @todo: move this to the plugin directory for the wysiwyg plugin.
+    'js path' => drupal_get_path('module', 'media_wysiwyg') . '/js',
+    'js file' => 'wysiwyg-media.js',
+    'css path' => drupal_get_path('module', 'media_wysiwyg') . '/css',
+    'css file' => 'media_wysiwyg.css',
+    'settings' => array(
+      'global' => array(
+        'enabledPlugins' => variable_get('media_wysiwyg_wysiwyg_browser_plugins', array()),
+        'file_directory' => variable_get('media_wysiwyg_wysiwyg_upload_directory', ''),
+        'types' => variable_get('media_wysiwyg_wysiwyg_allowed_types', array('audio', 'image', 'video', 'document')),
+        'id' => 'media_wysiwyg',
+      ),
+    ),
+  );
+
+  return $plugins;
+}
+
+/**
+ * Prepares the page to be able to launch the media browser.
+ *
+ * Defines default variables.
+ */
+function media_wysiwyg_include_browser_js() {
+  static $included;
+  if ($included) {
+    return;
+  }
+  $included = TRUE;
+  module_load_include('inc', 'media', 'includes/media.browser');
+  $javascript = media_browser_js();
+  foreach ($javascript as $key => $definitions) {
+    foreach ($definitions as $definition) {
+      $function = 'drupal_add_' . $key;
+      // Since the arguments to pass are variable, use call_user_func_array().
+      // This will not handle all potential drupal_add_*() functions directly
+      // but covers the js and library needed here, which are unlikely to be
+      // expanded since this function is only a workaround for a wysiwyg
+      // limitation.
+      call_user_func_array($function, $definition);
+    }
+  }
+  // Add wysiwyg-specific settings.
+  $settings = array('wysiwyg_allowed_attributes' => variable_get('media_wysiwyg_wysiwyg_allowed_attributes', _media_wysiwyg_wysiwyg_allowed_attributes_default()));
+  drupal_add_js(array('media' => $settings), 'setting');
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.admin.inc b/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.admin.inc
new file mode 100644
index 0000000..4d1f0a6
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.admin.inc
@@ -0,0 +1,77 @@
+<?php
+
+/**
+ * @file
+ * Generate configuration form and save settings.
+ */
+
+/**
+ * Configuration form for Media's WYSIWYG view modes.
+ */
+function media_wysiwyg_view_mode_configuration_form($form, &$form_state) {
+  $options = array();
+
+  // Add the default view mode by default
+  $options['default'] = t('Default');
+
+  $entity_info = entity_get_info('file');
+  foreach ($entity_info['view modes'] as $view_mode => $view_mode_info) {
+    $options[$view_mode] = check_plain($view_mode_info['label']);
+  }
+
+  $form['media_wysiwyg_view_mode_wysiwyg_restricted_view_modes'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('WYSIWYG allowed view modes'),
+    '#collapsible' => TRUE,
+    '#collapsed' => FALSE,
+    '#description' => t('Restrict the allowed view modes when embedding files inside of the the WYSIWYG editor.'),
+  );
+
+  foreach (file_type_get_enabled_types() as $type) {
+    $form['media_wysiwyg_view_mode_wysiwyg_restricted_view_modes']["media_wysiwyg_view_mode_{$type->type}_wysiwyg_restricted_view_modes_status"] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Restrict allowed view modes for %type', array('%type' => $type->label)),
+      '#default_value' => variable_get("media_wysiwyg_view_mode_{$type->type}_wysiwyg_restricted_view_modes_status", FALSE),
+    );
+    $form['media_wysiwyg_view_mode_wysiwyg_restricted_view_modes']["media_wysiwyg_view_mode_{$type->type}_wysiwyg_restricted_view_modes"] = array(
+      '#type' => 'checkboxes',
+      '#title' => t('Restrict view modes'),
+      '#options' => $options,
+      '#default_value' => variable_get("media_wysiwyg_view_mode_{$type->type}_wysiwyg_restricted_view_modes", array()),
+      '#states' => array(
+        'visible' => array(
+          ':input[name="media_wysiwyg_view_mode_' . $type->type . '_wysiwyg_restricted_view_modes_status"]' => array('checked' => TRUE),
+        ),
+      ),
+    );
+  }
+
+  $form['media_wysiwyg_view_mode_file_wysiwyg_view_mode'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('File WYSIWYG view mode'),
+    '#collapsible' => TRUE,
+    '#collapsed' => FALSE,
+    '#description' => t('Use a custom view mode when displaying files inside of the WYSIWYG editor.'),
+  );
+
+  foreach (file_type_get_enabled_types() as $type) {
+    $form['media_wysiwyg_view_mode_file_wysiwyg_view_mode']["media_wysiwyg_view_mode_{$type->type}_file_wysiwyg_view_mode_status"] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Use a custom view mode for %type', array('%type' => $type->label)),
+      '#default_value' => variable_get("media_wysiwyg_view_mode_{$type->type}_file_wysiwyg_view_mode_status", FALSE),
+    );
+    $form['media_wysiwyg_view_mode_file_wysiwyg_view_mode']["media_wysiwyg_view_mode_{$type->type}_file_wysiwyg_view_mode"] = array(
+      '#type' => 'select',
+      '#title' => t('View mode'),
+      '#options' => $options,
+      '#default_value' => variable_get("media_wysiwyg_view_mode_{$type->type}_file_wysiwyg_view_mode", 'wysiwyg'),
+      '#states' => array(
+        'visible' => array(
+          ':input[name="media_wysiwyg_view_mode_' . $type->type . '_file_wysiwyg_view_mode_status"]' => array('checked' => TRUE),
+        ),
+      ),
+    );
+  }
+
+  return system_settings_form($form);
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.info b/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.info
new file mode 100644
index 0000000..ade3740
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.info
@@ -0,0 +1,18 @@
+name = Media WYSIWYG View Mode
+description = Enables files inside of the WYSIWYG editor to be displayed using a separate view mode.
+package = Media
+core = 7.x
+
+dependencies[] = media_wysiwyg
+
+configure = admin/config/media/wysiwyg-view-mode
+
+files[] = media_wysiwyg_view_mode.test
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-2.0-alpha3+33-dev"
+core = "7.x"
+project = "media"
+datestamp = "1387568918"
+
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.install b/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.install
new file mode 100644
index 0000000..56b706f
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.install
@@ -0,0 +1,15 @@
+<?php
+
+/**
+ * @file
+ * Install, update and uninstall functions for the Media WYSIWYG View Mode module.
+ */
+
+/**
+ * Implements hook_uninstall().
+ */
+function media_wysiwyg_view_mode_uninstall() {
+  db_delete('variable')
+    ->condition('name', "media_wysiwyg_view_mode_%", "LIKE")
+    ->execute();
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.module b/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.module
new file mode 100644
index 0000000..ed01bf5
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.module
@@ -0,0 +1,150 @@
+<?php
+
+/**
+ * @file
+ * Primarily Drupal hooks.
+ */
+
+/**
+ * Implements hook_permission().
+ */
+function media_wysiwyg_view_mode_permission() {
+  return array(
+    'administer media wysiwyg view mode' => array(
+      'title' => t('Administer Media WYSIWYG View Mode'),
+    ),
+  );
+}
+
+/**
+ * Implements hook_menu().
+ */
+function media_wysiwyg_view_mode_menu() {
+  $items['admin/config/media/wysiwyg-view-mode'] = array(
+    'title' => 'Media WYSIWYG View Mode',
+    'description' => 'Configure view mode settings for files embedded into and displayed inside of the WYSIWYG editor.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('media_wysiwyg_view_mode_configuration_form'),
+    'access arguments' => array('administer media wysiwyg view mode'),
+    'file' => 'media_wysiwyg_view_mode.admin.inc',
+  );
+
+  return $items;
+}
+
+/**
+ * Implements hook_help().
+ */
+function media_wysiwyg_view_mode_help($path, $arg) {
+  switch ($path) {
+    case 'admin/config/media/wysiwyg-view-mode':
+      $output = '';
+      $output .= '<p>' . t('Configure view modes for files displayed inside of the WYSIWYG editor.') . '</p>';
+      $output .= '<p>' . t('View modes can be configured per file type. Only enabled view modes are selectable.') . '</p>';
+      return $output;
+  }
+}
+
+/**
+ * Implements hook_entity_info_alter().
+ */
+function media_wysiwyg_view_mode_entity_info_alter(&$entity_info) {
+  $entity_info['file']['view modes'] += array(
+    'wysiwyg' => array(
+      'label' => t('WYSIWYG'),
+      'custom settings' => TRUE,
+    ),
+  );
+}
+
+/**
+ * Implements hook_media_wysiwyg_wysiwyg_allowed_view_modes_alter().
+ */
+function media_wysiwyg_view_mode_media_wysiwyg_wysiwyg_allowed_view_modes_alter(&$view_modes, &$file) {
+  if (variable_get("media_wysiwyg_view_mode_{$file->type}_wysiwyg_restricted_view_modes_status", FALSE) == TRUE) {
+    $restricted_view_modes = variable_get("media_wysiwyg_view_mode_{$file->type}_wysiwyg_restricted_view_modes", array());
+
+    foreach ($restricted_view_modes as $restricted_view_mode) {
+      if (array_key_exists($restricted_view_mode, $view_modes)) {
+        unset($view_modes[$restricted_view_mode]);
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_media_wysiwyg_token_to_markup_alter().
+ */
+function media_wysiwyg_view_mode_media_wysiwyg_token_to_markup_alter(&$element, $tag_info, $settings) {
+  if (!empty($settings['wysiwyg'])) {
+    $file = $tag_info['file'];
+
+    if (variable_get("media_wysiwyg_view_mode_{$file->type}_file_wysiwyg_view_mode_status", FALSE) == TRUE) {
+      $element = media_wysiwyg_get_file_without_label($file, variable_get("media_wysiwyg_view_mode_{$file->type}_file_wysiwyg_view_mode", 'wysiwyg'), $settings);
+    }
+    else {
+      $element = media_wysiwyg_get_file_without_label($file, $tag_info['view_mode'], $settings);
+    }
+  }
+}
+
+/**
+ * Implements hook_form_alter().
+ */
+function media_wysiwyg_view_mode_form_alter(&$form, $form_state, $form_id)  {
+  switch ($form_id)  {
+    case 'media_wysiwyg_format_form':
+      $file = $form['#media'];
+
+      $default_view_mode = variable_get('media_wysiwyg_wysiwyg_default_view_mode', 'full');
+
+      $view_mode = !empty($form_state['values']['format']) ? $form_state['values']['format'] : $default_view_mode;
+
+      $form['preview'] = file_view_file($file, $view_mode);
+      $form['preview']['#prefix'] = '<div id="preview">';
+      $form['preview']['#suffix'] = '</div>';
+
+      if (!isset($form['options']['format']['#default_value'])) {
+        $form['options']['format']['#default_value'] = $view_mode;
+      }
+      $form['options']['format']['#ajax'] = array(
+        'callback' => 'media_format_form_preview',
+        'wrapper' => 'preview',
+      );
+
+      $view_modes = media_wysiwyg_get_wysiwyg_allowed_view_modes($file);
+      $formats = $options = array();
+      foreach ($view_modes as $view_mode => $view_mode_info) {
+        //@TODO: Display more verbose information about which formatter and what it does.
+        $options[$view_mode] = $view_mode_info['label'];
+
+        if (variable_get("media_wysiwyg_view_mode_{$file->type}_file_wysiwyg_view_mode_status", FALSE) == TRUE) {
+          $element = media_wysiwyg_get_file_without_label($file, variable_get("media_wysiwyg_view_mode_{$file->type}_file_wysiwyg_view_mode", 'wysiwyg'), array('wysiwyg' => TRUE));
+        }
+        else {
+          $element = media_wysiwyg_get_file_without_label($file, $view_mode, array('wysiwyg' => TRUE));
+        }
+
+        // Make a pretty name out of this.
+        $formats[$view_mode] = drupal_render($element);
+      }
+
+      $form['#formats'] = $formats;
+      break;
+  }
+}
+
+/**
+ * AJAX callback to select the portion of the format form to be updated with a preview.
+ *
+ * @param array $form
+ *   An associative array containing the structure of the form.
+ * @param array $form_state
+ *   An associative array containing the current state of the form.
+ *
+ * @return array
+ *   The preview form item.
+ */
+function media_format_form_preview($form, $form_state) {
+  return $form['preview'];
+}
diff --git a/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.test b/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.test
new file mode 100644
index 0000000..a51dc2f
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/media_wysiwyg_view_mode/media_wysiwyg_view_mode.test
@@ -0,0 +1,65 @@
+<?php
+
+/**
+ * @file
+ * Tests for media_wysiwyg_view_mode.module.
+ */
+
+/**
+ * Defines base class for media_wysiwyg_view_mode test cases.
+ */
+class MediaWYSIWYGViewModeTestHelper extends MediaWYSIWYGTestHelper {
+  function setUp() {
+    parent::setUp('media_wysiwyg_view_mode');
+
+    $web_user = $this->drupalCreateUser(array('administer media wysiwyg view mode', 'view files'));
+    $this->drupalLogin($web_user);
+  }
+}
+
+/**
+ * Test configuring view modes available on the format form.
+ */
+class FormatFormViewModesTest extends MediaWYSIWYGViewModeTestHelper {
+  public static function getInfo() {
+    return array(
+      'name' => 'Format Form WYSIWYG View Modes',
+      'description' => 'Test configuring view modes available on the format form.',
+      'group' => 'Media WYSIWYG View Mode',
+    );
+  }
+
+  function setUp() {
+    parent::setUp();
+  }
+
+  /**
+   * Configure format form view mode restrictions and ensure that they are followed.
+   */
+  function testAllowedFormatFormViewModes() {
+    // Load the Media WYSIWYG View Mode administration page.
+    $this->drupalGet('admin/config/media/wysiwyg-view-mode');
+    $this->assertResponse(200, t('The privileged user can access the Media WYSIWYG View Mode administration page.'));
+
+    // Create an image file to test with.
+    $files = $this->drupalGetTestFiles('image');
+    $files[0]->status = FILE_STATUS_PERMANENT;
+    $file = file_save($files[0]);
+    $fid = $file->fid;
+
+    // The default view mode should be selected by default.
+    $this->drupalGet('media/' . $fid . '/format-form');
+    $this->assertOptionSelected('edit-format', 'default');
+
+    // Restrict the use of the default view mode.
+    variable_set('media_wysiwyg_view_mode_image_wysiwyg_restricted_view_modes_status', TRUE);
+    $restricted_view_modes = array(
+      'default' => 'default',
+    );
+    variable_set('media_wysiwyg_view_mode_image_wysiwyg_restricted_view_modes', $restricted_view_modes);
+
+    // The teaser view mode should now be selected by default.
+    $this->drupalGet('media/' . $fid . '/format-form');
+    $this->assertOptionSelected('edit-format', 'teaser');
+  }
+}
diff --git a/profiles/commons/modules/contrib/media/modules/mediafield/mediafield.info b/profiles/commons/modules/contrib/media/modules/mediafield/mediafield.info
new file mode 100644
index 0000000..b207a0e
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/mediafield/mediafield.info
@@ -0,0 +1,13 @@
+name = Media Field
+description = "Provides a field type that stores media-specific data. <em>Deprecated by the core File field type.</em>"
+package = Media
+core = 7.x
+dependencies[] = media
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-2.0-alpha3+33-dev"
+core = "7.x"
+project = "media"
+datestamp = "1387568918"
+
diff --git a/profiles/commons/modules/contrib/media/modules/mediafield/mediafield.install b/profiles/commons/modules/contrib/media/modules/mediafield/mediafield.install
new file mode 100644
index 0000000..3e867b8
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/mediafield/mediafield.install
@@ -0,0 +1,43 @@
+<?php
+
+/**
+ * @file
+ * Install and schema hooks for mediafield.
+ */
+
+/**
+ * Implements hook_field_schema().
+ */
+function mediafield_field_schema($field) {
+  return array(
+    'columns' => array(
+      'fid' => array(
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => FALSE,
+      ),
+      'title' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => FALSE,
+      ),
+      'data' => array(
+        'type' => 'text',
+        'not null' => FALSE,
+        'size' => 'big',
+        'serialize' => TRUE,
+        // 'description' => 'Used for storing additional information.
+        // Can be harnessed by widgets',
+      ),
+    ),
+    'indexes' => array(
+      'fid' => array('fid'),
+    ),
+    'foreign keys' => array(
+      'file_managed' => array(
+        'table' => 'file_managed',
+        'columns' => array('fid' => 'fid'),
+      ),
+    ),
+  );
+}
diff --git a/profiles/commons/modules/contrib/media/modules/mediafield/mediafield.module b/profiles/commons/modules/contrib/media/modules/mediafield/mediafield.module
new file mode 100644
index 0000000..2dd77f3
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/mediafield/mediafield.module
@@ -0,0 +1,323 @@
+<?php
+
+/**
+ * @file
+ * Provide a "Multimedia asset" field.
+ */
+
+/**
+ * Implements hook_field_info().
+ */
+function mediafield_field_info() {
+  return array(
+    'media' => array(
+      'label' => t('Multimedia asset'),
+      'description' => t('This field stores a reference to a multimedia asset.'),
+      'settings' => array(),
+      'instance_settings' => array(
+        'file_extensions' => variable_get('file_entity_default_allowed_extensions', 'jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv weba webp webm'),
+      ),
+      'default_widget' => 'media_generic',
+      'default_formatter' => 'media',
+      'property_type' => 'field_item_file',
+      'property_callbacks' => array('entity_metadata_field_file_callback'),
+    ),
+  );
+}
+
+/**
+ * Implements hook_field_widget_info_alter().
+ *
+ * Alter the media file selector so it is available for media fields.
+ */
+function mediafield_field_widget_info_alter(&$info) {
+  $info['media_generic']['field types'][] = 'media';
+}
+
+/**
+ * Implements hook_field_instance_settings_form().
+ */
+function mediafield_field_instance_settings_form($field, $instance) {
+  $settings = $instance['settings'];
+
+  // Make the extension list a little more human-friendly by comma-separation.
+  $extensions = str_replace(' ', ', ', $settings['file_extensions']);
+  $form['file_extensions'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Allowed file extensions for uploaded files'),
+    '#default_value' => $extensions,
+    '#description' => t('Separate extensions with a space or comma and do not include the leading dot.'),
+    '#element_validate' => array('_file_generic_settings_extensions'),
+    // By making this field required, we prevent a potential security issue
+    // that would allow files of any type to be uploaded.
+    '#required' => TRUE,
+    '#maxlength' => 255,
+  );
+
+  return $form;
+}
+
+/**
+ * Implements hook_field_is_empty().
+ */
+function mediafield_field_is_empty($item, $field) {
+  return empty($item['fid']);
+}
+
+/**
+ * Implements hook_field_formatter_info().
+ */
+function mediafield_field_formatter_info() {
+  $formatters = array(
+    'media' => array(
+      'label' => t('Media'),
+      'field types' => array('media'),
+      'settings' => array('file_view_mode' => 'default'),
+    ),
+  );
+
+  return $formatters;
+}
+
+/**
+ * Implements hook_field_formatter_settings_form().
+ */
+function mediafield_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
+  $display = $instance['display'][$view_mode];
+  $settings = $display['settings'];
+
+  $element = array();
+
+  if ($display['type'] == 'media') {
+    $entity_info = entity_get_info('file');
+    $options = array('default' => t('Default'));
+    foreach ($entity_info['view modes'] as $file_view_mode => $file_view_mode_info) {
+      $options[$file_view_mode] = $file_view_mode_info['label'];
+    }
+    $element['file_view_mode'] = array(
+      '#title' => t('File view mode'),
+      '#type' => 'select',
+      '#default_value' => $settings['file_view_mode'],
+      '#options' => $options,
+    );
+  }
+
+  return $element;
+}
+
+/**
+ * Implements hook_field_formatter_settings_summary().
+ */
+function mediafield_field_formatter_settings_summary($field, $instance, $view_mode) {
+  $display = $instance['display'][$view_mode];
+  $settings = $display['settings'];
+
+  $summary = '';
+
+  if ($display['type'] == 'media') {
+    $entity_info = entity_get_info('file');
+    $file_view_mode_label = isset($entity_info['view modes'][$settings['file_view_mode']]) ? $entity_info['view modes'][$settings['file_view_mode']]['label'] : t('Default');
+    $summary = t('File view mode: @view_mode', array('@view_mode' => $file_view_mode_label));
+  }
+
+  return $summary;
+}
+
+/**
+ * Implements hook_field_formatter_view().
+ */
+function mediafield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
+  $element = array();
+
+  $files = array();
+  foreach ($items as $delta => $item) {
+    if (!empty($item['file'])) {
+      $files[$item['fid']] = $item['file'];
+    }
+  }
+
+  if (!empty($files)) {
+    $output = file_view_multiple($files, $display['settings']['file_view_mode'], 0, $langcode);
+    // Remove the first level from the output array.
+    $element = reset($output);
+  }
+
+  return $element;
+}
+
+/**
+ * Implements hook_field_prepare_view().
+ */
+function mediafield_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
+  // Collect all file IDs that need loading.
+  $fids = array();
+  foreach ($entities as $id => $entity) {
+    // Load the files from the files table.
+    foreach ($items[$id] as $delta => $item) {
+      if (!empty($item['fid'])) {
+        $fids[] = $item['fid'];
+      }
+    }
+  }
+
+  // Load the file entities.
+  $files = file_load_multiple($fids);
+
+  // Add the loaded file entities to the field item array.
+  foreach ($entities as $id => $entity) {
+    foreach ($items[$id] as $delta => $item) {
+      // If the file does not exist, mark the entire item as empty.
+      if (empty($files[$item['fid']])) {
+        unset($items[$id][$delta]);
+      }
+      else {
+        $items[$id][$delta]['file'] = $files[$item['fid']];
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_field_validate().
+ *
+ * Possible error codes:
+ * - 'media_remote_file_type_not_allowed': The remote file is not an allowed
+ *   file type.
+ */
+function mediafield_field_validate($obj_type, $object, $field, $instance, $langcode, $items, &$errors) {
+  $allowed_types = array_keys(array_filter($instance['widget']['settings']['allowed_types']));
+
+    // @TODO: merge in stuff from media_uri_value
+  foreach ($items as $delta => $item) {
+    if (empty($item['fid'])) {
+      return TRUE;
+      //@TODO: make support for submiting with just a URI here?
+    }
+
+    $file = file_load($item['fid']);
+
+    // Only validate allowed types if the file is remote and not local.
+    if (!file_entity_file_is_local($file)) {
+      if (!in_array($file->type, $allowed_types)) {
+        $errors[$field['field_name']][$langcode][$delta][] = array(
+          'error' => 'media_remote_file_type_not_allowed',
+          'message' => t('%name: Only remote files with the following types are allowed: %types-allowed.', array('%name' => t($instance['label']), '%types-allowed' => !empty($allowed_types) ? implode(', ', $allowed_types) : t('no file types selected'))),
+        );
+      }
+    }
+  }
+}
+
+/**
+ * Implements_hook_field_widget_error().
+ */
+function mediafield_field_widget_error($element, $error, $form, &$form_state) {
+  form_error($element['fid'], $error['message']);
+}
+
+/**
+ * @todo The following hook_field_(insert|update|delete|delete_revision)
+ *   implementations are nearly identical to the File module implementations of
+ *   the same field hooks. The only differences are:
+ *   - We pass 'media' rather than 'file' as the module argument to the
+ *     file_usage_(add|delete)() functions.
+ *   - We do not delete the file / media entity when its usage count goes to 0.
+ *   We should submit a core patch to File module to make it flexible with
+ *   respect to the above, so that we can reuse its implementation rather than
+ *   duplicating it.
+ */
+
+/**
+ * Implements hook_field_insert().
+ */
+function mediafield_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
+  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
+
+  // Add a new usage of each uploaded file.
+  foreach ($items as $item) {
+    $file = (object) $item;
+    file_usage_add($file, 'mediafield', $entity_type, $id);
+  }
+}
+
+/**
+ * Implements hook_field_update().
+ *
+ * Checks for files that have been removed from the object.
+ */
+function mediafield_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
+  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
+
+  // On new revisions, all files are considered to be a new usage and no
+  // deletion of previous file usages are necessary.
+  if (!empty($entity->revision)) {
+    foreach ($items as $item) {
+      $file = (object) $item;
+      file_usage_add($file, 'mediafield', $entity_type, $id);
+    }
+    return;
+  }
+
+  // Build a display of the current FIDs.
+  $current_fids = array();
+  foreach ($items as $item) {
+    $current_fids[] = $item['fid'];
+  }
+
+  // Compare the original field values with the ones that are being saved.
+  $original_fids = array();
+  if (!empty($entity->original->{$field['field_name']}[$langcode])) {
+    foreach ($entity->original->{$field['field_name']}[$langcode] as $original_item) {
+      $original_fids[] = $original_item['fid'];
+      if (isset($original_item['fid']) && !in_array($original_item['fid'], $current_fids)) {
+        // Decrement the file usage count by 1.
+        $file = (object) $original_item;
+        file_usage_delete($file, 'mediafield', $entity_type, $id, 1);
+      }
+    }
+  }
+
+  // Add new usage entries for newly added files.
+  foreach ($items as $item) {
+    if (!in_array($item['fid'], $original_fids)) {
+      $file = (object) $item;
+      file_usage_add($file, 'mediafield', $entity_type, $id);
+    }
+  }
+}
+
+/**
+ * Implements hook_field_delete().
+ */
+function mediafield_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
+  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
+
+  // Delete all file usages within this entity.
+  foreach ($items as $delta => $item) {
+    $file = (object) $item;
+    file_usage_delete($file, 'mediafield', $entity_type, $id, 0);
+  }
+}
+
+/**
+ * Implements hook_field_delete_revision().
+ */
+function mediafield_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
+  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
+  foreach ($items as $delta => $item) {
+    // @TODO: Not sure if this is correct
+    $file = (object)$item;
+    if (file_usage_delete($file, 'mediafield', $entity_type, $id, 1)) {
+      $items[$delta] = NULL;
+    }
+  }
+}
+
+/**
+ * Implements hook_views_api().
+ */
+function mediafield_views_api() {
+  return array(
+    'api' => 3,
+  );
+}
diff --git a/profiles/commons/modules/contrib/media/modules/mediafield/mediafield.views.inc b/profiles/commons/modules/contrib/media/modules/mediafield/mediafield.views.inc
new file mode 100644
index 0000000..bc1e240
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/modules/mediafield/mediafield.views.inc
@@ -0,0 +1,25 @@
+<?php
+
+/**
+ * @file
+ * Provide Views data and handlers for mediafield.
+ */
+
+/**
+ * Implements hook_field_views_data().
+ */
+function mediafield_field_views_data($field) {
+  $data = field_views_field_default_views_data($field);
+  foreach ($data as $table_name => $table_data) {
+    // Add the relationship only on the fid field.
+    $data[$table_name][$field['field_name'] . '_fid']['relationship'] = array(
+      'handler' => 'views_handler_relationship',
+      'base' => 'file_managed',
+      'entity type' => 'file',
+      'base field' => 'fid',
+      'label' => t('file from !field_name', array('!field_name' => $field['field_name'])),
+    );
+  }
+
+  return $data;
+}
diff --git a/profiles/commons/modules/contrib/media/templates/media-dialog-page.tpl.php b/profiles/commons/modules/contrib/media/templates/media-dialog-page.tpl.php
new file mode 100644
index 0000000..f779c1d
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/templates/media-dialog-page.tpl.php
@@ -0,0 +1,91 @@
+<?php
+
+/**
+ * @file
+ * Default theme implementation to display a single Drupal page.
+ *
+ * Available variables:
+ *
+ * General utility variables:
+ * - $base_path: The base URL path of the Drupal installation. At the very
+ *   least, this will always default to /.
+ * - $directory: The directory the template is located in, e.g. modules/system
+ *   or themes/garland.
+ * - $is_front: TRUE if the current page is the front page.
+ * - $logged_in: TRUE if the user is registered and signed in.
+ * - $is_admin: TRUE if the user has permission to access administration pages.
+ *
+ * Site identity:
+ * - $front_page: The URL of the front page. Use this instead of $base_path,
+ *   when linking to the front page. This includes the language domain or
+ *   prefix.
+ * - $logo: The path to the logo image, as defined in theme configuration.
+ * - $site_name: The name of the site, empty when display has been disabled
+ *   in theme settings.
+ * - $site_slogan: The slogan of the site, empty when display has been disabled
+ *   in theme settings.
+ *
+ * Navigation:
+ * - $main_menu (array): An array containing the Main menu links for the
+ *   site, if they have been configured.
+ * - $secondary_menu (array): An array containing the Secondary menu links for
+ *   the site, if they have been configured.
+ * - $breadcrumb: The breadcrumb trail for the current page.
+ *
+ * Page content (in order of occurrence in the default page.tpl.php):
+ * - $title_prefix (array): An array containing additional output populated by
+ *   modules, intended to be displayed in front of the main title tag that
+ *   appears in the template.
+ * - $title: The page title, for use in the actual HTML content.
+ * - $title_suffix (array): An array containing additional output populated by
+ *   modules, intended to be displayed after the main title tag that appears in
+ *   the template.
+ * - $messages: HTML for status and error messages. Should be displayed
+ *   prominently.
+ * - $tabs (array): Tabs linking to any sub-pages beneath the current page
+ *   (e.g., the view and edit tabs when displaying a node).
+ * - $action_links (array): Actions local to the page, such as 'Add menu' on the
+ *   menu administration interface.
+ * - $feed_icons: A string of all feed icons for the current page.
+ * - $node: The node object, if there is an automatically-loaded node
+ *   associated with the page, and the node ID is the second argument
+ *   in the page's path (e.g. node/12345 and node/12345/revisions, but not
+ *   comment/reply/12345).
+ *
+ * Regions:
+ * - $page['help']: Dynamic help text, mostly for admin pages.
+ * - $page['highlight']: Items for the highlighted content region.
+ * - $page['content']: The main content of the current page.
+ * - $page['sidebar_first']: Items for the first sidebar.
+ * - $page['sidebar_second']: Items for the second sidebar.
+ * - $page['header']: Items for the header region.
+ * - $page['footer']: Items for the footer region.
+ *
+ * @see template_preprocess()
+ * @see template_preprocess_page()
+ * @see template_process()
+ */
+?>
+
+<?php if (isset($messages)) { print $messages; } ?>
+<div id="media-browser-page-wrapper">
+  <div id="media-browser-page">
+    <div id="media-browser-tabset">
+      <div id="branding" class="clearfix">
+        <div>
+          <h1><?php print render($page['content']['system_main']['title']); ?></h1>
+        </div>
+        <div id="media-tabs-wrapper">
+          <?php print render($page['content']['system_main']['tabset']['tabs']); ?>
+        </div>
+      </div>
+      <?php print render($page['content']['system_main']['tabset']['panes']); ?>
+    </div> <!-- /#media-tabs-set -->
+  </div> <!--  /#media-browser-page -->
+</div> <!-- /#media-browser-page-wrapper -->
+
+<?php
+  hide($page['content']['system_main']['tabset']);
+  hide($page['content']['system_main']['title']);
+  print render($page['content']);
+?>
diff --git a/profiles/commons/modules/contrib/media/views/media_default.view.inc b/profiles/commons/modules/contrib/media/views/media_default.view.inc
new file mode 100644
index 0000000..f4ba4b9
--- /dev/null
+++ b/profiles/commons/modules/contrib/media/views/media_default.view.inc
@@ -0,0 +1,171 @@
+<?php
+
+/**
+ * @file
+ * The default view for the media browser library tab.
+ */
+
+$view = new view();
+$view->name = 'media_default';
+$view->description = 'Default view for the media browser library tab.';
+$view->tag = 'media, default';
+$view->base_table = 'file_managed';
+$view->human_name = 'Media browser';
+$view->core = 7;
+$view->api_version = '3.0';
+$view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
+
+/* Display: Master */
+$handler = $view->new_display('default', 'Master', 'default');
+$handler->display->display_options['use_ajax'] = TRUE;
+$handler->display->display_options['use_more_always'] = FALSE;
+$handler->display->display_options['group_by'] = TRUE;
+$handler->display->display_options['access']['type'] = 'perm';
+$handler->display->display_options['access']['perm'] = 'view files';
+$handler->display->display_options['cache']['type'] = 'none';
+$handler->display->display_options['query']['type'] = 'views_query';
+$handler->display->display_options['query']['options']['query_tags'] = array(
+  0 => 'media_browser',
+);
+$handler->display->display_options['exposed_form']['type'] = 'basic';
+$handler->display->display_options['exposed_form']['options']['autosubmit'] = TRUE;
+$handler->display->display_options['pager']['type'] = 'full';
+$handler->display->display_options['pager']['options']['items_per_page'] = '25';
+$handler->display->display_options['pager']['options']['offset'] = '0';
+$handler->display->display_options['pager']['options']['id'] = '0';
+$handler->display->display_options['style_plugin'] = 'media_browser';
+/* No results behavior: Global: Text area */
+$handler->display->display_options['empty']['area']['id'] = 'area';
+$handler->display->display_options['empty']['area']['table'] = 'views';
+$handler->display->display_options['empty']['area']['field'] = 'area';
+$handler->display->display_options['empty']['area']['content'] = 'No files available.';
+$handler->display->display_options['empty']['area']['format'] = 'plain_text';
+/* Field: File: Name */
+$handler->display->display_options['fields']['filename']['id'] = 'filename';
+$handler->display->display_options['fields']['filename']['table'] = 'file_managed';
+$handler->display->display_options['fields']['filename']['field'] = 'filename';
+$handler->display->display_options['fields']['filename']['label'] = '';
+$handler->display->display_options['fields']['filename']['alter']['word_boundary'] = FALSE;
+$handler->display->display_options['fields']['filename']['alter']['ellipsis'] = FALSE;
+$handler->display->display_options['fields']['filename']['link_to_file'] = TRUE;
+/* Sort criterion: File: Upload date */
+$handler->display->display_options['sorts']['timestamp']['id'] = 'timestamp';
+$handler->display->display_options['sorts']['timestamp']['table'] = 'file_managed';
+$handler->display->display_options['sorts']['timestamp']['field'] = 'timestamp';
+$handler->display->display_options['sorts']['timestamp']['order'] = 'DESC';
+$handler->display->display_options['sorts']['timestamp']['exposed'] = TRUE;
+$handler->display->display_options['sorts']['timestamp']['expose']['label'] = 'Upload date';
+/* Sort criterion: SUM(File Usage: Use count) */
+$handler->display->display_options['sorts']['count']['id'] = 'count';
+$handler->display->display_options['sorts']['count']['table'] = 'file_usage';
+$handler->display->display_options['sorts']['count']['field'] = 'count';
+$handler->display->display_options['sorts']['count']['group_type'] = 'sum';
+$handler->display->display_options['sorts']['count']['exposed'] = TRUE;
+$handler->display->display_options['sorts']['count']['expose']['label'] = 'Use count';
+/* Filter criterion: File: Status */
+$handler->display->display_options['filters']['status']['id'] = 'status';
+$handler->display->display_options['filters']['status']['table'] = 'file_managed';
+$handler->display->display_options['filters']['status']['field'] = 'status';
+$handler->display->display_options['filters']['status']['value'] = array(
+  1 => '1',
+);
+/* Filter criterion: File: Name */
+$handler->display->display_options['filters']['filename']['id'] = 'filename';
+$handler->display->display_options['filters']['filename']['table'] = 'file_managed';
+$handler->display->display_options['filters']['filename']['field'] = 'filename';
+$handler->display->display_options['filters']['filename']['operator'] = 'contains';
+$handler->display->display_options['filters']['filename']['exposed'] = TRUE;
+$handler->display->display_options['filters']['filename']['expose']['operator_id'] = 'filename_op';
+$handler->display->display_options['filters']['filename']['expose']['label'] = 'File name';
+$handler->display->display_options['filters']['filename']['expose']['operator'] = 'filename_op';
+$handler->display->display_options['filters']['filename']['expose']['identifier'] = 'filename';
+/* Filter criterion: File: Type */
+$handler->display->display_options['filters']['type']['id'] = 'type';
+$handler->display->display_options['filters']['type']['table'] = 'file_managed';
+$handler->display->display_options['filters']['type']['field'] = 'type';
+$handler->display->display_options['filters']['type']['exposed'] = TRUE;
+$handler->display->display_options['filters']['type']['expose']['operator_id'] = 'type_op';
+$handler->display->display_options['filters']['type']['expose']['label'] = 'Type';
+$handler->display->display_options['filters']['type']['expose']['operator'] = 'type_op';
+$handler->display->display_options['filters']['type']['expose']['identifier'] = 'type';
+
+/* Display: Media browser */
+$handler = $view->new_display('media_browser', 'Media browser', 'media_browser_1');
+$handler->display->display_options['defaults']['title'] = FALSE;
+$handler->display->display_options['title'] = 'Library';
+$handler->display->display_options['defaults']['hide_admin_links'] = FALSE;
+
+/* Display: My files */
+$handler = $view->new_display('media_browser', 'My files', 'media_browser_my_files');
+$handler->display->display_options['defaults']['title'] = FALSE;
+$handler->display->display_options['title'] = 'My files';
+$handler->display->display_options['defaults']['hide_admin_links'] = FALSE;
+$handler->display->display_options['defaults']['access'] = FALSE;
+$handler->display->display_options['access']['type'] = 'perm';
+$handler->display->display_options['access']['perm'] = 'view own files';
+$handler->display->display_options['defaults']['relationships'] = FALSE;
+/* Relationship: File: User who uploaded */
+$handler->display->display_options['relationships']['uid']['id'] = 'uid';
+$handler->display->display_options['relationships']['uid']['table'] = 'file_managed';
+$handler->display->display_options['relationships']['uid']['field'] = 'uid';
+$handler->display->display_options['relationships']['uid']['required'] = TRUE;
+$handler->display->display_options['defaults']['arguments'] = FALSE;
+$handler->display->display_options['defaults']['filter_groups'] = FALSE;
+$handler->display->display_options['defaults']['filters'] = FALSE;
+/* Filter criterion: File: Status */
+$handler->display->display_options['filters']['status']['id'] = 'status';
+$handler->display->display_options['filters']['status']['table'] = 'file_managed';
+$handler->display->display_options['filters']['status']['field'] = 'status';
+$handler->display->display_options['filters']['status']['value'] = array(
+  1 => '1',
+);
+/* Filter criterion: File: Name */
+$handler->display->display_options['filters']['filename']['id'] = 'filename';
+$handler->display->display_options['filters']['filename']['table'] = 'file_managed';
+$handler->display->display_options['filters']['filename']['field'] = 'filename';
+$handler->display->display_options['filters']['filename']['operator'] = 'contains';
+$handler->display->display_options['filters']['filename']['exposed'] = TRUE;
+$handler->display->display_options['filters']['filename']['expose']['operator_id'] = 'filename_op';
+$handler->display->display_options['filters']['filename']['expose']['label'] = 'File name';
+$handler->display->display_options['filters']['filename']['expose']['operator'] = 'filename_op';
+$handler->display->display_options['filters']['filename']['expose']['identifier'] = 'filename';
+/* Filter criterion: File: Type */
+$handler->display->display_options['filters']['type']['id'] = 'type';
+$handler->display->display_options['filters']['type']['table'] = 'file_managed';
+$handler->display->display_options['filters']['type']['field'] = 'type';
+$handler->display->display_options['filters']['type']['exposed'] = TRUE;
+$handler->display->display_options['filters']['type']['expose']['operator_id'] = 'type_op';
+$handler->display->display_options['filters']['type']['expose']['label'] = 'Type';
+$handler->display->display_options['filters']['type']['expose']['operator'] = 'type_op';
+$handler->display->display_options['filters']['type']['expose']['identifier'] = 'type';
+/* Filter criterion: User: Current */
+$handler->display->display_options['filters']['uid_current']['id'] = 'uid_current';
+$handler->display->display_options['filters']['uid_current']['table'] = 'users';
+$handler->display->display_options['filters']['uid_current']['field'] = 'uid_current';
+$handler->display->display_options['filters']['uid_current']['relationship'] = 'uid';
+$handler->display->display_options['filters']['uid_current']['value'] = '1';
+$translatables['media_default'] = array(
+  t('Master'),
+  t('more'),
+  t('Apply'),
+  t('Reset'),
+  t('Sort by'),
+  t('Asc'),
+  t('Desc'),
+  t('Items per page'),
+  t('- All -'),
+  t('Offset'),
+  t('« first'),
+  t('‹ previous'),
+  t('next ›'),
+  t('last »'),
+  t('No files available.'),
+  t('Upload date'),
+  t('Use count'),
+  t('File name'),
+  t('Type'),
+  t('Media browser'),
+  t('Library'),
+  t('My files'),
+  t('User who uploaded'),
+);
diff --git a/profiles/commons/modules/contrib/metatag/metatag.metatag.inc b/profiles/commons/modules/contrib/metatag/metatag.metatag.inc
index 0c699fb..bd89255 100644
--- a/profiles/commons/modules/contrib/metatag/metatag.metatag.inc
+++ b/profiles/commons/modules/contrib/metatag/metatag.metatag.inc
@@ -224,12 +224,5 @@ function metatag_metatag_info() {
     'description' => "Used to indicate the URL that broke the story, and can link to either an internal URL or an external source. If the full URL is not known it is acceptable to use a partial URL or just the domain name.",
   );
 
-  $info['tags']['author'] = array(
-    'label' => t('Author URL'),
-    'description' => 'Used by some search engines to aid confirm authorship of the content on a page. Should be either the full URL for the author\'s Google+ profile page or a local page with information about the author.',
-    'class' => 'DrupalLinkMetaTag',
-    'group' => 'advanced',
-  );
-
   return $info;
 }
diff --git a/profiles/commons/modules/contrib/navbar/navbar.info b/profiles/commons/modules/contrib/navbar/navbar.info
index c17828a..cdf44b8 100644
--- a/profiles/commons/modules/contrib/navbar/navbar.info
+++ b/profiles/commons/modules/contrib/navbar/navbar.info
@@ -6,9 +6,9 @@ dependencies[] = breakpoints
 dependencies[] = libraries
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.0-alpha10+6-dev"
 core = "7.x"
 project = "navbar"
-datestamp = "1385094765"
+datestamp = "1387568916"
 
diff --git a/profiles/commons/modules/contrib/oauthconnector/modules/oauth2/oauth2_common.info b/profiles/commons/modules/contrib/oauthconnector/modules/oauth2/oauth2_common.info
index ad43269..437a8ee 100644
--- a/profiles/commons/modules/contrib/oauthconnector/modules/oauth2/oauth2_common.info
+++ b/profiles/commons/modules/contrib/oauthconnector/modules/oauth2/oauth2_common.info
@@ -7,9 +7,9 @@ files[] = lib/DrupalOAuth2Client.inc
 
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.0-beta1+6-dev"
 core = "7.x"
 project = "oauthconnector"
-datestamp = "1385094769"
+datestamp = "1387568916"
 
diff --git a/profiles/commons/modules/contrib/oauthconnector/oauthconnector.info b/profiles/commons/modules/contrib/oauthconnector/oauthconnector.info
index bf3d2f9..b516d6f 100644
--- a/profiles/commons/modules/contrib/oauthconnector/oauthconnector.info
+++ b/profiles/commons/modules/contrib/oauthconnector/oauthconnector.info
@@ -10,9 +10,9 @@ dependencies[] = http_client_oauth
 dependencies[] = ctools
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-1.0-beta1+6-dev"
 core = "7.x"
 project = "oauthconnector"
-datestamp = "1385094769"
+datestamp = "1387568916"
 
diff --git a/profiles/commons/modules/contrib/oembed/CHANGELOG b/profiles/commons/modules/contrib/oembed/CHANGELOG
new file mode 100644
index 0000000..fb160ee
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/CHANGELOG
@@ -0,0 +1,39 @@
+oEmbed 6.x-0.9, xxxx-xx-xx
+------------------------------
+#892988 by bangpound: Use ctools export UI for presets, providers.
+#966122 by voxpelli: Cache clearing calls was missing table
+#992124 by voxpelli: Improved the handling of invalid oEmbed responses
+by voxpelli: Flush provider cache on Embed.ly refresh
+
+oEmbed 6.x-0.8, 2010-12-14
+------------------------------
+by voxpelli: Security fix for access bypass
+
+oEmbed 6.x-0.7, 2010-10-20
+------------------------------
+by voxpelli: Disabled providers wasn't really disabled
+by voxpelli: Coding style fix
+by voxpelli: Removed oohEmbed provider
+by voxpelli: Updated scheme for Vimeo
+by voxpelli: Prefixed provider names of Embedly providers
+by voxpelli: Prevented endless recursion in oEmbed Provider
+by voxpelli: Improved responses for failed request to oEmbed Provider
+#890504 by bangpound: Fixed unnecessary saving of provider cache
+#890496 by bangpound: Fixed adding, enabling etc. of a provider not clearing the provider cache
+#890490 by bangpound: Fixed module preprocessors not working with oEmbed Field.
+
+oEmbed 6.x-0.6, 2010-05-28
+------------------------------
+#692392 by Bohman, VoxPelli: Fixed surrounding styles prevent embedding
+by voxpelli: Use drupal_http_request()
+by voxpelli: Add exportable user definable providers
+by voxpelli: Add support for all of Embed.ly:s embeds
+by voxpelli: Fixed bug with default width and height being zero when they shouldn't be set at all
+
+oEmbed 6.x-0.5, 2010-02-21
+------------------------------
+by voxpelli: Added CCK field
+by voxpelli: Added hook for provider definitions
+by voxpelli: Improved theming
+by voxpelli: Added exportable presets/settings for CCK fields (not yet added
+  for the input filters)
diff --git a/profiles/commons/modules/contrib/oembed/MediaInternetOEmbedHandler.inc b/profiles/commons/modules/contrib/oembed/MediaInternetOEmbedHandler.inc
new file mode 100644
index 0000000..d6107c4
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/MediaInternetOEmbedHandler.inc
@@ -0,0 +1,73 @@
+<?php
+
+/**
+ * @file MediaInternetOEmbedHandler.inc
+ *
+ * Contains MediaInternetOEmbedHandler.
+ */
+
+// If MediaInternetBaseHandler class does not exist, prevent the rest of this
+// file from being loaded.
+if (!class_exists('MediaInternetBaseHandler')) {
+  return;
+}
+
+/**
+ * Implementation of MediaInternetBaseHandler.
+ *
+ * @see hook_media_internet_providers().
+ */
+class MediaInternetOEmbedHandler extends MediaInternetBaseHandler {
+
+  public $fileObject;
+
+  /**
+   * Claim this URL.
+   */
+  public function claim($embedCode) {
+    $matches = array();
+    if (oembed_get_provider($embedCode, $matches)) {
+      return TRUE;
+    }
+  }
+
+  /**
+   * File should not validate if we cannot fetch valid oEmbed data.
+   */
+  public function validate() {
+    $file = $this->getFileObject();
+
+    $validators = array('oembed_file_validator_type' => array());
+
+    $errors = file_validate($file, $validators);
+
+    foreach ($errors as $error) {
+      throw new MediaInternetValidationException($error);
+    }
+  }
+
+  /**
+   * Returns a file object which can be used for validation
+   *
+   * @return StdClass
+   */
+  public function getFileObject() {
+    if (!$this->fileObject) {
+      $file = oembed_url_to_file($this->embedCode);
+      $this->fileObject = $file;
+    }
+    return $this->fileObject;
+  }
+
+  /**
+   * Returns an array representation of the oEmbed data, or NULL on failure.
+   *
+   * An example project that calls this method is Media Browser Plus
+   * (http://drupal.org/project/media_browser_plus). Other projects may do so
+   * in the future.
+   */
+  public function getOEmbed() {
+    $embed = oembed_get_data($this->embedCode);
+    return $embed ? (array) $embed : NULL;
+  }
+}
diff --git a/profiles/commons/modules/contrib/oembed/OEmbedStreamWrapper.inc b/profiles/commons/modules/contrib/oembed/OEmbedStreamWrapper.inc
new file mode 100644
index 0000000..7705e36
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/OEmbedStreamWrapper.inc
@@ -0,0 +1,415 @@
+<?php
+
+/**
+ *  @file
+ *  Create a oEmbed Stream Wrapper class.
+ */
+class OEmbedStreamWrapper implements DrupalStreamWrapperInterface {
+
+  /**
+   * Instance URI (stream).
+   *
+   * A stream is referenced as "scheme://target".
+   *
+   * @var String
+   */
+  protected $uri;
+
+  protected function getTarget($uri = NULL) {
+    return FALSE;
+  }
+
+  /**
+   * Base implementation of getMimeType().
+   */
+  public static function getMimeType($uri, $mapping = NULL) {
+    $url = rawurldecode(substr($uri, 9));
+    $embed = oembed_get_data($url);
+
+    // The mime type can be specified in hook_oembed_response_alter() which is
+    // useful to map responses with type 'rich' and 'link' to more appropriate
+    // Drupal file entity bundles. See oembed_oembed_response_alter().
+    if (isset($embed['mime_type'])) {
+      return $embed['mime_type'];
+    }
+
+    if ($embed) {
+      switch ($embed['type']) {
+        case 'video':
+          return 'video/oembed';
+        case 'photo':
+          return 'image/oembed';
+        default:
+          return 'text/oembed';
+      }
+    }
+    else {
+
+      // URIs for valid oEmbed responses may become invalid after they are saved
+      // to the file_managed table. This might happen because the oEmbed
+      // endpoint is down or the provider is misconfigured. The content may
+      // have been deleted or become inaccessible. Some of these
+      // situations are temporary, so the stream wrapper should try to return a
+      // MIME type for URIs that are already saved as Drupal file entities.
+      $type = db_select('file_managed', 'f')
+        ->fields('f', array('type'))
+        ->condition('uri', $uri)
+        ->execute()
+        ->fetchField();
+
+      if (in_array($type, array('image', 'video', 'audio'))) {
+        return $type .'/oembed';
+      }
+      else if ($type) {
+        return 'text/oembed';
+      }
+    }
+
+    return FALSE;
+  }
+
+  // As part of the inode protection mode returned by stat(), identifies the
+  // file as a regular file, as opposed to a directory, symbolic link, or other
+  // type of "file".
+  // @see http://linux.die.net/man/2/stat
+
+  const S_IFREG = 0100000;
+
+  /**
+   * Template for stat calls.
+   *
+   * All elements must be initialized.
+   */
+  protected $_stat = array(
+    0 => 0, // Device number
+    'dev' => 0,
+    1 => 0, // Inode number
+    'ino' => 0,
+    // Inode protection mode. file_unmanaged_delete() requires is_file() to
+    // return TRUE.
+    2 => self::S_IFREG,
+    'mode' => self::S_IFREG,
+    3 => 0, // Number of links.
+    'nlink' => 0,
+    4 => 0, // Userid of owner.
+    'uid' => 0,
+    5 => 0, // Groupid of owner.
+    'gid' => 0,
+    6 => -1, // Device type, if inode device *
+    'rdev' => -1,
+    7 => 0, // Size in bytes.
+    'size' => 0,
+    8 => 0, // Time of last access (Unix timestamp).
+    'atime' => 0,
+    9 => 0, // Time of last modification (Unix timestamp).
+    'mtime' => 0,
+    10 => 0, // Time of last inode change (Unix timestamp).
+    'ctime' => 0,
+    11 => -1, // Blocksize of filesystem IO.
+    'blksize' => -1,
+    12 => -1, // Number of blocks allocated.
+    'blocks' => -1,
+  );
+
+  /**
+   * Returns a web accessible URL for the resource.
+   *
+   * This function should return a URL that can be embedded in a web page
+   * and accessed from a browser. For example, the external URL of
+   * "youtube://xIpLd0WQKCY" might be
+   * "http://www.youtube.com/watch?v=xIpLd0WQKCY".
+   *
+   * @return string
+   *   Returns a string containing a web accessible URL for the resource.
+   */
+  public function getExternalUrl() {
+    return rawurldecode(substr($this->getUri(), 9));
+  }
+
+  /**
+   * Base implementation of realpath().
+   */
+  public function realpath() {
+    return $this->getExternalUrl();
+  }
+
+  /**
+   * Base implementation of setUri().
+   */
+  public function setUri($uri) {
+    $this->uri = $uri;
+  }
+
+  /**
+   * Base implementation of getUri().
+   */
+  public function getUri() {
+    return $this->uri;
+  }
+
+  /**
+   * Support for fopen(), file_get_contents(), file_put_contents() etc.
+   *
+   * @param string $uri
+   *   A string containing the path to the file to open.
+   * @param string $mode
+   *   The file mode ("r", "wb" etc.).
+   * @param bitmask $options
+   *   A bit mask of STREAM_USE_PATH and STREAM_REPORT_ERRORS.
+   * @param string &$opened_url
+   *   A string containing the path actually opened.
+   *
+   * @return bool
+   *   TRUE if file was opened successfully.
+   */
+  public function stream_open($uri, $mode, $options, &$opened_url) {
+    $this->setUri($uri);
+
+    // We only handle Read-Only mode by default.
+    if ($mode != 'r' && $mode != 'rb') {
+      return FALSE;
+    }
+
+    $matches = array();
+    $provider = oembed_get_provider($this->getExternalUrl(), $matches);
+
+    if ($provider === FALSE) {
+      return FALSE;
+    }
+
+    if ((bool) $provider && ($options & STREAM_USE_PATH)) {
+      $opened_url = $uri;
+    }
+
+    return (bool) $provider;
+  }
+
+  /**
+   * Undocumented PHP stream wrapper method.
+   */
+  function stream_lock($operation) {
+    return FALSE;
+  }
+
+  /**
+   * Support for fread(), file_get_contents() etc.
+   *
+   * @param int $count
+   *   Maximum number of bytes to be read.
+   *
+   * @return bool
+   *   The string that was read, or FALSE in case of an error.
+   */
+  public function stream_read($count) {
+    return FALSE;
+  }
+
+  /**
+   * Support for fwrite(), file_put_contents() etc.
+   *
+   * Since this is a read only stream wrapper this always returns false.
+   *
+   * @param string $data
+   *   The string to be written.
+   *
+   * @return bool
+   *   Returns FALSE.
+   */
+  public function stream_write($data) {
+    return FALSE;
+  }
+
+  /**
+   * Support for feof().
+   *
+   * @return bool
+   *   TRUE if end-of-file has been reached.
+   */
+  public function stream_eof() {
+    return FALSE;
+  }
+
+  /**
+   * Support for fseek().
+   *
+   * @todo document why this returns false.
+   *
+   * @param int $offset
+   *   The byte offset to got to.
+   * @param string $whence
+   *   SEEK_SET, SEEK_CUR, or SEEK_END.
+   *
+   * @return bool
+   *   TRUE on success
+   */
+  public function stream_seek($offset, $whence) {
+    return FALSE;
+  }
+
+  /**
+   * Support for fflush().
+   *
+   * @todo document why this returns false.
+   *
+   * @return bool
+   *   TRUE if data was successfully stored (or there was no data to store).
+   */
+  public function stream_flush() {
+    return FALSE;
+  }
+
+  /**
+   * Support for ftell().
+   *
+   * @todo document why this returns false.
+   *
+   * @return bool
+   *   The current offset in bytes from the beginning of file.
+   */
+  public function stream_tell() {
+    return FALSE;
+  }
+
+  /**
+   * Support for fstat().
+   *
+   * @return array
+   *   An array with file status, or FALSE in case of an error - see fstat()
+   *   for a description of this array.
+   */
+  public function stream_stat() {
+    return $this->_stat;
+  }
+
+  /**
+   * Support for fclose().
+   *
+   * @todo document why this returns TRUE.
+   *
+   * @return bool
+   *   TRUE if stream was successfully closed.
+   */
+  public function stream_close() {
+    return TRUE;
+  }
+
+  /**
+   * Support for stat().
+   *
+   * @param string $url
+   *   A string containing the url to get information about.
+   * @param bitmask $flags
+   *   A bit mask of STREAM_URL_STAT_LINK and STREAM_URL_STAT_QUIET.
+   *
+   * @return array
+   *   An array with file status, or FALSE in case of an error - see fstat()
+   *   for a description of this array.
+   */
+  public function url_stat($url, $flags) {
+    return $this->stream_stat();
+  }
+
+  /**
+   * Support for opendir().
+   *
+   * @param string $url
+   *   A string containing the url to the directory to open.
+   * @param int $options
+   *   Whether or not to enforce safe_mode (0x04).
+   *
+   * @return bool
+   *   TRUE on success.
+   */
+  public function dir_opendir($url, $options) {
+    return FALSE;
+  }
+
+  /**
+   * Support for readdir().
+   *
+   * @return bool
+   *   The next filename, or FALSE if there are no more files in the directory.
+   */
+  public function dir_readdir() {
+    return FALSE;
+  }
+
+  /**
+   * Support for rewinddir().
+   *
+   * @return bool
+   *   TRUE on success.
+   */
+  public function dir_rewinddir() {
+    return FALSE;
+  }
+
+  /**
+   * Support for closedir().
+   *
+   * @return bool
+   *   TRUE on success.
+   */
+  public function dir_closedir() {
+    return FALSE;
+  }
+
+  /**
+   * Undocumented.
+   *
+   * @todo document.
+   */
+  public function getDirectoryPath() {
+    return '';
+  }
+
+  /**
+   * DrupalStreamWrapperInterface requires that these methods be implemented,
+   * but none of them apply to a read-only stream wrapper. On failure they
+   * are expected to return FALSE.
+   */
+
+  /**
+   * Implements DrupalStreamWrapperInterface::unlink().
+   */
+  public function unlink($uri) {
+    // Although the remote file itself can't be deleted, return TRUE so that
+    // file_delete() can remove the file record from the Drupal database.
+    return TRUE;
+  }
+
+  /**
+   * Implements DrupalStreamWrapperInterface::rename().
+   */
+  public function rename($from_uri, $to_uri) {
+    return FALSE;
+  }
+
+  /**
+   * Implements DrupalStreamWrapperInterface::mkdir().
+   */
+  public function mkdir($uri, $mode, $options) {
+    return FALSE;
+  }
+
+  /**
+   * Implements DrupalStreamWrapperInterface::rmdir().
+   */
+  public function rmdir($uri, $options) {
+    return FALSE;
+  }
+
+  /**
+   * Implements DrupalStreamWrapperInterface::chmod().
+   */
+  public function chmod($mode) {
+    return FALSE;
+  }
+
+  /**
+   * Implements DrupalStreamWrapperInterface::dirname().
+   */
+  public function dirname($uri = NULL) {
+    return FALSE;
+  }
+}
diff --git a/profiles/commons/modules/contrib/oembed/PATCHES.txt b/profiles/commons/modules/contrib/oembed/PATCHES.txt
new file mode 100644
index 0000000..5dec3c8
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/PATCHES.txt
@@ -0,0 +1,8 @@
+The following patches have been applied to this project:
+- https://drupal.org/files/issues/list-enabled-plugins-2159335-1.patch
+- https://drupal.org/files/issues/remove-wysiwyg-special-casing-2159303-2.patch
+- https://drupal.org/files/issues/provide-default-display-configuration-2128389-3.patch
+- https://drupal.org/files/issues/add-file-and-mime-type-information-to-formatters-2159275-1.patch
+- https://drupal.org/files/issues/prefer-element-attributes-2159269-1.patch
+
+This file was automatically generated by Drush Make (http://drupal.org/project/drush).
\ No newline at end of file
diff --git a/profiles/commons/modules/contrib/oembed/README b/profiles/commons/modules/contrib/oembed/README
new file mode 100644
index 0000000..63e5771
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/README
@@ -0,0 +1,8 @@
+
+Drupal module implementing the oEmbed standard: http://oembed.com/
+
+* Supplies an input filter that replaces URL:s from oEmbed enabled sites with the embeddable data fetched from it
+* Contains a CCK field for exposing oEmbed content
+* Makes it possible for a Drupal site to become an oEmbed provider itself
+* Creates a oEmbed PHP Stream Wrapper for Resource and implements the various
+  formatter and file listing hooks in the File Entity and Media module.
diff --git a/profiles/commons/modules/contrib/oembed/deprecated/media_oembed/media_oembed.info b/profiles/commons/modules/contrib/oembed/deprecated/media_oembed/media_oembed.info
new file mode 100644
index 0000000..c3c08ae
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/deprecated/media_oembed/media_oembed.info
@@ -0,0 +1,16 @@
+name = Media: oEmbed
+description = Provides oEmbed support to the Media module.
+package = "Media"
+core = 7.x
+files[] = media_oembed.module
+dependencies[] = media_internet
+dependencies[] = oembedcore
+hidden = TRUE
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-1.0-rc2+6-dev"
+core = "7.x"
+project = "oembed"
+datestamp = "1387568916"
+
diff --git a/profiles/commons/modules/contrib/oembed/deprecated/media_oembed/media_oembed.install b/profiles/commons/modules/contrib/oembed/deprecated/media_oembed/media_oembed.install
new file mode 100644
index 0000000..82950da
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/deprecated/media_oembed/media_oembed.install
@@ -0,0 +1,89 @@
+<?php
+
+/**
+ * @file
+ * Install, update and uninstall functions for the Media: oEmbed module.
+ */
+
+/**
+ * Implement hook_update_dependencies().
+ */
+function media_oembed_update_dependencies() {
+  $dependencies['oembedcore'][7004] = array(
+    'media_oembed' => 7007,
+  );
+  return $dependencies;
+}
+
+/**
+ * Clear style and preset caches.
+ */
+function media_oembed_update_7001() {
+  // We don't do this if we're using version 1 of Styles.
+  if (function_exists('styles_style_flush')) {
+    styles_style_flush();
+  }
+
+  return array();
+}
+
+/**
+ * Add label to Media: oEmbed file style.
+ */
+function media_oembed_update_7003() {
+  return array();
+}
+
+/**
+ * Rebuild themes.
+ */
+function media_oembed_update_7004() {
+  drupal_theme_rebuild();
+  return array();
+}
+
+/**
+ * Add a large video preset and medium thumbnail.
+ */
+function media_oembed_update_7005() {
+  return array();
+}
+
+/**
+ * Add a square thumbnail preset.
+ */
+function media_oembed_update_7006() {
+  return array();
+}
+
+/**
+ * Rename file displays.
+ */
+function media_oembed_update_7007() {
+  ctools_include('export');
+
+  $displays = ctools_export_load_object('file_display');
+  foreach ($displays as $name => $display) {
+    list($file_type, $view_mode, $formatter_name) = explode('__', $name);
+    if (strpos($formatter_name, 'media_oembed') === 0) {
+      $formatter_name = str_replace('media_oembed', 'oembed', $formatter_name);
+      $new_display = array(
+        'api_version' => 1,
+        'name' => implode('__', array($file_type, $view_mode, $formatter_name)),
+        'status' => $display->status,
+        'weight' => $display->weight,
+        'settings' => $display->settings,
+        'export_type' => NULL,
+      );
+
+      file_display_save((object) $new_display);
+
+      if ($display->export_type & EXPORT_IN_DATABASE) {
+        ctools_export_crud_delete('file_display', $name);
+      }
+      if ($display->export_type & EXPORT_IN_CODE) {
+        ctools_export_crud_disable('file_display', $name);
+      }
+    }
+  }
+}
diff --git a/profiles/commons/modules/contrib/oembed/deprecated/media_oembed/media_oembed.module b/profiles/commons/modules/contrib/oembed/deprecated/media_oembed/media_oembed.module
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/deprecated/media_oembed/media_oembed.module
@@ -0,0 +1 @@
+<?php
diff --git a/profiles/commons/modules/contrib/oembed/deprecated/oembedcore.info b/profiles/commons/modules/contrib/oembed/deprecated/oembedcore.info
new file mode 100644
index 0000000..0d39447
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/deprecated/oembedcore.info
@@ -0,0 +1,20 @@
+package = oEmbed
+name = oEmbed
+description = Common functionality for oEmbed client and provider
+core = 7.x
+configure = admin/config/media/oembed
+dependencies[] = ctools
+files[] = oembed.module
+files[] = theme/oembed.theme.inc
+files[] = oembed.test
+files[] = OEmbedStreamWrapper.inc
+files[] = MediaInternetOEmbedHandler.inc
+hidden = TRUE
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-1.0-rc2+6-dev"
+core = "7.x"
+project = "oembed"
+datestamp = "1387568916"
+
diff --git a/profiles/commons/modules/contrib/oembed/deprecated/oembedcore.install b/profiles/commons/modules/contrib/oembed/deprecated/oembedcore.install
new file mode 100644
index 0000000..54dc033
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/deprecated/oembedcore.install
@@ -0,0 +1,57 @@
+<?php
+
+/**
+ * @file
+ * Install file for the oembed core
+ */
+
+/**
+ * Implement hook_update_dependencies().
+ */
+function oembedcore_update_dependencies() {
+  $dependencies['oembed'][7001] = array(
+    'oembedcore' => 7004,
+  );
+  return $dependencies;
+}
+
+/**
+ * Move oEmbed render cache to separate bin.
+ */
+function oembedcore_update_7000(&$sandbox) {
+  $table = drupal_get_schema_unprocessed('system', 'cache');
+  db_create_table('cache_oembed', $table);
+}
+
+/**
+ * Drop vestigial oembedcore_preset table which should have been dropped long ago.
+ */
+function oembedcore_update_7001() {
+  if (db_table_exists('oembedcore_preset')) {
+    db_drop_table('oembedcore_preset');
+  }
+}
+
+/**
+ * Rename oembedcore_provider table.
+ */
+function oembedcore_update_7002() {
+  db_rename_table('oembedcore_provider', 'oembed_provider');
+}
+
+/**
+ * Enable oEmbed module which replaces oEmbed Core, oEmbed Field and Media oEmbed.
+ */
+function oembedcore_update_7003() {
+  if (!module_exists('oembed')) {
+    module_enable(array('oembed'));
+  }
+}
+
+/**
+ * Disable and uninstall oEmbed Field, Media oEmbed modules.
+ */
+function oembedcore_update_7004() {
+  module_disable(array('oembedfield', 'media_oembed'));
+  drupal_uninstall_modules(array('oembedfield', 'media_oembed'));
+}
diff --git a/profiles/commons/modules/contrib/oembed/deprecated/oembedcore.module b/profiles/commons/modules/contrib/oembed/deprecated/oembedcore.module
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/deprecated/oembedcore.module
@@ -0,0 +1 @@
+<?php
diff --git a/profiles/commons/modules/contrib/oembed/deprecated/oembedfield.info b/profiles/commons/modules/contrib/oembed/deprecated/oembedfield.info
new file mode 100644
index 0000000..5c87be2
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/deprecated/oembedfield.info
@@ -0,0 +1,14 @@
+package = oEmbed
+name = oEmbed Field
+description = A formatter for the link field which embeds oembeddable content
+core = 7.x
+hidden = TRUE
+dependencies[] = oembedcore
+dependencies[] = link
+
+; Information added by drush on 2013-12-20
+version = "7.x-1.0-rc2+6-dev"
+core = "7.x"
+project = "oembed"
+datestamp = "1387568916"
+
diff --git a/profiles/commons/modules/contrib/oembed/deprecated/oembedfield.install b/profiles/commons/modules/contrib/oembed/deprecated/oembedfield.install
new file mode 100644
index 0000000..49f4b50
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/deprecated/oembedfield.install
@@ -0,0 +1,37 @@
+<?php
+
+/**
+ * Implement hook_update_dependencies().
+ */
+function oembedfield_update_dependencies() {
+  $dependencies['oembedcore'][7004] = array(
+    'oembedfield' => 7000,
+  );
+  return $dependencies;
+}
+
+/**
+ * Transition field formatters to oEmbed core module.
+ */
+function oembedfield_update_7000() {
+  require_once DRUPAL_ROOT . '/modules/field/field.info.inc';
+  foreach (field_info_field_map() as $field_name => $info) {
+    if ($info['type'] == 'link_field') {
+      foreach ($info['bundles'] as $entity_type => $bundles) {
+        foreach ($bundles as $bundle_name) {
+          $instance = field_read_instance($entity_type, $field_name, $bundle_name);
+          foreach ($instance['display'] as &$display) {
+            if ($display['module'] == 'oembedfield') {
+              $changed = TRUE;
+              $display['module'] = 'oembedcore';
+            }
+          }
+          if ($changed) {
+            field_update_instance($instance);
+          }
+          $changed = FALSE;
+        }
+      }
+    }
+  }
+}
diff --git a/profiles/commons/modules/contrib/oembed/deprecated/oembedfield.module b/profiles/commons/modules/contrib/oembed/deprecated/oembedfield.module
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/deprecated/oembedfield.module
@@ -0,0 +1 @@
+<?php
diff --git a/profiles/commons/modules/contrib/oembed/help/oembedcore.help.ini b/profiles/commons/modules/contrib/oembed/help/oembedcore.help.ini
new file mode 100644
index 0000000..f6d08c0
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/help/oembedcore.help.ini
@@ -0,0 +1,5 @@
+[advanced help settings]
+line break = TRUE
+
+[providers-plugins]
+title = Provider plugins
diff --git a/profiles/commons/modules/contrib/oembed/help/providers-plugins.html b/profiles/commons/modules/contrib/oembed/help/providers-plugins.html
new file mode 100644
index 0000000..0b736c7
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/help/providers-plugins.html
@@ -0,0 +1,32 @@
+<p>oEmbed Providers plugin data:</p>
+
+<pre>
+'title' => 'Default provider',
+'description' => 'oEmbed provider for remote endpoints',
+
+'scheme callback' => The scheme callback returns an array of regular expressions keyed by
+child plugin name. The scheme callback is called when the plugin is processed by ctools to
+assemble a regular expression of URLs that can be fulfilled by that plugin.
+
+'get child' => The singular 'get child' callback should be used to limit the number of
+plugin definitions that are loaded and cached.
+
+'capture subpatterns' => Local providers extract arguments from the URL. When converting
+the plugin's schemes to regular expressions, the capture subpatterns determines whether
+the $matches array passed around in the request process contains multiple values.
+
+'callback' => Params ($plugin, $url, $matches, $parameters) This callback should return
+an array that is an oEmbed response for the $url and $parameters. If the provider is
+not local, $plugin contains endpoint details. If the provider is local, $matches contains
+arguments from the URL.
+
+'provider' => Boolean to indicate that this plugin is used as an oEmbed provider. Plugins
+that integrate with the oEmbed endpoint so that Drupal content can have an embeddable
+representation available to third party sites are most likely provider plugins.
+'consumer' => Boolean to indicate that this plugin is used as an oEmbed consumer. Plugins
+that integrate with third party sites are most likely consumer plugins.
+
+// If a plugin doesn't indicate TRUE for provider or consumer, it is effectively disabled
+// and will never be used. Plugins may set both 'provider' and 'consumer' to TRUE.
+
+</pre>
diff --git a/profiles/commons/modules/contrib/oembed/oembed.admin.inc b/profiles/commons/modules/contrib/oembed/oembed.admin.inc
new file mode 100644
index 0000000..8675025
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.admin.inc
@@ -0,0 +1,109 @@
+<?php
+
+/**
+ * @file
+ * OEmbed admin pages.
+ */
+
+/**
+ * oEmbed admin settings page callback.
+ */
+function oembed_settings() {
+  $form = array();
+  $period = drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200, 4838400, 9676800), 'format_interval');
+  $period[CACHE_PERMANENT] = t('Indefinite');
+  $form['oembed_cache_lifetime'] = array(
+    '#type' => 'select',
+    '#title' => t('Minimum oEmbed cache lifetime'),
+    '#options' => $period,
+    '#default_value' => variable_get('oembed_cache_lifetime', 3600),
+    '#description' => t('Cached oEmbed output will not be re-requested until at least this much time has elapsed.'),
+  );
+  $form['oembed_cache_flush'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Clear oEmbed cache when all Drupal caches are cleared'),
+    '#default_value' => variable_get('oembed_cache_flush', TRUE),
+    '#description' => t('Unselect this to retain unexpired cached oEmbed output even when drupal_flush_all_caches() is called. In conjunction with a long %lifetime, this can help reduce costs when using an oEmbed provider service that charges a fee per request.', array('%lifetime' => t('Minimum oEmbed cache lifetime'))),
+  );
+  return system_settings_form($form);
+}
+
+/**
+ * oEmbed sandbox callback.
+ */
+function oembed_test($form, &$form_state) {
+  $form = array();
+
+  $form['url'] = array(
+    '#type' => 'textfield',
+    '#title' => t('URL'),
+    '#description' => t('URL to request from oEmbed provider'),
+    '#required' => TRUE,
+  );
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Submit'),
+  );
+
+  if (isset($form_state['embed'])) {
+    $form['response'] = array(
+      '#type' => 'container',
+    );
+    $form['response']['display']['oembed'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('oEmbed'),
+    );
+    $form['response']['display']['oembed'][] = $form_state['display']['oembed'];
+    $form['response']['display']['oembed'][] = array(
+      '#prefix' => '<pre>',
+      '#markup' => check_plain(drupal_render($form_state['display']['oembed'])),
+      '#suffix' => '</pre>',
+    );
+
+    $form['response']['display']['oembed_thumbnail'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('oEmbed Thumbnail'),
+    );
+    $form['response']['display']['oembed_thumbnail'][] = $form_state['display']['oembed_thumbnail'];
+    $form['response']['display']['oembed_thumbnail'][] = array(
+      '#prefix' => '<pre>',
+      '#markup' => check_plain(drupal_render($form_state['display']['oembed_thumbnail'])),
+      '#suffix' => '</pre>',
+    );
+    $form['response']['details'] = array(
+      '#type' => 'fieldset',
+      '#title' => t('Details'),
+    );
+    $form['response']['details']['data'] = array(
+      '#prefix' => '<pre>',
+      '#markup' => $form_state['embed'],
+      '#suffix' => '</pre>',
+    );
+  }
+  return $form;
+}
+
+/**
+ * Validate input by attemping to request URL and generate display.
+ */
+function oembed_test_validate($form, &$form_state) {
+
+  // Normalize input and look up
+  $url = $form_state['values']['url'];
+  $embed = oembed_get_data($url);
+  if (!empty($embed)) {
+    $form_state['embed'] = check_plain(print_r($embed, TRUE));
+    $form_state['display']['oembed'] = oembed_render_element('oembed', $url);
+    $form_state['display']['oembed_thumbnail'] = oembed_render_element('oembed_thumbnail', $url);
+  }
+  else {
+    form_set_error('url', t("%input is not valid oEmbed URL. Please check the !link for messages.", array('%input' => $form_state['values']['url'], '!link' => l(t("error log"), 'admin/reports/dblog'))));
+  }
+}
+
+/**
+ * Rebuild form.
+ */
+function oembed_test_submit($form, &$form_state) {
+  $form_state['rebuild'] = TRUE;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembed.api.php b/profiles/commons/modules/contrib/oembed/oembed.api.php
new file mode 100644
index 0000000..c1c53fe
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.api.php
@@ -0,0 +1,44 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by the oEmbed module.
+ */
+
+/**
+ * Alters an oEmbed request parameters and provider.
+ *
+ * @param array $parameters
+ *   oEmbed request parameters.
+ * @param object $provider
+ *   oEmbed provider info.
+ * @param string $url
+ *   The original URL or embed code to parse.
+ */
+function hook_oembed_request_alter(&$parameters, &$provider, $url) {
+  if ($provider['name'] == 'default:youtube') {
+    $parameters['iframe'] = '1';
+  }
+}
+
+/**
+ * Alters an oEmbed response.
+ *
+ * @param array $response
+ *   oEmbed response data.
+ */
+function hook_oembed_response_alter(&$response) {
+}
+
+/**
+ * Modify the provider's set of supported oEmbed response formats.
+ *
+ * @param array $formats
+ *   Format handlers keyed by format name.
+ */
+function hook_oembedprovider_formats_alter(&$formats) {
+  $formats['jsonp'] = array(
+    'mime' => 'text/javascript',
+    'callback' => '_oembedprovider_formats_jsonp',
+  );
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembed.file.inc b/profiles/commons/modules/contrib/oembed/oembed.file.inc
new file mode 100644
index 0000000..60d78cd
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.file.inc
@@ -0,0 +1,146 @@
+<?php
+
+/**
+ * Implements hook_file_formatter_info().
+ */
+function oembed_file_formatter_info() {
+  $formatters['oembed'] = array(
+    'label' => t('oEmbed'),
+    'file types' => array('audio, document, image, video'),
+    'default settings' => array('width' => '560', 'height' => '340', 'wmode' => ''),
+    'view callback' => 'oembed_file_formatter_view',
+    'settings callback' => 'oembed_file_formatter_oembed_settings',
+    'description' => t('All-purpose oEmbed formatter.'),
+    'mime types' => array('audio/oembed', 'image/oembed', 'text/oembed', 'video/oembed'),
+  );
+  $formatters['oembed_thumbnail'] = array(
+    'label' => t('oEmbed thumbnail'),
+    'file types' => array('audio, document, image, video'),
+    'default settings' => array('width' => '180', 'height' => ''),
+    'view callback' => 'oembed_file_formatter_view',
+    'settings callback' => 'oembed_file_formatter_oembed_thumbnail_settings',
+    'description' => t('oEmbed thumbnail media.'),
+    'mime types' => array('audio/oembed', 'image/oembed', 'text/oembed', 'video/oembed'),
+  );
+  return $formatters;
+}
+
+/**
+ * Implements hook_file_formatter_info_alter().
+ */
+function oembed_file_formatter_info_alter(&$info) {
+  if (isset($info['file_image'])) {
+    $info['oembed_image'] = array(
+      'label' => t('oEmbed image'),
+      'view callback' => 'oembed_remote_file_formatter_view',
+      'description' => t('oEmbed photo or thumbnail is saved to local filesystem and transformed by image styles.'),
+    ) + $info['file_image'];
+  }
+}
+
+/**
+ * Implements hook_file_mimetype_mapping_alter().
+ */
+function oembed_file_mimetype_mapping_alter(&$mapping) {
+  $mapping['mimetypes'][] = 'video/oembed';
+  $mapping['mimetypes'][] = 'image/oembed';
+  $mapping['mimetypes'][] = 'text/oembed';
+  $mapping['mimetypes'][] = 'audio/oembed';
+}
+
+/**
+ * Implements hook_file_operations().
+ */
+function oembed_file_operation_info() {
+  $operations = array(
+    'refresh' => array(
+      'label' => t('Refresh from source'),
+      'callback' => 'oembed_cache_clear',
+    ),
+  );
+  return $operations;
+}
+
+/**
+ * Implements hook_file_presave().
+ */
+function oembed_file_presave($file) {
+  // For new oEmbed files, set the filename to the oEmbed response's title or calculated
+  // alt attribute.
+  if (empty($file->fid) && isset($file->metadata['oembed'])) {
+    $embed = $file->metadata['oembed'];
+    $file->filename = truncate_utf8(empty($embed['title']) ? oembed_alt_attr($embed) : $embed['title'], 255);
+  }
+
+  // Fetch image dimensions.
+  oembed_metadata_fetch_image_dimensions($file);
+}
+
+/**
+ * Implements hook_file_load().
+ */
+function oembed_file_load($files) {
+  foreach ($files as $file) {
+    $scheme = file_uri_scheme($file->uri);
+    if ($scheme == 'oembed' && !isset($file->metadata['oembed'])) {
+
+      // Load plain oEmbed response onto file entity.
+      $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
+      $file->metadata['oembed'] = oembed_get_data($wrapper->getExternalUrl());
+
+      // Retrieve any missing images dimensions.
+      oembed_metadata_fetch_image_dimensions($file);
+
+      foreach (array('oembed', 'width', 'height') as $name) {
+        if (!empty($file->metadata[$name])) {
+          $value = $file->metadata[$name];
+          db_merge('file_metadata')
+            ->fields(array(
+              'value' => serialize($value),
+            ))
+            ->key(array(
+              'fid' => $file->fid,
+              'name' => $name,
+            ))
+            ->execute();
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Fetch the dimensions of an image and store them in the file metadata array.
+ */
+function oembed_metadata_fetch_image_dimensions($file) {
+
+  $scheme = file_uri_scheme($file->uri);
+  if ($scheme != 'oembed') {
+    return;
+  }
+
+  // Do not bother proceeding if this file does not have an image mime type.
+  if (file_entity_file_get_mimetype_type($file) != 'image') {
+    return;
+  }
+
+  // We have a non-empty image file.
+  $embed = $file->metadata['oembed'];
+  if ($embed && $embed['type'] == 'photo' && !empty($embed['width']) && !empty($embed['height'])) {
+    $file->metadata['width'] = $embed['width'];
+    $file->metadata['height'] = $embed['height'];
+  }
+  else {
+    // Fallback to NULL values.
+    $file->metadata['width'] = NULL;
+    $file->metadata['height'] = NULL;
+  }
+}
+
+/**
+ * Implements hook_file_metadata_info().
+ */
+function oembed_file_metadata_info() {
+  $info['oembed'] = array('label' => t('oEmbed'), 'type' => 'array');
+  return $info;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembed.file_default_displays.inc b/profiles/commons/modules/contrib/oembed/oembed.file_default_displays.inc
new file mode 100644
index 0000000..33d6951
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.file_default_displays.inc
@@ -0,0 +1,159 @@
+<?php
+
+/**
+ * @file
+ * Default display configuration for the default file types.
+ */
+
+/**
+ * Implements hook_file_default_displays().
+ */
+function oembed_file_default_displays() {
+  $file_displays = array();
+
+  // Audio.
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'audio__default__oembed';
+  $file_display->weight = 0;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'width' => '560',
+    'height' => '340',
+    'wmode' => '',
+  );
+  $file_displays['audio__default__oembed'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'audio__preview__oembed_thumbnail';
+  $file_display->weight = 0;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'width' => '100',
+    'height' => '100',
+  );
+  $file_displays['audio__preview__oembed_thumbnail'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__teaser__oembed';
+  $file_display->weight = 0;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'width' => '280',
+    'height' => '170',
+    'wmode' => '',
+  );
+  $file_displays['audio__teaser__oembed'] = $file_display;
+
+  // Document.
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'document__default__oembed';
+  $file_display->weight = 0;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'width' => '560',
+    'height' => '340',
+    'wmode' => '',
+  );
+  $file_displays['document__default__oembed'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'document__preview__oembed_thumbnail';
+  $file_display->weight = 0;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'width' => '100',
+    'height' => '100',
+  );
+  $file_displays['document__preview__oembed_thumbnail'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'document__teaser__oembed';
+  $file_display->weight = 0;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'width' => '280',
+    'height' => '170',
+    'wmode' => '',
+  );
+  $file_displays['document__teaser__oembed'] = $file_display;
+
+  // Image.
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__default__oembed';
+  $file_display->weight = 0;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'width' => '560',
+    'height' => '340',
+    'wmode' => '',
+  );
+  $file_displays['image__default__oembed'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__preview__oembed_thumbnail';
+  $file_display->weight = 0;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'width' => '100',
+    'height' => '100',
+  );
+  $file_displays['image__preview__oembed_thumbnail'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'image__teaser__oembed';
+  $file_display->weight = 0;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'width' => '280',
+    'height' => '170',
+    'wmode' => '',
+  );
+  $file_displays['image__teaser__oembed'] = $file_display;
+
+  // Video.
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'video__default__oembed';
+  $file_display->weight = 0;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'width' => '560',
+    'height' => '340',
+    'wmode' => '',
+  );
+  $file_displays['video__default__oembed'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'video__preview__oembed_thumbnail';
+  $file_display->weight = 0;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'width' => '100',
+    'height' => '100',
+  );
+  $file_displays['video__preview__oembed_thumbnail'] = $file_display;
+
+  $file_display = new stdClass();
+  $file_display->api_version = 1;
+  $file_display->name = 'video__teaser__oembed';
+  $file_display->weight = 0;
+  $file_display->status = TRUE;
+  $file_display->settings = array(
+    'width' => '280',
+    'height' => '170',
+    'wmode' => '',
+  );
+  $file_displays['video__teaser__oembed'] = $file_display;
+
+  return $file_displays;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembed.file_type.inc b/profiles/commons/modules/contrib/oembed/oembed.file_type.inc
new file mode 100644
index 0000000..c935b73
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.file_type.inc
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Implements hook_file_default_types_alter().
+ */
+function oembed_file_default_types_alter(&$types) {
+  $types['image']->mimetypes[] = 'image/oembed';
+  $types['image']->streams[] = 'oembed';
+
+  $types['video']->mimetypes[] = 'video/oembed';
+  $types['video']->streams[] = 'oembed';
+
+  $types['document']->mimetypes[] = 'text/oembed';
+  $types['document']->streams[] = 'oembed';
+
+  $types['audio']->mimetypes[] = 'audio/oembed';
+  $types['audio']->streams[] = 'oembed';
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembed.filter.inc b/profiles/commons/modules/contrib/oembed/oembed.filter.inc
new file mode 100644
index 0000000..6bf185d
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.filter.inc
@@ -0,0 +1,382 @@
+<?php
+
+/**
+ * @file
+ * Input filter that enhances oEmbed enabled URLs with extra content
+ */
+
+define('OEMBED_PATTERN_AUTOEMBED', '|^\s*(https?://[^\s"]+)\s*$|im');
+define('OEMBED_PATTERN_EMBED_SHORTCODE', '/(.?)\[embed\b(.*?)\](.+?)\[\/embed\](.?)/s');
+define('OEMBED_PATTERN_EMBED_UNWRAP', '/<p>\s*+(\[embed\b.*?\].+?\[\/embed\])\s*+<\/p>/s');
+
+/**
+ * Implements hook_filter_info().
+ */
+function oembed_filter_info() {
+  $filters['oembed'] = array(
+    'title' => t('oEmbed filter'),
+    'description' => t('Embeds content for oEmbed-enabled web addresses and turns the rest, and e-mail addresses, into clickable links.'),
+    'prepare callback' => 'oembed_filter_oembed_prepare',
+    'process callback' => 'oembed_filter_oembed_process',
+    'settings callback' => 'oembed_filter_oembed_settings',
+    'tips callback' => 'oembed_filter_oembed_tips',
+    'default settings' => array(
+      'options' => '',
+      'view_mode' => 'full',
+      'autoembed' => TRUE,
+    ),
+  );
+  $filters['oembed_legacy'] = array(
+    'title' => t('oEmbed legacy filter'),
+    'description' => t('Embeds content for oEmbed-enabled web addresses and turns the rest, and e-mail addresses, into clickable links.'),
+    'process callback' => 'oembed_filter_oembed_legacy_process',
+    'settings callback' => 'oembed_filter_oembed_legacy_settings',
+    'default settings' => array(
+      'maxwidth' => '',
+      'maxheight' => '',
+    ),
+  );
+  return $filters;
+}
+
+/**
+ * Implements hook_filter_FILTER_settings().
+ */
+function oembed_filter_oembed_legacy_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
+  module_load_include('inc', 'oembed', 'oembed_legacy');
+  return _oembed_filter_settings($form, $form_state, $filter, $format, $defaults);
+}
+
+/**
+ * Implements hook_filter_FILTER_process().
+ */
+function oembed_filter_oembed_legacy_process($text, $filter, $format, $langcode, $cache, $cache_id) {
+  module_load_include('inc', 'oembed', 'oembed_legacy');
+  return _oembed_filter_apply($text, $filter, $format, $langcode, $cache, $cache_id);
+}
+
+/**
+ * Implements hook_filter_FILTER_settings().
+ */
+function oembed_filter_oembed_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
+  $filter->settings += $defaults;
+  $settings = array();
+
+  if (module_exists('file_entity') && module_exists('inline')) {
+    $options = array();
+    $entity_info = entity_get_info('file');
+    $view_modes = $entity_info['view modes'];
+    foreach ($view_modes as $view_mode_name => $view_mode_info) {
+      $options[$view_mode_name] = $view_mode_info['label'];
+    }
+    if (empty($options)) {
+      $options['full'] = t('Full');
+    }
+    $settings['view_mode'] = array(
+      '#type' => 'select',
+      '#options' => $options,
+      '#title' => t('File entity view mode'),
+      '#default_value' => $filter->settings['view_mode'],
+    );
+  }
+  else {
+    $settings['view_mode'] = array(
+      '#type' => 'value',
+      '#value' => $filter->settings['view_mode'],
+    );
+  }
+  $settings['options'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Default oEmbed request options'),
+    '#default_value' => $filter->settings['options'],
+    '#description' => t('A series of attribute value pairs for the default request options. For example, <em>maxwidth="500"</em>.'),
+  );
+  $settings['autoembed'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Automatically embed URLs'),
+    '#default_value' => $filter->settings['autoembed'],
+    '#description' => t('When possible, embed the media content from a URL directly in the input.'),
+  );
+  return $settings;
+}
+
+/**
+ * Implements hook_filter_FILTER_process().
+ */
+function oembed_filter_oembed_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {
+  if ($filter->settings['autoembed']) {
+    $text = preg_replace_callback(OEMBED_PATTERN_AUTOEMBED, 'oembed_preg_auto_replace', $text);
+  }
+  return $text;
+}
+
+/**
+ * Implements hook_filter_FILTER_process().
+ */
+function oembed_filter_oembed_process($text, $filter, $format, $langcode, $cache, $cache_id) {
+  global $_oembed_filter_settings;
+
+  $_oembed_filter_settings = !empty($filter->settings['options']) ? oembed_parse_attr($filter->settings['options']) : array();
+  $_oembed_filter_settings['view_mode'] = $filter->settings['view_mode'];
+
+  // Undo auto paragraph around oEmbed shortcodes.
+  $text = preg_replace(OEMBED_PATTERN_EMBED_UNWRAP, '$1', $text);
+
+  $text = preg_replace_callback(OEMBED_PATTERN_EMBED_SHORTCODE, 'oembed_preg_tag_replace', $text);
+
+  unset($_oembed_filter_settings);
+
+  return $text;
+}
+
+/**
+ * Implements hook_filter_FILTER_tips().
+ */
+function oembed_filter_oembed_tips($filter, $format, $long) {
+  if ($long) {
+    return t('Embed content by wrapping a supported URL in [embed] &hellip; [/embed]. Set options such as width and height with attributes [embed width="123" height="456"] &hellip; [/embed]. Unsupported options will be ignored.');
+  }
+  else {
+    return t('Embed content by wrapping a supported URL in [embed] &hellip; [/embed].');
+  }
+}
+
+/**
+ * PREG replace callback finds [embed] shortcodes, URLs and request options.
+ */
+function oembed_preg_tag_replace($match) {
+  global $_oembed_filter_settings;
+
+  // allow [[oembed]] syntax for escaping a tag
+  if ($match[1] == '[' && $match[4] == ']') {
+    return substr($match[0], 1, -1);
+  }
+
+  $url = $match[3];
+
+  $view_mode = $_oembed_filter_settings['view_mode'];
+
+  $shortcode_options = !empty($match[2]) ? oembed_parse_attr($match[2]) : array();
+  $options = array_merge($_oembed_filter_settings, $shortcode_options);
+
+  if (isset($options['view_mode'])) {
+    $view_mode = $options['view_mode'];
+    unset($options['view_mode']);
+  }
+
+  return $match[1] . oembed_resolve_link($url, $view_mode, $options) . $match[4];
+}
+
+/**
+ * PREG replace callback finds URLs
+ */
+function oembed_preg_auto_replace($match) {
+  return '[embed]'. $match[1] ."[/embed]\n";
+}
+
+/**
+ * PREG replace callback finds [embed] shortcodes, URLs and request options.
+ *
+ * @see MediaInternetOEmbedHandler::preSave().
+ */
+function oembed_resolve_link($url, $view_mode = 'full', $options = array()) {
+
+  $url = decode_entities($url);
+
+  $element = array();
+  $matches = array();
+
+  // If file_entity module is enabled, treat the URL as an uploaded file. Inline is used
+  // to defer the rendering of the embedded content until the entity is actually viewed.
+  // This technique allows content to be cached by Drupal's filter system.
+  if (module_exists('file_entity') && module_exists('inline')) {
+    $file = oembed_url_to_file($url);
+    $file->override = $options;
+    if (isset($file->fid)) {
+      $macro_params = array();
+      $macro_params[] = 'entity';
+      $macro_params[] = 'type=file';
+      $macro_params[] = 'id='. $file->fid;
+      $macro_params[] = 'view_mode='. $view_mode;
+      $element = array('#markup' => "\r\n".'[' . implode('|', $macro_params) . ']'."\r\n");
+    }
+  }
+  else if ($provider = oembed_get_provider($url, $matches)) {
+    $embed = oembed_get_data($url);
+    if ($embed) {
+      $element = oembed_render_element('oembed', $url, $options);
+    }
+  }
+
+  $return = drupal_render($element);
+
+  if (empty($return)) {
+    $return = $url;
+  }
+
+  return $return;
+}
+
+/**
+ * Retrieve all attributes from the shortcodes tag.
+ *
+ * @see shortcode_parse_atts in WordPress 3.1.3.
+ * @param string $text
+ * @return array List of attributes and their value.
+ */
+function oembed_parse_attr($text) {
+  $attributes = array();
+  $pattern = '/(\w+)\s*=\s*"([^"]*)"(?:\s|$)|(\w+)\s*=\s*\'([^\']*)\'(?:\s|$)|(\w+)\s*=\s*([^\s\'"]+)(?:\s|$)|"([^"]*)"(?:\s|$)|(\S+)(?:\s|$)/';
+  $text = preg_replace("/[\x{00a0}\x{200b}]+/u", " ", $text);
+  if (preg_match_all($pattern, $text, $matches, PREG_SET_ORDER)) {
+    foreach ($matches as $match) {
+      if (!empty($match[1])) {
+        $attributes[strtolower($match[1])] = stripcslashes($match[2]);
+      }
+      elseif (!empty($match[3])) {
+        $attributes[strtolower($match[3])] = stripcslashes($match[4]);
+      }
+      elseif (!empty($match[5])) {
+        $attributes[strtolower($match[5])] = stripcslashes($match[6]);
+      }
+      elseif (isset($match[7]) and strlen($match[7])) {
+        $attributes[] = stripcslashes($match[7]);
+      }
+      elseif (isset($match[8])) {
+        $attributes[] = stripcslashes($match[8]);
+      }
+    }
+  } else {
+    $attributes = ltrim($text);
+  }
+  return $attributes;
+}
+
+/**
+ * Extract all URLs for oEmbed to process.
+ *
+ * Returns an array of URLs grouped by field, delta, and column.
+ */
+function _oembed_field_extract_urls($entity_type, $entity) {
+  $urls = array();
+
+  // Determine if any formats use oEmbed filter.
+  $filter_settings = array();
+  foreach (filter_formats() as $format) {
+    $filters = filter_list_format($format->format);
+    if (isset($filters['oembed']) && $filters['oembed']->status) {
+      $filter_settings[$format->format] = $filters['oembed']->settings;
+    }
+  }
+
+  if (!empty($filter_settings)) {
+
+    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
+    $instances = field_info_instances($entity_type, $bundle);
+
+    foreach ($instances as $info) {
+
+      // All text fields have a text_processing setting. Only search text fields with
+      // text processing enabled.
+      if (isset($info['settings']['text_processing']) && $info['settings']['text_processing']) {
+        $items = field_get_items($entity_type, $entity, $info['field_name']);
+        if (!$items) {
+          continue;
+        }
+        foreach ($items as $delta => $item) {
+          if (isset($filter_settings[$item['format']])) {
+
+            // URLs may be contained within the other column values.
+            foreach (array('value', 'summary') as $column) {
+              if (!empty($item[$column])) {
+                $text = $item[$column];
+
+                // copied from oembed_filter_oembed_prepare().
+                if ($filter_settings[$item['format']]['autoembed']) {
+                  $text = preg_replace_callback(OEMBED_PATTERN_AUTOEMBED, 'oembed_preg_auto_replace', $text);
+                }
+
+                // copied from oembed_filter_oembed_process().
+                $matches = array();
+                preg_match_all(OEMBED_PATTERN_EMBED_SHORTCODE, $text, $matches);
+                $urls[$info['field_name']][$delta][$column] = array_filter($matches[3], '_oembed_field_filter_urls');
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+
+  return $urls;
+}
+
+/**
+ * array_filter() callback that removes URLs for which there is no provider.
+ */
+function _oembed_field_filter_urls($match) {
+  $matches = array();
+  if (oembed_get_provider($match, $matches)) {
+    return TRUE;
+  }
+  return FALSE;
+}
+
+/**
+ * Implements hook_field_attach_validate().
+ */
+function oembed_field_attach_validate($entity_type, $entity, array &$errors) {
+  foreach (_oembed_field_extract_urls($entity_type, $entity) as $field_name => $items) {
+    foreach ($items as $delta => $item) {
+      foreach ($item as $column => $urls) {
+        $messages = array();
+        foreach ($urls as $url) {
+          $embed = oembed_get_data($url);
+          $validation_errors = oembed_validate_response($embed);
+          if (!empty($validation_errors)) {
+            $message = t('!url could not be embedded.', array('!url' => l(_filter_url_trim($url, 50), $url)));
+            $message .= theme('item_list', array('items' => $validation_errors));
+            $messages[] = $message;
+          }
+        }
+        if (!empty($messages)) {
+          $errors[$field_name][$entity->language][$delta][] = array(
+            'error' => 'oembed_'. $column,
+            'message' => theme('item_list', array('items' => $messages)),
+            'repeat' => TRUE,
+          );
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_entity_insert().
+ */
+function oembed_entity_insert($entity, $entity_type) {
+  if (module_exists('file_entity')) {
+    list($id, , ) = entity_extract_ids($entity_type, $entity);
+    $uris = array();
+    foreach (_oembed_field_extract_urls($entity_type, $entity) as $items) {
+      foreach ($items as $item) {
+        foreach ($item as $urls) {
+          foreach ($urls as $url) {
+            $uris[$url] = isset($uris[$url]) ? $uris[$url] + 1 : 1;
+          }
+        }
+      }
+    }
+
+    foreach ($uris as $url => $count) {
+      $file = oembed_url_to_file($url, TRUE);
+      file_usage_delete($file, 'oembed', $entity_type, $id, 0);
+      file_usage_add($file, 'oembed', $entity_type, $id, $count);
+    }
+  }
+}
+
+function oembed_entity_update($entity, $entity_type) {
+  oembed_entity_insert($entity, $entity_type);
+}
+
diff --git a/profiles/commons/modules/contrib/oembed/oembed.info b/profiles/commons/modules/contrib/oembed/oembed.info
new file mode 100644
index 0000000..04cf4e7
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.info
@@ -0,0 +1,19 @@
+package = oEmbed
+name = oEmbed
+description = Common functionality for oEmbed client and provider
+core = 7.x
+configure = admin/config/media/oembed
+dependencies[] = ctools
+files[] = oembed.module
+files[] = theme/oembed.theme.inc
+files[] = oembed.test
+files[] = OEmbedStreamWrapper.inc
+files[] = MediaInternetOEmbedHandler.inc
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-1.0-rc2+6-dev"
+core = "7.x"
+project = "oembed"
+datestamp = "1387568916"
+
diff --git a/profiles/commons/modules/contrib/oembed/oembed.install b/profiles/commons/modules/contrib/oembed/oembed.install
new file mode 100644
index 0000000..8a8d0f3
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.install
@@ -0,0 +1,87 @@
+<?php
+
+/**
+ * Implementation of hook_schema().
+ */
+function oembed_schema() {
+  $schema['oembed_provider'] = _oembed_provider_schema_1();
+  $schema['cache_oembed'] = drupal_get_schema_unprocessed('system', 'cache');
+  $schema['cache_oembed']['description'] = 'Cache table for the oEmbed module.';
+  return $schema;
+}
+
+function _oembed_provider_schema_1() {
+  return array(
+    'export' => array(
+      'identifier'      => 'provider',
+      'primary key'     => 'pid',
+      'bulk export'     => TRUE,
+      'default hook'    => 'default_oembed_provider',
+      'api' => array(
+        'owner' => 'oembed',
+        'api' => 'oembed_provider',
+        'minimum_version' => 1,
+        'current_version' => 1,
+      ),
+    ),
+    'fields' => array(
+      'pid' => array(
+        'type'        => 'serial',
+        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
+        'not null'    => TRUE,
+        'no export'   => TRUE,
+      ),
+      'name' => array(
+        'type'        => 'varchar',
+        'length'      => 255,
+        'description' => 'Unique ID for this subtask. Used to identify it programmatically.',
+        'not null'    => TRUE,
+        'default'     => '',
+      ),
+      'title' => array(
+        'description' => 'The human-readable title of the provider.',
+        'type'        => 'varchar',
+        'length'      => 255,
+        'not null'    => TRUE,
+        'default'     => '',
+      ),
+      'endpoint' => array(
+        'type'        => 'varchar',
+        'length'      => 255,
+        'description' => 'The endpoint for this provider.',
+        'not null'    => TRUE,
+        'default'     => '',
+      ),
+      'scheme' => array(
+        'type'           => 'text',
+        'size'           => 'big',
+        'description'    => 'Line separated scheme definition.',
+        'not null'       => TRUE,
+        'serialize'      => TRUE,
+        'object default' => '',
+      ),
+    ),
+    'primary key' => array('pid'),
+    'unique keys' => array(
+      'name' => array('name'),
+    ),
+  );
+}
+
+/**
+ * Rename extant oembed filters to oembed_legacy.
+ */
+function oembed_update_7000(&$sandbox) {
+  db_update('filter')
+    ->fields(array('name' => 'oembed_legacy'))
+    ->condition('name', 'oembed')
+    ->execute();
+}
+
+/**
+ * Disable and uninstall oEmbed core.
+ */
+function oembed_update_7001() {
+  module_disable(array('oembedcore'));
+  drupal_uninstall_modules(array('oembedcore'));
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembed.media.inc b/profiles/commons/modules/contrib/oembed/oembed.media.inc
new file mode 100644
index 0000000..7a59bdb
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.media.inc
@@ -0,0 +1,27 @@
+<?php
+
+/**
+ *  Implements hook_media_parse().
+ *
+ *  @todo: this might be deprecated now that we have media_internet,
+ *  but the hook is still being called in a couple places in media.
+ */
+function oembed_media_parse($url, $options = array()) {
+  $scheme = 'oembed://';
+  $matches = array();
+  if ($provider = oembed_get_provider($url, $matches)) {
+    return file_stream_wrapper_uri_normalize($scheme . drupal_encode_path($url));
+  }
+  // @TODO: Validate for malformed oembed urls.
+}
+
+/**
+ * Implements hook_media_internet_providers();
+ */
+function oembed_media_internet_providers() {
+  $info['MediaInternetOEmbedHandler'] = array(
+    'title' => t('oEmbed'),
+  );
+
+  return $info;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembed.module b/profiles/commons/modules/contrib/oembed/oembed.module
new file mode 100644
index 0000000..0b7569f
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.module
@@ -0,0 +1,1006 @@
+<?php
+
+/**
+ * @file
+ * Core functionality for oEmbed
+ */
+
+require_once dirname(__FILE__) . '/oembed.filter.inc';
+
+/**
+ * Implements hook_hook_info().
+ */
+function oembed_hook_info() {
+  $hooks['oembed_request_alter'] = array(
+    'group' => 'oembed',
+  );
+  $hooks['oembed_response_alter'] = array(
+    'group' => 'oembed',
+  );
+  return $hooks;
+}
+
+/**
+ * Implements hook_help().
+ */
+function oembed_help($path, $arg) {
+  switch ($path) {
+    case 'admin/help#oembed':
+      $output = '<p>'. t('oEmbed module will allow your Drupal site to embed content from <a href="@oembed">oEmbed</a>-providers as well as for the site to become an oEmbed-provider itself so that other oEmbed-enabled websites can easily embed your content.', array('@oembed' => 'http://www.oembed.com/')) .'</p>';
+      $output .= '<p>'. t('Add or enable <a href="@provider">providers</a> to embed content from other sites.', array('@provider' => url('admin/build/oembed/provider'))) .'</p>';
+      $output .= '<p>'. t('Adds an input filter for replacing oEmbed enabled URLs with embedded content') .'</p>';
+      return $output;
+
+    case 'admin/config/media/oembed':
+    case 'admin/config/media/oembed/consumer':
+      $output = '<p>'. t('These settings affect how your site behaves when it makes requests as an oEmbed consumer.') .'</p>';
+      return $output;
+
+    case 'admin/config/media/oembed/provider':
+      $output = '<p>'. t('Providers are other web sites with oEmbed endpoints whose content you can embed on your site.') .'</p>';
+      return $output;
+
+    case 'admin/config/media/oembed/test':
+      $output = '<p>'. t('Use this form to test your configuration of provider plugins and endpoints.') .'</p>';
+      return $output;
+  }
+}
+
+/**
+ * Implements hook_permission().
+ */
+function oembed_permission() {
+  return array(
+    'administer oembed' => array(
+      'title' => t('Administer oEmbed'),
+      'description' => t('Define providers for oEmbed.'),
+    ),
+  );
+}
+
+/**
+ * Implements hook_flush_caches().
+ */
+function oembed_flush_caches() {
+  // Because some oEmbed providers (e.g., http://embed.ly) charge per request,
+  // allow cache_oembed to opt out of drupal_flush_all_caches() clearing.
+  if (variable_get('oembed_cache_flush', TRUE)) {
+    return array('cache_oembed');
+  }
+}
+
+/**
+ * Implements hook_cron().
+ */
+function oembed_cron() {
+  // If cache_oembed opts out of oembed_flush_caches(), then system_cron()
+  // doesn't clear its expired records, so do so here.
+  if (!variable_get('oembed_cache_flush', TRUE)) {
+    cache_clear_all(NULL, 'cache_oembed');
+  }
+}
+
+/**
+ * Implements hook_menu().
+ */
+function oembed_menu() {
+  $items = array();
+
+  $items['admin/config/media/oembed'] = array(
+    'title' => 'oEmbed',
+    'description' => 'Settings for oEmbed',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('oembed_settings'),
+    'file' => 'oembed.admin.inc',
+    'access arguments' => array('administer site configuration'),
+  );
+  $items['admin/config/media/oembed/consumer'] = array(
+    'title' => 'Consumer settings',
+    'type' => MENU_DEFAULT_LOCAL_TASK,
+  );
+  $items['admin/config/media/oembed/provider'] = array(
+    'title' => 'Provider plugins',
+    'description' => 'Settings for oEmbed provider plugins',
+    'type' => MENU_LOCAL_TASK,
+  );
+  $items['admin/config/media/oembed/test'] = array(
+    'title' => 'Test',
+    'description' => 'Test URLs for oEmbed',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('oembed_test'),
+    'file' => 'oembed.admin.inc',
+    'type' => MENU_LOCAL_TASK,
+    'access arguments' => array('administer site configuration'),
+  );
+
+  return $items;
+}
+
+/**
+ * Implements hook_menu_alter().
+ *
+ * Instead of rewriting ctools export UI's hook_menu implementations, alter
+ * the callback items to have a common menu item.
+ */
+function oembed_menu_alter(&$items) {
+
+  // Create a new menu item where all oembed export UIs will be local tasks by
+  // copying the export UI's menu item that will become the default local task.
+  $items['admin/config/media/oembed/provider'] += $items['admin/config/media/oembed/provider/default'];
+  $items['admin/config/media/oembed/provider']['type'] = MENU_LOCAL_TASK;
+
+  $items['admin/config/media/oembed/provider/default']['type'] = MENU_DEFAULT_LOCAL_TASK;
+}
+
+/**
+ * Implements of hook_theme().
+ */
+function oembed_theme() {
+  $path = drupal_get_path('module', 'oembed') . '/theme';
+  return array(
+    'oembed' => array(
+      'file' => 'oembed.theme.inc',
+      'path' => $path,
+      'variables' => array('embed' => NULL),
+    ),
+    'oembed__photo' => array(
+      'variables' => array('embed' => NULL),
+      'base hook' => 'oembed',
+    ),
+    'oembed__rich' => array(
+      'variables' => array('embed' => NULL),
+      'base hook' => 'oembed',
+    ),
+    'oembed__video' => array(
+      'variables' => array('embed' => NULL),
+      'base hook' => 'oembed',
+    ),
+  );
+}
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ *
+ * Adds enabled oEmbed plugins to the list of enabled web media providers.
+ */
+function oembed_form_media_internet_add_alter(&$form, $form_state) {
+  if (isset($form['providers'])) {
+    // Create an array to hold potential Internet media providers.
+    $providers = array();
+
+    // Determine if there are any visible providers.
+    foreach (media_internet_get_providers() as $key => $provider) {
+      if (empty($provider['hidden']) || $provider['hidden'] != TRUE) {
+        if ($provider['module'] != 'oembed') {
+          $providers[] = array(
+            'data' => check_plain($provider['title']),
+            'class' => array(drupal_html_class($provider['title'])),
+          );
+        }
+        else {
+          ctools_include('plugins');
+          $plugins = ctools_get_plugins('oembed', 'providers');
+          uasort($plugins, 'ctools_plugin_sort');
+
+          // Create an array to hold potential oEmbed providers.
+          $oembed_providers = array();
+
+          foreach ($plugins as $plugin) {
+            // A plugin with no schemes is effectively disabled.
+            if (!empty($plugin['scheme'])) {
+              // A scheme map is used to match a URL to a specific child plugin.
+              if (!empty($plugin['scheme map'])) {
+                foreach ($plugin['scheme map'] as $id => $scheme) {
+                  // This forces the 'get child' callback to the loaded.
+                  ctools_plugin_get_function($plugin, 'get child');
+                  $plugin = ctools_get_plugins('oembed', 'providers', $id);
+
+                  $oembed_providers[] = array(
+                    'data' => check_plain($plugin['title']),
+                    'class' => array(drupal_html_class($plugin['title'])),
+                  );
+                }
+              }
+            }
+          }
+
+          $providers[] = array(
+            'data' => check_plain($provider['title']),
+            'class' => array(drupal_html_class($provider['title'])),
+            'children' => $oembed_providers,
+          );
+        }
+      }
+    }
+
+    // Override the default list of providers.
+    $form['providers']['#items'] = $providers;
+  }
+}
+
+/**
+ * Returns the provider for a url.
+ *
+ * @param string $url
+ *  The url to get the provider for.
+ * @return mixed
+ *  A valid callback or FALSE
+ */
+function oembed_get_provider($url, &$matches, $role = 'consumer') {
+  ctools_include('plugins');
+  $plugins = ctools_get_plugins('oembed', 'providers');
+  uasort($plugins, 'ctools_plugin_sort');
+
+  // This function may need check twice if a provider matches the URL. The first check
+  // is to determine if the plugin's callback can handle the URL. The second check
+  // returns the name of the child plugin that can fulfill the request.
+  foreach ($plugins as $plugin) {
+
+    // A plugin with no schemes is effectively disabled.
+    if ($plugin[$role] && !empty($plugin['scheme'])) {
+
+      // Plugins will only be checked if they are enabled for the role.
+      if (preg_match($plugin['scheme'], $url, $matches)) {
+
+        // A scheme map is used to match a URL to a specific child plugin.
+        if (!empty($plugin['scheme map'])) {
+          foreach ($plugin['scheme map'] as $id => $scheme) {
+            if (preg_match($scheme, $url, $matches)) {
+
+              // This forces the 'get child' callback to the loaded.
+              ctools_plugin_get_function($plugin, 'get child');
+              $plugin = ctools_get_plugins('oembed', 'providers', $id);
+              break;
+            }
+          }
+        }
+
+        return $plugin;
+      }
+    }
+  }
+  return FALSE;
+}
+
+/**
+ * Reset the registered provider caches.
+ */
+function oembed_providers_reset() {
+  ctools_include('plugins');
+  ctools_get_plugins_reset();
+  $info = ctools_plugin_get_info('oembed', 'providers');
+  cache_clear_all('plugins:oembed:providers', $info['cache table']);
+}
+
+/**
+ * Fetch data for an embeddable URL.
+ *
+ * @param string $url
+ *   An external URL for the content to embed.
+ * @param array $parameters
+ *   An associative array of request parameters, with the following keys:
+ *   - 'maxwidth'
+ *       The maximum width of the embed, in pixels.
+ *   - 'maxheight'
+ *       The maximum height of the embed, in pixels.
+ *   Other keys may be supported by some providers (twitter, youtube, wordpress).
+ * @return
+ *   False or an object representing the embeddable data of the URL.
+ */
+function oembed_get_data($url, $parameters = array()) {
+  $matches = array();
+  $parameters = array_filter($parameters);
+  if ($plugin = oembed_get_provider($url, $matches)) {
+    return oembed_oembed_fetch($plugin, $url, $matches, $parameters);
+  }
+  return FALSE;
+}
+
+/**
+ * oEmbed fetcher and parser.
+ *
+ * This handles fetching from remote providers and local registered callbacks.
+ * It does not cache the responses because they are cached when rendered.
+ */
+function oembed_oembed_fetch($plugin, $url, $matches, $parameters = array()) {
+  $embed = FALSE;
+
+  // Normalize the parameters and attributes for better cache performance.
+  ksort($parameters);
+  $parameters = array_filter($parameters);
+
+  if ($plugin['cache']) {
+    $cache_keys = array();
+
+    // Remove trailing slash to normalize URLs.
+    $cache_keys[] = hash('sha256', substr($url, -1) == '/' ? substr($url, 0, -1) : $url);
+
+    // Hash and serialize request parameters and display options.
+    if (!empty($parameters)) {
+      $cache_keys[] = hash('sha256', serialize($parameters));
+    }
+
+    $cache_key = implode(':', $cache_keys);
+    $cache = cache_get($cache_key, 'cache_oembed');
+
+    // Cache hit.
+    if ($cache && isset($cache->data)) {
+      return $cache->data;
+    }
+  }
+
+  // Cache miss.
+  drupal_alter('oembed_request', $parameters, $plugin, $url);
+
+  // Drupal oEmbed provider uses function callbacks for internal requests.
+  $function = ctools_plugin_get_function($plugin, 'callback');
+  if ($function) {
+    $embed = call_user_func($function, $plugin, $url, $matches, $parameters);
+  }
+
+  // Decorate the oEmbed response object with additional properties that are
+  // handy when theming the output.
+  if ($embed) {
+    $embed['original_url'] = $url;
+    $embed['provider'] = $plugin['name'];
+    drupal_alter('oembed_response', $embed);
+  }
+
+  if ($plugin['cache']) {
+
+    // If expire is not set, use default value and adjust for request time.
+    $lifetime = variable_get('oembed_cache_lifetime', 3600);
+
+    // Recalculate cache expire time based on response.
+    if ($embed && $lifetime != CACHE_PERMANENT && isset($embed['cache_age'])) {
+      $lifetime = max($lifetime, intval($embed['cache_age']));
+    }
+    else if (!$embed && $lifetime == CACHE_PERMANENT) {
+      $lifetime = 3600;
+    }
+
+    if ($embed && $lifetime == CACHE_PERMANENT) {
+      $expire = $lifetime;
+    }
+    else {
+      $expire = min($lifetime + REQUEST_TIME, 2147483647);
+    }
+
+    // Twitter returns an unreasonably high cache_age of 31536000000 seconds,
+    // which is longer than the expire column in Drupal cache table supports.
+    cache_set($cache_key, $embed, 'cache_oembed', $expire);
+  }
+
+  return $embed;
+}
+
+/**
+ * Implements hook_element_info().
+ */
+function oembed_element_info() {
+
+  // Standard oEmbed that changes its theme based on response.
+  $types['oembed'] = array(
+    '#theme' => 'oembed',
+    '#embed' => NULL,
+    '#parameters' => array(),
+    '#attributes' => array(),
+    '#pre_render' => array(
+      'oembed_pre_render_fetch',
+      'oembed_pre_render_retheme',
+    ),
+  );
+
+  // Retrieves an image (photo or thumbnail) or nothing.
+  $types['oembed_thumbnail'] = array(
+    '#theme' => 'image',
+    '#path' => NULL,
+    '#width' => NULL,
+    '#height' => NULL,
+    '#alt' => '',
+    '#title' => NULL,
+    '#attributes' => array(),
+
+    '#embed' => NULL,
+    '#parameters' => array(),
+    '#pre_render' => array(
+      'oembed_pre_render_fetch',
+      'oembed_pre_render_thumbnail',
+    ),
+  );
+
+  return $types;
+}
+
+/**
+ * Change oEmbed request into a thumbnail.
+ */
+function oembed_pre_render_thumbnail($element) {
+
+  // Only act when the oEmbed response is true.
+  if (!empty($element['#printed'])) {
+    return $element;
+  }
+
+  $embed = $element['#embed'];
+
+  // Check if the oEmbed response provides a thumbnail image.
+  if (empty($embed['thumbnail_url'])) {
+    $element['#printed'] = TRUE;
+    return $element;
+  }
+
+  oembed_pre_render_image_helper($element, 'thumbnail_');
+
+  return $element;
+}
+
+/**
+ * Set the properties for a themed image.
+ *
+ * This function takes the element by reference because it should never be called as a
+ * pre render function despite appearances.
+ */
+function oembed_pre_render_image_helper(&$element, $prefix = '') {
+  $embed = $element['#embed'];
+
+  $element['#path'] = $embed[$prefix .'url'];
+  $element['#alt'] = oembed_alt_attr($embed);
+  $element['#title'] = $embed['title'];
+  $element['#attributes'] = $element['#attributes'];
+  $element['#height'] = isset($embed[$prefix .'height']) ? $embed[$prefix .'height'] : NULL;
+  $element['#width'] = isset($embed[$prefix .'width']) ? $embed[$prefix .'width'] : NULL;
+
+  // theme_image() prefers width, height, alt and title element properties over
+  // attributes so we manually override them if an associated attribute is set.
+  foreach (array('width', 'height', 'alt', 'title') as $key) {
+    if (isset($element['#attributes'][$key])) {
+      $element['#' . $key] = $element['#attributes'][$key];
+    }
+  }
+}
+
+/**
+ * Rewrite the theme parameter based on the response.
+ */
+function oembed_pre_render_retheme($element) {
+
+  // Only act when the oEmbed response is true.
+  if (!empty($element['#printed'])) {
+    return $element;
+  }
+
+  $embed = $element['#embed'];
+  $element['#theme'] = 'oembed__'. $embed['type'] .'__'. implode('__', explode(':', $embed['provider'], 2));
+  return $element;
+}
+
+/**
+ * Pre render fetches the oEmbed data.
+ */
+function oembed_pre_render_fetch($element) {
+  $embed = oembed_get_data($element['#url'], $element['#parameters']);
+
+  // Prevent rendering if the response is bad.
+  if (!$embed) {
+    $element['#printed'] = TRUE;
+    return $element;
+  }
+
+  $element['#embed'] = $embed;
+
+  return $element;
+}
+
+/**
+ * Prepare an element based on a oEmbed request.
+ *
+ * @param $type
+ *   Element type.
+ * @param $url
+ *   URL to embed.
+ * @param $parameters
+ *   oEmbed request parameters.
+ *
+ * @return
+ *   A renderable array with the following keys and values:
+ *   - #type: The passed-in element $type.
+ *   - #url: The passed-in $url.
+ *   - #parameters: The passed-in $parameters.
+ */
+function oembed_render_element($type, $url, $parameters = array()) {
+
+  return array(
+    '#type' => $type,
+    '#url' => $url,
+    '#parameters' => $parameters,
+  );
+}
+
+/**
+ * Generate a string for use as ALT attribute.
+ */
+function oembed_alt_attr($embed) {
+  $options = array('@type' => $embed['type']);
+
+  // alt attribute using hopefully available title and provider name.
+  if (isset($embed['title'])) {
+    $string = '@title';
+    $options['@title'] = $embed['title'];
+  } else {
+    $string = 'Embedded @type';
+  }
+  if (isset($embed['provider_name'])) {
+    $string .= ' on @provider_name';
+    $options['@provider_name'] = $embed['provider_name'];
+  }
+
+  return t($string, $options);
+}
+
+/**
+ * Implement hook_ctools_plugin_directory().
+ */
+function oembed_ctools_plugin_directory($module, $plugin) {
+  if ($module == 'ctools' && $plugin == 'export_ui') {
+    return 'plugins/' . $plugin;
+  }
+  if ($module == 'oembed' && $plugin == 'providers') {
+    return 'plugins/' . $plugin;
+  }
+}
+
+/**
+ * Implements hook_ctools_plugin_api().
+ */
+function oembed_ctools_plugin_api($module, $api) {
+  if ($module == 'oembed' && $api == 'oembed_provider') {
+    return array('version' => 1);
+  }
+  if ($module == 'file_entity' && $api == 'file_type') {
+    return array('version' => 1);
+  }
+  if ($module == 'file_entity' && $api == 'file_default_displays') {
+    return array('version' => 1);
+  }
+}
+
+/**
+ * Implements hook_ctools_plugin_type().
+ */
+function oembed_ctools_plugin_type() {
+  $plugins['providers'] = array(
+    'cache' => TRUE,
+    'child plugins' => TRUE,
+    'process' => array(
+      'file' => 'oembed.oembed.inc',
+      'path' => drupal_get_path('module', 'oembed'),
+      'function' => 'oembed_provider_process',
+    ),
+    'defaults' => array(
+      'capture subpatterns' => FALSE,
+      'cache' => TRUE,
+      'consumer' => FALSE,
+      'provider' => FALSE,
+    ),
+  );
+
+  return $plugins;
+}
+
+/**
+ * Implement hook_preprocess_file_entity().
+ */
+function oembed_preprocess_file_entity(&$vars, $hook) {
+  if (isset($vars['file']->metadata['oembed'])) {
+    $vars['oembed_response'] = $embed = $vars['file']->metadata['oembed'];
+    $vars['classes_array'][] = 'oembed-'. $embed['type'];
+    if (strpos($embed['provider'], ':')) {
+      list($parent, $child) = explode(':', $embed['provider'], 2);
+      $vars['classes_array'][] = 'oembed-'. $parent;
+      $vars['classes_array'][] = 'oembed-'. $child;
+    }
+    else {
+      $vars['classes_array'][] = 'oembed-'. $embed['provider'];
+    }
+    $vars['title_attributes_array']['class'][] = 'oembed-title';
+
+    // This conflicts with default file_entity.tpl.php which hardcodes a class attribute.
+    $vars['content_attributes_array']['class'][] = 'oembed-content';
+  }
+}
+
+/**
+ *  Create stream wrapper for oEmbed videos.
+ */
+function oembed_stream_wrappers() {
+  return array(
+    'oembed' => array(
+      'name' => t('oEmbed resources'),
+      'class' => 'OEmbedStreamWrapper',
+      'description' => t('Resources provided by oEmbed.'),
+      'type' => STREAM_WRAPPERS_READ_VISIBLE,
+    ),
+  );
+}
+
+/**
+ * Implements hook_file_formatter_FORMATTER_view().
+ */
+function oembed_file_formatter_view($file, $display, $langcode) {
+  $scheme = file_uri_scheme($file->uri);
+  if ($scheme == 'oembed') {
+    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
+
+    // Build render attributes array. Prefer file-specific overrides to display settings.
+    $attributes = (isset($file->override) ? $file->override : array()) + $display['settings'];
+    unset($attributes['attributes']);
+    unset($attributes['wmode']);
+
+    $parameters = array();
+    if (!empty($display['settings']['wmode'])) {
+      $parameters['mode'] = $display['settings']['wmode'];
+    }
+
+    // The oEmbed spec defines `maxwidth` and `maxheight` parameters, but some providers
+    // support `width` and `height`. Precise dimensions supercede maximums.
+    if ($file->type != 'image' && $display['type'] != 'oembed_thumbnail') {
+      if (isset($attributes['width'])) {
+        $parameters['maxwidth'] = $parameters['width'] = $attributes['width'];
+      }
+      if (isset($attributes['height'])) {
+        $parameters['maxheight'] = $parameters['height'] = $attributes['height'];
+      }
+    }
+
+    $element = oembed_render_element($display['type'], $wrapper->getExternalUrl(), $parameters);
+    $element['#attributes'] = $attributes;
+
+    // Unfortunately, it's necessary to validate the oEmbed response before rendering
+    // so that file_view_file() can continue to the next formatter.
+    $output = drupal_render($element);
+
+    if ($output) {
+      return show($element);
+    }
+  }
+}
+
+/**
+ * Implements hook_file_formatter_FORMATTER_view().
+ */
+function oembed_remote_file_formatter_view($file, $display, $langcode) {
+  $scheme = file_uri_scheme($file->uri);
+  if ($scheme == 'oembed') {
+
+    // URI of local copy of remote file must be stored because it may be
+    // different from the oEmbed URLs. If the URL does not have a valid
+    // extension, it will redirect to a URL that does.
+    if (!isset($file->metadata['oembed_remote_file_image']) || !file_exists($file->metadata['oembed_remote_file_image'])) {
+      $embed = $file->metadata['oembed'];
+      if ($embed['type'] == 'photo' && !empty($embed['url'])) {
+        $url = $embed['url'];
+      }
+      else if (isset($embed['thumbnail_url'])) {
+        $url = $embed['thumbnail_url'];
+      }
+
+      if (isset($url)) {
+        $result = drupal_http_request($url);
+
+        // Using the redirect URL's basename might guarantee a path with an
+        // appropriate file extension.
+        if (isset($result->redirect_url)) {
+
+          // If the redirect and original basenames are identical, do nothing.
+          if (drupal_basename($result->redirect_url) != drupal_basename($url)) {
+            $url .= '/'. drupal_basename($result->redirect_url);
+          }
+        }
+        $parsed_url = parse_url($url);
+
+        // Store local copies of images using hostname, path and filename of source.
+        $path = $parsed_url['host'];
+        $path .= drupal_dirname($parsed_url['path']);
+        if (substr($path, -1) != '/') {
+          $path .= '/';
+        }
+
+        $filename = drupal_basename($parsed_url['path']);
+        if (strpos($filename, '.') !== FALSE) {
+          $filename = file_munge_filename($filename, 'jpg jpeg gif png', FALSE);
+        }
+
+        $path .= $filename;
+        $local_uri = file_stream_wrapper_uri_normalize(file_default_scheme() . '://oembed/'. $path);
+
+        if (!file_exists($local_uri)) {
+
+          // Drupal dislikes protocol relative URL schemes. Everything should
+          // be accessible wihtout HTTPS.
+          if (strpos($url, '//') === 0) {
+            $url = 'http:'. $url;
+          }
+
+          /// Ensure filesystem has directories for new file.
+          $dirname = drupal_dirname($local_uri);
+          file_prepare_directory($dirname, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
+
+          // Save the file data to the local directory.
+          file_unmanaged_save_data($result->data, $local_uri);
+        }
+
+        //
+        $file->metadata['oembed_remote_file_image'] = $local_uri;
+
+        // Redundantish. See file_entity_file_insert and related hooks.
+        foreach (array('oembed_remote_file_image') as $name) {
+          if (!empty($file->metadata[$name])) {
+            $value = $file->metadata[$name];
+            db_merge('file_metadata')
+              ->fields(array(
+                'value' => serialize($value),
+              ))
+              ->key(array(
+                'fid' => $file->fid,
+                'name' => $name,
+              ))
+              ->execute();
+          }
+        }
+      }
+    }
+
+    if (isset($file->metadata['oembed_remote_file_image'])) {
+      $local_uri = $file->metadata['oembed_remote_file_image'];
+
+      $image_file = file_uri_to_object($local_uri);
+      $image_file->metadata = array();
+
+      // Forcing the image file's type is perhaps no longer necessary.
+      if (!isset($image_file->type) || $image_file->type === FILE_TYPE_NONE) {
+        $image_file->type = 'image';
+      }
+
+      if ($image_file->filesize) {
+        $image_file->metadata = image_get_info($image_file->uri);
+        $image_file->filemime = $image_file->metadata['mime_type'];
+        return file_entity_file_formatter_file_image_view($image_file, $display, $langcode);
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_file_formatter_FORMATTER_settings().
+ */
+function oembed_file_formatter_oembed_settings($form, &$form_state, $settings) {
+  $element = array();
+  $element['width'] = array(
+    '#title' => t('Width'),
+    '#type' => 'textfield',
+    '#default_value' => $settings['width'],
+  );
+  $element['height'] = array(
+    '#title' => t('Height'),
+    '#type' => 'textfield',
+    '#default_value' => $settings['height'],
+  );
+  $element['wmode'] = array(
+    '#title' => t('Flash window mode (wmode)'),
+    '#type' => 'select',
+    '#empty_option' => t('None (do not request a specific wmode from the provider)'),
+    '#options' => drupal_map_assoc(array('window', 'transparent', 'opaque', 'direct', 'gpu')),
+    '#description' => t('Controls layering, transparency, and playback performance of content rendered by the Flash player. For more information, view <a href="http://kb2.adobe.com/cps/127/tn_12701.html#main_Using_Window_Mode__wmode__values_">Adobe\'s documentation</a>.'),
+    '#default_value' => $settings['wmode'],
+  );
+  return $element;
+}
+
+/**
+ * Implements hook_file_formatter_FORMATTER_settings().
+ */
+function oembed_file_formatter_oembed_thumbnail_settings($form, &$form_state, $settings) {
+  $element = array();
+  $element['width'] = array(
+    '#title' => t('Width'),
+    '#type' => 'textfield',
+    '#default_value' => $settings['width'],
+  );
+  $element['height'] = array(
+    '#title' => t('Height'),
+    '#type' => 'textfield',
+    '#default_value' => $settings['height'],
+  );
+  return $element;
+}
+
+/**
+ * Clear the cached oEmbed content for the selected files.
+ */
+function oembed_cache_clear($fids) {
+  $fids = array_keys($fids);
+
+  $query = new EntityFieldQuery();
+  $results = $query
+    ->entityCondition('entity_type', 'file')
+    ->propertyCondition('uri', 'oembed:', 'STARTS_WITH')
+    ->propertyCondition('fid', $fids)
+    ->execute();
+
+  $files = file_load_multiple(array_keys($results['file']));
+  foreach ($files as $file) {
+    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
+    $url = $wrapper->getExternalUrl();
+    $cid = hash('sha256', $url);
+    cache_clear_all($cid, 'cache_oembed', TRUE);
+  }
+}
+
+/**
+ * Checks that the oEmbed response has required standard properties for its type.
+ *
+ * @param $file
+ *   A Drupal file object.
+ * @param $embed
+ *   An oEmbed response.
+ *
+ * @return
+ *   An array. If the oEmbed response is invalid, it will contain an error message.
+ */
+function oembed_file_validator_type(stdClass $file) {
+  return oembed_validate_response($file->metadata['oembed']);
+}
+
+/**
+ * Validates oEmbed responses.
+ */
+function oembed_validate_response($embed) {
+  $errors = array();
+
+  if (!$embed) {
+    $errors[] = t('Unable to fetch oEmbed data or it is not a valid URL.');
+  }
+  else if (empty($embed['version']) || empty($embed['type']) || intval($embed['version']) != 1) {
+    $errors[] = t('oEmbed data for is invalid.');
+  }
+
+  // Validate that response has required properties for its type.
+
+  $message = t('oEmbed response is missing required properties for @type.', array('@type' => $embed['type']));
+
+  // Video, rich and photo all must have width and height.
+  // This validation causes lots of legitimate responses to be rejected. To retain access
+  // to Twitter, Scribd and others, we allow responses that do not have height and width.
+  if (in_array($embed['type'], array('video', 'rich', 'photo'))) {
+    if ((!isset($embed['width']) || empty($embed['width'])) || (!isset($embed['height']) || empty($embed['height']))) {
+      //$errors[] = $message;
+    }
+  }
+
+  // Video and rich type must have html content.
+  if (in_array($embed['type'], array('video', 'rich'))) {
+    if (!isset($embed['html']) || empty($embed['html'])) {
+      $errors[] = $message;
+    }
+  }
+
+  // Image type must have a URL.
+  if ($embed['type'] == 'photo') {
+    if (!isset($embed['url']) || empty($embed['url'])) {
+      $errors[] = $message;
+    }
+  }
+
+  return $errors;
+}
+
+/**
+ * Return a file entity for a URL. Create the file if necessary.
+ *
+ * @param type $url
+ * @param type $create
+ * @return type
+ */
+function oembed_url_to_file($url, $create = FALSE) {
+  $uri = 'oembed://'. drupal_encode_path($url);
+  $file = file_uri_to_object($uri);
+  $file->metadata = array();
+  if (!isset($file->metadata['oembed'])) {
+    $file->metadata['oembed'] = oembed_get_data($url);
+  }
+  // New URLs need to be validated before being saved.
+  if ($create && !isset($file->fid)) {
+    // Save the new file.
+    file_save($file);
+  }
+  return $file;
+}
+
+/**
+ * Implements hook_system_info_alter().
+ *
+ * Media and File entity are not dependencies, but if they are available, they must
+ * be version 2.
+ */
+function oembed_system_info_alter(&$info, $file, $type) {
+  if ($type == 'module' && $file->name == 'oembed') {
+    if (module_exists('file_entity')) {
+      $info['dependencies'][] = 'file_entity (>1.99)';
+    }
+    if (module_exists('media')) {
+      $info['dependencies'][] = 'media (>1.99)';
+    }
+  }
+}
+
+/**
+ * Implements hook_field_formatter_info().
+ */
+function oembed_field_formatter_info() {
+  $formatters = array(
+    'oembed_default' => array(
+      'label' => t('OEmbed'),
+      'field types' => array('link_field'),
+      'description' => t('Embeds links if possible - otherwise just links them.'),
+      'settings' => array('maxwidth' => '', 'maxheight' => ''),
+    ),
+  );
+
+  return $formatters;
+}
+
+/**
+ * Implements hook_field_formatter_settings_form().
+ */
+function oembed_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
+  $display = $instance['display'][$view_mode];
+  $settings = $display['settings'];
+
+  $element = array();
+  $element['maxwidth'] = array(
+    '#title' => t('Maximum Width'),
+    '#type' => 'textfield',
+    '#default_value' => $settings['maxwidth'],
+  );
+  $element['maxheight'] = array(
+    '#title' => t('Maximum Height'),
+    '#type' => 'textfield',
+    '#default_value' => $settings['maxheight'],
+  );
+
+  return $element;
+}
+
+/**
+ * Implements hook_field_formatter_settings_summary().
+ */
+function oembed_field_formatter_settings_summary($field, $instance, $view_mode) {
+  $display = $instance['display'][$view_mode];
+  $settings = $display['settings'];
+
+  $summary = '';
+
+  $summary .= t('Max Width') . ': ' . (!empty($settings['maxwidth']) ?  $settings['maxwidth'] : 'default');
+  $summary .= '<br />';
+  $summary .= t('Max Height') . ': ' . (!empty($settings['maxheight']) ?  $settings['maxheight'] : 'default');
+
+  return $summary;
+}
+
+/**
+ * Implements hook_field_formatter_view().
+ */
+function oembed_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
+  $element = array();
+
+  foreach ($items as $delta => $item) {
+    $parameters = array();
+    $url = url($item['url'], $item + array('external' => TRUE));
+    $parameters = $display['settings'];
+
+    $element[$delta] = oembed_render_element('oembed', $url, $parameters);
+  }
+
+  return $element;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembed.oembed.inc b/profiles/commons/modules/contrib/oembed/oembed.oembed.inc
new file mode 100644
index 0000000..0343f9e
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.oembed.inc
@@ -0,0 +1,82 @@
+<?php
+
+/**
+ * Implement hook_oembed_response_alter().
+ */
+function oembed_oembed_response_alter(&$response) {
+
+  // Soundcloud rich responses are audio players that should be re-cast as audio files.
+  if ($response['type'] == 'rich' && $response['provider'] == 'default:soundcloud') {
+    $response['mime_type'] = 'audio/oembed';
+
+    // Soundcloud responses also mistake the thumbnail url property name.
+    foreach ($response as $key => $value) {
+      if (strpos($key, '-')) {
+        $new_key = strtr($key, array('-' => '_'));
+        if (!isset($response[$new_key])) {
+          $response[$new_key] = $value;
+        }
+      }
+    }
+  }
+
+  // Slideshare sets thumbnail URL on the wrong property.
+  if ($response['provider'] == 'default:slideshare' && empty($response['thumbnail_url']) && !empty($response['thumbnail'])) {
+    $response['thumbnail_url'] = $response['thumbnail'];
+  }
+}
+
+function oembed_provider_process(&$plugin, $info) {
+
+  // For plugins which provide children based on the URL, a scheme callback allows a
+  // map to be used to generate a regular expression for the whole plugin and each
+  // child. Probably the plugin properties 'scheme callback' and 'scheme' are mutually
+  // exclusive.
+  $function = ctools_plugin_get_function($plugin, 'scheme callback');
+  if ($function) {
+    $schemes = array();
+    $plugin['scheme map'] = $function();
+    foreach ($plugin['scheme map'] as $id => $scheme) {
+      if (is_array($scheme)) {
+        $scheme = implode("\n", $scheme);
+      }
+      $schemes[] = $scheme;
+      $plugin['scheme map'][$id] = oembed_scheme_to_regex($scheme, $plugin['capture subpatterns']);
+    }
+    uasort($plugin['scheme map'], '_oembed_specificity_compare');
+  }
+  else if (is_array($plugin['scheme'])) {
+    $schemes = $plugin['scheme'];
+  }
+  else {
+    $schemes = array($plugin['scheme']);
+  }
+
+  if (!empty($schemes)) {
+    $plugin['scheme'] = implode("\n", $schemes);
+    $plugin['scheme'] = oembed_scheme_to_regex($plugin['scheme'], $plugin['capture subpatterns']);
+    if (empty($plugin['weight'])) {
+      $plugin['weight'] = strlen($plugin['scheme']);
+    }
+  }
+}
+
+/**
+ * Helper function that compares the length of match expressions.
+ */
+function _oembed_specificity_compare($a, $b) {
+  return strlen($a) - strlen($b);
+}
+
+/**
+ * Helper function that changes oEmbed schemes to regular expressions.
+ */
+function oembed_scheme_to_regex($scheme, $capture_subpatterns = FALSE) {
+  $patterns = array();
+  $schemes = array_filter(preg_split("/(\r\n?|\n)/", $scheme));
+  foreach ($schemes as $scheme) {
+    $patterns[] = str_replace('\*', $capture_subpatterns ? '(.*)' : '.*', preg_quote($scheme, '#'));
+  }
+
+  return '#'. implode('|', $patterns) .'#i';
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembed.oembed_provider.inc b/profiles/commons/modules/contrib/oembed/oembed.oembed_provider.inc
new file mode 100644
index 0000000..8c20c7c
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.oembed_provider.inc
@@ -0,0 +1,167 @@
+<?php
+
+/**
+ * @file
+ * Bulk export of oembed_provider objects generated by Bulk export module.
+ */
+
+/**
+ * Implements hook_default_oembed_provider().
+ */
+function oembed_default_oembed_provider() {
+  $providers = array();
+
+  $provider = new stdClass();
+  $provider->disabled = FALSE; /* Edit this to true to make a default provider disabled initially */
+  $provider->api_version = 1;
+  $provider->name = 'flickr';
+  $provider->title = 'Flickr';
+  $provider->endpoint = 'http://www.flickr.com/services/oembed/';
+  $provider->scheme = 'http://*.flickr.com/*
+http://flickr.com/*
+http://flic.kr/*';
+  $providers['flickr'] = $provider;
+
+  $provider = new stdClass();
+  $provider->disabled = TRUE; /* Edit this to true to make a default provider disabled initially */
+  $provider->api_version = 1;
+  $provider->name = 'noembed';
+  $provider->title = 'Noembed';
+  $provider->endpoint = 'http://noembed.com/embed';
+  $provider->scheme = 'http://*
+https://*';
+  $providers['noembed'] = $provider;
+
+  $provider = new stdClass();
+  $provider->disabled = FALSE; /* Edit this to true to make a default provider disabled initially */
+  $provider->api_version = 1;
+  $provider->name = 'qik';
+  $provider->title = 'Qik';
+  $provider->endpoint = 'http://qik.com/api/oembed.json';
+  $provider->scheme = 'http://qik.com/video/*
+http://qik.com/*
+http://qik.ly/*';
+  $providers['qik'] = $provider;
+
+  $provider = new stdClass();
+  $provider->disabled = FALSE; /* Edit this to true to make a default provider disabled initially */
+  $provider->api_version = 1;
+  $provider->name = 'revision3';
+  $provider->title = 'Revision3';
+  $provider->endpoint = 'http://revision3.com/api/oembed/';
+  $provider->scheme = 'http://*.revision3.com/*
+http://revision3.com/*';
+  $providers['revision3'] = $provider;
+
+  $provider = new stdClass();
+  $provider->disabled = FALSE; /* Edit this to true to make a default provider disabled initially */
+  $provider->api_version = 1;
+  $provider->name = 'scribd';
+  $provider->title = 'Scribd';
+  $provider->endpoint = 'http://www.scribd.com/services/oembed';
+  $provider->scheme = 'http://scribd.com/doc/*
+http://www.scribd.com/doc/*
+http://scribd.com/mobile/documents/*
+http://www.scribd.com/mobile/documents/*';
+  $providers['scribd'] = $provider;
+
+  $provider = new stdClass();
+  $provider->disabled = FALSE; /* Edit this to true to make a default provider disabled initially */
+  $provider->api_version = 1;
+  $provider->name = 'slideshare';
+  $provider->title = 'SlideShare';
+  $provider->endpoint = 'http://www.slideshare.net/api/oembed/2';
+  $provider->scheme = 'http://www.slideshare.net/*/*
+http://www.slideshare.net/mobile/*/*
+http://slidesha.re/*';
+  $providers['slideshare'] = $provider;
+
+  $provider = new stdClass();
+  $provider->disabled = FALSE; /* Edit this to true to make a default provider disabled initially */
+  $provider->api_version = 1;
+  $provider->name = 'smugmug';
+  $provider->title = 'SmugMug';
+  $provider->endpoint = 'http://api.smugmug.com/services/oembed/';
+  $provider->scheme = 'http://*.smugmug.com/*
+http://*.smugmug.com/*#*';
+  $providers['smugmug'] = $provider;
+
+  $provider = new stdClass();
+  $provider->disabled = FALSE; /* Edit this to true to make a default provider disabled initially */
+  $provider->api_version = 1;
+  $provider->name = 'soundcloud';
+  $provider->title = 'SoundCloud';
+  $provider->endpoint = 'http://soundcloud.com/oembed';
+  $provider->scheme = 'http://soundcloud.com/*
+http://soundcloud.com/*/*
+http://soundcloud.com/*/sets/*
+http://soundcloud.com/groups/*
+http://snd.sc/*';
+  $providers['soundcloud'] = $provider;
+
+  $provider = new stdClass();
+  $provider->disabled = FALSE; /* Edit this to true to make a default provider disabled initially */
+  $provider->api_version = 1;
+  $provider->name = 'twitter';
+  $provider->title = 'Twitter';
+  $provider->endpoint = 'https://api.twitter.com/1/statuses/oembed.json';
+  $provider->scheme = 'http://twitter.com/*/status/*
+http://twitter.com/*/statuses/*
+http://www.twitter.com/*/status/*
+http://www.twitter.com/*/statuses/*
+http://mobile.twitter.com/*/status/*
+http://mobile.twitter.com/*/statuses/*
+https://twitter.com/*/status/*
+https://twitter.com/*/statuses/*
+https://www.twitter.com/*/status/*
+https://www.twitter.com/*/statuses/*
+https://mobile.twitter.com/*/status/*
+https://mobile.twitter.com/*/statuses/*';
+  $providers['twitter'] = $provider;
+
+  $provider = new stdClass();
+  $provider->disabled = FALSE; /* Edit this to true to make a default provider disabled initially */
+  $provider->api_version = 1;
+  $provider->name = 'viddler';
+  $provider->title = 'Viddler';
+  $provider->endpoint = 'http://lab.viddler.com/services/oembed/';
+  $provider->scheme = 'http://*.viddler.com/*';
+  $providers['viddler'] = $provider;
+
+  $provider = new stdClass();
+  $provider->disabled = FALSE; /* Edit this to true to make a default provider disabled initially */
+  $provider->api_version = 1;
+  $provider->name = 'vimeo';
+  $provider->title = 'Vimeo';
+  $provider->endpoint = 'http://vimeo.com/api/oembed.json';
+  $provider->scheme = 'http://www.vimeo.com/groups/*/videos/*
+http://www.vimeo.com/*
+https://www.vimeo.com/*
+http://vimeo.com/groups/*/videos/*
+http://vimeo.com/*
+https://vimeo.com/*
+http://vimeo.com/m/#/*';
+  $providers['vimeo'] = $provider;
+
+  $provider = new stdClass();
+  $provider->disabled = FALSE; /* Edit this to true to make a default provider disabled initially */
+  $provider->api_version = 1;
+  $provider->name = 'youtube';
+  $provider->title = 'YouTube';
+  $provider->endpoint = 'http://www.youtube.com/oembed';
+  $provider->scheme = 'http://*youtube.com/watch*
+http://*.youtube.com/v/*
+https://*youtube.com/watch*
+https://*.youtube.com/v/*
+http://youtu.be/*
+http://*.youtube.com/user/*
+http://*.youtube.com/*#*/*
+http://m.youtube.com/watch*
+http://m.youtube.com/index*
+http://*.youtube.com/profile*
+http://*.youtube.com/view_play_list*
+http://*.youtube.com/playlist*';
+  $providers['youtube'] = $provider;
+
+  return $providers;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembed.test b/profiles/commons/modules/contrib/oembed/oembed.test
new file mode 100644
index 0000000..e76a7d7
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed.test
@@ -0,0 +1,243 @@
+<?php
+
+/**
+ * @file
+ * Tests for oembed.module.
+ */
+
+class OembedTestHelper extends DrupalWebTestCase {
+
+  protected $profile = 'minimal';
+
+  // One URL for each provider supported by the oEmbed module. The URLs predict the type
+  // of oEmbed response and the viability of a thumbnail.
+  protected $urls = array(
+    'http://www.flickr.com/photos/boris/2351723120/' => array(
+      'type' => 'photo',
+      'thumbnail' => TRUE,
+    ),
+    'http://qik.com/video/7046119' => array(
+      'type' => 'video',
+      'thumbnail' => FALSE,
+    ),
+    'http://revision3.com/hak5/hospital' => array(
+      'type' => 'video',
+      'thumbnail' => FALSE,
+    ),
+    'http://www.scribd.com/doc/3828502/Drupal' => array(
+      'type' => 'rich',
+      'thumbnail' => TRUE,
+    ),
+    'http://www.slideshare.net/eaton/drupal-deployment-presentation' => array(
+      'type' => 'rich',
+      'thumbnail' => TRUE,
+    ),
+    'http://soozphotography.smugmug.com/Events/Drupal-7-Release-Party-at/i-mnVjkZg/1/L/DSC_0555-L.jpg' => array(
+      'type' => 'photo',
+      'thumbnail' => FALSE,
+    ),
+    'http://soundcloud.com/headstart-cms/drupal' => array(
+      'type' => 'rich',
+      'thumbnail' => TRUE,
+    ),
+    'https://twitter.com/drupal/status/266208177161400320' => array(
+      'type' => 'rich',
+      'thumbnail' => FALSE,
+    ),
+    'http://www.viddler.com/v/bdce8c7' => array(
+      'type' => 'video',
+      'thumbnail' => TRUE,
+    ),
+    'https://vimeo.com/18352872' => array(
+      'type' => 'video',
+      'thumbnail' => TRUE,
+    ),
+    'http://www.youtube.com/watch?v=XgYu7-DQjDQ' => array(
+      'type' => 'video',
+      'thumbnail' => TRUE,
+    ),
+  );
+
+  function setUp() {
+    $modules = func_get_args();
+    if (isset($modules[0]) && is_array($modules[0])) {
+      $modules = $modules[0];
+    }
+    $modules[] = 'oembed';
+    parent::setUp($modules);
+  }
+
+  protected function assertRenderedElement(array $element, $xpath, array $xpath_args = array()) {
+    $original_element = $element;
+    $this->drupalSetContent(drupal_render($element));
+    $this->verbose('<pre>' .  check_plain(var_export($original_element, TRUE)) . '</pre>'
+      . '<pre>' .  check_plain(var_export($element, TRUE)) . '</pre>'
+      . '<hr />' . $this->drupalGetContent()
+    );
+
+    // @see DrupalWebTestCase::xpath()
+    $xpath = $this->buildXPathQuery($xpath, $xpath_args);
+    $element += array('#value' => NULL);
+    $type = isset($element['#type']) ? $element['#type'] : 'markup';
+    $this->assertFieldByXPath($xpath, $element['#value'], t('#type @type was properly rendered.', array(
+      '@type' => var_export($type, TRUE),
+    )));
+  }
+
+  protected function xpathArgsFromAttributes(array $attributes = array()) {
+    $args = array();
+    foreach ($attributes as $key => $value) {
+      $args[':'. $key] = $value;
+    }
+    return $args;
+  }
+
+  /**
+   * Asserts file_entity_access correctly grants or denies access.
+   */
+  function assertFileEntityAccess($ops, $file, $account) {
+    foreach ($ops as $op => $result) {
+      $msg = t("file_entity_access returns @result with operation '@op'.", array('@result' => $result ? 'true' : 'false', '@op' => $op));
+      $this->assertEqual($result, file_entity_access($op, $file, $account), $msg);
+    }
+  }
+}
+
+class OembedTestCase extends OembedTestHelper {
+  public static function getInfo() {
+    return array(
+      'name' => 'oEmbed requests',
+      'description' => 'Tests oEmbed request handling.',
+      'group' => 'oEmbed',
+    );
+  }
+
+  /**
+   * Tests that actual response type matches the expected response type.
+   */
+  function testOembedProviderUrls() {
+    foreach ($this->urls as $url => $info) {
+      foreach (array('json', 'xml') as $format) {
+        $response = oembed_get_data($url, array('format' => $format));
+        $message = t('oEmbed @format response says @url is @type', array('@url' => $url, '@type' => $info['type'], '@format' => $format));
+        $this->assertEqual($response['type'], $info['type'], $message);
+      }
+    }
+  }
+
+  /**
+   * Tests the oembed render element types.
+   */
+  function testOembedRenderElements() {
+    foreach ($this->urls as $url => $info) {
+      $element = oembed_render_element('oembed', $url);
+      $this->assertRenderedElement($element, '//*');
+
+      if (isset($info['thumbnail']) && $info['thumbnail']) {
+        $element = oembed_render_element('oembed_thumbnail', $url);
+        $this->assertRenderedElement($element, '//img');
+      }
+    }
+  }
+}
+
+class OembedFileEntityTestCase extends OembedTestHelper {
+
+  function setUp() {
+    parent::setUp(array('file_entity', 'image'));
+  }
+
+  public static function getInfo() {
+    return array(
+      'name' => 'File entity oEmbed',
+      'description' => 'Tests oEmbed + File entity integration.',
+      'group' => 'oEmbed',
+    );
+  }
+
+  /**
+   * Tests the oembed render element types.
+   */
+  function testOembedFileFormatters() {
+    foreach ($this->urls as $url => $info) {
+
+      // Every URL should render through the oEmbed formatter.
+      $file = oembed_url_to_file($url, TRUE);
+      $displays = array(
+        'oembed' => array(
+          'status' => TRUE,
+          'weight' => 1,
+          'settings' => array(),
+        ),
+      );
+      $element = file_view_file($file, $displays);
+      $this->assertRenderedElement($element, '//*');
+
+      // Only responses with thumbnails will render through the oembed_thumbnail
+      // formatter. Rendered elements are always images.
+      if (isset($info['thumbnail']) && $info['thumbnail']) {
+        $displays = array(
+          'oembed_thumbnail' => array(
+            'status' => TRUE,
+            'weight' => 1,
+            'settings' => array(),
+          ),
+        );
+        $element = file_view_file($file, $displays);
+        $this->assertRenderedElement($element, '//img');
+      }
+
+      // If a response is a photo or has a thumbnail, it should always render
+      // an image here.
+      if ($info['type'] == 'photo' || (isset($info['thumbnail']) && $info['thumbnail'])) {
+        $displays = array(
+          'oembed_thumbnail' => array(
+            'status' => TRUE,
+            'weight' => 1,
+            'settings' => array(),
+          ),
+          'oembed' => array(
+            'status' => TRUE,
+            'weight' => 2,
+            'settings' => array(),
+          ),
+        );
+        $element = file_view_file($file, $displays);
+        $this->assertRenderedElement($element, '//img');
+      }
+    }
+  }
+
+  /**
+   * Tests the oembed render element types.
+   */
+  function testOembedImageFileFormatters() {
+    foreach ($this->urls as $url => $info) {
+
+      // If a response is a photo or has a thumbnail, it should always render
+      // an image here.
+     $file = oembed_url_to_file($url, TRUE);
+     if ($info['type'] == 'photo' || (isset($info['thumbnail']) && $info['thumbnail'])) {
+        foreach (array_keys(image_styles()) as $style_name) {
+          $displays = array(
+            'oembed_image' => array(
+              'status' => TRUE,
+              'weight' => 1,
+              'settings' => array(
+                'image_style' => $style_name,
+                'alt' => '',
+                'title' => ''
+              ),
+            ),
+          );
+          $element = file_view_file($file, $displays);
+          $this->assertRenderedElement($element, '//img');
+
+          $url = image_style_url($style_name, $element['#path']);
+          $this->drupalGet($url);
+          $this->assertResponse(200, t('Image was generated at the URL.'));
+        }
+      }
+    }
+  }
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembed_legacy.inc b/profiles/commons/modules/contrib/oembed/oembed_legacy.inc
new file mode 100644
index 0000000..aeadcee
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembed_legacy.inc
@@ -0,0 +1,50 @@
+<?php
+
+/**
+ * @file
+ * Functions for the oEmbed filter
+ */
+
+function _oembed_filter_apply($text, $filter, $format, $langcode, $cache, $cache_id) {
+  global $_oembed_default_parameters;
+  $_oembed_default_parameters = array_filter(array(
+    'maxwidth' => intval($filter->settings['maxwidth']),
+    'maxheight' => intval($filter->settings['maxheight']),
+  ));
+  $text = preg_replace_callback("`(^|<p(?:\s[^>]*)*>|<li(?:\s[^>]*)*>|<br(?:\s[^>]*)*>|[ \n\r\t\(])((http://|https://|ftp://|mailto:|smb://|afp://|file://|gopher://|news://|ssl://|sslv2://|sslv3://|tls://|tcp://|udp://)([a-zA-Z0-9@:%_+*~#?&=.,/;-]*[a-zA-Z0-9@:%_+*~#&=/;-]))([.,?!]*?)(?=($|</p>|</li>|<br\s*/?>|[ \n\r\t\)]))`i", '_oembed_preg_parse', $text);
+  unset($_oembed_default_parameters);
+  return $text;
+}
+
+/**
+ * Settings callback for the oEmbed filter.
+ */
+function _oembed_filter_settings($form, &$form_state, $filter, $format, $defaults) {
+  $filter->settings += $defaults;
+
+  $settings = array();
+  $settings['maxwidth'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Maximum width of embed'),
+    '#default_value' => $filter->settings['maxwidth'],
+    '#description' => t('The maximum width of an embed, isn\'t respected by all providers'),
+  );
+  $settings['maxheight'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Maximum height of embed'),
+    '#default_value' => $filter->settings['maxheight'],
+    '#description' => t('The maximum height of an embed, isn\'t respected by all providers'),
+  );
+  return $settings;
+}
+
+function _oembed_preg_parse($match) {
+  return _oembed_resolve_link($match[2], $match[1], $match[5]);
+}
+
+function _oembed_resolve_link($match, $prefix, $suffix) {
+  global $_oembed_default_parameters;
+
+  $url = decode_entities($match);
+  return $prefix . oembed_resolve_link($_oembed_default_parameters, $url) . $suffix;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedembedly/oembedembedly.admin.inc b/profiles/commons/modules/contrib/oembed/oembedembedly/oembedembedly.admin.inc
new file mode 100644
index 0000000..b9e0de4
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedembedly/oembedembedly.admin.inc
@@ -0,0 +1,90 @@
+<?php
+
+/**
+ * Admin form to configure embedly provider.
+ */
+function oembedembedly_admin() {
+  $providers = oembedembedly_providers();
+  $selections = oembedembedly_default_selected();
+  $form['oembedembedly_providers'] = array(
+    '#type' => 'fieldset',
+    '#title' => 'Providers',
+    '#weight' => 1,
+    '#description' => t('Embedly directly integrates with <a href="@providers">@count content providers</a>. You can control which Embedly providers are supported on your site by enabling or disabling them individually.', array('@count' => count($providers), '@providers' => 'http://embed.ly/providers')),
+  );
+
+  $image = array('width' => 16, 'height' => 16);
+
+  foreach ($providers as $provider) {
+    $variables = array(
+      'path' => $provider->favicon,
+      'width' => 16,
+      'height' => 16,
+      'alt' => $provider->displayname,
+    );
+    $title = theme('image',  $variables) .' '. $provider->displayname;
+    $element = array(
+      '#type' => 'checkbox',
+      '#title' => $title,
+      '#description' => $provider->about,
+      '#default_value' => $selections[$provider->name],
+      '#parents' => array('oembedembedly_providers', $provider->name),
+    );
+    $form['oembedembedly_providers'][$provider->type][$provider->name] = $element;
+
+    if (!isset($types[$provider->type])) {
+      $types[$provider->type] = array(
+        '@type' => $provider->type,
+        '@count' => 0,
+        '@enabled' => 0,
+      );
+    }
+    $types[$provider->type]['@count']++;
+    if ($selections[$provider->name]) {
+      $types[$provider->type]['@enabled']++;
+    }
+  }
+
+  foreach (element_children($form['oembedembedly_providers']) as $key) {
+    $element = &$form['oembedembedly_providers'][$key];
+    $element['#type'] = 'fieldset';
+    $element['#collapsible'] = TRUE;
+    $element['#collapsed'] = TRUE;
+    $element['#title'] = t("@type (@enabled of @count enabled)", $types[$key]);
+  }
+
+  $form['oembedembedly_providers']['oembedembedly_schemes'] = array(
+    '#type'          => 'textarea',
+    '#title'         => t('Additional schemes'),
+    '#required'      => FALSE,
+    '#default_value' => variable_get('oembedembedly_schemes', ''),
+    '#description'   => t('Newline separated list of schemes like !example. To make Embedly handle all requests, add !wildcard.', array('!example' => 'http://*.revision3.com/*', '!wildcard' => '*')),
+  );
+
+  $form['oembedembedly_default'] = array(
+    '#type'          => 'radios',
+    '#title'         => t('Providers enabled by default'),
+    '#default_value' => variable_get('oembedembedly_default', TRUE),
+    '#options'       => array(
+      FALSE => t('Disabled'),
+      TRUE  => t('Enabled'),
+    ),
+    '#description'   => t('This option defines whether providers should be enabled by default or not.'),
+  );
+  $form['oembedembedly_api_key'] = array(
+    '#type'          => 'textfield',
+    '#title'         => t('Embedly API Key'),
+    '#default_value' => variable_get('oembedembedly_api_key', NULL),
+    '#description'   => t('Embedly requires developers to authenticate their requests to all endpoints. You must <a href="@pricing">sign up for any of the plans</a> to receive a key.', array('@pricing' => 'http://embed.ly/pricing')),
+  );
+
+  $form['#submit'][] = 'oembedembedly_admin_submit';
+  return system_settings_form($form);
+}
+
+/**
+ * Submit handler clears cache to refresh providers.
+ */
+function oembedembedly_admin_submit($form, &$form_state) {
+  oembed_providers_reset();
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedembedly/oembedembedly.info b/profiles/commons/modules/contrib/oembed/oembedembedly/oembedembedly.info
new file mode 100644
index 0000000..fc7ddea
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedembedly/oembedembedly.info
@@ -0,0 +1,13 @@
+package = oEmbed
+name = oEmbed Embed.ly
+description = Provides definitions for all of Embed.ly:s providers
+core = 7.x
+dependencies[] = oembed
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-1.0-rc2+6-dev"
+core = "7.x"
+project = "oembed"
+datestamp = "1387568916"
+
diff --git a/profiles/commons/modules/contrib/oembed/oembedembedly/oembedembedly.module b/profiles/commons/modules/contrib/oembed/oembedembedly/oembedembedly.module
new file mode 100644
index 0000000..ba00d9d
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedembedly/oembedembedly.module
@@ -0,0 +1,77 @@
+<?php
+
+/**
+ * @file
+ * Embed.ly support for oEmbed.module
+ */
+
+/**
+ * Implements hook_menu().
+ */
+function oembedembedly_menu() {
+  $items = array();
+
+  $items['admin/config/media/oembed/provider/embedly'] = array(
+    'title'            => 'Embed.ly',
+    'description'      => 'Settings for the Embed.ly provider.',
+    'page callback'    => 'drupal_get_form',
+    'page arguments'   => array('oembedembedly_admin'),
+    'file'             => 'oembedembedly.admin.inc',
+    'type'             => MENU_LOCAL_TASK,
+    'access arguments' => array('administer oembed'),
+  );
+
+  return $items;
+}
+
+/**
+ * Calls and caches embed.ly services api.
+ */
+function oembedembedly_providers() {
+
+  $cache = cache_get('oembedly');
+
+  if ($cache && isset($cache->data)) {
+    $providers = $cache->data;
+  }
+  else {
+    $response = drupal_http_request('http://api.embed.ly/1/services');
+
+    if ($response->code == 200) {
+      $json = json_decode($response->data);
+      $providers = array();
+      foreach ($json as $provider) {
+        $providers[$provider->name] = $provider;
+      }
+    }
+    else {
+      $providers = FALSE;
+    }
+
+    cache_set('oembedly', $providers, 'cache', REQUEST_TIME + 3600 * ($providers ? 24 : 6));
+
+    if (variable_get('oembedembedly_default', TRUE)) {
+      oembed_providers_reset();
+    }
+  }
+  return $providers;
+}
+
+/**
+ * Helper function to populate defaults for all providers.
+ */
+function oembedembedly_default_selected() {
+  $providers = oembedembedly_providers();
+  $default = variable_get('oembedembedly_default', TRUE);
+  $defaults = array_combine(array_keys($providers), array_fill(0, count($providers), $default));
+  return array_merge($defaults, variable_get('oembedembedly_providers', array()));
+}
+
+/**
+ * Implement hook_ctools_plugin_directory().
+ */
+function oembedembedly_ctools_plugin_directory($module, $plugin) {
+  if ($module == 'oembed' && $plugin == 'providers') {
+    return 'plugins/' . $plugin;
+  }
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedembedly/plugins/providers/embedly.inc b/profiles/commons/modules/contrib/oembed/oembedembedly/plugins/providers/embedly.inc
new file mode 100644
index 0000000..5ce2615
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedembedly/plugins/providers/embedly.inc
@@ -0,0 +1,62 @@
+<?php
+
+$plugin = array(
+  'title' => 'Embed.ly',
+  'callback' => 'oembedembedly_provider_callback',
+  'get child' => 'oembedembedly_provider_get_child',
+  'scheme callback' => 'oembedembedly_embedly_provider_scheme',
+  'endpoint' => 'http://api.embed.ly/1/oembed',
+  'consumer' => TRUE,
+);
+
+function oembedembedly_embedly_provider_scheme() {
+  $json = oembedembedly_providers();
+  $schemes = array();
+  if (is_array($json)) {
+    $selections = oembedembedly_default_selected();
+    foreach ($json as $provider_name => $info) {
+      if ($selections[$provider_name]) {
+        $schemes['embedly:'. $provider_name] = $info->regex;
+      }
+    }
+  }
+  return $schemes;
+}
+
+function oembedembedly_provider_get_child($plugin, $parent, $child) {
+  $json = oembedembedly_providers();
+
+  $plugin['name'] = $parent .':'. $child;
+  $plugin['title'] = $json[$child]->displayname;
+  $plugin['description'] = $json[$child]->about;
+  $plugin['scheme'] = $json[$child]->regex;
+
+  // Force the plugin to be processed again because it will persist in the static cache
+  // of ctools_get_plugins(). Therefore, strip out the features of the child plugin
+  // that make it look like the parent.
+  unset($plugin['scheme callback']);
+  unset($plugin['scheme map']);
+  unset($plugin['weight']);
+  $info = ctools_plugin_get_info('oembed', 'providers');
+  $function = ctools_plugin_get_function($info, 'process');
+  $function($plugin, $info);
+
+  return $plugin;
+}
+
+function oembedembedly_provider_callback($plugin, $url, $matches, $parameters) {
+  $parameters['key'] = variable_get('oembedembedly_api_key', NULL);
+  $function = ctools_plugin_load_function('oembed', 'providers', 'default', 'callback');
+  $response = call_user_func($function, $plugin, $url, $matches, $parameters);
+
+  $providers = oembedembedly_providers();
+  if (is_array($providers)) {
+    list($parent, $child) = explode(':', $plugin['name'], 2);
+    if (isset($providers[$child])) {
+      if ($providers[$child]->type == 'audio') {
+        $response['mime_type'] = 'audio/oembed';
+      }
+    }
+  }
+  return $response;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.admin.inc b/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.admin.inc
new file mode 100644
index 0000000..93309d2
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.admin.inc
@@ -0,0 +1,15 @@
+<?php
+
+/**
+ * @file
+ * OEmbed Endpoint admin pages.
+ */
+
+/**
+ * oEmbed admin settings page callback.
+ */
+function oembedprovider_settings() {
+  $form = array();
+
+  return system_settings_form($form);
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.inc b/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.inc
new file mode 100644
index 0000000..dfa4d3e
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.inc
@@ -0,0 +1,158 @@
+<?php
+
+/**
+ * @file
+ * Functions for the oEmbed provider
+ */
+
+define('OEMBEDPROVIDER_NOT_ACCEPTABLE', 406);
+
+/**
+ * Callback handler for oembed requests.
+ */
+function _oembedprovider_handle_request() {
+
+  // Check that we got a url
+  if (!filter_has_var(INPUT_GET, 'url')) {
+    return OEMBEDPROVIDER_NOT_ACCEPTABLE;
+  }
+
+  $url = filter_input(INPUT_GET, 'url', FILTER_VALIDATE_URL, array('flags' => FILTER_FLAG_PATH_REQUIRED));
+
+  if (empty($url)) {
+    return OEMBEDPROVIDER_NOT_ACCEPTABLE;
+  }
+
+  $parameters = array();
+  $input_vars = array(
+    'maxwidth' => FILTER_VALIDATE_INT,
+    'maxheight' => FILTER_VALIDATE_INT,
+    'view_mode' => FILTER_SANITIZE_STRING,
+    'langcode' => FILTER_SANITIZE_STRING,
+  );
+  foreach ($input_vars as $key => $filter) {
+    if (filter_has_var(INPUT_GET, $key)) {
+      $parameters[$key] = filter_input(INPUT_GET, $key, $filter);
+    }
+  }
+
+  if ($plugin = oembed_get_provider($url, $matches, 'provider')) {
+    $data = oembed_oembed_fetch($plugin, $url, $matches, $parameters);
+  }
+
+  if ($data) {
+
+    // Providers might include private attributes intended only for internal requests.
+    foreach (array_keys($data) as $key) {
+      if ($key[0] === '#') {
+        unset($data[$key]);
+      }
+    }
+
+    return _oembedprovider_result($data['type'], $data);
+  }
+
+  return MENU_NOT_FOUND;
+}
+
+/**
+ * oEmbed response delivery callback.
+ */
+function oembedprovider_deliver_response($page_callback_result) {
+  // Menu status constants are integers; page content is a string or array.
+  if (is_int($page_callback_result)) {
+
+    switch ($page_callback_result) {
+      case OEMBEDPROVIDER_NOT_ACCEPTABLE:
+        drupal_add_http_header('Status', '406 Not acceptable. The url parameter is required.');
+        $page_callback_result = _oembedprovider_result('link', array(
+          'title' => t('The URL parameter is required'),
+          'error' => 1,
+        ));
+        break;
+
+      case MENU_NOT_FOUND:
+        drupal_add_http_header('Status', '404 Not found.');
+        $page_callback_result = _oembedprovider_result('rich', array(
+          'title' => t('Could not find a provider that supports this URL.'),
+          'error' => 1,
+        ));
+        break;
+    }
+  }
+
+  $format = 'json';
+  if (filter_has_var(INPUT_GET, 'format')) {
+    $format = filter_input(INPUT_GET, 'format', FILTER_SANITIZE_STRING);
+  }
+  else if (arg(2)) {
+    $format = arg(2);
+  }
+
+  $formats = oembedprovider_formats();
+  if (!isset($formats[$format])) {
+    drupal_add_http_header('Status', '501 Not implemented. Unsupported response format "'. check_plain($format) . '"');
+    die;
+  }
+
+  drupal_add_http_header('Content-Type', $formats[$format]['mime']);
+
+  print $formats[$format]['callback']($page_callback_result);
+}
+
+/**
+ * Returns all the registered response formats
+ *
+ * @return array
+ */
+function oembedprovider_formats($reset = FALSE) {
+  $formats = &drupal_static(__FUNCTION__, array());
+
+  if (!$formats) {
+    $cache_key = 'oembedprovider:formats';
+
+    if (!$reset && ($cache = cache_get($cache_key)) && isset($cache->data)) {
+      $formats = $cache->data;
+    }
+    else {
+      $formats = array(
+        'json' => array(
+          'mime' => 'application/json',
+          'callback' => 'drupal_json_encode',
+        ),
+        'jsonp' => array(
+          'mime' => 'text/javascript',
+          'callback' => '_oembedprovider_formats_jsonp',
+        ),
+        'xml' => array(
+          'mime' => 'text/xml',
+          'callback' => '_oembedprovider_formats_xml',
+        ),
+      );
+      drupal_alter('oembedprovider_formats', $formats);
+
+      cache_set($cache_key, $formats);
+    }
+  }
+
+  return $formats;
+}
+
+/**
+ * JSONP formatter
+ */
+function _oembedprovider_formats_jsonp($page_callback_result) {
+  $callback = filter_has_var(INPUT_GET, 'callback') ? filter_input(INPUT_GET, 'callback') : 'callback';
+  return sprintf('%s(%s)', $callback, drupal_json_encode($page_callback_result));
+}
+
+/**
+ * XML formatter
+ */
+function _oembedprovider_formats_xml($page_callback_result) {
+  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
+  $output .= "<oembed>\n";
+  $output .= format_xml_elements($page_callback_result);
+  $output .= "</oembed>";
+  return $output;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.info b/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.info
new file mode 100644
index 0000000..dd8e016
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.info
@@ -0,0 +1,16 @@
+package = oEmbed
+name = oEmbed Provider
+description = Turns your site into a oEmbed provider
+core = 7.x
+dependencies[] = oembed
+files[] = oembedprovider.inc
+files[] = oembedprovider.module
+files[] = oembedprovider.test
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-1.0-rc2+6-dev"
+core = "7.x"
+project = "oembed"
+datestamp = "1387568916"
+
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.module b/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.module
new file mode 100644
index 0000000..0081796
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.module
@@ -0,0 +1,83 @@
+<?php
+
+/**
+ * @file
+ * Module for providing content as defined in the oEmbed specification
+ */
+
+/**
+ * Implements hook_help().
+ */
+function oembedprovider_help($path, $arg) {
+  switch ($path) {
+    case 'admin/config/media/oembed/endpoint':
+      $output = '<p>'. t('This site is an oEmbed provider with a public endpoint.') .'</p>';
+      return $output;
+  }
+}
+
+/**
+ * Implements hook_hook_info().
+ *
+ * @return string
+ */
+function oembedprovider_hook_info() {
+  $hooks['oembedprovider_formats_alter'] = array(
+    'group' => 'oembed',
+  );
+}
+
+/**
+ * Implements hook_menu().
+ */
+function oembedprovider_menu() {
+  $menu = array();
+
+  $menu['oembed/endpoint'] = array(
+    'type' => MENU_CALLBACK,
+    'file' => 'oembedprovider.inc',
+    'page callback' => '_oembedprovider_handle_request',
+    'access arguments' => array('access content'),
+    'delivery callback' => 'oembedprovider_deliver_response',
+  );
+
+  $menu['admin/config/media/oembed/endpoint'] = array(
+    'title' => 'Public endpoint',
+    'description' => 'Settings for oEmbed endpoint',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('oembedprovider_settings'),
+    'file' => 'oembedprovider.admin.inc',
+    'type' => MENU_LOCAL_TASK,
+    'access arguments' => array('administer site configuration'),
+  );
+
+  return $menu;
+}
+
+/**
+ * Implement hook_ctools_plugin_directory().
+ */
+function oembedprovider_ctools_plugin_directory($module, $plugin) {
+  if ($module == 'oembed' && $plugin == 'providers') {
+    return 'plugins/' . $plugin;
+  }
+}
+
+
+/**
+ * Merges a result with some standard values.
+ *
+ * @param string $type
+ * @param array $result
+ */
+function _oembedprovider_result($type, $props) {
+  $defaults = array(
+    'type' => $type,
+    'version' => '1.0',
+    'provider_name' => variable_get('site_name', ''),
+    'width' => 0,
+    'height' => 0,
+  );
+  $result = array_merge($defaults, $props);
+  return $result;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.test b/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.test
new file mode 100644
index 0000000..bb4ad92
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider/oembedprovider.test
@@ -0,0 +1,140 @@
+<?php
+
+class OembedProviderTestCase extends OembedTestHelper {
+
+  function setUp() {
+    parent::setUp(array('file_entity', 'oembedprovider'));
+  }
+
+  public static function getInfo() {
+    return array(
+      'name' => 'oEmbed providers',
+      'description' => 'Tests oEmbed providers.',
+      'group' => 'oEmbed',
+    );
+  }
+
+  function testOembedProviders() {
+    ctools_include('plugins');
+
+    $file = current($this->drupalGetTestFiles('image'));
+    $file->uid = 1;
+    $file->status = FILE_STATUS_PERMANENT;
+    file_save($file);
+    $account = drupal_anonymous_user();
+    $this->assertFileEntityAccess(array('view' => TRUE), $file, $account);
+
+    $url = url('file/'. $file->fid, array('absolute' => TRUE));
+    $plugin = ctools_get_plugins('oembed', 'providers', 'file');
+    $matches = array(1 => $file->fid);
+
+    $embed = oembed_oembed_fetch($plugin, $url, $matches);
+    $errors = oembed_validate_response($embed);
+    $this->assertTrue(empty($errors), 'oEmbed response is valid');
+
+    $output = theme('oembed__photo', array('embed' => $embed));
+    $vars = array(
+      'path' => $file->uri,
+      'alt' => oembed_alt_attr($embed),
+      'width' => $file->image_dimensions['width'],
+      'height' => $file->image_dimensions['height'],
+    );
+    $this->assertEqual($output, theme('image', $vars), t('Expected img tag was found.'));
+
+    $node = $this->drupalCreateNode();
+    $this->assertTrue(node_load($node->nid), t('Node created.'));
+    $url = url('node/'. $node->nid, array('absolute' => TRUE));
+    $plugin = ctools_get_plugins('oembed', 'providers', 'node');
+    $matches = array(1 => $node->nid);
+    $embed = oembed_oembed_fetch($plugin, $url, $matches);
+    $errors = oembed_validate_response($embed);
+    $this->assertTrue(empty($errors), 'oEmbed response is valid');
+
+    $output = theme('oembed__rich', array('embed' => $embed));
+    $node = node_load($node->nid);
+    $compare = node_view($node);
+    $this->assertEqual($output, render($compare), t('oEmbed node matches theme output.'));
+  }
+}
+
+class OembedEndpointTestCase extends OembedTestHelper {
+
+  function setUp() {
+    parent::setUp(array('file_entity', 'oembedprovider'));
+  }
+
+  public static function getInfo() {
+    return array(
+      'name' => 'oEmbed endpoint',
+      'description' => 'Tests oEmbed endpoint.',
+      'group' => 'oEmbed',
+    );
+  }
+
+  function testOembedEndpoint() {
+    $file = current($this->drupalGetTestFiles('image'));
+    $file->uid = 1;
+    $file->status = FILE_STATUS_PERMANENT;
+    file_save($file);
+
+    $node = $this->drupalCreateNode();
+    $this->assertTrue(node_load($node->nid), t('Node created.'));
+
+    foreach (array('json', 'xml') as $format) {
+      ctools_include('plugins');
+
+      $url = url('file/'. $file->fid, array('absolute' => TRUE));
+      $options = array(
+        'query' => array(
+          'url' => $url,
+          'format' => $format,
+        ),
+      );
+      $this->drupalGet('oembed/endpoint', $options);
+      if ($format == 'json') {
+        $embed = drupal_json_decode($this->drupalGetContent());
+      }
+      else if ($format == 'xml') {
+        $xml = @new SimpleXMLElement($this->drupalGetContent());
+        $embed = array();
+        foreach ($xml as $key => $value) {
+          $embed[$key] = (string) $value;
+        }
+      }
+      $errors = oembed_validate_response($embed);
+      $this->assertTrue(empty($errors), 'oEmbed response is valid');
+      $output = theme('oembed__photo', array('embed' => $embed));
+      $vars = array(
+        'path' => $file->uri,
+        'alt' => oembed_alt_attr($embed),
+        'width' => $file->image_dimensions['width'],
+        'height' => $file->image_dimensions['height'],
+      );
+      $this->assertEqual($output, theme('image', $vars), t('Expected img tag was found.'));
+
+      $url = url('node/'. $node->nid, array('absolute' => TRUE));
+      $options = array(
+        'query' => array(
+          'url' => $url,
+          'format' => $format,
+        ),
+      );
+      $this->drupalGet('oembed/endpoint', $options);
+      if ($format == 'json') {
+        $embed = drupal_json_decode($this->drupalGetContent());
+      }
+      else if ($format == 'xml') {
+        $xml = @new SimpleXMLElement($this->drupalGetContent());
+        $embed = array();
+        foreach ($xml as $key => $value) {
+          $embed[$key] = (string) $value;
+        }
+      }
+      $errors = oembed_validate_response($embed);
+      $this->assertTrue(empty($errors), 'oEmbed response is valid');
+      $output = theme('oembed__rich', array('embed' => $embed));
+      $node = node_load($node->nid);
+      $this->assertRaw($node->title, t('Node title appears in the output.'));
+    }
+  }
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider/plugins/providers/file.inc b/profiles/commons/modules/contrib/oembed/oembedprovider/plugins/providers/file.inc
new file mode 100644
index 0000000..9bbcdd2
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider/plugins/providers/file.inc
@@ -0,0 +1,71 @@
+<?php
+
+$plugin = array(
+  'title' => 'File',
+  'capture subpatterns' => TRUE,
+  'scheme' => url('', array('absolute' => TRUE)) . 'file/*',
+  'callback' => 'oembedprovider_file_provider',
+  'provider' => TRUE,
+);
+
+/**
+ * The default provider to handle files
+ *
+ * @param string $url
+ * @param array $matches
+ */
+function oembedprovider_file_provider($plugin, $url, $matches, $parameters) {
+  $block_endless_recursion = &drupal_static(__FUNCTION__, array());
+
+  $result = FALSE;
+
+  $fid = $matches[1];
+  $defaults = array('view_mode' => 'full', 'langcode' => NULL);
+  $parameters = array_merge($defaults, $parameters);
+
+  if (!isset($block_endless_recursion[$fid])) {
+    $block_endless_recursion[$fid] = TRUE;
+
+    $file = file_load($fid);
+    if ($file && file_entity_access('view', $file, drupal_anonymous_user())) {
+      $author = user_load($file->uid);
+      $build = file_view_file($file, $parameters['view_mode'], $parameters['langcode']);
+      $result = array(
+        'title' => $file->filename,
+        'author_name' => $author->name,
+        'author_url' => url('user/' . $author->uid, array('absolute' => TRUE)),
+        '#entity_type' => 'file',
+      );
+      list($result['#id'], $result['#vid'], $result['#bundle']) = entity_extract_ids('file', $file);
+
+      if ($file->type == 'image') {
+        if ($build['#theme'] == 'image_style') {
+          $dimensions = $file->image_dimensions;
+          image_style_transform_dimensions($build['#style_name'], $dimensions);
+          $result += array(
+            'type' => 'photo',
+            'url' => image_style_url($build['#style_name'], $build['#path']),
+          ) + $dimensions;
+        }
+        else {
+          $result += array(
+            'type' => 'photo',
+            'url' => file_create_url($file->uri),
+          ) + $file->image_dimensions;
+        }
+      }
+      else {
+        $result += array(
+          'type' => 'rich',
+          'html' => drupal_render($build),
+        );
+      }
+
+      $result = _oembedprovider_result($result['type'], $result);
+    }
+
+    unset($block_endless_recursion[$fid]);
+  }
+
+  return $result;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider/plugins/providers/node.inc b/profiles/commons/modules/contrib/oembed/oembedprovider/plugins/providers/node.inc
new file mode 100644
index 0000000..c1c1a74
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider/plugins/providers/node.inc
@@ -0,0 +1,49 @@
+<?php
+
+$plugin = array(
+  'title' => 'Node',
+  'capture subpatterns' => TRUE,
+  'scheme' => url('', array('absolute' => TRUE)) . 'node/*',
+  'callback' => 'oembedprovider_node_provider',
+  'provider' => TRUE,
+);
+
+/**
+ * The default provider to handle nodes
+ *
+ * @param string $url
+ * @param array $matches
+ */
+function oembedprovider_node_provider($plugin, $url, $matches, $parameters) {
+  $block_endless_recursion = &drupal_static(__FUNCTION__, array());
+
+  $result = FALSE;
+
+  $nid = $matches[1];
+  $defaults = array('view_mode' => 'full', 'langcode' => NULL);
+  $parameters = array_merge($defaults, $parameters);
+
+  if (!isset($block_endless_recursion[$nid])) {
+    $block_endless_recursion[$nid] = TRUE;
+
+    $node = node_load($nid);
+    if ($node && node_access('view', $node, drupal_anonymous_user())) {
+      $author = user_load($node->uid);
+      $build = node_view($node, $parameters['view_mode'], $parameters['langcode']);
+      $result = array(
+        'type' => 'rich',
+        'html' => render($build),
+        'title' => $node->title,
+        'author_name' => $author->name,
+        'author_url' => url('user/' . $author->uid, array('absolute' => TRUE)),
+        '#entity_type' => 'node',
+      );
+      list($result['#id'], $result['#vid'], $result['#bundle']) = entity_extract_ids('node', $node);
+      $result = _oembedprovider_result($result['type'], $result);
+    }
+
+    unset($block_endless_recursion[$nid]);
+  }
+
+  return $result;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider_embed/.gitignore b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/.gitignore
new file mode 100644
index 0000000..987e2a2
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/.gitignore
@@ -0,0 +1,2 @@
+composer.lock
+vendor
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider_embed/composer.json b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/composer.json
new file mode 100644
index 0000000..24287c0
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/composer.json
@@ -0,0 +1,11 @@
+{
+    "repositories": [
+    ],
+    "require": {
+        "excelwebzone/omlex": "dev-master",
+        "embed/embed": "dev-master",
+        "fg/essence": "dev-master",
+        "alb/oembed": "dev-master",
+        "embedly/embedly-php": "dev-master"
+    }
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider_embed/oembedprovider_embed.info b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/oembedprovider_embed.info
new file mode 100644
index 0000000..4a09784
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/oembedprovider_embed.info
@@ -0,0 +1,16 @@
+name = oEmbed Provider Libraries
+dependencies[] = oembed
+description = "Developer sandbox for integration with other oEmbed libraries."
+core = 7.x
+package = oEmbed
+dependencies[] = classloader
+dependencies[] = oembed
+hidden = TRUE
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-1.0-rc2+6-dev"
+core = "7.x"
+project = "oembed"
+datestamp = "1387568916"
+
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider_embed/oembedprovider_embed.module b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/oembedprovider_embed.module
new file mode 100644
index 0000000..c389aa5
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/oembedprovider_embed.module
@@ -0,0 +1,21 @@
+<?php
+
+/**
+ * Implements hook_init().
+ */
+function oembedprovider_embed_init() {
+  $loader = drupal_classloader();
+  $map = require drupal_get_path('module', 'oembedprovider_embed') . '/vendor/composer/autoload_namespaces.php';
+  foreach ($map as $namespace => $path) {
+    $loader->registerNamespace(rtrim($namespace, '\\'), $path);
+  }
+}
+
+/**
+ * Implement hook_ctools_plugin_directory().
+ */
+function oembedprovider_embed_ctools_plugin_directory($module, $plugin) {
+  if ($module == 'oembed' && $plugin == 'providers') {
+    return 'plugins/' . $plugin;
+  }
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider_embed/oembedprovider_embed.oembed.inc b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/oembedprovider_embed.oembed.inc
new file mode 100644
index 0000000..fc78b90
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/oembedprovider_embed.oembed.inc
@@ -0,0 +1,15 @@
+<?php
+
+/**
+ * Impements hook_oembedprovider().
+ *
+ * The provider established by this module will attempt to resolve every URL it can.
+ */
+function oembedprovider_embed_oembedprovider() {
+  return array(
+    '*' => array(
+      'name' => variable_get('oembedprovider_embed_provider', 'embed'),
+      'callback' => 'oembedprovider_embed_provider',
+    ),
+  );
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/alb.inc b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/alb.inc
new file mode 100644
index 0000000..2b1afa0
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/alb.inc
@@ -0,0 +1,18 @@
+<?php
+
+$plugin = array(
+  'title' => 'Alb',
+  'callback' => 'oembedprovider_embed_alb_callback',
+  'scheme' => '*',
+);
+
+function oembedprovider_embed_alb_callback($plugin, $url, $matches, $parameters) {
+  $embed = FALSE;
+
+  $response = Alb\OEmbed\Simple::request($url, $parameters);
+  if ($response) {
+    $embed = $response->toArray();
+  }
+
+  return $embed;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/embed.inc b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/embed.inc
new file mode 100644
index 0000000..deaafec
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/embed.inc
@@ -0,0 +1,17 @@
+<?php
+
+$plugin = array(
+  'title' => 'Embed',
+  'callback' => 'oembedprovider_embed_embed_callback',
+  'scheme' => '*',
+);
+
+function oembedprovider_embed_embed_callback($plugin, $url, $matches, $parameters) {
+  $embed = FALSE;
+
+  $provider = Embed\Embed::create(new Embed\Url($url));
+  if ($provider->OEmbed) {
+    $embed = $provider->OEmbed->get();
+  }
+  return $embed;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/embedly2.inc b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/embedly2.inc
new file mode 100644
index 0000000..fed474d
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/embedly2.inc
@@ -0,0 +1,21 @@
+<?php
+
+$plugin = array(
+  'title' => 'Embed.ly2',
+  'callback' => 'oembedprovider_embed_embedly2_callback',
+  'scheme' => '*',
+);
+
+function oembedprovider_embed_embedly2_callback($plugin, $url, $matches, $parameters) {
+  $embed = FALSE;
+
+  $api = new Embedly\Embedly(array('key' => variable_get('oembedembedly_api_key', NULL)));
+  $parameters['url'] = $url;
+
+  $objs = $api->oembed($parameters);
+  if ($objs) {
+    $embed = (array) array_pop($objs);
+  }
+
+  return $embed;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/essence.inc b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/essence.inc
new file mode 100644
index 0000000..a0e98df
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/essence.inc
@@ -0,0 +1,18 @@
+<?php
+
+$plugin = array(
+  'title' => 'Essence',
+  'callback' => 'oembedprovider_embed_essence_callback',
+  'scheme' => '*',
+);
+
+function oembedprovider_embed_essence_callback($plugin, $url, $matches, $parameters) {
+  $embed = FALSE;
+
+  $Essence = new fg\Essence\Essence();
+  $Media = $Essence->embed($url, $parameters);
+  if ($Media) {
+    $embed = $Media->properties();
+  }
+  return $embed;
+}
diff --git a/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/omlex.inc b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/omlex.inc
new file mode 100644
index 0000000..f962a84
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/oembedprovider_embed/plugins/providers/omlex.inc
@@ -0,0 +1,23 @@
+<?php
+
+$plugin = array(
+  'title' => 'Omlex',
+  'callback' => 'oembedprovider_embed_omlex_callback',
+  'scheme' => '*',
+);
+
+function oembedprovider_embed_omlex_callback($plugin, $url, $matches, $parameters) {
+  $embed = FALSE;
+
+  $ombed = new Omlex\OEmbed($url);
+
+  // oEmbed response is a protected property of the object, so casting to an array is
+  // the only way. See http://www.php.net/manual/en/language.types.array.php#language.types.array.casting
+
+  $object = (array) $ombed->getObject($parameters);
+  if ($object) {
+    $embed = (array) $object["\x00*\x00object"];
+  }
+
+  return $embed;
+}
diff --git a/profiles/commons/modules/contrib/oembed/plugins/export_ui/oembed_provider.inc b/profiles/commons/modules/contrib/oembed/plugins/export_ui/oembed_provider.inc
new file mode 100644
index 0000000..104bc87
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/plugins/export_ui/oembed_provider.inc
@@ -0,0 +1,20 @@
+<?php
+
+$plugin = array(
+  'schema' => 'oembed_provider',
+  'access' => 'administer oembed',
+  'menu' => array(
+    'menu prefix' => 'admin/config/media/oembed/provider',
+    'menu item' => 'default',
+    'menu title' => 'Remote endpoints',
+    'menu description' => 'Add, edit and remove oembed providers from the system.',
+  ),
+  'handler' => array(
+    'class' => 'oembed_provider_ui',
+    'parent' => 'ctools_export_ui',
+  ),
+  'title singular' => t('provider'),
+  'title singular proper' => t('Provider'),
+  'title plural' => t('providers'),
+  'title plural proper' => t('Providers'),
+);
diff --git a/profiles/commons/modules/contrib/oembed/plugins/export_ui/oembed_provider_ui.class.php b/profiles/commons/modules/contrib/oembed/plugins/export_ui/oembed_provider_ui.class.php
new file mode 100644
index 0000000..c170643
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/plugins/export_ui/oembed_provider_ui.class.php
@@ -0,0 +1,74 @@
+<?php
+
+class oembed_provider_ui extends ctools_export_ui {
+
+  /**
+   * Provide the actual editing form.
+   */
+  function edit_form(&$form, &$form_state) {
+    parent::edit_form($form, $form_state);
+    $form['title'] = array(
+      '#type'          => 'textfield',
+      '#title'         => t('Title'),
+      '#description'   => t('A human-readable title for the provider.'),
+      '#size'          => 32,
+      '#maxlength'     => 255,
+      '#required'      => TRUE,
+      '#default_value' => $form_state['item']->title,
+    );
+
+    $form['endpoint'] = array(
+      '#type'          => 'textfield',
+      '#title'         => t('Endpoint'),
+      '#description'   => t('The endpoint where oEmbed requests are going to be sent.'),
+      '#size'          => 32,
+      '#maxlength'     => 255,
+      '#required'      => TRUE,
+      '#default_value' => $form_state['item']->endpoint,
+    );
+
+    $form['scheme'] = array(
+      '#type'          => 'textarea',
+      '#title'         => t('Schemes'),
+      '#description'   => t('Newline separated list of schemes like !example', array('!example' => 'http://*.revision3.com/*')),
+      '#required'      => TRUE,
+      '#default_value' => $form_state['item']->scheme,
+    );
+  }
+
+  /**
+   * Overrides ctools_export_ui::edit_form_submit().
+   */
+  function edit_form_submit(&$form, &$form_state) {
+    // Clear the oEmbed provider cache.
+    oembed_providers_reset();
+    return parent::edit_form_submit($form, $form_state);
+  }
+
+  /**
+   * Overrides ctools_export_ui::edit_form_import_submit().
+   */
+  function edit_form_import_submit($form, &$form_state) {
+    // Clear the oEmbed provider cache.
+    oembed_providers_reset();
+    return parent::edit_form_import_submit($form, $form_state);
+  }
+
+  /**
+   * Overrides ctools_export_ui::delete_form_submit().
+   */
+  function delete_form_submit(&$form_state) {
+    // Clear the oEmbed provider cache.
+    oembed_providers_reset();
+    return parent::delete_form_submit($form_state);
+  }
+
+  /**
+   * Overrides ctools_export_ui::set_item_state().
+   */
+  function set_item_state($state, $js, $input, $item) {
+    // Clear the oEmbed provider cache.
+    oembed_providers_reset();
+    return parent::set_item_state($state, $js, $input, $item);
+  }
+}
diff --git a/profiles/commons/modules/contrib/oembed/plugins/providers/default.inc b/profiles/commons/modules/contrib/oembed/plugins/providers/default.inc
new file mode 100644
index 0000000..be7b1a8
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/plugins/providers/default.inc
@@ -0,0 +1,99 @@
+<?php
+
+$plugin = array(
+  'title' => 'Remote endpoint',
+  'description' => 'oEmbed provider for remote endpoints',
+  'callback' => 'oembed_default_callback',
+  'get child' => 'oembed_default_provider_get_child',
+  'scheme callback' => 'oembed_default_provider_scheme',
+  'consumer' => TRUE,
+);
+
+/**
+ * Child plugins are oembed_provider objects that describe remote oEmbed endpoints.
+ */
+function oembed_default_provider_get_child($plugin, $parent, $child) {
+  ctools_include('export');
+  $provider = ctools_export_crud_load('oembed_provider', $child);
+  $plugin['title'] = $provider->title;
+  $plugin['endpoint'] = $provider->endpoint;
+  $plugin['scheme'] = $provider->scheme;
+  $plugin['name'] = $parent . ':' . $provider->name;
+
+  // Force the plugin to be processed again because it will persist in the static cache
+  // of ctools_get_plugins(). Therefore, strip out the features of the child plugin
+  // that make it look like the parent.
+  unset($plugin['scheme callback']);
+  unset($plugin['scheme map']);
+  unset($plugin['weight']);
+
+  $info = ctools_plugin_get_info('oembed', 'providers');
+  $function = ctools_plugin_get_function($info, 'process');
+  $function($plugin, $info);
+
+  return $plugin;
+}
+
+/**
+ *
+ */
+function oembed_default_provider_scheme() {
+  // oEmbed provider definitions are remote web services.
+  ctools_include('export');
+  $providers = ctools_export_load_object('oembed_provider');
+  $schemes = array();
+  foreach ($providers as $provider) {
+    if (empty($provider->disabled) && !empty($provider->scheme)) {
+      $schemes['default:'. $provider->name] = $provider->scheme;
+    }
+  }
+  return $schemes;
+}
+
+/**
+ * Default provider callback makes HTTP requests using drupal_http_request().
+ */
+function oembed_default_callback($plugin, $url, $matches, $parameters) {
+  $embed = FALSE;
+
+  // Remote oEmbed endpoint request.
+  $parameters['url'] = $url;
+  $query = http_build_query($parameters, NULL, '&');
+  $fetch_url = $plugin['endpoint'] . '?' . $query;
+
+  //TODO: Add alternative ways of fetching the content - like http client?
+  $response = drupal_http_request($fetch_url);
+  if (!isset($response->error)) {
+
+    // JSON or XML data might be returned, so be agnostic about decoding it.
+    $embed = json_decode($response->data, TRUE);
+    if (!is_array($embed)) {
+      try {
+        $xml = @new SimpleXMLElement($response->data);
+        $embed = array();
+        foreach ($xml as $key => $value) {
+          $embed[$key] = (string) $value;
+        }
+      }
+      catch (Exception $e) {
+        watchdog('oembed', 'Could not parse response from %url.', array('%url' => $fetch_url), WATCHDOG_ERROR);
+      }
+    }
+
+    if (empty($embed['version']) || empty($embed['type']) || intval($embed['version']) != 1) {
+      $embed = FALSE;
+    }
+
+    if ($embed && !isset($embed['title'])) {
+      $embed['title'] = '';
+    }
+
+    if (!$embed) {
+      watchdog('oembed', 'Response from %url not a valid oEmbed response.', array('%url' => $fetch_url), WATCHDOG_ERROR);
+    }
+  }
+  else {
+    watchdog('oembed', 'Error fetching data from %url.', array('%url' => $fetch_url), WATCHDOG_ERROR);
+  }
+  return $embed;
+}
diff --git a/profiles/commons/modules/contrib/oembed/theme/oembed.theme.inc b/profiles/commons/modules/contrib/oembed/theme/oembed.theme.inc
new file mode 100644
index 0000000..8cd209e
--- /dev/null
+++ b/profiles/commons/modules/contrib/oembed/theme/oembed.theme.inc
@@ -0,0 +1,57 @@
+<?php
+
+/**
+ * @file
+ * Theme related functions for oEmbed Core
+ */
+
+/**
+ * Theme for oEmbed output.
+ */
+function theme_oembed($vars) {
+  $embed = $vars['embed'];
+
+  $variables = array(
+    'path' => $embed['original_url'],
+
+    // oembed_alt_attr() returns output from t() and is sanitized.
+    'text' => empty($embed['title']) ? oembed_alt_attr($embed) : check_plain($embed['title']),
+    'options' => array(
+      'absolute' => TRUE,
+      'attributes' => array('class' => 'oembed-link'),
+      'html' => TRUE,
+    ),
+  );
+
+  return theme('link', $variables);
+}
+
+/**
+ * Theme for photo oEmbed output.
+ */
+function theme_oembed__photo($vars) {
+  $embed = $vars['embed'];
+  $variables = array(
+    'path' => $embed['url'],
+    'alt' => oembed_alt_attr($embed),
+    'width' => $embed['width'],
+    'height' => $embed['height'],
+  );
+  return theme('image', $variables);
+}
+
+/**
+ * Theme for rich oEmbed output.
+ */
+function theme_oembed__rich($vars) {
+  $embed = $vars['embed'];
+  return $embed['html'];
+}
+
+/**
+ * Theme for video oEmbed output.
+ */
+function theme_oembed__video($vars) {
+  $embed = $vars['embed'];
+  return $embed['html'];
+}
diff --git a/profiles/commons/modules/contrib/og/PATCHES.txt b/profiles/commons/modules/contrib/og/PATCHES.txt
index 71b72db..dc06bd1 100644
--- a/profiles/commons/modules/contrib/og/PATCHES.txt
+++ b/profiles/commons/modules/contrib/og/PATCHES.txt
@@ -1,5 +1,5 @@
 The following patches have been applied to this project:
-- http://drupal.org/files/og-default-role-member-2005800-21.patch
+- http://drupal.org/files/issues/og-default-role-member-2005800-25.patch
 - http://drupal.org/files/og_ui-group_node_add_theme-1800208-5.patch
 
 This file was automatically generated by Drush Make (http://drupal.org/project/drush).
\ No newline at end of file
diff --git a/profiles/commons/modules/contrib/og/og.module b/profiles/commons/modules/contrib/og/og.module
index b866bb7..614fc78 100644
--- a/profiles/commons/modules/contrib/og/og.module
+++ b/profiles/commons/modules/contrib/og/og.module
@@ -857,11 +857,11 @@ function og_form_group_manager_validate($form, &$form_state) {
  *   The entity from which to extract values.
  * @param $entity_type
  *   The entity type.
- * @param $gid
+ * @param $rid
  *   The default OG role ID.
  *
  * @return
- *   The corresponding overridden OG role ID, if any.
+ *   The corresponding overridden OG role ID, or default.
  */
 function og_roles_get_overridden_role($entity, $entity_type, $rid) {
   list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
@@ -869,13 +869,17 @@ function og_roles_get_overridden_role($entity, $entity_type, $rid) {
   $og_overridden_roles = og_roles($entity_type, $bundle, $id);
   // Get og default roles.
   $og_default_roles = og_roles($entity_type, $bundle, 0, FALSE, FALSE);
-  $role_name = $og_default_roles[$rid];
-  foreach ($og_overridden_roles as $overridden_rid => $overridden_role) {
-    if ($overridden_role == $role_name) {
-      $rid = $overridden_rid;
-      return $rid;
+  if(isset($og_default_roles[$rid])) {
+    $role_name = $og_default_roles[$rid];
+    foreach ($og_overridden_roles as $overridden_rid => $overridden_role) {
+      if ($overridden_role == $role_name) {
+        $rid = $overridden_rid;
+        return $rid;
+      }
     }
   }
+  //Return the default $rid if no overridden one is found.
+  return $rid;
 }
 
 /**
diff --git a/profiles/commons/modules/contrib/og/og.test b/profiles/commons/modules/contrib/og/og.test
index 5514b6c..b71f953 100644
--- a/profiles/commons/modules/contrib/og/og.test
+++ b/profiles/commons/modules/contrib/og/og.test
@@ -2108,7 +2108,7 @@ class OgAutoAssignRoleTestCase extends DrupalWebTestCase {
   public function setUp() {
     parent::setUp('og');
     // Create a group content type.
-    $this->drupalCreateContentType(array( 'name' => 'Group', 'type' => 'group'));
+    $this->drupalCreateContentType(array('name' => 'Group', 'type' => 'group'));
     og_create_field(OG_GROUP_FIELD, 'node', 'group');
     og_create_field(OG_DEFAULT_ACCESS_FIELD, 'node', 'group');
 
@@ -2116,66 +2116,67 @@ class OgAutoAssignRoleTestCase extends DrupalWebTestCase {
     $role = user_role_load_by_name('administrator');
     variable_set('og_group_manager_default_rids_node_group', array($role->rid));
 
-    $this->roles = db_select('og_role', 'ogr')
+    $this->defaultRoles = db_select('og_role', 'ogr')
       ->fields('ogr')
       ->execute()
       ->fetchAllAssoc('rid');
   }
 
   /**
-   * Create a new group and verify that new OG roles has been created and
+   * Create a new group and verify that OG roles have been created and
    * attached to the group owner.
+   * This test overrides role permissions to use its own for the group.
    */
-  public function testAutoAssignNewRoles() {
+  public function testAutoAssignRolesDefaultAccessGroup() {
+    $entity_type = 'node';
+    $entity_bundle = 'group';
+    $group_owner_id = 1;
+
     // Create the group.
-    $node = entity_create('node', array(
+    $node = $this->drupalCreateNode(array(
       'title' => $this->randomString(),
-      'type' => 'group',
-      'language' => LANGUAGE_NONE,
-      'uid' => 1,
-    ));
-    $wrapper = entity_metadata_Wrapper('node', $node);
+      'type' => $entity_bundle,
+      'uid' => $group_owner_id,));
+    $wrapper = entity_metadata_Wrapper($entity_type, $node);
     $wrapper->{OG_GROUP_FIELD}->set(1);
     $wrapper->{OG_DEFAULT_ACCESS_FIELD}->set(1);
     $wrapper->save();
 
     // Verify that the group received new roles.
-    $group_roles = db_select('og_users_roles', 'ogur')
-      ->fields('ogur')
-      ->condition('ogur.group_type', 'node')
-      ->condition('ogur.gid', $wrapper->getIdentifier())
-      ->condition('ogur.rid', array_keys($this->roles), 'NOT IN')
-      ->execute()
-      ->fetchAllAssoc('rid');
-
-    $this->assertTrue(!empty($group_roles), 'A new role has been automatically assigned to the group owner.');
+    $roles = og_roles($entity_type, $entity_bundle, $wrapper->getIdentifier());
+    $og_roles = og_get_user_roles($entity_type, $wrapper->getIdentifier(), $group_owner_id);
+    $array_compare = array_diff($roles, $og_roles);
+    $this->assertTrue(!array_search('administrator member', $array_compare), '(Group Roles/Permissions) Administrator role has been automatically assigned to the group owner.');
+    $this->assertTrue(!array_search('member', $array_compare), '(Group Roles/Permissions) The basic OG member role has been assigned to the group owner.');
   }
 
   /**
-   * Create a new group and verify that the basic OG roles has been assigned to
-   * the group owner.
+   * Create a new group and verify that OG roles have been created and
+   * attached to the group owner.
+   * This test uses the default role permissions.
    */
-  public function testAutoAssignCurrentRoles() {
+  public function testAutoAssignRolesNotDefaultAccessGroup() {
+    $entity_type = 'node';
+    $entity_bundle = 'group';
+    $group_owner_id = 1;
+
     // Create the group.
-    $node = entity_create('node', array(
+    $node = entity_create($entity_type, array(
       'title' => $this->randomString(),
-      'type' => 'group',
+      'type' => $entity_bundle,
       'language' => LANGUAGE_NONE,
       'uid' => 1,
     ));
-    $wrapper = entity_metadata_Wrapper('node', $node);
+    $wrapper = entity_metadata_Wrapper($entity_type, $node);
     $wrapper->{OG_GROUP_FIELD}->set(1);
     $wrapper->{OG_DEFAULT_ACCESS_FIELD}->set(0);
     $wrapper->save();
 
-    $group_roles = db_select('og_users_roles', 'ogur')
-      ->fields('ogur')
-      ->condition('ogur.group_type', 'node')
-      ->condition('ogur.gid', $wrapper->getIdentifier())
-      ->condition('ogur.rid', array_keys($this->roles), 'IN')
-      ->execute()
-      ->fetchAllAssoc('rid');
-
-    $this->assertTrue(!empty($group_roles), 'The basic OG roles has been assigned to the group owner.');
+    // Verify that the group received new roles.
+    $roles = og_roles($entity_type, $entity_bundle, $wrapper->getIdentifier());
+    $og_roles = og_get_user_roles($entity_type, $wrapper->getIdentifier(), $group_owner_id);
+    $array_compare = array_diff($roles, $og_roles);
+    $this->assertTrue(!array_search('administrator member', $array_compare), '(Default Roles/Permissions)Administrator role has been automatically assigned to the group owner.');
+    $this->assertTrue(!array_search('member', $array_compare), '(Default Roles/Permissions) The basic OG member role has been assigned to the group owner.');
   }
 }
diff --git a/profiles/commons/modules/contrib/panels/i18n_panels/README.txt b/profiles/commons/modules/contrib/panels/i18n_panels/README.txt
new file mode 100644
index 0000000..119fcdb
--- /dev/null
+++ b/profiles/commons/modules/contrib/panels/i18n_panels/README.txt
@@ -0,0 +1,96 @@
+
+This module provides by default the ability to translate panel display and
+panel pane titles.
+Further it introduced an extension to the ctools content_types plugin.
+You can now define translatable settings which will be registered in i18n.
+Out of the box the module extends the custom content content_type to allow
+translation of the content.
+
+Attention: Currently this module needs a patched panels version.
+Please apply the patches included in this module or visit:
+Additional hooks: http://drupal.org/node/1179034#comment-5664050
+UUID support: http://drupal.org/node/1277908#comment-5667824
+
+
+
+Plugin definition extension:
+------------------------------
+
+This example shows how the content_type custom is extended:
+
+#### Default: ####
+/**
+ * Plugins are described by creating a $plugin array which will be used
+ * by the system that includes this file.
+ */
+$plugin = array(
+  'title' => t('Custom content'),
+  'no title override' => TRUE,
+  'defaults' => array('admin_title' => '', 'title' => '', 'body' => '', 'format' => filter_fallback_format(), 'substitute' => TRUE),
+  'js' => array('misc/autocomplete.js', 'misc/textarea.js', 'misc/collapse.js'),
+  // Make sure the edit form is only used for some subtypes.
+  'edit form' => '',
+  'add form' => '',
+  'edit text' => t('Edit'),
+  'all contexts' => TRUE,
+);
+
+#### Extended Configuration: ####
+/**
+ * Plugins are described by creating a $plugin array which will be used
+ * by the system that includes this file.
+ */
+$plugin = array(
+  'title' => t('Custom content'),
+  'no title override' => TRUE,
+  'defaults' => array('admin_title' => '', 'title' => '', 'body' => '', 'format' => filter_fallback_format(), 'substitute' => TRUE),
+  'js' => array('misc/autocomplete.js', 'misc/textarea.js', 'misc/collapse.js'),
+  // Make sure the edit form is only used for some subtypes.
+  'edit form' => '',
+  'add form' => '',
+  'edit text' => t('Edit'),
+  'all contexts' => TRUE,
+  'i18n_settings' = array(
+    'title',
+    'body' => array('format' => 'plain_text'),
+    'items|0|title'
+  ),
+);
+
+The new key "i18n_settings" defines an array with the settings that are
+translatable. The array contains the names of the settings, they have to be
+available in the "defaults" array of the content definition. If you need to
+define a format use the name of the setting as the array item key and as item
+another array with the detail configuration. E.g
+'i18n_settings' = array('body' => array('format' => 'plain_text'))
+
+If i18n_settings is a string it's used as callback. The expected return is an
+array equal to the one used in the fix configuration.
+You can even declare nested settings  as translatable, to do so use '|' as
+delimiter.
+E.g. 'items|0|title' is evaluated as $settings['items'][0]['title']
+
+#### Callback: ####
+/**
+ * Plugins are described by creating a $plugin array which will be used
+ * by the system that includes this file.
+ */
+$plugin = array(
+  'title' => t('Custom content'),
+  'no title override' => TRUE,
+  'defaults' => array('admin_title' => '', 'title' => '', 'body' => '', 'format' => filter_fallback_format(), 'substitute' => TRUE),
+  'js' => array('misc/autocomplete.js', 'misc/textarea.js', 'misc/collapse.js'),
+  // Make sure the edit form is only used for some subtypes.
+  'edit form' => '',
+  'add form' => '',
+  'edit text' => t('Edit'),
+  'all contexts' => TRUE,
+  'i18n_settings' => 'ctools_custom_content_type_i18n_settings',
+);
+
+function ctools_custom_content_type_i18n_settings($conf) {
+  return array(
+    'title',
+    'body' => array('format' => $conf['format']),
+  );
+}
diff --git a/profiles/commons/modules/contrib/panels/i18n_panels/i18n_panels.i18n.inc b/profiles/commons/modules/contrib/panels/i18n_panels/i18n_panels.i18n.inc
new file mode 100644
index 0000000..71fdafb
--- /dev/null
+++ b/profiles/commons/modules/contrib/panels/i18n_panels/i18n_panels.i18n.inc
@@ -0,0 +1,50 @@
+<?php
+/**
+ * @file
+ * Internationalization (i18n) hooks
+ */
+
+/**
+ * Implements hook_i18n_object_info().
+ */
+function i18n_panels_i18n_object_info() {
+  $info['pane_configuration'] = array(
+    'title' => t('Pane Configuration'),
+    'key' => 'uuid',
+    'string translation' => array(
+      'textgroup' => 'panels',
+      'type' => 'pane_configuration',
+      'properties' => array(
+        'title' => t('Pane Title'),
+      ),
+    ),
+  );
+  $info['display_configuration'] = array(
+    'title' => t('Display Configuration'),
+    'key' => 'uuid',
+    'string translation' => array(
+      'textgroup' => 'panels',
+      'type' => 'display_configuration',
+      'properties' => array(
+        'title' => t('Display Title'),
+      ),
+    ),
+  );
+
+  return $info;
+}
+
+/**
+ * Implements hook_i18n_string_info().
+ */
+function i18n_panels_i18n_string_info() {
+  $groups['panels'] = array(
+    'title' => t('Panels'),
+    'description' => t('Translatable panels items: display and pane configuration items. E.g. Title.'),
+    // This group doesn't have strings with format.
+    'format' => FALSE,
+    // This group can list all strings.
+    'list' => FALSE,
+  );
+  return $groups;
+}
diff --git a/profiles/commons/modules/contrib/panels/i18n_panels/i18n_panels.info b/profiles/commons/modules/contrib/panels/i18n_panels/i18n_panels.info
new file mode 100644
index 0000000..0948e8b
--- /dev/null
+++ b/profiles/commons/modules/contrib/panels/i18n_panels/i18n_panels.info
@@ -0,0 +1,16 @@
+name = Panels translation
+description = Supports translatable panels items.
+dependencies[] = i18n
+dependencies[] = panels
+dependencies[] = i18n_string
+dependencies[] = i18n_translation
+package = Multilingual - Internationalization
+core = 7.x
+
+
+; Information added by drush on 2013-12-20
+version = "7.x-3.x-i18n-dev"
+core = "7.x"
+project = "panels"
+datestamp = "1387568916"
+
diff --git a/profiles/commons/modules/contrib/panels/i18n_panels/i18n_panels.install b/profiles/commons/modules/contrib/panels/i18n_panels/i18n_panels.install
new file mode 100644
index 0000000..ff7631b
--- /dev/null
+++ b/profiles/commons/modules/contrib/panels/i18n_panels/i18n_panels.install
@@ -0,0 +1,27 @@
+<?php
+
+/**
+ * @file
+ * Internationalization (i18n) submodule: Panels translation.
+ */
+
+/**
+ * Implements hook_requirements().
+ */
+function i18n_panels_requirements($phase) {
+  $requirements = array();
+  // Check only for status report, to allow update / install.
+  if ($phase == 'runtime') {
+    // Check if the panels module runs with uuids.
+    $requirements['uuid'] = array(
+      'title' => t('Panels uuid support.'),
+      'severity' => REQUIREMENT_OK,
+      'value' => t('Available'),
+    );
+    if (!db_field_exists('panels_pane', 'uuid')) {
+      $requirements['uuid']['severity'] = REQUIREMENT_ERROR;
+      $requirements['uuid']['value'] = t('Not found. Please apply the provided patches and run the update script.');
+    }
+  }
+  return $requirements;
+}
diff --git a/profiles/commons/modules/contrib/panels/i18n_panels/i18n_panels.module b/profiles/commons/modules/contrib/panels/i18n_panels/i18n_panels.module
new file mode 100644
index 0000000..8214495
--- /dev/null
+++ b/profiles/commons/modules/contrib/panels/i18n_panels/i18n_panels.module
@@ -0,0 +1,433 @@
+<?php
+
+/**
+ * @file
+ * Internationalization (i18n) submodule: Panels translation.
+ */
+
+/**
+ * Fetch the i18n_settings of the content type if there are any.
+ *
+ * @param stdClass $pane
+ *   The pane to deal with.
+ *
+ * @return array|false
+ *   Settings or FALSE if none are present.
+ */
+function i18n_panels_get_i18n_settings($pane) {
+  ctools_include('content');
+  $content_type = ctools_get_content_type($pane->type);
+  if (isset($content_type['i18n_settings'])) {
+    if (is_string($content_type['i18n_settings']) && function_exists($content_type['i18n_settings'])) {
+      $content_type['i18n_settings'] = $content_type['i18n_settings']($pane->configuration);
+    }
+  }
+  // Provide the override title string as translation for all panes that have
+  // this setting enabled.
+  if (isset($pane->configuration['override_title']) && $pane->configuration['override_title']) {
+    if (isset($content_type['i18n_settings']) && is_array($content_type['i18n_settings'])) {
+      $content_type['i18n_settings'][] = 'override_title_text';
+    }
+    else {
+      $content_type['i18n_settings'] = array('override_title_text');
+    }
+  }
+  return isset($content_type['i18n_settings']) ? $content_type['i18n_settings'] : FALSE;
+}
+
+/**
+ * Returns the translation object of the pane.
+ *
+ * @param stdClass $pane
+ *   The pane to deal with.
+ *
+ * @return stdClass|FALSE
+ *   Returns FALSE if no translation is necessary.
+ */
+function i18n_panels_get_i18n_translation_object($pane) {
+  $translation_object = array();
+
+  // Handle content type specific i18n settings.
+  if ($i18n_settings = i18n_panels_get_i18n_settings($pane)) {
+    // Register translatable settings.
+    foreach ($i18n_settings as $i18n_setting => $settings) {
+      if (!is_array($settings)) {
+        $i18n_setting = $settings;
+        $settings = array('format' => 'plain_text');
+      }
+      $translation_object[$i18n_setting] = NULL;
+      $key_exists = FALSE;
+      // Ensure a nested setting is "unpacked".
+      $config_value = drupal_array_get_nested_value($pane->configuration, explode('|', $i18n_setting), $key_exists);
+      // If we reached the end of the nested setting use the value as source.
+      if ($key_exists) {
+        $translation_object[$i18n_setting] = array(
+          'string' => $config_value,
+          'format' => $settings['format'],
+        );
+        $translation_object['panels_i18n_settings'][$i18n_setting] = $settings;
+      }
+    }
+  }
+
+  // Check if this pane has a custom title enabled.
+  if (!empty($pane->configuration['override_title'])) {
+    $translation_object['title']['string'] = $pane->configuration['override_title_text'];
+  }
+  if (!empty($translation_object)) {
+    return (object) $translation_object;
+  }
+  return FALSE;
+}
+
+/**
+ * Implements hook_panels_pane_insert().
+ *
+ * @param stdClass $pane
+ *   The pane to deal with.
+ */
+function i18n_panels_panels_pane_insert($pane) {
+  i18n_panels_panels_pane_update($pane);
+}
+
+/**
+ * Implements hook_panels_pane_update().
+ *
+ * @param stdClass $pane
+ *   The pane to deal with.
+ */
+function i18n_panels_panels_pane_update($pane) {
+  if ($translation_object = i18n_panels_get_i18n_translation_object($pane)) {
+    $translation_object->uuid = $pane->uuid;
+    $status = i18n_string_object_update('pane_configuration', $translation_object);
+  }
+}
+
+/**
+ * Implements hook_panels_pane_delete().
+ *
+ * @param array $pids
+ *   Array with the panel ids to delete.
+ */
+function i18n_panels_panels_pane_delete($pids) {
+  if (!empty($pids)) {
+    // Fetch the uuids from the db.
+    $uuids = db_select('panels_pane')
+      ->fields('panels_pane', array('uuid'))
+      ->condition('pid', $pids)
+      ->execute()
+      ->fetchCol();
+    foreach ($uuids as $uuid) {
+      // Create dummy pane with uuid as property.
+      $pane = (object) array('uuid' => $uuid);
+      i18n_string_object_remove('pane_configuration', $pane);
+    }
+  }
+}
+
+/**
+ * Implements hook_panels_pane_prerender().
+ *
+ * @param stdClass $pane
+ *   The pane to deal with.
+ */
+function i18n_panels_panels_pane_prerender($pane) {
+  // Check if this pane has translations.
+  if (isset($pane->uuid) && $translation_object = i18n_panels_get_i18n_translation_object($pane)) {
+    $translation_object->uuid = $pane->uuid;
+    // Send to translation.
+    $translation_object = i18n_string_object_translate('pane_configuration', $translation_object);
+    unset($translation_object->uuid, $translation_object->i18n_settings);
+    foreach ($translation_object as $i18n_setting => $translated_setting) {
+      if ($i18n_setting != 'panels_i18n_settings') {
+        if (is_array($translated_setting)) {
+          $translated_setting = $translated_setting['string'];
+        }
+        drupal_array_set_nested_value($pane->configuration, explode('|', $i18n_setting), $translated_setting);
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_panels_display_save().
+ *
+ * @param panels_display $display
+ *   The display to deal with.
+ */
+function i18n_panels_panels_display_save($display) {
+  $status = i18n_string_object_update('display_configuration', $display);
+}
+
+/**
+ * Implements hook_panels_display_delete().
+ *
+ * @param int $did
+ *   Id of the display to delete.
+ */
+function i18n_panels_panels_delete_display($did) {
+  // Fetch uuid to delete the translations.
+  $uuid = db_select('panels_display')
+    ->fields('panels_display', array('uuid'))
+    ->condition('did', $did)
+    ->execute()
+    ->fetchColumn();
+  // Build a dummy display.
+  $display = (object) array('uuid' => $uuid);
+
+  // Check if this display was just saved in the db.
+  if (!_18n_panels_is_exported_panels_display($display)) {
+    // If the display was just saved in the db remove all translations.
+    i18n_string_object_remove('display_configuration', $display);
+    // Remove related pane translations too.
+    $pids = db_select('panels_pane')
+      ->fields('panels_pane', array('pid'))
+      ->condition('did', $did)
+      ->execute()
+      ->fetchCol();
+    i18n_panels_panels_pane_delete($pids);
+  }
+  else {
+    // If the display is exported leave the translated strings but give the user
+    // a hint how to clean up.
+    drupal_set_message(
+      t(
+        'The reverted panels display(s) were exported, please run a <a href="!link">string refresh</a> to update the translatable strings.',
+        array('!link' => url('admin/config/regional/translate/i18n_string'))
+      ),
+      'warning',
+      FALSE
+    );
+  }
+}
+
+/**
+ * Implements hook_panels_pre_render().
+ *
+ * This function must not rely on the passed $renderer parameter. The parameter
+ * could be empty because this function is reused in i18n_ctools_render_alter().
+ * @todo Check if a drupal_alter() in panels_display::get_title() is applicable.
+ *
+ * @see i18n_ctools_render_alter()
+ *
+ * @param panels_display $display
+ *   The display to deal with.
+ * @param panels_renderer_standard $renderer
+ *   The renderer to deal with.
+ */
+function i18n_panels_panels_pre_render(&$display, $renderer) {
+  // Avoid double translations.
+  if (!isset($display->i18n_panels_title_translated)) {
+    $translation = i18n_string_object_translate('display_configuration', $display);
+    if (is_array($translation->title)) {
+      $display->title = $translation->title['string'];
+    }
+    else {
+      $display->title = $translation->title;
+    }
+    $display->i18n_panels_title_translated = TRUE;
+  }
+}
+
+/**
+ * Implements hook_ctools_render_alter().
+ *
+ * Under some circumstances the title of the panel page is set before
+ * hook_panels_pre_render() is fired. Such cases can be handled with this hook.
+ * @todo Check if a drupal_alter() in panels_display::get_title() is applicable.
+ */
+function i18n_ctools_render_alter(&$info, $page, $context) {
+  // @todo Find a better way to detect a panels page.
+  if ($page === TRUE && !empty($info['content']['#display']) && $info['content']['#display'] instanceof panels_display) {
+    i18n_panels_panels_pre_render($info['content']['#display'], NULL);
+    // Set the info title. This is used to set the page title.
+    $info['title'] = $info['content']['#display']->get_title();
+  }
+}
+
+
+/**
+ * Implements hook_ctools_plugin_post_alter().
+ *
+ * Register some translatable configuration settings for plugins.
+ *
+ */
+function i18n_panels_ctools_plugin_post_alter(&$plugin, $plugin_type_info) {
+  if ($plugin_type_info['type'] == 'content_types') {
+    // Modify custom content.
+    if ($plugin['name'] == 'custom') {
+      // Register callback to get the translatable settings.
+      $plugin['i18n_settings'] = 'ctools_custom_content_type_i18n_settings';
+    }
+  }
+}
+
+/**
+ * Callback to provide the translatable settings appropriate to the config.
+ *
+ * @param array $conf
+ *   Content type configuration.
+ *
+ * @return array
+ *   i18n_settings configuration.
+ */
+function ctools_custom_content_type_i18n_settings($conf) {
+  return array(
+    'title',
+    'body' => array('format' => $conf['format']),
+  );
+}
+
+/**
+ * Implements hook_i18n_string_list_TEXTGROUP_alter().
+ *
+ * Necessary to support the dynamic translatable settings defined by ctools
+ * content types.
+ */
+function i18n_panels_i18n_string_list_panels_alter(&$strings, $type = NULL, $object = NULL) {
+  if (isset($object->panels_i18n_settings)) {
+    foreach ($object->panels_i18n_settings as $i18n_setting => $settings) {
+      if (isset($object->{$i18n_setting})) {
+        $strings['panels'][$type][$object->uuid][$i18n_setting] = $object->{$i18n_setting};
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_i18n_string_list().
+ *
+ * @todo Figure out a generic solution to fetch exported displays.
+ */
+function i18n_panels_i18n_string_list($group) {
+  $strings = array();
+  if ($group == 'panels') {
+
+    // Fetch all available displays.
+    $displays = _18n_panels_fetch_all_panel_displays();
+
+    foreach ($displays as $display) {
+      if (empty($display->uuid)) {
+        drupal_set_message(t('The display %display has no uuid, please resave or re-export it.', array('%display' => $display->did)), 'warning');
+        continue;
+      }
+      // Avoid duplicated runs _18n_panels_fetch_all_panel_displays() probably
+      // returns the same display twice, one for the db based and one for the
+      // exported one.
+      if (isset($strings['panels']['display_configuration'][$display->uuid])) {
+        continue;
+      }
+      $strings['panels']['display_configuration'][$display->uuid]['title']['string'] = $display->title;
+      foreach ($display->content as $pane) {
+        if (empty($pane->uuid)) {
+          // Fetch exported uuid and validate it.
+          $uuid = str_replace('new-', '', $pane->pid);
+          if (!panels_uuid_is_valid($uuid)) {
+            drupal_set_message(t('The pane %pane has no uuid, please resave or re-export it.', array('%pane' => $pane->pid)), 'warning');
+            continue;
+          }
+          $pane->uuid = $uuid;
+        }
+        if ($translation_object = i18n_panels_get_i18n_translation_object($pane)) {
+          // Split up all strings and add them to the list.
+          $pane_strings = (array) $translation_object;
+          unset($pane_strings['panels_i18n_settings']);
+          foreach ($pane_strings as $key => $pane_string) {
+            $strings['panels']['pane_configuration'][$pane->uuid][$key] = $pane_string;
+          }
+        }
+      }
+    }
+  }
+  return $strings;
+}
+
+/**
+ * Checks if the give display is exported or only stored in the db.
+ *
+ * @return boolean
+ *   TRUE if the display is available from code.
+ */
+function _18n_panels_is_exported_panels_display($display) {
+  if (isset($display->uuid)) {
+    $displays = _18n_panels_fetch_all_panel_displays();
+    return isset($displays['exported-' . $display->uuid]);
+  }
+  return FALSE;
+}
+
+/**
+ * Returns a list of really all available panel displays.
+ *
+ * The list is statically cached. Use the parameter $reset to refresh the list
+ * during the same request.
+ * Probably returns the same display twice - once with the db based and once
+ * the exported one.
+ *
+ * @todo I bet there are better ways to solve this mess.
+ *
+ * @param boolean $reset
+ *   Reset the static cache.
+ *
+ * @return array
+ *   List of all panel displays.
+ */
+function _18n_panels_fetch_all_panel_displays($reset = FALSE) {
+  $displays = &drupal_static(__FUNCTION__, array());
+  if (!empty($displays) && !$reset) {
+    return $displays;
+  }
+
+  // Fetch db based displays.
+  $dids = db_select('panels_display')->fields('panels_display', array('did'))->execute()->fetchCol();
+  $displays = panels_load_displays($dids);
+
+  // Fetch exported displays.
+  ctools_include('export');
+  foreach (ctools_export_crud_load_all('panels_display') as $panels_display) {
+    if (!empty($panels_display->uuid)) {
+      $displays['exported-' . $panels_display->uuid] = $panels_display;
+    }
+  }
+
+  // Fetch mini panels.
+  $mini_panels = ctools_export_crud_load_all('panels_mini');
+  foreach ($mini_panels as $pane) {
+    if (!empty($pane->display->uuid)) {
+      $displays['exported-' . $pane->display->uuid] = $pane->display;
+    }
+  }
+
+  // Fetch in page manager embedded displays.
+  if (module_exists('page_manager')) {
+    module_load_include('inc', 'page_manager', 'page_manager.admin');
+    $tasks = page_manager_get_tasks_by_type('page');
+    $pages = array('operations' => array(), 'tasks' => array());
+    page_manager_get_pages($tasks, $pages);
+
+    foreach ($pages['tasks'] as $task) {
+      $page = page_manager_cache_load($task);
+      $task_info = page_manager_get_task_subtasks($page->task);
+      foreach ($page->handler_info as $id => $info) {
+        $page_manager_handler = $page->handlers[$id];
+        if ($page_manager_handler->handler == 'panel_context') {
+
+          // @todo Is there really no better way to check this?
+          $is_exported = ($page_manager_handler->export_type == (EXPORT_IN_CODE | EXPORT_IN_DATABASE) || (isset($page->subtask['storage']) && $page->subtask['storage'] == t('Overridden')));
+
+          if (!empty($page_manager_handler->conf['display'])) {
+            $panels_display = $page_manager_handler->conf['display'];
+            $displays['exported-' . $panels_display->uuid] = $panels_display;
+          }
+          elseif ($is_exported && isset($page_manager_handler->conf['did'])) {
+            $panels_display = panels_load_display($page_manager_handler->conf['did']);
+            if (isset($panels_display->uuid)) {
+              $displays['exported-' . $panels_display->uuid] = $panels_display;
+            }
+          }
+        }
+      }
+    }
+  }
+  return $displays;
+}
diff --git a/profiles/commons/modules/contrib/panels/includes/callbacks.inc b/profiles/commons/modules/contrib/panels/includes/callbacks.inc
index 5188394..255a3cd 100644
--- a/profiles/commons/modules/contrib/panels/includes/callbacks.inc
+++ b/profiles/commons/modules/contrib/panels/includes/callbacks.inc
@@ -172,6 +172,22 @@ function panels_admin_settings_page() {
     }
   }
 
+  ctools_include('plugins', 'panels');
+  $pipelines = panels_get_renderer_pipelines();
+  $options = array();
+  foreach ($pipelines as $key => $value) {
+    $options[$key] = $value->admin_title;
+  }
+  if (count($options) > 1) {
+    $form['panels_renderer_default'] = array(
+      '#type' => 'select',
+      '#title' => t('Default renderer'),
+      '#options' => $options,
+      '#default_value' => variable_get('panels_renderer_default', 'standard'),
+      '#description' => t('The default renderer for new panel pages.'),
+    );
+  }
+
   if (empty($form)) {
     return array('#value' => t('There are currently no settings to change, but additional plugins or modules may provide them in the future.'));
   }
diff --git a/profiles/commons/modules/contrib/panels/js/display_editor.js b/profiles/commons/modules/contrib/panels/js/display_editor.js
index d873c9d..40e1146 100644
--- a/profiles/commons/modules/contrib/panels/js/display_editor.js
+++ b/profiles/commons/modules/contrib/panels/js/display_editor.js
@@ -16,7 +16,7 @@ Drupal.Panels.bindClickDelete = function(context) {
   $('a.pane-delete:not(.pane-delete-processed)', context)
     .addClass('pane-delete-processed')
     .click(function() {
-    if (confirm('Remove this pane?')) {
+    if (confirm(Drupal.t('Remove this pane?'))) {
       var id = '#' + $(this).attr('id').replace('pane-delete-', '');
       $(id).remove();
       Drupal.Panels.Draggable.savePositions();
diff --git a/profiles/commons/modules/contrib/panels/panels.api.php b/profiles/commons/modules/contrib/panels/panels.api.php
new file mode 100644
index 0000000..1aa1c6a
--- /dev/null
+++ b/profiles/commons/modules/contrib/panels/panels.api.php
@@ -0,0 +1,264 @@
+<?php
+
+/**
+ * @file
+ * Hooks provided by Panels.
+ */
+
+/**
+ * Allow modules to provide their own caching mechanism for the display editor.
+ *
+ * @param string $argument
+ *   The second half of the cache key. Full key module:TASK_NAME:HANDLER_NAME
+ *   passed part: TASK_NAME:HANDLER_NAME
+ * @param stdClass $cache
+ *   The display to cache.
+ */
+function hook_panels_cache_set($argument, $cache) {
+  list($handler, $item) = _panels_mini_panels_cache_get($argument);
+  $item->mini_panels_display_cache = $cache;
+  $handler->edit_cache_set_key($item, $argument);
+}
+
+/**
+ * Allow modules to provide their own caching mechanism for the display editor.
+ *
+ * @param string $argument
+ *   The second half of the cache key. Full key module:TASK_NAME:HANDLER_NAME
+ *   passed part: TASK_NAME:HANDLER_NAME
+ *
+ * @return stdClass|NULL
+ *   The cached display or NULL if the cache wasn't hit.
+ */
+function hook_panels_cache_get($argument) {
+  ctools_include('common', 'panels');
+  list($handler, $item) = _panels_mini_panels_cache_get($argument);
+  if (isset($item->mini_panels_display_cache)) {
+    return $item->mini_panels_display_cache;
+  }
+
+  $cache = new stdClass();
+  $cache->display = $item->display;
+  $cache->display->context = ctools_context_load_contexts($item);
+  $cache->display->cache_key = 'panels_mini:' . $argument;
+  $cache->content_types = panels_common_get_allowed_types('panels_mini', $cache->display->context);
+  $cache->display_title = TRUE;
+
+  // @TODO support locking.
+  $cache->locked = FALSE;
+
+  return $cache;
+}
+
+/**
+ * Allow modules to provide their own caching mechanism for the display editor.
+ *
+ * @param string $argument
+ *   The second half of the cache key. Full key module:TASK_NAME:HANDLER_NAME
+ *   passed part: TASK_NAME:HANDLER_NAME
+ * @param stdClass $cache
+ *   The display to cache.
+ *
+ * @return stdClass
+ *   The cached display.
+ */
+function hook_panels_cache_save($argument, $cache) {
+  list($handler, $item) = _panels_mini_panels_cache_get($argument);
+  $item->display = $cache->display;
+  panels_mini_save($item);
+
+  $handler->edit_cache_clear($item);
+
+  return $item;
+}
+
+/**
+ * Allow modules to provide their own caching mechanism for the display editor.
+ *
+ * @param string $argument
+ *   The second half of the cache key. Full key module:TASK_NAME:HANDLER_NAME
+ *   passed part: TASK_NAME:HANDLER_NAME
+ * @param stdClass $cache
+ *   The cached display.
+ */
+function hook_panels_cache_clear($argument, $cache) {
+  list($handler, $item) = _panels_mini_panels_cache_get($argument);
+  $handler->edit_cache_clear($item);
+}
+
+/**
+ * Allow modules to adjust the rendering array of the panels dashboard.
+ *
+ * @param array $vars
+ *   The output variables.
+ */
+function hook_panels_dashboard_blocks(&$vars) {
+  $vars['links']['panels_node'] = array(
+    'title' => l(t('Panel node'), 'node/add/panel'),
+    'description' => t('Panel nodes are node content and appear in your searches, but are more limited than panel pages.'),
+    'weight' => -1,
+  );
+}
+
+/**
+ * Allow to alter the pane content to render.
+ *
+ * This happens after the keyword substitution.
+ *
+ * @param stdClass $content
+ *   The content block to render.
+ * @param stdClass $pane
+ *   The pane object.
+ * @param array $args
+ *   The display arguments.
+ * @param array $contexts
+ *   Array with the used contexts.
+ */
+function hook_panels_pane_content_alter($content, $pane, $args, $contexts) {
+  // Don't display titles.
+  unset($content->title);
+}
+
+/**
+ * Allow modules to provide a mechanism to break locks.
+ *
+ * @param string $argument
+ *   The second half of the cache key. Full key module:TASK_NAME:HANDLER_NAME
+ *   passed part: TASK_NAME:HANDLER_NAME
+ * @param stdClass $cache
+ *   The cached display.
+ */
+function hook_panels_edit_cache_break_lock($argument, $cache) {
+  $cache->locked = FALSE;
+}
+
+/**
+ * Fired before a panels display is rendered.
+ *
+ * Last chance to modify the panels display or add output before the keyword
+ * substitution runs and the panels display is rendered.
+ *
+ * @param panels_display $panels_display
+ *   The panels display that will be rendered.
+ * @param stdClass $renderer
+ *   The renderer object that will be used to render.
+ *
+ * @return string
+ *   Additional output to add before the panels display.
+ */
+function hook_panels_pre_render($panels_display, $renderer) {
+  $translation = i18n_string_object_translate('panels_display_configuration', $panels_display);
+  $panels_display->title = $translation->title;
+}
+
+/**
+ * Fired after a panels display is rendered.
+ *
+ * Allow to add additional output after the output of the panels display.
+ *
+ * @param panels_display $panels_display
+ *   The rendered panels display.
+ * @param stdClass $renderer
+ *   The used renderer object.
+ *
+ * @return string
+ *   Additional output to add after the panels display.
+ */
+function hook_panels_post_render($panels_display, $renderer) {
+  return t('Output proudly sponsored by panels.');
+}
+
+/**
+ * Fired before a new pane is inserted in the storage.
+ *
+ * @param stdClass $pane
+ *   Pane that will be rendered.
+ */
+function hook_panels_pane_insert($pane) {
+  // Check if this pane has a custom title enabled.
+  if (!empty($pane->configuration['override_title'])) {
+    $translation_object = (object) array(
+      'pid' => $pane->pid,
+      'title' => $pane->configuration['override_title_text'],
+    );
+    $status = i18n_string_object_update('panels_pane_configuration', $translation_object);
+  }
+}
+
+/**
+ * Fired before a changed pane is updated in the storage.
+ *
+ * @param stdClass $pane
+ *   Pane that will be rendered.
+ */
+function hook_panels_pane_update($pane) {
+  // Check if this pane has a custom title enabled.
+  if (!empty($pane->configuration['override_title'])) {
+    $translation_object = (object) array(
+      'pid' => $pane->pid,
+      'title' => $pane->configuration['override_title_text'],
+    );
+    $status = i18n_string_object_update('panels_pane_configuration', $translation_object);
+  }
+}
+
+/**
+ * Fired before a panel is rendered.
+ *
+ * Last chance to modify the pane before the keyword substitution runs and the
+ * pane is rendered.
+ *
+ * @param stdClass $pane
+ *   Pane that will be rendered.
+ */
+function hook_panels_pane_prerender($pane) {
+  // Check if this pane has a custom title enabled.
+  if (!empty($pane->configuration['override_title'])) {
+    $translation_object = (object) array(
+      'pid' => $pane->pid,
+      'title' => $pane->configuration['override_title_text'],
+    );
+    $translation_object = i18n_string_object_translate('panels_pane_configuration', $translation_object);
+    $pane->configuration['override_title_text'] = $translation_object->title;
+  }
+}
+
+/**
+ * Fired before panes are deleted.
+ *
+ * @param array $pids
+ *   Array with the panel id's to delete.
+ */
+function hook_panels_pane_delete($pids) {
+  foreach ($pids as $pid) {
+    // Create dummy pane with pid as property.
+    $pane = (object) array('pid' => $pid);
+    i18n_string_object_remove('panels_pane_configuration', $pane);
+  }
+}
+
+/**
+ * Fired after a display is saved.
+ *
+ * @param panels_display $display
+ *   The display to save.
+ */
+function hook_panels_display_save($display) {
+  i18n_string_object_update('display_configuration', $display);
+}
+
+/**
+ * Fired before a display is deleted.
+ *
+ * @param integer $did
+ *   Id of the display to delete.
+ */
+function hook_panels_delete_display($did) {
+  $uuid = db_select('panels_display')
+    ->fields('panels_display', array('uuid'))
+    ->condition('did', $did)
+    ->execute()
+    ->fetchColumn();
+  $display = (object) array('uuid' => $uuid);
+  i18n_string_object_remove('display_configuration', $display);
+}
diff --git a/profiles/commons/modules/contrib/panels/panels.info b/profiles/commons/modules/contrib/panels/panels.info
index e198305..d5d4e6a 100644
--- a/profiles/commons/modules/contrib/panels/panels.info
+++ b/profiles/commons/modules/contrib/panels/panels.info
@@ -10,9 +10,10 @@ files[] = includes/legacy.inc
 files[] = includes/plugins.inc
 files[] = plugins/views/panels_views_plugin_row_fields.inc
 
-; Information added by drupal.org packaging script on 2012-08-18
-version = "7.x-3.3"
+
+; Information added by drush on 2013-12-20
+version = "7.x-3.x-i18n-dev"
 core = "7.x"
 project = "panels"
-datestamp = "1345319572"
+datestamp = "1387568916"
 
diff --git a/profiles/commons/modules/contrib/panels/panels.module b/profiles/commons/modules/contrib/panels/panels.module
index 6192960..c82d465 100644
--- a/profiles/commons/modules/contrib/panels/panels.module
+++ b/profiles/commons/modules/contrib/panels/panels.module
@@ -308,6 +308,10 @@ function panels_permission() {
       'title' => t('Use panel locks'),
       'description' => t('Allows a user to lock and unlock panes in a panel display.'),
     ),
+    'use ipe with page manager' => array(
+      'title' => t("Use the Panels In-Place Editor with Page Manager"),
+      'description' => t('Allows users with access to the In-Place editor to administer page manager pages. This permission is only needed for users without "use page manager" access.'),
+    ),
   );
 }
 
@@ -1090,6 +1094,9 @@ function panels_render_display(&$display, $renderer = NULL) {
   if (!empty($display->context)) {
     if ($form_context = ctools_context_get_form($display->context)) {
       $form_context->form['#theme'] = 'panels_render_display_form';
+      if (empty($form_context->form['#theme_wrappers']) || !in_array('form', $form_context->form['#theme_wrappers'])) {
+        $form_context['#theme_wrappers'][] = 'form';
+      }
       $form_context->form['#display'] = &$display;
       return $form_context->form;
     }
@@ -1106,10 +1113,7 @@ function panels_render_display(&$display, $renderer = NULL) {
  * then operate as a theme function of the form.
  */
 function theme_panels_render_display_form($vars) {
-  // @todo this is probably broken in D7
-  $render = $vars['element']['#display']->render();
-  $vars['element']['#children'] = $render;
-  return theme('form', $vars);
+  return $vars['element']['#display']->render();
 }
 
 // @layout
@@ -1246,7 +1250,9 @@ function template_preprocess_panels_pane(&$vars) {
       }
 
       $element = contextual_pre_render_links($element);
-      $links += $element['#links'];
+      if(!empty($element['#links'])) {
+        $links += $element['#links'];
+      }
     }
 
     if ($links) {
@@ -1296,7 +1302,7 @@ function template_preprocess_panels_pane(&$vars) {
 
   // Add template file suggestion for content type and sub-type.
   $vars['theme_hook_suggestions'][] = $base . $delimiter . $content->type;
-  $vars['theme_hook_suggestions'][] = $base . $delimiter . strtr($content->type, '-', '_') . $delimiter . strtr($content->subtype, '-', '_');
+  $vars['theme_hook_suggestions'][] = $base . $delimiter . strtr(ctools_cleanstring($content->type, array('lower case' => TRUE)), '-', '_') . $delimiter . strtr(ctools_cleanstring($content->subtype, array('lower case' => TRUE)), '-', '_');
 
   $vars['pane_prefix'] = !empty($content->pane_prefix) ? $content->pane_prefix : '';
   $vars['pane_suffix'] = !empty($content->pane_suffix) ? $content->pane_suffix : '';
@@ -1546,7 +1552,7 @@ function panels_edit_cache_break_lock($cache) {
  * Get display edit cache on behalf of panel context.
  *
  * The key is the second half of the key in this form:
- * panel_context:TASK_NAME:HANDLER_NAME;
+ * panel_context:TASK_NAME::HANDLER_NAME::args::url;
  */
 function panel_context_panels_cache_get($key) {
   ctools_include('common', 'panels');
@@ -1555,7 +1561,7 @@ function panel_context_panels_cache_get($key) {
   // this loads the panel context inc even if we don't use the plugin.
   $plugin = page_manager_get_task_handler('panel_context');
 
-  list($task_name, $handler_name) = explode(':', $key, 2);
+  list($task_name, $handler_name, $args, $q) = explode('::', $key, 4);
   $page = page_manager_get_page_cache($task_name);
   if (isset($page->display_cache[$handler_name])) {
     return $page->display_cache[$handler_name];
@@ -1569,8 +1575,20 @@ function panel_context_panels_cache_get($key) {
   }
   $cache = new stdClass();
 
+  $task = page_manager_get_task($page->task_id);
+  //ctools_context_handler_get_all_contexts($page->task, $page->subtask, $handler);
+  $arguments = array();
+  if ($args) {
+    $arguments = explode('\\', $args);
+    $contexts = ctools_context_handler_get_task_contexts($task, $page->subtask, $arguments);
+    $contexts = ctools_context_handler_get_handler_contexts($contexts, $handler);
+  }
+  else {
+    $contexts = ctools_context_handler_get_all_contexts($page->task, $page->subtask, $handler);
+  }
+
   $cache->display = &panels_panel_context_get_display($handler);
-  $cache->display->context = ctools_context_handler_get_all_contexts($page->task, $page->subtask, $handler);
+  $cache->display->context = $contexts;
   $cache->display->cache_key = 'panel_context:' . $key;
   $cache->content_types = panels_common_get_allowed_types('panels_page', $cache->display->context);
   $cache->display_title = TRUE;
@@ -1583,7 +1601,7 @@ function panel_context_panels_cache_get($key) {
  * Get the Page Manager cache for the panel_context plugin.
  */
 function _panel_context_panels_cache_get_page_cache($key, $cache) {
-  list($task_name, $handler_name) = explode(':', $key, 2);
+  list($task_name, $handler_name, $args, $q) = explode('::', $key, 4);
   $page = page_manager_get_page_cache($task_name);
   $page->display_cache[$handler_name] = $cache;
   if ($handler_name) {
diff --git a/profiles/commons/modules/contrib/panels/panels_ipe/css/panels_ipe-rtl.css b/profiles/commons/modules/contrib/panels/panels_ipe/css/panels_ipe-rtl.css
new file mode 100644
index 0000000..ef78afb
--- /dev/null
+++ b/profiles/commons/modules/contrib/panels/panels_ipe/css/panels_ipe-rtl.css
@@ -0,0 +1,67 @@
+
+div.panels-ipe-handlebar-wrapper ul {
+  float: right;
+  text-align: left;
+}
+
+div.panels-ipe-handlebar-wrapper li {
+  margin: 0 0 0 .5em;
+  float: right;
+}
+
+div.panels-ipe-draghandle span.panels-ipe-draghandle-icon {
+  float: left;
+}
+
+div.panels-ipe-placeholder {
+  text-align: right;
+}
+
+div.panels-ipe-newblock {
+  left: 30px;
+  right: auto;
+}
+
+div.panels-ipe-handlebar-wrapper li a span,
+div.panels-ipe-newblock a span {
+  text-align: right;
+}
+
+div.panels-ipe-newblock a.style {
+  margin-left: .5em;
+  margin-right: auto;
+}
+
+.panels-ipe-editing .panels-ipe-region {
+  float: right;
+}
+
+/** ============================================================================
+ * Controller form markup
+ */
+
+.ipe-throbber {
+  right: 49%;
+  right: auto;
+}
+
+div.panels-ipe-control .form-submit {
+  padding: 0 34px 2px 0.8em;
+}
+
+input#panels-ipe-save,
+input#panels-ipe-cancel {
+  background-position: 86% 0;
+}
+
+div.panels-ipe-pseudobutton-container a.panels-ipe-startedit {
+  padding-right: 34px;
+  padding-left: 10px;
+  background-position: 93% 9px;
+}
+
+div.panels-ipe-pseudobutton-container a.panels-ipe-change-layout {
+  padding-right: 34px;
+  padding-left: 10px;
+  background-position: 93% 9px;
+}
diff --git a/profiles/commons/modules/contrib/panels/panels_ipe/css/panels_ipe.css b/profiles/commons/modules/contrib/panels/panels_ipe/css/panels_ipe.css
index 7d71db0..ec372c6 100644
--- a/profiles/commons/modules/contrib/panels/panels_ipe/css/panels_ipe.css
+++ b/profiles/commons/modules/contrib/panels/panels_ipe/css/panels_ipe.css
@@ -27,6 +27,7 @@ div.panels-ipe-handlebar-wrapper {
 .panels-ipe-editing div.panels-ipe-portlet-wrapper {
   margin-top: 1em;
   border: 1px solid #CCC;
+  width: 100%;
 }
 
 /* Hide empty panes when not editing them. */
@@ -163,6 +164,10 @@ div.panels-ipe-newblock {
   z-index: 99;
 }
 
+div.panels-ipe-newblock li {
+  padding: 0;
+}
+
 div.panels-ipe-handlebar-wrapper li a,
 div.panels-ipe-dragtitle span,
 div.panels-ipe-newblock a,
@@ -375,9 +380,9 @@ div.panels-ipe-control .form-submit {
   padding: 0 0.8em 2px 34px;
 }
 
-input#panels-ipe-save, input#panels-ipe-cancel,
-input#panels-ipe-save:hover, input#panels-ipe-cancel:hover,
-input#panels-ipe-save:active, input#panels-ipe-cancel:active {
+div.panels-ipe-control input.panels-ipe-save, div.panels-ipe-control input.panels-ipe-cancel,
+div.panels-ipe-control input.panels-ipe-save:hover, div.panels-ipe-control input.panels-ipe-cancel:hover,
+div.panels-ipe-control input.panels-ipe-save:active, div.panels-ipe-control input.panels-ipe-cancel:active {
   background-repeat: no-repeat;
 }
 
@@ -389,7 +394,7 @@ div.panels-ipe-pseudobutton-container a {
   text-decoration: none;
 }
 
-input#panels-ipe-save {
+div.panels-ipe-control input.panels-ipe-save {
   background-image: url(../images/icon-save.png);
   background-image: url(../images/icon-save.png), linear-gradient(bottom, #383838 0%, #666666 100%);
   background-image: url(../images/icon-save.png), -o-linear-gradient(bottom, #383838 0%, #666666 100%);
@@ -406,7 +411,7 @@ input#panels-ipe-save {
   );
 }
 
-input#panels-ipe-cancel {
+div.panels-ipe-control input.panels-ipe-cancel {
   background-image: url(../images/icon-close.png);
   background-image: url(../images/icon-close.png), linear-gradient(bottom, #383838 0%, #666666 100%);
   background-image: url(../images/icon-close.png), -o-linear-gradient(bottom, #383838 0%, #666666 100%);
@@ -446,7 +451,7 @@ div.panels-ipe-pseudobutton-container a:hover {
   color: #FFF;
 }
 
-input#panels-ipe-cancel:hover {
+div.panels-ipe-control input.panels-ipe-cancel:hover {
   background-image: url(../images/icon-close.png), linear-gradient(bottom, #3D3D3D 0%, #999999 100%);
   background-image: url(../images/icon-close.png), -o-linear-gradient(bottom, #3D3D3D 0%, #999999 100%);
   background-image: url(../images/icon-close.png), -moz-linear-gradient(bottom, #3D3D3D 0%, #999999 100%);
@@ -462,7 +467,7 @@ input#panels-ipe-cancel:hover {
   );
 }
 
-input#panels-ipe-save:hover {
+div.panels-ipe-control input.panels-ipe-save:hover {
   background-image: url(../images/icon-save.png), linear-gradient(bottom, #3D3D3D 0%, #999999 100%);
   background-image: url(../images/icon-save.png), -o-linear-gradient(bottom, #3D3D3D 0%, #999999 100%);
   background-image: url(../images/icon-save.png), -moz-linear-gradient(bottom, #3D3D3D 0%, #999999 100%);
@@ -502,7 +507,7 @@ div.panels-ipe-pseudobutton-container a:active {
   color: #CCC;
 }
 
-input#panels-ipe-cancel:active {
+div.panels-ipe-control input.panels-ipe-cancel:active {
   background-image: url(../images/icon-close.png), linear-gradient(bottom, #616161 0%, #333333 100%);
   background-image: url(../images/icon-close.png), -o-linear-gradient(bottom, #616161 0%, #333333 100%);
   background-image: url(../images/icon-close.png), -moz-linear-gradient(bottom, #616161 0%, #333333 100%);
@@ -518,7 +523,7 @@ input#panels-ipe-cancel:active {
   );
 }
 
-input#panels-ipe-save:active {
+div.panels-ipe-control input.panels-ipe-save:active {
   background-image: url(../images/icon-save.png), linear-gradient(bottom, #616161 0%, #333333 100%);
   background-image: url(../images/icon-save.png), -o-linear-gradient(bottom, #616161 0%, #333333 100%);
   background-image: url(../images/icon-save.png), -moz-linear-gradient(bottom, #616161 0%, #333333 100%);
diff --git a/profiles/commons/modules/contrib/panels/panels_ipe/images/icon-close.png b/profiles/commons/modules/contrib/panels/panels_ipe/images/icon-close.png
old mode 100755
new mode 100644
diff --git a/profiles/commons/modules/contrib/panels/panels_ipe/images/icon-configure.png b/profiles/commons/modules/contrib/panels/panels_ipe/images/icon-configure.png
old mode 100755
new mode 100644
diff --git a/profiles/commons/modules/contrib/panels/panels_ipe/images/icon-save.png b/profiles/commons/modules/contrib/panels/panels_ipe/images/icon-save.png
old mode 100755
new mode 100644
diff --git a/profiles/commons/modules/contrib/panels/panels_ipe/js/panels_ipe.js b/profiles/commons/modules/contrib/panels/panels_ipe/js/panels_ipe.js
index ec34780..1f40698 100644
--- a/profiles/commons/modules/contrib/panels/panels_ipe/js/panels_ipe.js
+++ b/profiles/commons/modules/contrib/panels/panels_ipe/js/panels_ipe.js
@@ -15,9 +15,11 @@ Drupal.PanelsIPE = {
     $('a.pane-delete:not(.pane-delete-processed)', context)
       .addClass('pane-delete-processed')
       .click(function() {
-        if (confirm('Remove this pane?')) {
+        if (confirm(Drupal.t('Remove this pane?'))) {
           $(this).parents('div.panels-ipe-portlet-wrapper').fadeOut('medium', function() {
+            var $sortable = $(this).closest('.ui-sortable');
             $(this).empty().remove();
+            $sortable.trigger('sortremove');
           });
           $(this).parents('div.panels-ipe-display-container').addClass('changed');
         }
@@ -34,6 +36,10 @@ Drupal.behaviors.PanelsIPE = {
       $('div#panels-ipe-display-' + key + ':not(.panels-ipe-processed)')
         .addClass('panels-ipe-processed')
         .each(function() {
+          // If we're replacing an old IPE, clean it up a little.
+          if (Drupal.PanelsIPE.editors[key]) {
+            Drupal.PanelsIPE.editors[key].editing = false;
+          }
           Drupal.PanelsIPE.editors[key] = new DrupalPanelsIPE(key);
           Drupal.PanelsIPE.editors[key].showContainer();
         });
@@ -92,6 +98,22 @@ function DrupalPanelsIPE(cache_key, cfg) {
     }
   });
 
+
+  // If a user navigates away from a locked IPE, cancel the lock in the background.
+  $(window).bind('beforeunload', function() {
+    if (!ipe.editing) {
+      return;
+    }
+
+    if (ipe.topParent && ipe.topParent.hasClass('changed')) {
+      ipe.changed = true;
+    }
+
+    if (ipe.changed) {
+      return Drupal.t('This will discard all unsaved changes. Are you sure?');
+    }
+  });
+
   // If a user navigates away from a locked IPE, cancel the lock in the background.
   $(window).bind('unload', function() {
     ipe.cancelLock(true);
@@ -170,6 +192,7 @@ function DrupalPanelsIPE(cache_key, cfg) {
   };
 
   this.initEditing = function(formdata) {
+    ipe.editing = true;
     ipe.topParent = $('div#panels-ipe-display-' + cache_key);
     ipe.backup = this.topParent.clone();
 
@@ -212,17 +235,6 @@ function DrupalPanelsIPE(cache_key, cfg) {
     ipe.showForm();
     ipe.topParent.addClass('panels-ipe-editing');
 
-    //Reposition the "Add new pane" button
-    $('.panels-ipe-newblock').each(function() {
-      var link_width_half = parseInt($(this).children('a').outerWidth() / 2);
-
-      $(this).css('margin-left', '-' + link_width_half + 'px');
-
-      $(this).css('margin-top', '-' + parseInt($(this).children('a').outerHeight() / 2) + 'px');
-
-      $(this).parents('.panels-ipe-placeholder').find('h3').css('width', parseInt(($(this).parents('.panels-ipe-placeholder').width() / 2) - link_width_half) + 'px');
-    });
-
   };
 
   this.hideContainer = function() {
@@ -246,18 +258,18 @@ function DrupalPanelsIPE(cache_key, cfg) {
   };
 
   this.endEditing = function() {
+    ipe.editing = false;
     ipe.lockPath = null;
-    $('.panels-ipe-form-container', ipe.control).empty();
+    $('.panels-ipe-form-container').empty();
     // Re-show all the IPE non-editing meta-elements
     $('div.panels-ipe-off').show('fast');
 
     ipe.showButtons();
     // Re-hide all the IPE meta-elements
     $('div.panels-ipe-on').hide();
-    if (ipe.topParent) {
-      ipe.topParent.removeClass('panels-ipe-editing');
-      $('div.panels-ipe-sort-container', ipe.topParent).sortable("destroy");
-    }
+
+    $('.panels-ipe-editing').removeClass('panels-ipe-editing');
+    $('div.panels-ipe-sort-container', ipe.topParent).sortable("destroy");
   };
 
   this.saveEditing = function() {
@@ -334,6 +346,8 @@ $(function() {
       Drupal.PanelsIPE.editors[data.key].initEditing(data.data);
       Drupal.PanelsIPE.editors[data.key].lockPath = data.lockPath;
     }
+    Drupal.attachBehaviors();
+
   };
 
   Drupal.ajax.prototype.commands.IPEsetLockState = function(ajax, data, status) {
@@ -342,6 +356,12 @@ $(function() {
     }
   };
 
+  Drupal.ajax.prototype.commands.addNewPane = function(ajax, data, status) {
+    if (Drupal.PanelsIPE.editors[data.key]) {
+      Drupal.PanelsIPE.editors[data.key].changed = true;
+    }
+  };
+
   Drupal.ajax.prototype.commands.cancelIPE = function(ajax, data, status) {
     if (Drupal.PanelsIPE.editors[data.key]) {
       Drupal.PanelsIPE.editors[data.key].cancelIPE();
@@ -372,6 +392,11 @@ $(function() {
    */
   Drupal.ajax.prototype.ipeReplacedEventResponse = Drupal.ajax.prototype.eventResponse;
   Drupal.ajax.prototype.eventResponse = function (element, event) {
+    if (element.ipeCancelThis) {
+      element.ipeCancelThis = null;
+      return false;
+    }
+
     if ($(this.element).attr('id') == 'panels-ipe-cancel') {
       if (!Drupal.PanelsIPE.editors[this.element_settings.ipe_cache_key].cancelEditing()) {
         return false;
@@ -404,7 +429,7 @@ $(function() {
 
   Drupal.ajax.prototype.ipeReplacedBeforeSerialize = Drupal.ajax.prototype.beforeSerialize;
   Drupal.ajax.prototype.beforeSerialize = function (element_settings, options) {
-    if ($(this.element).attr('id') == 'panels-ipe-save') {
+    if ($(this.element).hasClass('panels-ipe-save')) {
       Drupal.PanelsIPE.editors[this.element_settings.ipe_cache_key].saveEditing();
     };
     return this.ipeReplacedBeforeSerialize(element_settings, options);
diff --git a/profiles/commons/modules/contrib/panels/panels_ipe/panels_ipe.info b/profiles/commons/modules/contrib/panels/panels_ipe/panels_ipe.info
index 204e6c7..3568386 100644
--- a/profiles/commons/modules/contrib/panels/panels_ipe/panels_ipe.info
+++ b/profiles/commons/modules/contrib/panels/panels_ipe/panels_ipe.info
@@ -6,9 +6,10 @@ core = 7.x
 configure = admin/structure/panels
 files[] = panels_ipe.module
 
-; Information added by drupal.org packaging script on 2012-08-18
-version = "7.x-3.3"
+
+; Information added by drush on 2013-12-20
+version = "7.x-3.x-i18n-dev"
 core = "7.x"
 project = "panels"
-datestamp = "1345319572"
+datestamp = "1387568916"
 
diff --git a/profiles/commons/modules/contrib/panels/panels_ipe/panels_ipe.module b/profiles/commons/modules/contrib/panels/panels_ipe/panels_ipe.module
index 7aeb915..c309684 100644
--- a/profiles/commons/modules/contrib/panels/panels_ipe/panels_ipe.module
+++ b/profiles/commons/modules/contrib/panels/panels_ipe/panels_ipe.module
@@ -73,18 +73,17 @@ function theme_panels_ipe_placeholder_pane($vars) {
   return $output;
 }
 
-function theme_panels_ipe_pane_wrapper($vars) {
-  $output = $vars['output'];
+function template_preprocess_panels_ipe_pane_wrapper(&$vars) {
   $pane = $vars['pane'];
   $display = $vars['display'];
   $renderer = $vars['renderer'];
 
   $content_type = ctools_get_content_type($pane->type);
   $subtype = ctools_content_get_subtype($content_type, $pane->subtype);
-  $links = array();
+  $vars['links'] = array();
 
   if (ctools_content_editable($content_type, $subtype, $pane->configuration)) {
-    $links['edit'] = array(
+    $vars['links']['edit'] = array(
       'title' => isset($content_type['edit text']) ? '<span>' . $content_type['edit text'] . '</span>' : '<span>' . t('Settings') . '</span>',
       'href' => $renderer->get_url('edit-pane', $pane->pid),
       'html' => TRUE,
@@ -98,7 +97,7 @@ function theme_panels_ipe_pane_wrapper($vars) {
 
   // Add option to configure style in IPE
   if (user_access('administer panels styles')) {
-    $links['style'] = array(
+    $vars['links']['style'] = array(
       'title' => '<span>' . t('Style') . '</span>',
       'href' => $renderer->get_url('style-type', 'pane', $pane->pid),
       'html' => TRUE,
@@ -111,7 +110,7 @@ function theme_panels_ipe_pane_wrapper($vars) {
 
   // Deleting is managed entirely in the js; this is just an attachment point
   // for it
-  $links['delete'] = array(
+  $vars['links']['delete'] = array(
     'title' => '<span>' . t('Delete') . '</span>',
     'href' => '#',
     'html' => TRUE,
@@ -122,11 +121,25 @@ function theme_panels_ipe_pane_wrapper($vars) {
     ),
   );
 
+  $context = array(
+    'pane' => $pane,
+    'display' => $display,
+    'renderer' => $renderer
+  );
+  drupal_alter('panels_ipe_pane_links', $vars['links'], $context);
+
+}
+
+function theme_panels_ipe_pane_wrapper($vars) {
+  $output = $vars['output'];
+  $pane = $vars['pane'];
+
   $attributes = array(
     'class' => 'panels-ipe-linkbar',
   );
 
-  $links = theme('links', array('links' => $links, 'attributes' => $attributes));
+  $links = theme('links', array('links' => $vars['links'], 'attributes' => $attributes));
+
   if (!empty($pane->locks['type']) && $pane->locks['type'] == 'immovable') {
     $links = '<div class="panels-ipe-dragbar panels-ipe-nodraghandle clearfix">' . $links . '</div>';
   }
@@ -135,6 +148,7 @@ function theme_panels_ipe_pane_wrapper($vars) {
   }
 
   $handlebar = '<div class="panels-ipe-handlebar-wrapper panels-ipe-on">' . $links . '</div>';
+
   return $handlebar . $output;
 }
 
@@ -142,33 +156,53 @@ function theme_panels_ipe_region_wrapper($vars) {
   return $vars['controls'] . $vars['output'];
 }
 
-function theme_panels_ipe_add_pane_button($vars) {
+function template_preprocess_panels_ipe_add_pane_button(&$vars) {
   $region_id = $vars['region_id'];
   $display = $vars['display'];
   $renderer = $vars['renderer'];
-  $link = '';
+  $vars['links'] = '';
 
   // Add option to configure style in IPE
   if (user_access('administer panels styles')) {
-    $link .= ' ' . l('<span>' . t('Region style') . '</span>', $renderer->get_url('style-type', 'region', $region_id), array(
+    $vars['links']['style'] = array(
+      'title' => '<span>' . t('Region style') . '</span>',
+      'href' => $renderer->get_url('style-type', 'region', $region_id),
+      'html' => TRUE,
       'attributes' => array(
-        'class' => array('ctools-use-modal', 'style', 'panels-ipe-hide-bar'),
+        'class' => array('ctools-use-modal', 'panels-ipe-hide-bar', 'style'),
         'title' => t('Region style'),
       ),
-      'html' => TRUE,
-    ));
+    );
   }
 
   // Add option to add items in the IPE
-  $link .= ' ' . l('<span>' . t('Add new pane') . '</span>', $renderer->get_url('select-content', $region_id), array(
-      'attributes' => array(
-        'class' => array('ctools-use-modal', 'add', 'panels-ipe-hide-bar'),
-        'title' => t('Add new pane'),
-      ),
-      'html' => TRUE,
-  ));
+  $vars['links']['add-pane'] = array(
+    'title' => '<span>' . t('Add new pane') . '</span>',
+    'href' => $renderer->get_url('select-content', $region_id),
+    'attributes' => array(
+      'class' => array('ctools-use-modal', 'add', 'panels-ipe-hide-bar'),
+      'title' => t('Add new pane'),
+    ),
+    'html' => TRUE,
+  );
+
+  $context = array(
+    'region_id' => $region_id,
+    'display' => $display,
+    'renderer' => $renderer,
+  );
+  drupal_alter('panels_ipe_region_links', $vars['links'], $context);
+
+}
+
+function theme_panels_ipe_add_pane_button($vars) {
+  $attributes = array(
+    'class' => array('panels-ipe-linkbar', 'inline'),
+  );
+
+  $links = theme('links', array('links' => $vars['links'], 'attributes' => $attributes));
 
-  return '<div class="panels-ipe-newblock panels-ipe-on">' . $link . '</div>';
+  return '<div class="panels-ipe-newblock panels-ipe-on">' . $links . '</div>';
 }
 
 /**
diff --git a/profiles/commons/modules/contrib/panels/panels_ipe/plugins/display_renderers/panels_renderer_ipe.class.php b/profiles/commons/modules/contrib/panels/panels_ipe/plugins/display_renderers/panels_renderer_ipe.class.php
index 5f016fd..bccb122 100644
--- a/profiles/commons/modules/contrib/panels/panels_ipe/plugins/display_renderers/panels_renderer_ipe.class.php
+++ b/profiles/commons/modules/contrib/panels/panels_ipe/plugins/display_renderers/panels_renderer_ipe.class.php
@@ -134,18 +134,28 @@ class panels_renderer_ipe extends panels_renderer_editor {
     return "<div id=\"panels-ipe-paneid-{$pane->pid}\" class=\"panels-ipe-portlet-wrapper panels-ipe-portlet-marker\">" . $output . "</div>";
   }
 
+  function prepare_panes($panes) {
+    // Set to admin mode just for this to ensure all panes are represented.
+    $this->admin = TRUE;
+    $panes = parent::prepare_panes($panes);
+    $this->admin = FALSE;
+  }
+
   function render_pane_content(&$pane) {
-    $content = parent::render_pane_content($pane);
+    if (!empty($pane->shown) && panels_pane_access($pane, $this->display)) {
+      $content = parent::render_pane_content($pane);
+    }
     // Ensure that empty panes have some content.
-    if (empty($content) || !is_object($content) || empty($content->content)) {
-      if (!is_object($content)) {
-        $content = new StdClass();
+    if (empty($content) || empty($content->content)) {
+      if (empty($content)) {
+        $content = new stdClass();
       }
+
       // Get the administrative title.
       $content_type = ctools_get_content_type($pane->type);
       $title = ctools_content_admin_title($content_type, $pane->subtype, $pane->configuration, $this->display->context);
 
-      $content->content = t('Placeholder for empty "@title"', array('@title' => $title));
+      $content->content = t('Placeholder for empty or inaccessible "@title"', array('@title' => html_entity_decode($title, ENT_QUOTES)));
       // Add these to prevent notices.
       $content->type = 'panels_ipe';
       $content->subtype = 'panels_ipe';
@@ -230,6 +240,7 @@ class panels_renderer_ipe extends panels_renderer_editor {
     $_POST['ajax_html_ids'] = array();
 
     $form_state = array(
+      'renderer' => $this,
       'display' => &$this->display,
       'content_types' => $this->cache->content_types,
       'rerender' => FALSE,
@@ -247,7 +258,7 @@ class panels_renderer_ipe extends panels_renderer_editor {
         'command' => 'initIPE',
         'key' => $this->clean_key,
         'data' => drupal_render($output),
-        'lockPath' => $this->get_url('unlock_ipe'),
+        'lockPath' => url($this->get_url('unlock_ipe')),
       );
       return;
     }
@@ -318,7 +329,7 @@ class panels_renderer_ipe extends panels_renderer_editor {
     $this->commands[] = array(
       'command' => 'IPEsetLockState',
       'key' => $this->clean_key,
-      'lockPath' => $this->get_url('unlock_ipe'),
+      'lockPath' => url($this->get_url('unlock_ipe')),
     );
   }
 
@@ -347,7 +358,7 @@ class panels_renderer_ipe extends panels_renderer_editor {
       if (!empty($form_state['clicked_button']['#save-display'])) {
         // Saved. Save the cache.
         panels_edit_cache_save($this->cache);
-        $this->display->skip_cache;
+        $this->display->skip_cache = TRUE;
 
         // Since the layout changed, we have to update these things in the
         // renderer in order to get the right settings.
@@ -396,6 +407,10 @@ class panels_renderer_ipe extends panels_renderer_editor {
 
     $this->commands[] = ajax_command_prepend("#panels-ipe-regionid-{$pane->panel} div.panels-ipe-sort-container", $this->render_pane($pane));
     $this->commands[] = ajax_command_changed("#panels-ipe-display-{$this->clean_key}");
+    $this->commands[] = array(
+      'command' => 'addNewPane',
+      'key' => $this->clean_key,
+    );
   }
 }
 
@@ -433,12 +448,14 @@ function panels_ipe_edit_control_form($form, &$form_state) {
     '#type' => 'submit',
     '#value' => t('Save'),
     '#id' => 'panels-ipe-save',
+    '#attributes' => array('class' => array('panels-ipe-save')),
     '#submit' => array('panels_edit_display_form_submit'),
     '#save-display' => TRUE,
   );
   $form['buttons']['cancel'] = array(
     '#type' => 'submit',
     '#id' => 'panels-ipe-cancel',
+    '#attributes' => array('class' => array('panels-ipe-cancel')),
     '#value' => t('Cancel'),
   );
   return $form;
diff --git a/profiles/commons/modules/contrib/panels/panels_mini/panels_mini.info b/profiles/commons/modules/contrib/panels/panels_mini/panels_mini.info
index 96d17b6..634f08c 100644
--- a/profiles/commons/modules/contrib/panels/panels_mini/panels_mini.info
+++ b/profiles/commons/modules/contrib/panels/panels_mini/panels_mini.info
@@ -4,9 +4,10 @@ package = "Panels"
 dependencies[] = panels
 core = 7.x
 files[] = plugins/export_ui/panels_mini_ui.class.php
-; Information added by drupal.org packaging script on 2012-08-18
-version = "7.x-3.3"
+
+; Information added by drush on 2013-12-20
+version = "7.x-3.x-i18n-dev"
 core = "7.x"
 project = "panels"
-datestamp = "1345319572"
+datestamp = "1387568916"
 
diff --git a/profiles/commons/modules/contrib/panels/panels_mini/panels_mini.module b/profiles/commons/modules/contrib/panels/panels_mini/panels_mini.module
index a0aa662..2691efe 100644
--- a/profiles/commons/modules/contrib/panels/panels_mini/panels_mini.module
+++ b/profiles/commons/modules/contrib/panels/panels_mini/panels_mini.module
@@ -130,8 +130,8 @@ function panels_mini_block_view($delta = 0) {
  */
 function panels_mini_block_configure($delta = 0) {
   return array(
-    'admin-shortcut' => array(
-      '#value' => l(t('Manage this mini-panel'), 'admin/structure/mini-panels/' . $delta . '/edit')
+    'admin_shortcut' => array(
+      '#markup' => l(t('Manage this mini-panel'), 'admin/structure/mini-panels/list/' . $delta . '/edit')
     ),
   );
 }
@@ -285,7 +285,8 @@ function panels_mini_load_all($reset = FALSE) {
     }
   }
 
-  return $cache;
+  // Strip out NULL entries that may have been added by panels_mini_load().
+  return array_filter($cache);
 }
 
 /**
diff --git a/profiles/commons/modules/contrib/panels/panels_mini/plugins/content_types/panels_mini.inc b/profiles/commons/modules/contrib/panels/panels_mini/plugins/content_types/panels_mini.inc
index 6bd4d94..2170111 100644
--- a/profiles/commons/modules/contrib/panels/panels_mini/plugins/content_types/panels_mini.inc
+++ b/profiles/commons/modules/contrib/panels/panels_mini/plugins/content_types/panels_mini.inc
@@ -109,6 +109,16 @@ function panels_mini_panels_mini_content_type_render($subtype, $conf, $panel_arg
   $block->content = panels_render_display($mini->display);
   $block->title = $mini->display->get_title();
 
+  if (user_access('administer mini panels')) {
+    $block->admin_links = array(
+      array(
+        'title' => t('Configure mini panel'),
+        'href' => "admin/structure/mini-panels/list/$subtype/edit/content",
+        'query' => drupal_get_destination(),
+      ),
+    );
+  }
+
   unset($viewing[$mini->name]);
   return $block;
 }
@@ -137,3 +147,30 @@ function panels_mini_panels_mini_content_type_admin_title($subtype, $conf) {
   return $title;
 }
 
+/**
+ * Callback to provide administrative info. Provide links to edit the mini
+ * panel.
+ */
+function panels_mini_panels_mini_content_type_admin_info($subtype, $conf) {
+  $mini = panels_mini_load($subtype);
+  if (!$mini) {
+    return FALSE;
+  }
+
+  $block = new stdClass();
+  $block->title = $mini->admin_title;
+  $admin_pages = array(
+    t('Settings') => 'basic',
+    t('Context') => 'context',
+    t('Layout') => 'layout',
+    t('Content') => 'content',
+  );
+
+  $links = array();
+  foreach ($admin_pages as $title => $tail) {
+    $links[] = l($title, 'admin/structure/mini-panels/list/' . $subtype . '/edit/' . $tail, array('query' => drupal_get_destination()));
+  }
+
+  $block->content = theme('item_list', array('items' => $links));
+  return $block;
+}
diff --git a/profiles/commons/modules/contrib/panels/panels_mini/plugins/export_ui/panels_mini_ui.class.php b/profiles/commons/modules/contrib/panels/panels_mini/plugins/export_ui/panels_mini_ui.class.php
index 6c7d084..cff8fe6 100644
--- a/profiles/commons/modules/contrib/panels/panels_mini/plugins/export_ui/panels_mini_ui.class.php
+++ b/profiles/commons/modules/contrib/panels/panels_mini/plugins/export_ui/panels_mini_ui.class.php
@@ -118,6 +118,13 @@ class panels_mini_ui extends ctools_export_ui {
     // Get the basic edit form
     parent::edit_form($form, $form_state);
 
+    // Set the admin title machine name length.
+    // We need to do this because the system block name length is
+    // limited to 32 chars.
+    $form['info']['name']['#maxlength'] = 32;
+    $form['info']['name']['#size'] = 34;
+    $form['info']['name']['#description'] .= ' ' . t('The machine name length is limited to 32 characters, due to a limitation in the core block system.');
+
     $form['category'] = array(
       '#type' => 'textfield',
       '#size' => 24,
diff --git a/profiles/commons/modules/contrib/panels/panels_node/panels_node.info b/profiles/commons/modules/contrib/panels/panels_node/panels_node.info
index bb63d58..3e5a497 100644
--- a/profiles/commons/modules/contrib/panels/panels_node/panels_node.info
+++ b/profiles/commons/modules/contrib/panels/panels_node/panels_node.info
@@ -6,9 +6,10 @@ configure = admin/structure/panels
 core = 7.x
 files[] = panels_node.module
 
-; Information added by drupal.org packaging script on 2012-08-18
-version = "7.x-3.3"
+
+; Information added by drush on 2013-12-20
+version = "7.x-3.x-i18n-dev"
 core = "7.x"
 project = "panels"
-datestamp = "1345319572"
+datestamp = "1387568916"
 
diff --git a/profiles/commons/modules/contrib/panels/panels_node/panels_node.module b/profiles/commons/modules/contrib/panels/panels_node/panels_node.module
index 4044c5a..894dc67 100644
--- a/profiles/commons/modules/contrib/panels/panels_node/panels_node.module
+++ b/profiles/commons/modules/contrib/panels/panels_node/panels_node.module
@@ -339,6 +339,7 @@ function panels_node_hook_view($node, $view_mode) {
       $display->css_id = $node->panels_node['css_id'];
       // TODO: Find a way to make sure this can't node_view.
       $display->context = panels_node_get_context($node);
+      $display->cache_key = 'panels_node:' . $node->nid;
       $renderer = panels_get_renderer($node->panels_node['pipeline'], $display);
       $node->content['body'] = array(
         '#markup' => panels_render_display($display, $renderer),
@@ -429,3 +430,59 @@ function panels_node_panels_dashboard_blocks(&$vars) {
     'weight' => -1,
   );
 }
+
+// ---------------------------------------------------------------------------
+// Callbacks for panel caching.
+
+/**
+ * Get display edit cache for a panel node being edited.
+ *
+ * The key is the second half of the key in this form:
+ * panels_node:NID;
+ */
+function panels_node_panels_cache_get($nid) {
+  ctools_include('object-cache');
+  $cache = ctools_object_cache_get('panels_node_display_cache', $nid);
+  if (empty($cache)) {
+    $cache = new stdClass();
+    $node = node_load($nid);
+    if (empty($node)) {
+      return;
+    }
+
+    ctools_include('common', 'panels');
+    $cache->display = panels_load_display($node->panels_node['did']);
+    $cache->display->css_id = $node->panels_node['css_id'];
+    $cache->display->context = panels_node_get_context($node);
+    $cache->display->cache_key = 'panels_node:' . $node->nid;
+    $cache->content_types =   panels_common_get_allowed_types('panels_node', $cache->display->context);
+    $cache->allwed_layouts = panels_common_get_allowed_layouts('panels_node');
+  }
+
+  return $cache;
+}
+
+/**
+ * Store a display edit in progress in the panels cache.
+ */
+function panels_node_panels_cache_set($nid, $cache) {
+  ctools_include('object-cache');
+  ctools_object_cache_set('panels_node_display_cache', $nid, $cache);
+}
+
+/**
+ * Clear all changes made to a display using the panels cache.
+ */
+function panels_node_panels_cache_clear($nid, $cache) {
+  ctools_include('object-cache');
+  ctools_object_cache_clear('panels_node_display_cache', $nid);
+}
+
+/**
+ * React to a cache save and save the display and clear cache.
+ */
+function panels_node_panels_cache_save($nid, $cache) {
+  panels_save_display($cache->display);
+  ctools_include('object-cache');
+  ctools_object_cache_clear('panels_node_display_cache', $nid);
+}
diff --git a/profiles/commons/modules/contrib/panels/plugins/display_renderers/panels_renderer_editor.class.php b/profiles/commons/modules/contrib/panels/plugins/display_renderers/panels_renderer_editor.class.php
index 7aa9700..4f4db4a 100644
--- a/profiles/commons/modules/contrib/panels/plugins/display_renderers/panels_renderer_editor.class.php
+++ b/profiles/commons/modules/contrib/panels/plugins/display_renderers/panels_renderer_editor.class.php
@@ -153,7 +153,7 @@ class panels_renderer_editor extends panels_renderer_standard {
 
     $output = '<div class="' . $class . '" id="panel-pane-' . $pane->pid . '">';
 
-    if (!$block->title) {
+    if (empty($block->title)) {
       $block->title = t('No title');
     }
 
@@ -581,7 +581,7 @@ class panels_renderer_editor extends panels_renderer_standard {
    * @todo -- this should be in CTools.
    */
   function get_category($content_type) {
-    if (isset($content_type['top level'])) {
+    if (!empty($content_type['top level'])) {
       $category = 'root';
     }
     else if (isset($content_type['category'])) {
@@ -757,6 +757,11 @@ class panels_renderer_editor extends panels_renderer_standard {
       // References get blown away with AJAX caching. This will fix that.
       $this->cache->display->content[$pid] = $form_state['pane'];
 
+      // Conditionally overwrite the context for this panel if present in the form state.
+      if (!empty($form_state['display_cache']->display->context)) {
+        $this->cache->display->context = $form_state['display_cache']->display->context;
+      }
+
       panels_edit_cache_set($this->cache);
       $this->command_update_pane($pid);
       $this->commands[] = ctools_modal_command_dismiss();
@@ -1158,7 +1163,11 @@ class panels_renderer_editor extends panels_renderer_standard {
       unset($this->cache->style);
     }
 
-    // $conf was a reference so it should just modify.
+    // Copy settings from form state back into the cache.
+    if(!empty($form_state['values']['settings'])) {
+      $this->cache->display->content[$pid]->style['settings'] = $form_state['values']['settings'];
+    }
+
     panels_edit_cache_set($this->cache);
 
     $this->commands[] = ctools_modal_command_dismiss();
diff --git a/profiles/commons/modules/contrib/panels/plugins/display_renderers/panels_renderer_standard.class.php b/profiles/commons/modules/contrib/panels/plugins/display_renderers/panels_renderer_standard.class.php
index f38fd8f..aebf191 100644
--- a/profiles/commons/modules/contrib/panels/plugins/display_renderers/panels_renderer_standard.class.php
+++ b/profiles/commons/modules/contrib/panels/plugins/display_renderers/panels_renderer_standard.class.php
@@ -259,6 +259,10 @@ class panels_renderer_standard {
       }
     }
     $this->prepared['panes'] = $first + $normal + $last;
+
+    // Allow other modules the alter the prepared panes array.
+    drupal_alter('panels_panes_prepared', $this->prepared['panes'], $this);
+
     return $this->prepared['panes'];
   }
 
@@ -436,7 +440,7 @@ class panels_renderer_standard {
         break;
       case 'inline':
         $url = base_path() . $filename;
-        $this->prefix .= '<link type="text/css" rel="stylesheet" href="' . $url . '" />'."\n";
+        $this->prefix .= '<link type="text/css" rel="stylesheet" href="' . file_create_url($url) . '" />'."\n";
         break;
     }
   }
diff --git a/profiles/commons/modules/contrib/panels/plugins/export_ui/panels_layouts_ui.class.php b/profiles/commons/modules/contrib/panels/plugins/export_ui/panels_layouts_ui.class.php
index 256cdaa..ecf3b7b 100644
--- a/profiles/commons/modules/contrib/panels/plugins/export_ui/panels_layouts_ui.class.php
+++ b/profiles/commons/modules/contrib/panels/plugins/export_ui/panels_layouts_ui.class.php
@@ -125,9 +125,19 @@ class panels_layouts_ui extends ctools_export_ui {
 
   function edit_form_submit(&$form, &$form_state) {
     parent::edit_form_submit($form, $form_state);
+
+    // While we short circuited the main submit hook, we need to keep this one.
+    panels_edit_display_settings_form_submit($form, $form_state);
     $form_state['item']->settings = $form_state['display']->layout_settings;
   }
 
+  function edit_form_validate(&$form, &$form_state) {
+    parent::edit_form_validate($form, $form_state);
+
+    // While we short circuited the main validate hook, we need to keep this one.
+    panels_edit_display_settings_form_validate($form, $form_state);
+  }
+
   function list_form(&$form, &$form_state) {
     ctools_include('plugins', 'panels');
     $this->builders = panels_get_layout_builders();
diff --git a/profiles/commons/modules/contrib/panels/plugins/layouts/flexible/flexible.inc b/profiles/commons/modules/contrib/panels/plugins/layouts/flexible/flexible.inc
index 93a7c93..f49886b 100644
--- a/profiles/commons/modules/contrib/panels/plugins/layouts/flexible/flexible.inc
+++ b/profiles/commons/modules/contrib/panels/plugins/layouts/flexible/flexible.inc
@@ -747,47 +747,47 @@ function panels_flexible_render_css_group($renderer, $list, $owner_id, $type, $i
   $css = array();
 
   // Start off with some generic CSS to properly pad regions
-  $css['.' . $renderer->item_class['region']] = array(
+  $css[$owner_id . ' .' . $renderer->item_class['region']] = array(
     'padding' => '0',
   );
 
-  $css['.' . $renderer->item_class['region'] . '-inside'] = array(
+  $css[$owner_id . ' .' . $renderer->item_class['region'] . '-inside'] = array(
     'padding-right' => $renderer->region_separation,
     'padding-left' => $renderer->region_separation,
   );
 
-  $css['.' . $renderer->item_class['region'] . '-inside-first'] = array(
+  $css[$owner_id . ' .' . $renderer->item_class['region'] . '-inside-first'] = array(
     'padding-left' => '0',
   );
 
-  $css['.' . $renderer->item_class['region'] . '-inside-last'] = array(
+  $css[$owner_id . ' .' . $renderer->item_class['region'] . '-inside-last'] = array(
     'padding-right' => '0',
   );
 
-  $css['.' . $renderer->item_class['column']] = array(
+  $css[$owner_id . ' .' . $renderer->item_class['column']] = array(
     'padding' => '0',
   );
 
-  $css['.' . $renderer->item_class['column'] . '-inside'] = array(
+  $css[$owner_id . ' .' . $renderer->item_class['column'] . '-inside'] = array(
     'padding-right' => $renderer->column_separation,
     'padding-left' => $renderer->column_separation,
   );
 
-  $css['.' . $renderer->item_class['column'] . '-inside-first'] = array(
+  $css[$owner_id . ' .' . $renderer->item_class['column'] . '-inside-first'] = array(
     'padding-left' => '0',
   );
 
-  $css['.' . $renderer->item_class['column'] . '-inside-last'] = array(
+  $css[$owner_id . ' .' . $renderer->item_class['column'] . '-inside-last'] = array(
     'padding-right' => '0',
   );
 
   // And properly pad rows too
-  $css['.' . $renderer->item_class['row']] = array(
+  $css[$owner_id . ' .' . $renderer->item_class['row']] = array(
     'padding' => '0 0 ' . $renderer->row_separation . ' 0',
     'margin' => '0',
   );
 
-  $css['.' . $renderer->item_class['row'] . '-last'] = array(
+  $css[$owner_id . ' .' . $renderer->item_class['row'] . '-last'] = array(
     'padding-bottom' => '0',
   );
 
diff --git a/profiles/commons/modules/contrib/panels/plugins/styles/block.inc b/profiles/commons/modules/contrib/panels/plugins/styles/block.inc
index 4614ee4..58815a3 100644
--- a/profiles/commons/modules/contrib/panels/plugins/styles/block.inc
+++ b/profiles/commons/modules/contrib/panels/plugins/styles/block.inc
@@ -31,6 +31,9 @@ function theme_panels_block_style_render_pane($vars) {
   if (!empty($block->title)) {
     $block->subject = $block->title;
   }
+  if (!isset($block->subject)) {
+    $block->subject = '';
+  }
 
   $block->region = $pane->panel;
   if (!isset($block->module)) {
diff --git a/profiles/commons/modules/contrib/panels/plugins/styles/naked.inc b/profiles/commons/modules/contrib/panels/plugins/styles/naked.inc
old mode 100755
new mode 100644
diff --git a/profiles/commons/modules/contrib/panels/plugins/task_handlers/panel_context.inc b/profiles/commons/modules/contrib/panels/plugins/task_handlers/panel_context.inc
index c2b5c44..c3bb07f 100644
--- a/profiles/commons/modules/contrib/panels/plugins/task_handlers/panel_context.inc
+++ b/profiles/commons/modules/contrib/panels/plugins/task_handlers/panel_context.inc
@@ -184,7 +184,7 @@ $plugin = array(
   'default conf' => array(
     'title' => t('Panel'),
     'no_blocks' => FALSE,
-    'pipeline' => 'standard',
+    'pipeline' => variable_get('panels_renderer_default', 'standard'),
     'body_classes_to_remove' => '',
     'body_classes_to_add' => '',
     'css_id' => '',
@@ -239,6 +239,28 @@ function &panels_panel_context_get_display(&$handler) {
 }
 
 /**
+ * Build the cache key so that the editor and IPE can properly find
+ * everything needed for this display.
+ */
+function panels_panel_context_cache_key($task_name, $handler_id, $args) {
+  $arguments = array();
+  foreach ($args as $arg) {
+    // Sadly things like panels everywhere actually use non-string arguments
+    // and they basically can't be represented here. Luckily, PE also does
+    // not use a system where this matters, so replace its args with a 0
+    // for a placeholder.
+    if (is_string($arg)) {
+      $arguments[] = $arg;
+    }
+    else {
+      $arguments[] = '0';
+    }
+  }
+  $cache_key = 'panel_context:' . $task_name . '::' . $handler_id . '::' . implode('\\', $arguments) . '::';
+  return $cache_key;
+}
+
+/**
  * Check selection rules and, if passed, render the contexts.
  */
 function panels_panel_context_render($handler, $base_contexts, $args, $test = TRUE) {
@@ -267,7 +289,7 @@ function panels_panel_context_render($handler, $base_contexts, $args, $test = TR
   $display->css_id = $handler->conf['css_id'];
   $task_name = page_manager_make_task_name($handler->task, $handler->subtask);
 
-  $display->cache_key = 'panel_context:' . $task_name . ':' . $handler->name;
+  $display->cache_key = panels_panel_context_cache_key($task_name, $handler->name, $args);
 
   // Check to see if there is any CSS.
   if (!empty($handler->conf['css'])) {
@@ -284,6 +306,13 @@ function panels_panel_context_render($handler, $base_contexts, $args, $test = TR
   panels_get_current_page_display($display);
 
   $renderer = panels_get_renderer($handler->conf['pipeline'], $display);
+  // If the IPE is enabled, but the user does not have access to edit
+  // load the standard renderer instead.
+
+  $parents = class_parents($renderer);
+  if (!empty($parents['panels_renderer_editor']) && !user_access('user page manager') && !user_access('use ipe with page manager')) {
+    $renderer = panels_get_renderer_handler('standard', $display);
+  }
 
   // Remove and add body element classes
   $panel_body_css = &drupal_static('panel_body_css');
@@ -632,7 +661,7 @@ function panels_panel_context_edit_move($form, &$form_state) {
   $form_state['display'] = &panels_panel_context_get_display($form_state['handler']);
   $form_state['layout'] = $form_state['handler']->conf['temp_layout'];
 
-  $form_state['cache_key'] = 'panel_context:' . $form_state['task_name'] . ':' . $form_state['handler_id'];
+  $form_state['cache_key'] = panels_panel_context_cache_key($form_state['task_name'], $form_state['handler_id'], array());
 
   ctools_include('common', 'panels');
   ctools_include('display-layout', 'panels');
@@ -669,7 +698,7 @@ function panels_panel_context_edit_content($form, &$form_state) {
   ctools_include('context');
   ctools_include('context-task-handler');
 
-  $cache = panels_edit_cache_get('panel_context:' . $form_state['task_name'] . ':' . $form_state['handler_id']);
+  $cache = panels_edit_cache_get(panels_panel_context_cache_key($form_state['task_name'], $form_state['handler_id'], array()));
 
   $form_state['renderer'] = panels_get_renderer_handler('editor', $cache->display);
   $form_state['renderer']->cache = &$cache;
@@ -871,15 +900,28 @@ function panels_panel_context_get_addressable($task, $subtask_name, $handler, $a
   $display->context = $contexts;
   $display->args = $arguments;
   $display->css_id = $handler->conf['css_id'];
-  $display->cache_key = 'panel_context:' . $task->name . ':' . $handler->name;
+  $display->cache_key = panels_panel_context_cache_key($task->name, $handler->name, $arguments);
 
   $renderer = panels_get_renderer($handler->conf['pipeline'], $display);
-  if ($type == 'content') {
-    $renderer->prepare();
+  $renderer->prepare();
 
+  if ($address) {
     $pid = array_shift($address);
     if (!empty($renderer->prepared['panes'][$pid])) {
-      return $renderer->render_pane($renderer->prepared['panes'][$pid]);
+      if ($type == 'content') {
+        return $renderer->render_pane($renderer->prepared['panes'][$pid]);
+      }
+      elseif ($type == 'pane') {
+        return $renderer->prepared['panes'][$pid];
+      }
+    }
+  }
+  else {
+    if ($type == 'content') {
+      return $renderer->render();
+    }
+    elseif ($type == 'renderer') {
+      return $renderer;
     }
   }
 }
diff --git a/profiles/commons/modules/contrib/radioactivity/features/radioactivitydefaults/radioactivitydefaults.info b/profiles/commons/modules/contrib/radioactivity/features/radioactivitydefaults/radioactivitydefaults.info
index cfa9dec..799f14c 100644
--- a/profiles/commons/modules/contrib/radioactivity/features/radioactivitydefaults/radioactivitydefaults.info
+++ b/profiles/commons/modules/contrib/radioactivity/features/radioactivitydefaults/radioactivitydefaults.info
@@ -12,9 +12,9 @@ features[radioactivity_decay_profile][] = default_now
 features[radioactivity_decay_profile][] = default_weekly
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-2.8+1-dev"
 core = "7.x"
 project = "radioactivity"
-datestamp = "1385094809"
+datestamp = "1387568914"
 
diff --git a/profiles/commons/modules/contrib/radioactivity/radioactivity.info b/profiles/commons/modules/contrib/radioactivity/radioactivity.info
index cf78fcf..e1c771d 100644
--- a/profiles/commons/modules/contrib/radioactivity/radioactivity.info
+++ b/profiles/commons/modules/contrib/radioactivity/radioactivity.info
@@ -13,9 +13,9 @@ files[] = includes/RadioactivityMemcachedIncidentStorage.inc
 files[] = includes/RadioactivityIncident.inc
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-2.8+1-dev"
 core = "7.x"
 project = "radioactivity"
-datestamp = "1385094809"
+datestamp = "1387568914"
 
diff --git a/profiles/commons/modules/contrib/rich_snippets/rich_snippets.preprocess.inc b/profiles/commons/modules/contrib/rich_snippets/rich_snippets.preprocess.inc
index 4023937..afec902 100644
--- a/profiles/commons/modules/contrib/rich_snippets/rich_snippets.preprocess.inc
+++ b/profiles/commons/modules/contrib/rich_snippets/rich_snippets.preprocess.inc
@@ -12,10 +12,7 @@
  *   An associative array of template variables.
  */
 function rich_snippets_default_preprocessor(&$variables) {
-  // Rich snippets should not go any further if the result doesn't contain a node object
-  if (!isset($variables['result']['node'])) {
-    return;
-  }
+
   // Build the date, remove it from search info.
   if (isset($variables['result']['date'])) {
     $date = theme('rich_snippets_date', array('date' => $variables['result']['date']));
diff --git a/profiles/commons/modules/contrib/strongarm/strongarm.info b/profiles/commons/modules/contrib/strongarm/strongarm.info
index d3d23da..ee40d4b 100644
--- a/profiles/commons/modules/contrib/strongarm/strongarm.info
+++ b/profiles/commons/modules/contrib/strongarm/strongarm.info
@@ -8,9 +8,9 @@ files[] = strongarm.install
 files[] = strongarm.module
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-2.0+2-dev"
 core = "7.x"
 project = "strongarm"
-datestamp = "1385094832"
+datestamp = "1387568913"
 
diff --git a/profiles/commons/modules/contrib/views_load_more/.travis.yml b/profiles/commons/modules/contrib/views_load_more/.travis.yml
new file mode 100644
index 0000000..c52b551
--- /dev/null
+++ b/profiles/commons/modules/contrib/views_load_more/.travis.yml
@@ -0,0 +1,23 @@
+language: php
+
+php:
+  - 5.3
+
+mysql:
+  database: drupal
+  username: root
+  encoding: utf8
+
+before_script:
+ - mysql -e 'create database drupal;'
+ - pyrus channel-discover pear.drush.org
+ - pyrus install drush/drush
+ - phpenv rehash
+ - wget http://ftp.drupal.org/files/projects/drupal-7.14.tar.gz
+ - tar -xf drupal-7.14.tar.gz
+ - cd drupal-7.14
+ - drush site-install standard --db-url=mysql://root:@localhost/drupal --yes
+ - "export PHANTOMJS_EXECUTABLE='phantomjs --local-to-remote-url-access=yes --ignore-ssl'"
+
+script:
+ - ./bin/casperjs test test/casperjs
diff --git a/profiles/commons/modules/contrib/views_load_more/CHANGELOG.txt b/profiles/commons/modules/contrib/views_load_more/CHANGELOG.txt
new file mode 100644
index 0000000..4af4cc0
--- /dev/null
+++ b/profiles/commons/modules/contrib/views_load_more/CHANGELOG.txt
@@ -0,0 +1,19 @@
+
+views_load_more 7.x-1.x, xxxx-xx-xx
+-----------------------------------
+
+views_load_more 7.x-1.2, 2013-11-27
+-----------------------------------
+#1372206 by andremolnar, attilafekete: provide default target selectors for specific view styles
+#1703436 by agalitsyn, attilafekete: avoid undefined AJAX error
+#1919894 by caiosba: Trigger a custom event when new content is loaded
+#1459860 by Kleve: Fixed Views load more does not follow the No results behavior
+#1404664 by justin2pin, jyee: Fixed Circumvent Views Ajax Scrolling
+#1322642 by ericduran, johnste: Fixed Full page reload on 2nd click of load more. (works the first time)
+#1332386 by ericduran: Add advance options for custom classes
+#1272562 by andremolnar, ericduran: Added provide option to change the text per view
+#1320164 by andremolnar: Added Provide more descriptive description in info file
+#1264222 by EndEd: Fixing behaviors when the result set is being rendered by an exposed filter
+#1234680 by ericduran: Adding support for effects, right now fade is supported
+#1237888 by moonray: Add class to distinguish from regular pager
+#1234664 by ericduran, moonray: Add waypoint support Fixes
diff --git a/profiles/commons/modules/contrib/views_load_more/LICENSE.txt b/profiles/commons/modules/contrib/views_load_more/LICENSE.txt
old mode 100644
new mode 100755
index 2c095c8..d159169
--- a/profiles/commons/modules/contrib/views_load_more/LICENSE.txt
+++ b/profiles/commons/modules/contrib/views_load_more/LICENSE.txt
@@ -1,274 +1,339 @@
-GNU GENERAL PUBLIC LICENSE
-
-              Version 2, June 1991
-
-Copyright (C) 1989, 1991 Free Software Foundation, Inc. 675 Mass Ave,
-Cambridge, MA 02139, USA. Everyone is permitted to copy and distribute
-verbatim copies of this license document, but changing it is not allowed.
-
-                  Preamble
-
-The licenses for most software are designed to take away your freedom to
-share and change it. By contrast, the GNU General Public License is
-intended to guarantee your freedom to share and change free software--to
-make sure the software is free for all its users. This General Public License
-applies to most of the Free Software Foundation's software and to any other
-program whose authors commit to using it. (Some other Free Software
-Foundation software is covered by the GNU Library General Public License
-instead.) You can apply it to your programs, too.
-
-When we speak of free software, we are referring to freedom, not price. Our
-General Public Licenses are designed to make sure that you have the
-freedom to distribute copies of free software (and charge for this service if
-you wish), that you receive source code or can get it if you want it, that you
-can change the software or use pieces of it in new free programs; and that
-you know you can do these things.
-
-To protect your rights, we need to make restrictions that forbid anyone to
-deny you these rights or to ask you to surrender the rights. These restrictions
-translate to certain responsibilities for you if you distribute copies of the
-software, or if you modify it.
-
-For example, if you distribute copies of such a program, whether gratis or for
-a fee, you must give the recipients all the rights that you have. You must make
-sure that they, too, receive or can get the source code. And you must show
-them these terms so they know their rights.
-
-We protect your rights with two steps: (1) copyright the software, and (2)
-offer you this license which gives you legal permission to copy, distribute
-and/or modify the software.
-
-Also, for each author's protection and ours, we want to make certain that
-everyone understands that there is no warranty for this free software. If the
-software is modified by someone else and passed on, we want its recipients
-to know that what they have is not the original, so that any problems
-introduced by others will not reflect on the original authors' reputations.
-
-Finally, any free program is threatened constantly by software patents. We
-wish to avoid the danger that redistributors of a free program will individually
-obtain patent licenses, in effect making the program proprietary. To prevent
-this, we have made it clear that any patent must be licensed for everyone's
-free use or not licensed at all.
-
-The precise terms and conditions for copying, distribution and modification
-follow.
-
-           GNU GENERAL PUBLIC LICENSE
- TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND
-               MODIFICATION
-
-0. This License applies to any program or other work which contains a notice
-placed by the copyright holder saying it may be distributed under the terms
-of this General Public License. The "Program", below, refers to any such
-program or work, and a "work based on the Program" means either the
-Program or any derivative work under copyright law: that is to say, a work
-containing the Program or a portion of it, either verbatim or with
-modifications and/or translated into another language. (Hereinafter, translation
-is included without limitation in the term "modification".) Each licensee is
-addressed as "you".
-
-Activities other than copying, distribution and modification are not covered
-by this License; they are outside its scope. The act of running the Program is
-not restricted, and the output from the Program is covered only if its contents
-constitute a work based on the Program (independent of having been made
-by running the Program). Whether that is true depends on what the Program
-does.
-
-1. You may copy and distribute verbatim copies of the Program's source
-code as you receive it, in any medium, provided that you conspicuously and
-appropriately publish on each copy an appropriate copyright notice and
-disclaimer of warranty; keep intact all the notices that refer to this License
-and to the absence of any warranty; and give any other recipients of the
-Program a copy of this License along with the Program.
-
-You may charge a fee for the physical act of transferring a copy, and you
-may at your option offer warranty protection in exchange for a fee.
-
-2. You may modify your copy or copies of the Program or any portion of it,
-thus forming a work based on the Program, and copy and distribute such
-modifications or work under the terms of Section 1 above, provided that you
-also meet all of these conditions:
-
-a) You must cause the modified files to carry prominent notices stating that
-you changed the files and the date of any change.
-
-b) You must cause any work that you distribute or publish, that in whole or in
-part contains or is derived from the Program or any part thereof, to be
-licensed as a whole at no charge to all third parties under the terms of this
-License.
-
-c) If the modified program normally reads commands interactively when run,
-you must cause it, when started running for such interactive use in the most
-ordinary way, to print or display an announcement including an appropriate
-copyright notice and a notice that there is no warranty (or else, saying that
-you provide a warranty) and that users may redistribute the program under
-these conditions, and telling the user how to view a copy of this License.
-(Exception: if the Program itself is interactive but does not normally print such
-an announcement, your work based on the Program is not required to print
-an announcement.)
-
-These requirements apply to the modified work as a whole. If identifiable
-sections of that work are not derived from the Program, and can be
-reasonably considered independent and separate works in themselves, then
-this License, and its terms, do not apply to those sections when you distribute
-them as separate works. But when you distribute the same sections as part
-of a whole which is a work based on the Program, the distribution of the
-whole must be on the terms of this License, whose permissions for other
-licensees extend to the entire whole, and thus to each and every part
-regardless of who wrote it.
-
-Thus, it is not the intent of this section to claim rights or contest your rights to
-work written entirely by you; rather, the intent is to exercise the right to
-control the distribution of derivative or collective works based on the
-Program.
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
 
 In addition, mere aggregation of another work not based on the Program
-with the Program (or with a work based on the Program) on a volume of a
-storage or distribution medium does not bring the other work under the scope
-of this License.
-
-3. You may copy and distribute the Program (or a work based on it, under
-Section 2) in object code or executable form under the terms of Sections 1
-and 2 above provided that you also do one of the following:
-
-a) Accompany it with the complete corresponding machine-readable source
-code, which must be distributed under the terms of Sections 1 and 2 above
-on a medium customarily used for software interchange; or,
-
-b) Accompany it with a written offer, valid for at least three years, to give
-any third party, for a charge no more than your cost of physically performing
-source distribution, a complete machine-readable copy of the corresponding
-source code, to be distributed under the terms of Sections 1 and 2 above on
-a medium customarily used for software interchange; or,
-
-c) Accompany it with the information you received as to the offer to distribute
-corresponding source code. (This alternative is allowed only for
-noncommercial distribution and only if you received the program in object
-code or executable form with such an offer, in accord with Subsection b
-above.)
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
 
 The source code for a work means the preferred form of the work for
-making modifications to it. For an executable work, complete source code
-means all the source code for all modules it contains, plus any associated
-interface definition files, plus the scripts used to control compilation and
-installation of the executable. However, as a special exception, the source
-code distributed need not include anything that is normally distributed (in
-either source or binary form) with the major components (compiler, kernel,
-and so on) of the operating system on which the executable runs, unless that
-component itself accompanies the executable.
-
-If distribution of executable or object code is made by offering access to
-copy from a designated place, then offering equivalent access to copy the
-source code from the same place counts as distribution of the source code,
-even though third parties are not compelled to copy the source along with the
-object code.
-
-4. You may not copy, modify, sublicense, or distribute the Program except as
-expressly provided under this License. Any attempt otherwise to copy,
-modify, sublicense or distribute the Program is void, and will automatically
-terminate your rights under this License. However, parties who have received
-copies, or rights, from you under this License will not have their licenses
-terminated so long as such parties remain in full compliance.
-
-5. You are not required to accept this License, since you have not signed it.
-However, nothing else grants you permission to modify or distribute the
-Program or its derivative works. These actions are prohibited by law if you
-do not accept this License. Therefore, by modifying or distributing the
-Program (or any work based on the Program), you indicate your acceptance
-of this License to do so, and all its terms and conditions for copying,
-distributing or modifying the Program or works based on it.
-
-6. Each time you redistribute the Program (or any work based on the
-Program), the recipient automatically receives a license from the original
-licensor to copy, distribute or modify the Program subject to these terms and
-conditions. You may not impose any further restrictions on the recipients'
-exercise of the rights granted herein. You are not responsible for enforcing
-compliance by third parties to this License.
-
-7. If, as a consequence of a court judgment or allegation of patent
-infringement or for any other reason (not limited to patent issues), conditions
-are imposed on you (whether by court order, agreement or otherwise) that
-contradict the conditions of this License, they do not excuse you from the
-conditions of this License. If you cannot distribute so as to satisfy
-simultaneously your obligations under this License and any other pertinent
-obligations, then as a consequence you may not distribute the Program at all.
-For example, if a patent license would not permit royalty-free redistribution
-of the Program by all those who receive copies directly or indirectly through
-you, then the only way you could satisfy both it and this License would be to
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
 refrain entirely from distribution of the Program.
 
-If any portion of this section is held invalid or unenforceable under any
-particular circumstance, the balance of the section is intended to apply and
-the section as a whole is intended to apply in other circumstances.
-
-It is not the purpose of this section to induce you to infringe any patents or
-other property right claims or to contest validity of any such claims; this
-section has the sole purpose of protecting the integrity of the free software
-distribution system, which is implemented by public license practices. Many
-people have made generous contributions to the wide range of software
-distributed through that system in reliance on consistent application of that
-system; it is up to the author/donor to decide if he or she is willing to
-distribute software through any other system and a licensee cannot impose
-that choice.
-
-This section is intended to make thoroughly clear what is believed to be a
-consequence of the rest of this License.
-
-8. If the distribution and/or use of the Program is restricted in certain
-countries either by patents or by copyrighted interfaces, the original copyright
-holder who places the Program under this License may add an explicit
-geographical distribution limitation excluding those countries, so that
-distribution is permitted only in or among countries not thus excluded. In such
-case, this License incorporates the limitation as if written in the body of this
-License.
-
-9. The Free Software Foundation may publish revised and/or new versions
-of the General Public License from time to time. Such new versions will be
-similar in spirit to the present version, but may differ in detail to address new
-problems or concerns.
-
-Each version is given a distinguishing version number. If the Program specifies
-a version number of this License which applies to it and "any later version",
-you have the option of following the terms and conditions either of that
-version or of any later version published by the Free Software Foundation. If
-the Program does not specify a version number of this License, you may
-choose any version ever published by the Free Software Foundation.
-
-10. If you wish to incorporate parts of the Program into other free programs
-whose distribution conditions are different, write to the author to ask for
-permission. For software which is copyrighted by the Free Software
-Foundation, write to the Free Software Foundation; we sometimes make
-exceptions for this. Our decision will be guided by the two goals of
-preserving the free status of all derivatives of our free software and of
-promoting the sharing and reuse of software generally.
-
-               NO WARRANTY
-
-11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE,
-THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT
-PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE
-STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
-OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
-WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
-INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND
-PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE
-PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
-NECESSARY SERVICING, REPAIR OR CORRECTION.
-
-12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR
-AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR
-ANY OTHER PARTY WHO MAY MODIFY AND/OR
-REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
-LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL,
-SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
-ARISING OUT OF THE USE OR INABILITY TO USE THE
-PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA
-OR DATA BEING RENDERED INACCURATE OR LOSSES
-SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE
-PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN
-IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
-THE POSSIBILITY OF SUCH DAMAGES.
-
-          END OF TERMS AND CONDITIONS
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/profiles/commons/modules/contrib/views_load_more/readme.md b/profiles/commons/modules/contrib/views_load_more/readme.md
new file mode 100644
index 0000000..59bf932
--- /dev/null
+++ b/profiles/commons/modules/contrib/views_load_more/readme.md
@@ -0,0 +1,7 @@
+#Views Load More#
+
+----
+
+[![Build Status](https://secure.travis-ci.org/ericduran/views_load_more.png?branch=master)](http://travis-ci.org/ericduran/views_load_more)
+
+Built by Robots&trade;
\ No newline at end of file
diff --git a/profiles/commons/modules/contrib/views_load_more/test/casperjs/test1.js b/profiles/commons/modules/contrib/views_load_more/test/casperjs/test1.js
new file mode 100644
index 0000000..ae255b3
--- /dev/null
+++ b/profiles/commons/modules/contrib/views_load_more/test/casperjs/test1.js
@@ -0,0 +1,3 @@
+casper.test.comment('My first test file');
+casper.test.assert(true, "true is so true");
+casper.test.done(); // I must be called!
diff --git a/profiles/commons/modules/contrib/views_load_more/test/ci/drupal_setup.sh b/profiles/commons/modules/contrib/views_load_more/test/ci/drupal_setup.sh
new file mode 100644
index 0000000..791b356
--- /dev/null
+++ b/profiles/commons/modules/contrib/views_load_more/test/ci/drupal_setup.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+mysql -e 'create database drupal;'
+pyrus channel-discover pear.drush.org
+pyrus install drush/drush
+phpenv rehash
+wget http://ftp.drupal.org/files/projects/drupal-7.14.tar.gz
+tar -xf drupal-7.14.tar.gz
+cd drupal-7.14
+drush site-install standard --db-url=mysql://root:@localhost/drupal --yes
diff --git a/profiles/commons/modules/contrib/views_load_more/test/ci/run_build.sh b/profiles/commons/modules/contrib/views_load_more/test/ci/run_build.sh
new file mode 100644
index 0000000..a9bf588
--- /dev/null
+++ b/profiles/commons/modules/contrib/views_load_more/test/ci/run_build.sh
@@ -0,0 +1 @@
+#!/bin/bash
diff --git a/profiles/commons/modules/contrib/views_load_more/views_load_more.info b/profiles/commons/modules/contrib/views_load_more/views_load_more.info
index 3e6b27c..ca3caa4 100644
--- a/profiles/commons/modules/contrib/views_load_more/views_load_more.info
+++ b/profiles/commons/modules/contrib/views_load_more/views_load_more.info
@@ -1,14 +1,14 @@
 name = Views Load More
-description = Yet another load more pager for views
+description = A pager plugin for views. Gives users the option to add a 'more' button to a view and have the results appended to existing results being displayed.
 core = 7.x
 package = Views
 dependencies[] = views
 files[] = views_load_more.views.inc
 files[] = views_plugin_pager_load_more.inc
 
-; Information added by drupal.org packaging script on 2011-07-31
-version = "7.x-1.1"
+; Information added by  packaging script on 2013-11-27
+version = "7.x-1.2"
 core = "7.x"
 project = "views_load_more"
-datestamp = "1312075027"
+datestamp = "1385582308"
 
diff --git a/profiles/commons/modules/contrib/views_load_more/views_load_more.js b/profiles/commons/modules/contrib/views_load_more/views_load_more.js
index 44e1e30..15c03c4 100644
--- a/profiles/commons/modules/contrib/views_load_more/views_load_more.js
+++ b/profiles/commons/modules/contrib/views_load_more/views_load_more.js
@@ -13,6 +13,7 @@
     // our presets.
     var wrapper = response.selector ? $(response.selector) : $(ajax.wrapper);
     var method = response.method || ajax.method;
+    var targetList = response.targetList || '';
     var effect = ajax.getEffect(response);
 
     // We don't know what response.data contains: it might be a string of text
@@ -39,38 +40,85 @@
     // If removing content from the wrapper, detach behaviors first.
     var settings = response.settings || ajax.settings || Drupal.settings;
     Drupal.detachBehaviors(wrapper, settings);
+    if ($.waypoints != undefined) {
+      $.waypoints('refresh');
+    }
+
+    // Set up our default query options. This is for advance users that might
+    // change there views layout classes. This allows them to write there own
+    // jquery selector to replace the content with.
+    // Provide sensible defaults for unordered list, ordered list and table
+    // view styles.
+    var content_query = targetList && !response.options.content ? '.view-content ' + targetList : response.options.content || '.view-content';
+
+    // If we're using any effects. Hide the new content before adding it to the DOM.
+    if (effect.showEffect != 'show') {
+      new_content.find(content_query).children().hide();
+    }
 
     // Add the new content to the page.
     wrapper.find('.pager a').remove();
-    wrapper.find('.pager').html(new_content.find('.pager'));
-    wrapper.find('.view-content')[method](new_content.find('.views-row'));
+    wrapper.find('.pager').parent('.item-list').html(new_content.find('.pager'));
+    wrapper.find(content_query)[method](new_content.find(content_query).children());
+
+    // Re-class the loaded content.
+    wrapper.find(content_query).children()
+      .removeClass('views-row-first views-row-last views-row-odd views-row-even')
+      .filter(':first')
+        .addClass('views-row-first')
+        .end()
+      .filter(':last')
+        .addClass('views-row-last')
+        .end()
+      .filter(':even')
+        .addClass('views-row-odd')
+        .end()
+      .filter(':odd')
+        .addClass('views-row-even')
+        .end();
+
+    if (effect.showEffect != 'show') {
+      wrapper.find(content_query).children(':not(:visible)')[effect.showEffect](effect.showSpeed);
+    }
+
+    // Additional processing over new content
+    wrapper.trigger('views_load_more.new_content', new_content.clone());
 
     // Attach all JavaScript behaviors to the new content
-    wrapper.removeClass('views-processed');
+    // Remove the Jquery once Class, TODO: There needs to be a better
+    // way of doing this, look at .removeOnce() :-/
+    var classes = wrapper.attr('class');
+    var onceClass = classes.match(/jquery-once-[0-9]*-[a-z]*/);
+    wrapper.removeClass(onceClass[0]);
     var settings = response.settings || ajax.settings || Drupal.settings;
     Drupal.attachBehaviors(wrapper, settings);
-
-    if (new_content.parents('html').length > 0) {
-      // Apply any settings from the returned JSON if available.
-    }
   }
 
   /**
    * Attaches the AJAX behavior to Views Load More waypoint support.
    */
-  Drupal.behaviors.ViewsLoadMore = {};
-  Drupal.behaviors.ViewsLoadMore.attach = function() {
-    if (Drupal.settings && Drupal.settings.viewsLoadMore && Drupal.settings.views.ajaxViews) {
-      opts = {
-        offset: '100%'
-      };
-      $.each(Drupal.settings.viewsLoadMore, function(i, settings) {
-        var view = '.view-' + settings.view_name + '.view-display-id-' + settings.view_display_id + ' .pager-next a';
-        $(view).bind('waypoint.reached', function(event, direction) {
-           $(view).click();
+  Drupal.behaviors.ViewsLoadMore = {
+    attach: function (context, settings) {
+      if (settings && settings.viewsLoadMore && settings.views.ajaxViews) {
+        opts = {
+          offset: '100%'
+        };
+        $.each(settings.viewsLoadMore, function(i, setting) {
+          var view = '.view-id-' + setting.view_name + '.view-display-id-' + setting.view_display_id + ' .pager-next a';
+          $(view).waypoint(function(event, direction) {
+            $(view).waypoint('remove');
+            $(view).click();
+          }, opts);
+        });
+      }
+    },
+    detach: function (context, settings, trigger) {
+      if (settings && Drupal.settings.viewsLoadMore && settings.views.ajaxViews) {
+        $.each(settings.viewsLoadMore, function(i, setting) {
+          var view = '.view-id-' + setting.view_name + '.view-display-id-' + setting.view_display_id + ' .pager-next a';
+          $(view, context).waypoint('destroy');
         });
-        $(view).waypoint(opts);
-      });
+      }
     }
-  };
+     };
 })(jQuery);
diff --git a/profiles/commons/modules/contrib/views_load_more/views_load_more.module b/profiles/commons/modules/contrib/views_load_more/views_load_more.module
index 93648c9..00403c0 100644
--- a/profiles/commons/modules/contrib/views_load_more/views_load_more.module
+++ b/profiles/commons/modules/contrib/views_load_more/views_load_more.module
@@ -1,6 +1,13 @@
 <?php
 
 /**
+ * @file views_load_more.module
+ *
+ * A Views pager module to allow new content to be appended to the bottom
+ * of a view instead of replacing it.
+ */
+
+/**
  * Implementation of hook_views_api().
  */
 function views_load_more_views_api() {
@@ -25,29 +32,56 @@ function views_load_more_theme() {
  * Implements hook_views_ajax_data_alter().
  */
 function views_load_more_views_ajax_data_alter(&$commands, $view) {
+  // Support No results behavior.
+  if (!$view->total_rows) {
+    return;
+  }
+
   if (is_a($view->query->pager, 'views_plugin_pager_load_more')) {
+    // This is a work-around for allowing exposed for on the page.
+    if ($view->query->pager->current_page == 0) {
+      return;
+    }
     foreach ($commands as $key => $command) {
-      // the replace should the only one, but just incase, we'll make sure.
+      // remove "viewsScrollTop" command, as this behavior is unnecessary.
+      if ($command['command'] == 'viewsScrollTop') {
+        unset($commands[$key]);
+      }
+      // the replace should the only one, but just in case, we'll make sure.
       if ($command['command'] == 'insert' && $command['selector'] == '.view-dom-id-' . $view->dom_id) {
+        if ($view->style_plugin->options['type'] == 'ul' || $view->style_plugin->options['type'] == 'ol') {
+          $target = ".{$view->style_plugin->options['wrapper_class']} > {$view->style_plugin->options['type']}:not(.links)";
+          $commands[$key]['targetList'] = $target;
+        }
+        if ($view->style_plugin->plugin_name == 'table') {
+          $target = '.views-table tbody';
+          $commands[$key]['targetList'] = $target;
+        }
+
         $commands[$key]['command'] = 'viewsLoadMoreAppend';
         $commands[$key]['method'] = 'append';
+        if (isset($view->query->pager->options['effects']) && $view->query->pager->options['effects']['type'] != 'none') {
+          $commands[$key]['effect'] = $view->query->pager->options['effects']['type'];
+          $commands[$key]['speed'] = $view->query->pager->options['effects']['speed'];
+        }
+        $commands[$key]['options'] = array(
+          'content' => $view->query->pager->options['advance']['content_class'],
+        );
       }
     }
   }
 }
 
 function theme_views_load_more_pager($vars) {
-  global $pager_page_array, $pager_total;  
+  global $pager_page_array, $pager_total;
 
-  drupal_add_js(drupal_get_path('module', 'views_load_more').'/views_load_more.js');
-  
   $tags = $vars['tags'];
   $element = $vars['element'];
   $parameters = $vars['parameters'];
 
   $li_next = theme('pager_next',
     array(
-      'text' => (isset($tags[3]) ? $tags[3] : t('Load More')),
+      'text' => (isset($tags[3]) ? $tags[3] : t($vars['more_button_text'])),
       'element' => $element,
       'interval' => 1,
       'parameters' => $parameters,
@@ -67,8 +101,21 @@ function theme_views_load_more_pager($vars) {
         'items' => $items,
         'title' => NULL,
         'type' => 'ul',
-        'attributes' => array('class' => array('pager')),
+        'attributes' => array('class' => array('pager', 'pager-load-more')),
       )
     );
   }
 }
+
+/**
+ * Implements hook_views_pre_render().
+ *
+ * Load js file only if ajax is enabled.
+ */
+function views_load_more_views_pre_render(&$view) {
+  if (!$view->use_ajax) {
+    return;
+  }
+
+  drupal_add_js(drupal_get_path('module', 'views_load_more') . '/views_load_more.js');
+}
diff --git a/profiles/commons/modules/contrib/views_load_more/views_load_more.views.inc b/profiles/commons/modules/contrib/views_load_more/views_load_more.views.inc
index 023e8a1..6a1ec7f 100644
--- a/profiles/commons/modules/contrib/views_load_more/views_load_more.views.inc
+++ b/profiles/commons/modules/contrib/views_load_more/views_load_more.views.inc
@@ -1,11 +1,12 @@
 <?php
 /**
  * @file
+ *
  *  Provides the views plugin information.
  */
 
 /**
- * Implements hook_views_plugins
+ * Implements hook_views_plugins().
  */
 function views_load_more_views_plugins() {
   return array(
@@ -20,4 +21,4 @@ function views_load_more_views_plugins() {
       ),
     ),
   );
-}
\ No newline at end of file
+}
diff --git a/profiles/commons/modules/contrib/views_load_more/views_plugin_pager_load_more.inc b/profiles/commons/modules/contrib/views_load_more/views_plugin_pager_load_more.inc
index 759c035..936bba4 100644
--- a/profiles/commons/modules/contrib/views_load_more/views_plugin_pager_load_more.inc
+++ b/profiles/commons/modules/contrib/views_load_more/views_plugin_pager_load_more.inc
@@ -1,11 +1,18 @@
 <?php
 
 /**
+ * @file
+ *
  * The plugin to handle Load More pager.
  *
  * @ingroup views_pager_plugins
  */
+
 class views_plugin_pager_load_more extends views_plugin_pager_full {
+
+  /**
+   * Summary title overwrite.
+   */
   function summary_title() {
     if (!empty($this->options['offset'])) {
       return format_plural($this->options['items_per_page'], 'Load more pager, @count item, skip @skip', 'Load more pager, @count items, skip @skip', array('@count' => $this->options['items_per_page'], '@skip' => $this->options['offset']));
@@ -13,18 +20,48 @@ class views_plugin_pager_load_more extends views_plugin_pager_full {
       return format_plural($this->options['items_per_page'], 'Load more pager, @count item', 'Load more pager, @count items', array('@count' => $this->options['items_per_page']));
   }
 
+  /**
+   * Options definition overwrite.
+   */
   function option_definition() {
     $options = parent::option_definition();
     $options['waypoint'] = array(
       'contains' => array(
         'infinite' => array('default' => FALSE),
-      )
+      ),
+    );
+    $options['more_button_text'] = array(
+      'default' => t('Load more'),
+      'translateable' => TRUE,
+    );
+    $options['advance'] = array(
+      'contains' => array(
+        'row_class' => array('default' => ''),
+        'content_class' => array('default' => ''),
+      ),
     );
     return $options;
   }
 
+  /**
+   * Options form overwrite.
+   */
   function options_form(&$form, &$form_state) {
     parent::options_form($form, $form_state);
+
+    // Keep items per page as the first form element on the page followed by
+    // the option to change the 'load more' button text
+    $form['items_per_page']['#weight'] = -2;
+
+    // Option for users to specify the text used on the 'load more' button.
+    $form['more_button_text'] = array(
+      '#type' => 'textfield',
+      '#title' => t('More link text'),
+      '#description' => t('The text that will be displayed on the link that is used to load more elements. For example "Show me more"'),
+      '#default_value' => $this->options['more_button_text'] ? $this->options['more_button_text'] : t('Load more'),
+      '#weight' => -1,
+    );
+
     if (module_exists('waypoints')) {
       $form['waypoint'] = array(
         '#type' => 'fieldset',
@@ -42,8 +79,58 @@ class views_plugin_pager_load_more extends views_plugin_pager_full {
         '#default_value' => $this->options['waypoint']['infinite'],
       );
     }
+    $form['advance'] = array(
+      '#type' => 'fieldset',
+      '#collapsible' => TRUE,
+      '#collapsed' => TRUE,
+      '#tree' => TRUE,
+      '#title' =>  t('Advance Options'),
+      '#input' => TRUE,
+      '#description' => t('Configure advance options.'),
+    );
+    $form['advance']['content_class'] = array(
+      '#type' => 'textfield',
+      '#title' => t('Content selection selector'),
+      '#description' => t('Use for advance replace selector, extremely useful when overwriting the views tpl.'),
+      '#default_value' => $this->options['advance']['content_class'],
+    );
+    $form['effects'] = array(
+      '#type' => 'fieldset',
+      '#collapsible' => TRUE,
+      '#collapsed' => TRUE,
+      '#tree' => TRUE,
+      '#title' =>  t('JQuery Effects'),
+      '#input' => TRUE,
+    );
+    $form['effects']['type'] = array(
+      '#type' => 'select',
+      '#options' => array(
+        'none' => t('None'),
+        'fade' => t('Fade'),
+      ),
+      '#default_vaue' => 'none',
+      '#title' => t('Effect Type'),
+      '#default_value' => $this->options['effects']['type'],
+    );
+    $form['effects']['speed'] = array(
+      '#type' => 'select',
+      '#options' => array(
+        'slow' => t('Slow'),
+        'fast' => t('Fast'),
+      ),
+      '#states' => array(
+        'visible' => array(
+          '#edit-pager-options-effects-type' => array('value' => t('fade')),
+        ),
+      ),
+      '#title' => t('Effect Speed'),
+      '#default_value' => $this->options['effects']['speed'],
+    );
   }
 
+  /**
+   * render overwrite.
+   */
   function render($input) {
     if (module_exists('waypoints') && $this->options['waypoint']['infinite'] == 1) {
       $viewsLoadMore = array();
@@ -57,8 +144,13 @@ class views_plugin_pager_load_more extends views_plugin_pager_full {
     }
 
     $pager_theme = views_theme_functions('views_load_more_pager', $this->view, $this->display);
-    return theme($pager_theme, array(
-      'parameters' => $input, 'element' => $this->options['id']));
+
+    $vars = array(
+      'parameters' => $input,
+      'element' => $this->options['id'],
+      'more_button_text' => $this->options['more_button_text'],
+    );
+
+    return theme($pager_theme, $vars);
   }
 }
-
diff --git a/profiles/commons/scripts/build_distro.sh b/profiles/commons/scripts/build_distro.sh
index 75a227a..3396ac3 100755
--- a/profiles/commons/scripts/build_distro.sh
+++ b/profiles/commons/scripts/build_distro.sh
@@ -82,40 +82,71 @@ release_notes() {
 }
 
 build_distro() {
-    if [[ -d $BUILD_PATH ]]; then
-        cd $BUILD_PATH
-        #backup the sites directory
-        if [[ -d publish ]]; then
-          tar -czvf $BUILD_PATH/sites-.tar.gz
-
-        rm -rf ./publish
-        # do we have the profile?
-        if [[ -d $BUILD_PATH/commons_profile ]]; then
-          if [[ -d $BUILD_PATH/repos ]]; then
-            rm -f /tmp/commons.tar.gz
-            drush make --no-cache --no-core --contrib-destination --tar $BUILD_PATH/commons_profile/drupal-org.make /tmp/commons
-            drush make --no-cache --prepare-install --drupal-org=core $BUILD_PATH/commons_profile/drupal-org-core.make ./publish
-          else
-            mkdir $BUILD_PATH/repos
-            mkdir $BUILD_PATH/repos/modules
-            mkdir $BUILD_PATH/repos/themes
-            build_distro $BUILD_PATH
-          fi
-          # symlink the profile to our dev copy
-          chmod -R 777 $BUILD_PATH/publish/sites/default
-          rm -rf publish/profiles/commons
-          ln -s $BUILD_PATH/commons_profile publish/profiles/commons
-          cd publish/profiles
-          tar -zxvf /tmp/commons.tar.gz
-          chmod -R 775 $BUILD_PATH/publish/profiles/commons
+  if [[ -d $BUILD_PATH ]]; then
+      cd $BUILD_PATH
+      #backup the sites directory
+      if [[ -d docroot ]]; then
+        rm -rf ./docroot
+      fi
+      # do we have the profile?
+      if [[ -d $BUILD_PATH/commons_profile ]]; then
+        if [[ -d $BUILD_PATH/repos ]]; then
+          rm -f /tmp/commons.tar.gz
+          drush make --no-cache --prepare-install --drupal-org=core $BUILD_PATH/commons_profile/drupal-org-core.make $BUILD_PATH/docroot
+          drush make --no-cache --no-core --contrib-destination --tar $BUILD_PATH/commons_profile/drupal-org.make /tmp/commons
         else
-          git clone --branch 7.x-3.x ${USERNAME}@git.drupal.org:project/commons.git commons_profile
+          mkdir $BUILD_PATH/repos
+          mkdir $BUILD_PATH/repos/modules
+          mkdir $BUILD_PATH/repos/themes
           build_distro $BUILD_PATH
         fi
-    else
-      mkdir $BUILD_PATH
-      build_distro $BUILD_PATH $USERNAME
-    fi
+        # symlink the profile sites folder to our dev copy
+        cd docroot
+        if [[ -d $BUILD_PATH/sites ]]; then
+          rm -rf $BUILD_PATH/docroot/sites
+          ln -s ../sites $BUILD_PATH/docroot/sites
+        else
+          mv $BUILD_PATH/docroot/sites $BUILD_PATH/sites
+          ln -s ../sites $BUILD_PATH/docroot/sites
+        fi
+        chmod -R 777 $BUILD_PATH/docroot/sites/default
+
+        ## put commons profile and modules into the profile folder
+        rm -rf docroot/profiles/commons
+        if [ -a $BUILD_PATH/repos.txt ]; then
+          UNTAR="tar -zxvf /tmp/commons.tar.gz -X $BUILD_PATH/repos.txt"
+        else
+          cd $BUILD_PATH/repos
+          find * -mindepth 1 -maxdepth 1 -type d -not -name '.*' | awk -F/ '{print $1 "/" $2}' > /tmp/repos.txt
+          # exclude repos since we're updating already by linking it to the repos directory.
+          UNTAR="tar -zxvf /tmp/commons.tar.gz -X /tmp/repos.txt"
+        fi
+        cd $BUILD_PATH/docroot/profiles
+        eval $UNTAR
+        cd commons
+        ln -s ../../../commons_profile/* .
+        ln -s ../../../../commons_profile/modules/commons ${BUILD_PATH}/docroot/profiles/commons/modules/
+        ln -s ../../../../commons_profile/themes/commons ${BUILD_PATH}/docroot/profiles/commons/themes/
+        for line in $(cat $BUILD_PATH/repos.txt); do
+          ln -s ../../../../../../repos/${line} ${BUILD_PATH}/docroot/profiles/commons/$(echo ${line} | awk -F/ '{print $1}')/contrib/
+        done
+        chmod -R 775 $BUILD_PATH/docroot/profiles/commons
+      else
+        git clone --branch 7.x-3.x ${USERNAME}@git.drupal.org:project/commons.git commons_profile
+        build_distro $BUILD_PATH
+      fi
+  else
+    mkdir $BUILD_PATH
+    build_distro $BUILD_PATH $USERNAME
+  fi
+}
+
+site_install() {
+  read -p "You're about to DESTROY all data for site ${SITE} Are you sure? " -n 1 -r
+  if [[ $REPLY =~ ^[Yy]$ ]]; then
+    cd ${BUILD_PATH}/docroot/sites/${SITE}
+    drush -y sql-drop
+    drush site-install --site-name=${SITE} --account-name=admin --account-pass=${ADMIN_PASS} --account-mail=${ADMIN_EMAIL} --site-mail=commons_site@example.com -v -y commons commons_anonymous_welcome_text_form.commons_install_example_content=${DEMO_CONTENT} commons_anonymous_welcome_text_form.commons_anonymous_welcome_title="Commons Example Site" commons_anonymous_welcome_text_form.commons_anonymous_welcome_body="Using the site-install version of commons." commons_create_first_group.commons_first_group_title="Sales Group" commons_create_first_group.commons_first_group_body="This is the sales group from site-install."
   fi
 }
 
@@ -126,13 +157,13 @@ update() {
     # do we have the profile?
     if [[ -d $DOCROOT/profiles/commons ]]; then
       # do we have an installed commons profile?
-        rm -f /tmp/publish.tar.gz
+        rm -f /tmp/docroot.tar.gz
         rm -f /tmp/commons.tar.gz
-        drush make --no-cache --tar --drupal-org=core profiles/commons/drupal-org-core.make /tmp/publish
+        drush make --no-cache --tar --drupal-org=core profiles/commons/drupal-org-core.make /tmp/docroot
         drush make --no-core --no-cache --tar --drupal-org profiles/commons/drupal-org.make /tmp/commons
         cd ..
-        tar -zxvf /tmp/publish.tar.gz
-        cd publish/profiles/commons/modules/contrib
+        tar -zxvf /tmp/docroot.tar.gz
+        cd docroot/profiles/commons/modules/contrib
         # remove the symlinks in the repos before we execute
         find . -type l | awk -F/ '{print $2}' > /tmp/repos.txt
         cd $DOCROOT/profiles
@@ -148,6 +179,34 @@ update() {
 }
 
 case $1 in
+  site-install)
+    if [[ -n $2 ]] && [[ -n $3 ]]; then
+      BUILD_PATH=$2
+    else
+      echo "Usage build_distro.sh site-install [build_path] [site] [admin-email] [admin-pass]"
+    fi
+    if [[ -n $3 ]]; then
+      SITE=$3
+    else
+      SITE='default'
+    fi
+    if [[ -n $4 ]]; then
+      DEMO_CONTENT='TRUE'
+    else
+      DEMO_CONTENT='FALSE'
+    fi
+    if [[ -n $5 ]]; then
+      ADMIN_EMAIL=$4
+    else
+      ADMIN_EMAIL='admin@example.com'
+    fi
+    if [[ -n $6 ]]; then
+      ADMIN_PASS=$4
+    else
+      ADMIN_PASS='admin'
+    fi
+
+    site_install $BUILD_PATH $SITE $DEMO_CONTENT $ADMIN_EMAIL $ADMIN_PASS;;
   pull)
     if [[ -n $2 ]]; then
       BUILD_PATH=$2
diff --git a/profiles/commons/themes/commons/commons_origins/commons_origins.info b/profiles/commons/themes/commons/commons_origins/commons_origins.info
index 4532f7e..94db1af 100644
--- a/profiles/commons/themes/commons/commons_origins/commons_origins.info
+++ b/profiles/commons/themes/commons/commons_origins/commons_origins.info
@@ -419,3 +419,10 @@
   settings[custom_css] = ''
 
   ;
+
+; Information added by Drupal.org packaging script on 2013-12-20
+version = "7.x-3.6"
+core = "7.x"
+project = "commons"
+datestamp = "1387568907"
+
diff --git a/profiles/commons/themes/commons/commons_origins/css/global.styles.css b/profiles/commons/themes/commons/commons_origins/css/global.styles.css
index f103a8a..2c47c1a 100644
--- a/profiles/commons/themes/commons/commons_origins/css/global.styles.css
+++ b/profiles/commons/themes/commons/commons_origins/css/global.styles.css
@@ -875,6 +875,7 @@ html.js fieldset.collapsed .fieldset-legend, html.js fieldset.collapsible .field
  * Button styles
  */
 /* Common styles for all buttons. */
+a.button,
 button,
 [type="reset"],
 [type="submit"],
@@ -908,6 +909,7 @@ button,
   outline: 0;
   cursor: pointer;
 }
+a.button:focus,
 button:focus,
 [type="reset"]:focus,
 [type="submit"]:focus,
@@ -921,6 +923,7 @@ button:focus,
 .commons-login:hover, [class*="action-item-large"]:hover {
   text-decoration: none;
 }
+a.button:active,
 button:active,
 [type="reset"]:active,
 [type="submit"]:active,
@@ -932,6 +935,7 @@ button:active,
   box-shadow: inset rgba(0, 0, 0, 0.25) 0 1px 2px 0;
   text-decoration: none;
 }
+a.button::-moz-focus-inner,
 button::-moz-focus-inner,
 [type="reset"]::-moz-focus-inner,
 [type="submit"]::-moz-focus-inner,
@@ -943,6 +947,7 @@ button::-moz-focus-inner,
 }
 
 /* Dimensions for the default button type. */
+a.button,
 button,
 [type="reset"],
 [type="submit"],
@@ -965,6 +970,7 @@ button,
   font-size: 1.2em;
 }
 
+a.button,
 button,
 [type="reset"],
 [type="submit"],
@@ -979,6 +985,7 @@ button,
   border-color: #cbcbcb;
   text-shadow: -1px 1px 2px white, -1px -1px 2px white, 1px -1px 2px white, 1px 1px 2px white;
 }
+a.button,
 button,
 [type="reset"],
 [type="submit"],
@@ -994,6 +1001,7 @@ button,
 [class*="action-item"]:visited, .commons-login:visited {
   color: #323232;
 }
+a.button:hover,
 button:hover,
 [type="reset"]:hover,
 [type="submit"]:hover,
@@ -1007,8 +1015,10 @@ button:hover,
   background: -o-linear-gradient(#fefefe, #e5e5e5);
   background: linear-gradient(#fefefe, #e5e5e5);
   border-color: #b2b2b2;
+  text-decoration: none;
   text-shadow: -1px 1px 2px #fefefe, -1px -1px 2px #fefefe, 1px -1px 2px #fefefe, 1px 1px 2px #fefefe;
 }
+a.button:focus,
 button:focus,
 [type="reset"]:focus,
 [type="submit"]:focus,
@@ -1027,6 +1037,7 @@ button:focus,
   border-color: #cbcbcb;
   text-shadow: -1px 1px 2px white, -1px -1px 2px white, 1px -1px 2px white, 1px 1px 2px white;
 }
+a.button[disabled],
 button[disabled],
 [disabled][type="reset"],
 [disabled][type="submit"],
@@ -1049,7 +1060,7 @@ button[disabled],
 .action-item-large-active,
 .action-item-large-active[type="reset"],
 .action-item-large-active[type="submit"],
-.action-item-large-active[type="button"], [class*="flag-commons-follow-"] .unflag-action {
+.action-item-large-active[type="button"], [class*="flag-commons-follow-"] a.unflag-action {
   background-color: #f3f3f3;
   -webkit-box-shadow: inset 0.1em 0.1em 0.2em #a6a6a6;
   -moz-box-shadow: inset 0.1em 0.1em 0.2em #a6a6a6;
@@ -1065,16 +1076,16 @@ button[disabled],
 .action-item-large-active,
 .action-item-large-active[type="reset"],
 .action-item-large-active[type="submit"],
-.action-item-large-active[type="button"], [class*="flag-commons-follow-"] .unflag-action, .action-item-active:link,
+.action-item-large-active[type="button"], [class*="flag-commons-follow-"] a.unflag-action, .action-item-active:link,
 .action-item-small-active:link,
-.action-item-large-active:link, [class*="flag-commons-follow-"] .unflag-action:link, .action-item-active:visited,
+.action-item-large-active:link, [class*="flag-commons-follow-"] a.unflag-action:link, .action-item-active:visited,
 .action-item-small-active:visited,
-.action-item-large-active:visited, [class*="flag-commons-follow-"] .unflag-action:visited {
+.action-item-large-active:visited, [class*="flag-commons-follow-"] a.unflag-action:visited {
   color: #272727;
 }
 .action-item-active:hover,
 .action-item-small-active:hover,
-.action-item-large-active:hover, [class*="flag-commons-follow-"] .unflag-action:hover {
+.action-item-large-active:hover, [class*="flag-commons-follow-"] a.unflag-action:hover {
   color: #343434;
   background-color: #e6e6e6;
   -webkit-box-shadow: inset 0.1em 0.1em 0.2em #9a9a9a;
@@ -1085,9 +1096,9 @@ button[disabled],
 }
 .action-item-active:focus,
 .action-item-small-active:focus,
-.action-item-large-active:focus, [class*="flag-commons-follow-"] .unflag-action:focus, .action-item-active:active,
+.action-item-large-active:focus, [class*="flag-commons-follow-"] a.unflag-action:focus, .action-item-active:active,
 .action-item-small-active:active,
-.action-item-large-active:active, [class*="flag-commons-follow-"] .unflag-action:active {
+.action-item-large-active:active, [class*="flag-commons-follow-"] a.unflag-action:active {
   background: #f3f3f3;
   -webkit-box-shadow: inset 0.1em 0.1em 0.2em #a6a6a6;
   -moz-box-shadow: inset 0.1em 0.1em 0.2em #a6a6a6;
@@ -4395,7 +4406,11 @@ body.front.logged-in .view-commons-homepage-content .article.node.node-page .lin
 #quicktabs-commons_follow_ui .flag-email-group a span,
 #quicktabs-commons_follow_ui .flag-email-node a span,
 #quicktabs-commons_follow_ui .flag-email-user a span,
-#quicktabs-commons_follow_ui .flag-email-term a span {
+#quicktabs-commons_follow_ui .flag-email-term a span,
+#quicktabs-commons_follow_ui .flag-email-group span span,
+#quicktabs-commons_follow_ui .flag-email-node span span,
+#quicktabs-commons_follow_ui .flag-email-user span span,
+#quicktabs-commons_follow_ui .flag-email-term span span {
   display: none;
 }
 
diff --git a/profiles/commons/themes/commons/commons_origins/scripts/commons_origins.js b/profiles/commons/themes/commons/commons_origins/scripts/commons_origins.js
index f0ae7b9..0949fe5 100644
--- a/profiles/commons/themes/commons/commons_origins/scripts/commons_origins.js
+++ b/profiles/commons/themes/commons/commons_origins/scripts/commons_origins.js
@@ -20,6 +20,22 @@ jQuery(document).ready(function($){
     });
   };
 
+  var set_disabled_checkboxes = function(){
+    $('#quicktabs-commons_follow_ui .flag-email-group span, #quicktabs-commons_follow_ui .flag-email-node span, #quicktabs-commons_follow_ui .flag-email-user span, #quicktabs-commons_follow_ui .flag-email-term span').each(function(){
+      var a_target = $(this).addClass('formatted-as-checkbox').removeClass('action-item-small action-item-small-active');
+
+      if (a_target.children('span').length === 0) {
+        a_target.wrapInner('<span></span>');
+      }
+
+      if (a_target.hasClass('flag-action') && a_target.children('input').length === 0) {
+        a_target.prepend('<input type="checkbox" disabled="disabled">');
+      } else if (a_target.children('input').length === 0) {
+        a_target.prepend('<input type="checkbox" disabled="disabled" checked>');
+      }
+    });
+  };
+
   $(document).delegate('.views-exposed-widgets .form-select', 'change', function() {
     $('.views-exposed-widgets').addClass('widget-changed');
   });
@@ -27,12 +43,16 @@ jQuery(document).ready(function($){
   $(document).delegate('.views-exposed-widgets .form-select', 'click', function() {
     $('.views-exposed-widgets').addClass('widgets-active');
   });
+  console.log($('#quicktabs-commons_follow_ui a.flag').length);
+  if($('#quicktabs-commons_follow_ui a.flag').length > 0) {
+      set_follow_checkboxes();
 
-  set_follow_checkboxes();
-
-  $(document).ajaxComplete(function(){
-    set_follow_checkboxes();
-  });
+      $(document).ajaxComplete(function(){
+        set_follow_checkboxes();
+      });
+  } else {
+      set_disabled_checkboxes();
+  }
 });
 
 (function ($) {
diff --git a/profiles/commons/themes/contrib/adaptivetheme/PATCHES.txt b/profiles/commons/themes/contrib/adaptivetheme/PATCHES.txt
index f54c33d..7db79d4 100644
--- a/profiles/commons/themes/contrib/adaptivetheme/PATCHES.txt
+++ b/profiles/commons/themes/contrib/adaptivetheme/PATCHES.txt
@@ -1,4 +1,5 @@
 The following patches have been applied to this project:
 - http://drupal.org/files/remove-comment-creation-link-2018081-1.patch
+- https://drupal.org/files/issues/add-link-button-styling-2159783-1.patch
 
 This file was automatically generated by Drush Make (http://drupal.org/project/drush).
\ No newline at end of file
diff --git a/profiles/commons/themes/contrib/adaptivetheme/at_admin/adaptivetheme_admin.info b/profiles/commons/themes/contrib/adaptivetheme/at_admin/adaptivetheme_admin.info
index 4f79f3f..754d634 100755
--- a/profiles/commons/themes/contrib/adaptivetheme/at_admin/adaptivetheme_admin.info
+++ b/profiles/commons/themes/contrib/adaptivetheme/at_admin/adaptivetheme_admin.info
@@ -349,9 +349,9 @@
   settings[custom_css] = ''
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-3.1+68-dev"
 core = "7.x"
 project = "adaptivetheme"
-datestamp = "1385095057"
+datestamp = "1387568912"
 
diff --git a/profiles/commons/themes/contrib/adaptivetheme/at_admin/css/at_admin.css b/profiles/commons/themes/contrib/adaptivetheme/at_admin/css/at_admin.css
index a5a7272..78e9347 100755
--- a/profiles/commons/themes/contrib/adaptivetheme/at_admin/css/at_admin.css
+++ b/profiles/commons/themes/contrib/adaptivetheme/at_admin/css/at_admin.css
@@ -985,6 +985,7 @@ div.resizable-textarea textarea {
   width: 98.5%;
   font-size: 1.231em;
 }
+a.button,
 input.form-submit,
 input.teaser-button {
   background-color: transparent;
@@ -1015,12 +1016,14 @@ input[value~=Update],
 input#edit-save.form-submit {
   background-image: url(images/green-button.png);
 }
+a.button-no,
 input[value~=Cancel],
 input#edit-delete.form-submit,
 #system-modules-uninstall input#edit-submit,
 #user-multiple-delete-confirm input#edit-submit {
   background-image: url(images/red-button.png);
 }
+a.button:hover,
 input[value~=Update]:hover,
 input[value~=Save]:hover,
 #system-theme-settings input#edit-submit:hover,
@@ -1033,6 +1036,7 @@ input#edit-delete.form-submit:hover,
 #user-multiple-delete-confirm input#edit-submit:hover {
   background-position: bottom;
   cursor: pointer;
+  text-decoration:none;
 }
 #edit-views-apply,
 #edit-views-reset {
diff --git a/profiles/commons/themes/contrib/adaptivetheme/at_core/adaptivetheme.info b/profiles/commons/themes/contrib/adaptivetheme/at_core/adaptivetheme.info
index 99f8fe0..e8e14be 100755
--- a/profiles/commons/themes/contrib/adaptivetheme/at_core/adaptivetheme.info
+++ b/profiles/commons/themes/contrib/adaptivetheme/at_core/adaptivetheme.info
@@ -374,9 +374,9 @@
   settings[custom_css] = ''
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-3.1+68-dev"
 core = "7.x"
 project = "adaptivetheme"
-datestamp = "1385095057"
+datestamp = "1387568912"
 
diff --git a/profiles/commons/themes/contrib/adaptivetheme/at_subtheme/adaptivetheme_subtheme.info b/profiles/commons/themes/contrib/adaptivetheme/at_subtheme/adaptivetheme_subtheme.info
index dd692bf..fd431c9 100755
--- a/profiles/commons/themes/contrib/adaptivetheme/at_subtheme/adaptivetheme_subtheme.info
+++ b/profiles/commons/themes/contrib/adaptivetheme/at_subtheme/adaptivetheme_subtheme.info
@@ -454,9 +454,9 @@
   settings[custom_css] = ''
 
 
-; Information added by drush on 2013-11-22
+; Information added by drush on 2013-12-20
 version = "7.x-3.1+68-dev"
 core = "7.x"
 project = "adaptivetheme"
-datestamp = "1385095057"
+datestamp = "1387568912"
 
